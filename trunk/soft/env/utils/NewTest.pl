#!/usr/bin/perl -s

BEGIN {
	unless ($^O eq "solaris") {
			require warnings;
			import warnings qw(all);
	}
}

use strict;
use CT::ctio;

######### Help ##################################
if ($main::h) {
		print <<"ENDHELP";
NewTest.pl : 
creates (if necessary) a new test directory, and integrates 
it in the new environment, writing a custom Makefile and Readme.
   
To use, call it in the directory where you want to create a test 
directory (e.g. phy/tests/) and give as name the name of the 
directory to create. If that directory already exists, it will be
kept, and only the Makefile and Readme will be overwritten.
	Options:
		-h : display this help and quit
		-cvs : add automatically to cvs
ENDHELP
		exit $main::h;
}

######### Set Up terminal #######################
my $term= new CT::ctio ("NewTest.pl");
my $prompt = "> ";

######### Set Up name and path ################## 
my $name;
if (defined $ARGV[0]) {
		$name = $ARGV[0];
}
else {
		$term->display("Enter the name of your test :");
		$name = $term->readline($prompt);
		if (not $name) {
				$term->error("Must have a name!\n");
		}
}
(my $local_name = $ENV{'PWD'}) =~ s:^$ENV{'SOFT_WORKDIR'}/::;
$local_name .= "/$name";

######### Create Directory ######################
if ( -d $name ) {
		$term->confirmAbort("****","Directory already exists, continue ? (y/n)","****");
}
else {
		mkdir $name,0777 or die "Could not create directory:\n$!";
}

chmod 0664, "$name/Makefile" if ( -f "$name/Makefile" );
open OUTFILE, ">$name/Makefile" or die "Could not open Makefile for writing:\n$!";

######### Set Up Makefile variables #############
my $local_deplib = $term->askWithDefault("Enter modules to link to (e.g. \"phy/drivers platform\") :","none", "");

my $local_depapi =  $term->askWithDefault("Enter modules to include as header files :\n(you probably want \"phy stack\" at least, add \"phy/drivers phy/regs\" if you wand to use C BB_Irq handler in yout test)", "none", "");

my $local_export_flag = $term->askWithDefault("Enter additional CPP variables you wish to define :", "none", "");

### C files magic ###
my $c_files = $term->askWithDefault("Enter list of C files in your test :\n['extern' for external make.srcs ]","all .c files", "\${wildcard *.c}");
my $extern_make;
$c_files =~ /^all$/ and $c_files = "\${wildcard *.c}";
$c_files =~ /^extern$/  and $extern_make="include make.srcs" and $c_files="";

### S files ###
my $s_files;
if (not $extern_make) {
		$s_files = $term->askWithDefault("Enter list of S files in your test :","all .S files", "\${wildcard *.S}");
		$s_files =~ /^all$/ and $s_files = "\${wildcard *.S}";
}

### Inputs ###
my $input_files = $term->askWithDefault ("Enter list of input files if any :", "all .i files", "\${wildcard *.i}");

### Misc flags ###
my $ct_board = $term->askWithDefault ("Enter board type :", "simu", "simu");
my $mips16 = $term->askYesNo ("Generate mips16 code ?", "y", "-mips16", "");

######### Write to Makefile #####################
		print OUTFILE <<"ENDMK";
\#\# Makefile automatically generated by NewTest.pl \#\#
\# For more information on the different variables, and others you
\# may define, see \${SOFT_WORKDIR}/Makefile.skel and/or read the doc
\#\# --------------Don't change the line below------------------ \#\#
include \${SOFT_WORKDIR}/make.toplevel

LOCAL_NAME := $local_name

LOCAL_MODULE_DEPENDS := $local_deplib

LOCAL_API_DEPENDS ?= $local_depapi

IS_ENTRY_POINT := yes

LOCAL_EXPORT_FLAG += $local_export_flag

CT_BOARD ?= $ct_board
CT_WATCH_REG ?= yes
CT_ROMULATOR ?= yes
CT_MIPS16 ?= $mips16
CT_MIPS16_CFLAGS ?= \${CT_MIPS16}

C_SRC := $c_files
S_SRC := $s_files
$extern_make

INPUT_FILES := $input_files

\#\# --------------Don't change the line below------------------ \#\#
include \${SOFT_WORKDIR}/compile.rules
ENDMK
close OUTFILE;

$term->display( "\#\#\# Makefile Generated \#\#\#");

######### Write Readme ##########################
my $lines = $term->readMultiline("Now enter a short description of your test :");
my $date = `date "+%Y/%m/%d"`;
chomp $date;
if (open OUTFILE, ">$name/Readme_$name.txt") {
		print OUTFILE qq(### $name test, created by $ENV{'USER'} on $date ###\n);
		print OUTFILE @{$lines};
		close OUTFILE;
		$term->display("\#\#\# Readme Generated \#\#\#");
}
else {
		warn "Could not write $name/Readme_$name.txt. Sorry\n";
}

my $first_line;
$first_line = "\"".$lines->[0]."\"" if ($main::cvs);

if ( -f "README_test.txt") {
		chmod 0644, "README_test.txt";
		$lines->[0] = "$name ($date): $lines->[0]\n";
		my $len = () = @{$lines};
		if ($len > 1) {
				my $space = " " x (length($name) + 15); # Proper alignment. Achtung!
				for (my $i=1; $i<$len; $i++) {
						$lines->[$i] = $space.$lines->[$i]."\n";
				}
		}
		open OUTFILE, ">>README_test.txt" 
				or warn "Could not append to README_test.txt. Sorry\n";
		print OUTFILE @{$lines};
		close OUTFILE;
		$term->display("\#\#\# README_test.txt updated \#\#\#");
		system("cvs","-Q","commit","-m","Added $name","README_test.txt") if ($main::cvs);
}

######### Copy main.c and bbdrv_bb_irq_handler.S if needed #################
use File::Copy;

if ( not (-f "$name/main.c") and (-f "default/main.c") ) {
		copy("default/main.c","$name/main.c");
		$term->display("\#\#\# main.c copied from default/main.c \#\#\#");
}

if ( not (-f "default/bbdrv_bb_irq_handler.S") ) {
		$term->display("\#\#\# default/bbdrv_bb_irq_handler.S missing, please update default first \#\#\#");
}

if ( not (-f "$name/bbdrv_bb_irq_handler.S") and (-f "default/bbdrv_bb_irq_handler.S") ) {
		copy("default/bbdrv_bb_irq_handler.S","$name/bbdrv_bb_irq_handler.S");
		$term->display("\#\#\# bbdrv_bb_irq_handler.S copied from default/bbdrv_bb_irq_handler.S \#\#\#");
}


######### CVS add if needed #####################
if ($main::cvs) {
		my @files = ("$name", "$name/main.c", "$name/bbdrv_bb_irq_handler.S", "$name/Makefile", "$name/Readme_$name.txt");
		$term->display("---------------","Adding to cvs : ", @files);
		system("cvs","-Q","add", @files);
		system("cvs","-Q","commit","-m",$first_line,"$name");
}
############## END MAIN SCRIPT ############################

