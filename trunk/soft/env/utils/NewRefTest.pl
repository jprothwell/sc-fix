#!/usr/bin/perl -s

BEGIN {
	unless ($^O eq "solaris") {
			require warnings;
			import warnings qw(all);
	}
}

use strict;
use CT::ctio;

######### Help ##################################
if ($main::h) {
		print <<"ENDHELP";
NewRefTest.pl : 
creates (if necessary) a new reference test directory, and integrates 
it in the new environment, writing a custom Makefile and Readme.
   
To use, call it in the directory where you want to create a test 
directory (e.g. phy/tests/) and give as name the name of the 
directory to create. If that directory already exists, it will be
kept, and only the Makefile and Readme will be overwritten.
Otherwise, the directory will be created, and main.c and test_task.c
copied over from reftest_skel.
	Options:
		-h : display this help and quit
		-svn : add automatically to svn
ENDHELP
		exit $main::h;
}

######### Set Up terminal #######################
my $term= new CT::ctio ("NewRefTest.pl");
my $prompt = "> ";

######### Set Up name and path ################## 
my $name;
if (defined $ARGV[0]) {
		$name = $ARGV[0];
}
else {
		$term->display("Enter the name of your reference test :");
		$name = $term->readline($prompt);
		if (not $name) {
				$term->error("Must have a name!\n");
		}
}

######### Create Directory ######################
unless ($name =~ /^reftest_/) {
	$name = "reftest_".$name;
	$term->confirmAbort("****","Test name changed to $name, continue anyway ? (y/n)","****");
}

if ( -d $name ) {
		$term->confirmAbort("****","Directory already exists, continue ? (y/n)","****");
}
else {
		mkdir $name,0777 or die "Could not create directory:\n$!";
}

(my $local_name = $ENV{'PWD'}) =~ s:^$ENV{'SOFT_WORKDIR'}/::;
$local_name .= "/$name";

chmod 0664, "$name/Makefile" if ( -f "$name/Makefile" );
open OUTFILE, ">$name/Makefile" or die "Could not open Makefile for writing:\n$!";

######### Set Up Makefile variables #############
### C files magic ###
my $c_files = $term->askWithDefault("If you have C files that do not appear in reftest_skel, enter them here", "none", "");

### Misc flags ###
my $ct_board = $term->askWithDefault ("Enter target type :", "fpga", "fpga");

######### Write to Makefile #####################
		print OUTFILE <<"ENDMK";
\#\# Makefile automatically generated by NewRefTest.pl \#\#
\# For more information on the different variables, and others you
\# may define, see \${SOFT_WORKDIR}/Makefile.skel and/or read the doc
\#\# --------------Don't change the line below------------------ \#\#
include \${SOFT_WORKDIR}/make.toplevel

LOCAL_NAME := $local_name

ifdef WITH_SXR
LOCAL_MODULE_DEPENDS := phy/utils stack/sxr phy
LOCAL_API_DEPENDS ?= stack/sxr phy/utils
MYCPPFLAGS += -DWITH_SXR
else
LOCAL_MODULE_DEPENDS := phy/utils stack phy
LOCAL_API_DEPENDS ?= phy/utils
endif

IS_ENTRY_POINT := yes

LOCAL_EXPORT_FLAG += __SXS_NO_FLASH_HANDLER__  __RRI_C__ __RRI_P__ \\
                    __RRD__ __RR_SPY__ \\
                    __GPRS__ __RRP__ __RIP__ __TEST_LIST__ 

\# Need to allow multiple definitions, because a complete libstack is messy
ifndef WITH_SXR
LDFLAGS := -z muldefs
endif

${VERSION}CT_OPT ?= speed
CT_ROMULATOR ?= yes
CT_MIPS16 ?= 
CT_MIPS16_CFLAGS ?= \${CT_MIPS16}

vpath %.c . ../reftest_skel
C_SRC := main.c test_task.c sxs_main.c $c_files
S_SRC :=  

\#\# --------------Don't change the line below------------------ \#\#
include \${SOFT_WORKDIR}/env/compilation/compile.rules
ENDMK
close OUTFILE;

$term->display( "\#\#\# Makefile Generated \#\#\#");

######### Write Readme ##########################
my $lines = $term->readMultiline("Now enter a short description of your test :");
my $date = `date "+%Y/%m/%d"`;
chomp $date;
if (open OUTFILE, ">$name/Readme_$name.txt") {
		print OUTFILE qq(### $name test, created by $ENV{'USER'} on $date ###\n);
		print OUTFILE @{$lines};
		close OUTFILE;
		$term->display("\#\#\# Readme Generated \#\#\#");
}
else {
		warn "Could not write $name/Readme_$name.txt. Sorry\n";
}

my $first_line;
$first_line = "\"".$lines->[0]."\"" if ($main::svn);

if ( -f "README_test.txt") {
		chmod 0644, "README_test.txt";
		$lines->[0] = "$name ($date): $lines->[0]\n";
		my $len = () = @{$lines};
		if ($len > 1) {
				my $space = " " x (length($name) + 15); # Proper alignment. Achtung!
				for (my $i=1; $i<$len; $i++) {
						$lines->[$i] = $space.$lines->[$i]."\n";
				}
		}
		open OUTFILE, ">>README_test.txt" 
				or warn "Could not append to README_test.txt. Sorry\n";
		print OUTFILE @{$lines};
		close OUTFILE;
		$term->display("\#\#\# README_test.txt updated \#\#\#");
		system("svn","commit","-m","Added $name","README_test.txt") if ($main::svn);
}

######### Copy C files from reftest_os ##############
use File::Copy;

FILE:
foreach my $file ("main.c", "test_task.c") {
		if ( not -f "$name/$file" ) {
			unless (-f "reftest_skel/$file") {
				$term->display("!!! reftest_skel/$file not found !!!");
				next FILE;
			}
			copy("reftest_skel/$file","$name/$file");
			$term->display("\#\#\# $file copied from reftest_skel/$file \#\#\#");
		}
}

######### svn add if needed #####################
if ($main::svn) {
		my @files = ("$name", "$name/main.c", "$name/test_task.c", "$name/Makefile", "$name/Readme_$name.txt");
		$term->display("---------------","Adding to svn : ", @files);
		system("svn","add", @files);
		system("svn","commit","-m",$first_line,"$name");
}
############## END MAIN SCRIPT ############################

