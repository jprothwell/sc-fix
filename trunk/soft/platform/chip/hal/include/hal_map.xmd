<?xml version="1.0" encoding="UTF-8"?>
<archive asm="no">
    
    <comment>
        This file contains the portion of the module's memory map that will be
        accessible through CoolWatcher (or any CoolXml tool). It is also used
        for the get version mechanism.
    </comment>


    <!-- Add here some XMD files, to include some types. -->
    <include file="hal_speech.xmd" />

    
    <!-- Create here the types you want to access for this module. -->
    <var name="HAL_SYS_RESOURCE_NUMBER" value="64">
    </var>

    <alias name="HAL_SYS_FREQ_REGISTRY">
        <uint8 name="unused" count="HAL_SYS_RESOURCE_NUMBER"/>
    </alias>

    <!-- Frequency Management -->
    <typedef name="HAL_SYS_ACCESS_T">
        <comment>
        </comment>
        <ptr    name="halSysSystemFreq"       type="uint32"/>
        <ptr    name="halSysLpsLock"          type="bool"/>
        <ptr    name="halSysFreqScalRegistry" type="HAL_SYS_FREQ_REGISTRY"/>
    </typedef>

    <!-- LPS -->
    <enum name="HAL_LPS_STATE_2">
        <comment>
            Record of LPS State
        </comment>
        <entry name="HAL_LPS_IDLE_2"          />
        <entry name="HAL_LPS_CALIBRATED_2"    />
        <entry name="HAL_LPS_CALIB_RUNNING_2" />
    </enum>

    <typedef  name="HAL_LPS_CONTEXT_2">
        <comment>
            Record of LPS content
        </comment>

        <instance   name="lpsState" type="HAL_LPS_STATE_2">
            <comment>
                LPS State
            </comment>
        </instance>

        <bool       name="lpsInvalidateCalib">
            <comment>
                Calibration invalidation request
            </comment>
        </bool>
        
        <uint8      name="lpsAccuracy">
            <comment>
                Accuracy
            </comment>
        </uint8>

        <uint32     name="lpsRate">
            <comment>
                Low Power Synchronizer Rate value
            </comment>
        </uint32>

        <uint32     name="calibFreq">
            <comment>
                Low Power Calibration frequency
            </comment>
        </uint32>

        <uint32     name="lpsRateLast">
            <comment>
                Low Power Synchronizer previous Rate value
            </comment>
        </uint32>

        <uint32     name="calibFreqLast">
            <comment>
                Low Power Calibration frequency
            </comment>
        </uint32>

        <bool       name="lpsSkipFrameAllowed">
            <comment>
                Allow Frames to be skipped
            </comment>
        </bool>

        <uint16     name="lpsFrameLastEvt">
            <comment>
                Last event programmed in active frame
            </comment>
        </uint16>

        <uint16     name="lpsSkipFrameNumber">
            <comment>
                Number of Frame skipped
            </comment>
        </uint16>

        <uint32     name="lpsPuCtrl">
            <comment>
                Pu State machine configuration
            </comment>
        </uint32>

        <uint8      name="lpsWakeUpFrameNbr">
            <comment>
                Number of frames neccessary to wake up
            </comment>
        </uint8>
    </typedef>

    <!-- Enum for the PXTS levels -->
    <enum name="pxtsLevels">
        <entry name="Enable_Pxts_Tag_Reserved_0"/>
        <entry name="Enable_Pxts_Tag_Boot"/>
        <entry name="Enable_Pxts_Tag_Hal"/>
        <entry name="Enable_Pxts_Tag_Sx"/>
        <entry name="Enable_Pxts_Tag_Pal"/>
        <entry name="Enable_Pxts_Tag_Edrv"/>
        <entry name="Enable_Pxts_Tag_Svc"/>
        <entry name="Enable_Pxts_Tag_Stack"/>
        <entry name="Enable_Pxts_Tag_Csw"/>
        <entry name="Enable_Pxts_Tag_Reserved_9"/>
        <entry name="Enable_Pxts_Tag_Reserved_10"/>
        <entry name="Enable_Pxts_Tag_Reserved_11"/>
        <entry name="Enable_Pxts_Tag_Bb_Irq"/>
        <entry name="Enable_Pxts_Tag_Spal"/>
        <entry name="Enable_Pxts_Tag_Spp"/>
        <entry name="Enable_Pxts_Tag_Spc"/>
    </enum>
    <typedef  name="HAL_PROFILE_CONTROL">
        <comment>This is used only when the code is compiled with HAL_PROFILE_ON_MULTI in cool_profile release.
        </comment>
        <uint32     name="config" display="hex">
            <bits name='Global_Enable_Ram' pos='0' access='rw' rst='0'>
                <comment>Global Enable.
                </comment>
            </bits>
            <bits name='Global_Enable_Trace' pos='1' access='rw' rst='0'>
                <comment>Global Enable.
                </comment>
            </bits>
            <bits name='Enable_Pxts_Tag' cut='1' cutenum='pxtsLevels' access='rw' rst='0' pos='31:16'>
                <comment>Enable the corresponding PXTS TAG when the bit is set. </comment>
            </bits>
        </uint32>
       
        <uint32     name="startAddr" display="hex">
            <comment>
                Start Address of the Ram Buffer used to record PXTS tags.
                It is allocted by CoolWatcher through a remote execution
                of malloc. The size is defined by the size field of this
                structure.
            </comment>
        </uint32>
        
        <uint32     name="size" display="hex">
            <comment>
                It must be of a sized multiple of 64 bits.
            </comment>
        </uint32>

        <uint32     name="writePointer" display="hex">
            <comment>
                The next PXTS tag/time stamp will be written at this address
            </comment>
        </uint32>

        <uint32     name="readPointer" display="hex">
            <comment>
                The next PXTS tag/time stamp will be read at this address
                by CoolWatcher. (Unused)
            </comment>
        </uint32>

        <int32     name="remainingSize" display="dec">
            <comment>
                Remaining size in the buffer, in byte.
            </comment>
        </int32>

        <uint32     name="status" display="hex">
            <comment>
                Status of the profiling recording
            </comment>
            <bits   name="wrapped" pos="0" access="rw" rst="0">
                <comment>
                    Write wrapped while recording PXTS tags in the buffer.
                </comment>
            </bits>
            <bits   name="overflowed" pos="1" access="rw" rst="0">
                <comment>
                    Overflow happened while recording PXTS tags in the buffer.(Unused)
                </comment>
            </bits>
        </uint32>
        
        <ptr type="void" name="mallocRamBuffer">
            <comment>
                Function to execute remotely to allocate the buffer used by the 
                profile in RAM mechanism.
            </comment>
        </ptr>

        <ptr type="void" name="freeRamBuffer">
            <comment>
                Function to execute remotely to free the buffer used by the 
                profile in RAM mechanism.
            </comment>
        </ptr>

    </typedef>
       
    <!-- Type used to define the accessible structures of the module. -->
    <typedef name="HAL_MAP_ACCESS_T">
        <comment>
            Type used to define the accessible structures of the module.
        </comment>
        <instance type="HAL_SYS_ACCESS_T"   name="sys"/>
        <ptr type="HAL_LPS_CONTEXT_2"       name="lpsCtx"/>
        <ptr type="uint32"                  name="lpsForceNoSleepPtr"/>
        <ptr type="HAL_SPEECH_FIFO_T"       name="halSpeechFifo"/>
        <instance type="HAL_PROFILE_CONTROL" name="profileControl"/>
        <ptr type="void"                    name="keypadPulseHandler"/>
    </typedef>

    <cjoker>


// =============================================================================
// g_halMapAccess
// -----------------------------------------------------------------------------
/// This global variable is the shared structure of HAL.
// =============================================================================
EXPORT PROTECTED HAL_MAP_ACCESS_T g_halMapAccess;


// =============================================================================
// hal_RegisterYourself
// -----------------------------------------------------------------------------
/// This function registers the module itself to HAL so that the version and
/// the map accessor are filled. Then, the CSW get version function and the
/// CoolWatcher get version command will work.
// =============================================================================
PUBLIC VOID hal_RegisterYourself(VOID);

    </cjoker>

</archive>


