<?xml version="1.0" encoding="UTF-8"?>
<archive asm="no">

<comment>
@file spc_mailbox.h<br/>
This File contains SPC API<br/>
<br/>
@mainpage Modem2G Signal Processing Control API<br/>
@page spc_mainpage Modem2G Signal Processing Control API<br/>
<br/>
Modem2G Signal Processing Control (SPC) API description.<br/>
@author Coolsand Technologies, Inc.<br/>
@version 2.0<br/>
@date april 2009<br/>
<br/>
@par Purpose<br/>
<br/>
This document describes the Modem2G software interface between SPC &amp; PAL.<br/>
This interface is realized by means of different structures<br/>
contained in a part of the memory that we call mailbox.<br/>
Each involved layer, i.e. SPC and PAL have a dedicated structure to<br/>
transfer information to the other part.<br/>
<br/>
@par<br/>
<br/>
SPC API is composed of the following division :<br/>
- @ref spc2pal "SPC to PAL structures " \n<br/>
- @ref pal2spc "PAL to SPC structures " \n<br/>
- @ref mbox "main mailbox structure" \n<br/>
<br/>
This mailbox allows the XCPU to progam different processings on BCPU<br/>
and to retrieve associated results.<br/>
<br/>
@defgroup mbox
<br/>
@{
</comment>

<include load="no" file="cs_types.h"/>

<var name='BB_FCCH_SIZE' value='142'>
    <comment>FCCH search related constants: do not change unless you know what you're doing ! Granularity of FCCH search in symbols.</comment>
</var>

<var name='BB_FCCH_NB_WIN' value='((625*9)/(BB_FCCH_SIZE*4) + 1)'></var>

<var name='BB_FCCH_PRE_OPENING' value='(BB_FCCH_NB_WIN*BB_FCCH_SIZE - ((625*9)/4))'></var>

<var name='MBOX_CTX_SNAP_QTY' value='3'>
    <comment>number of context duplicates</comment>
</var>

<var name='MBOX_WINDOWS_QTY' value='5'>
    <comment>max number of windows in a burts</comment>
</var>

<var name='MBOX_WIN_IDX_QTY' value='MBOX_WINDOWS_QTY'>
    <comment>max number of windows index</comment>
</var>

<var name='MBOX_MON_WIN_SIZE' value='32'></var>

<var name='MBOX_MONIT_WIN_QTY' value='MBOX_WINDOWS_QTY'>
    <comment>max number of monitoring windows</comment>
</var>

<var name='MBOX_MONIT_EXT_WIN_QTY' value='7-MBOX_WINDOWS_QTY'>
    <comment>max number of extra monitoring windows</comment>
</var>

<var name='MBOX_INTRF_SLOT_QTY' value='6'>
    <comment>max number of slots for an interference measurement window</comment>
</var>

<var name='MBOX_SCH_QTY' value='1'>
    <comment>max number of synchonization burst window</comment>
</var>

<var name='MBOX_SCH_DATA_BYTE_QTY' value='4'>
    <comment>number of data byte in a decoded SCH burst</comment>
</var>

<var name='MBOX_NBURST_DATA_QTY' value='2'>
    <comment>number of data output address</comment>
</var>

<var name='MBOX_MAX_TS_QTY' value='4'>
    <comment>max number of slots in a window</comment>
</var>

<var name='MBOX_MAX_BUF_IDX_QTY' value='5'>
    <comment>max number of buffer index</comment>
</var>

<var name='MBOX_MAX_SPEECH_FRAME_SIZE' value='18'>
    <comment>max number of words in a compressed speech frame</comment>
</var>

<var name='MBOX_NO_TCH' value='0x00'>
    <comment>Channel Mode comming from stack</comment>
</var>

<var name='MBOX_TCH_FR' value='0x04'></var>

<var name='MBOX_TCH_EFR' value='0x14'></var>

<var name='MBOX_TCH_HR' value='0x05'></var>

<var name='MBOX_TCH_AFS' value='0x24'></var>

<var name='MBOX_TCH_AHS' value='0x25'></var>

<var name='MBOX_TCH_F48' value='0x48'></var>

<var name='MBOX_TCH_F96' value='0x88'></var>

<var name='MBOX_TCH_F144' value='0xC8'></var>

<var name='MBOX_XCPU_HELLO_WORD' value='0xBB08E770'>
    <comment>BCPU starting handshake</comment>
</var>

<var name='MBOX_BCPU_ACKNOWLEDGE_WORD' value='0xBB04EAD1'></var>

<var name='MBOX_BCPU_ERROR_WORD' value='0xBB0E4404'></var>

<var name='MBOX_CIPH_MODE_A51' value='0'>
    <comment>Ciphering algorithm</comment>
</var>

<var name='MBOX_CIPH_MODE_A52' value='1'></var>

<var name='MBOX_CIPH_MODE_A53' value='2'></var>

<var name='MBOX_LOOP_CLOSE_A' value='1'>
    <comment>Loop modes see 3GPP 44.014 for more details</comment>
</var>

<var name='MBOX_LOOP_CLOSE_B' value='2'></var>

<var name='MBOX_LOOP_CLOSE_C' value='3'></var>

<var name='MBOX_LOOP_CLOSE_D' value='4'></var>

<var name='MBOX_LOOP_CLOSE_E' value='5'></var>

<var name='MBOX_LOOP_CLOSE_F' value='6'></var>

<var name='MBOX_LOOP_SPCH_DECOD' value='7'></var>

<var name='MBOX_LOOP_SPCH_ENCOD' value='8'></var>

<var name='MBOX_LOOP_ACOUSTIC_TEST' value='9'></var>

<var name='MBOX_LOOP_OPEN' value='10'></var>

<var name='MBOX_LOOP_CLOSE_I' value='11'></var>

<var name='MBOX_LOOP_CLOSE_EGPRS' value='12'></var>

<enum name='SPC_MBOX_DSP_ITR'>
    <comment>BCPU to XCPU interrupts</comment>

    <entry name='MBOX_DSP_NO_ITR' value='0'>
        <comment>no interrupt</comment>
    </entry>
    <entry name='MBOX_DSP_SCH_DECODING_COMPLETE' value='0x1'>
        <comment>synchro burst decoding done</comment>
    </entry>
   <entry name='MBOX_DSP_PCH_READY' value='0x2'>
        <comment>dummy PCH detection done</comment>
    </entry>
   <entry name='MBOX_DSP_USF_READY' value='0x4'>
        <comment>USF decoding done for GPRS</comment>
    </entry>
    <entry name='MBOX_DSP_EQUALIZATION_COMPLETE' value='0x8'>
        <comment>normal burst equalization done</comment>
    </entry>
    <entry name='MBOX_DSP_TASK_COMPLETE' value='0x10'>
        <comment>Dsp Task complete</comment>
    </entry>
</enum>

<enum name='SPC_MBOX_XCPU_ITR'>
    <comment>XCPU to BCPU interrupts  in the mailbox regs are from bits 8 to 15</comment>

    <entry name='MBOX_XCPU_NO_ITR' value='0'>
        <comment>no interrupt from XCPU</comment>
    </entry>
    <entry name='MBOX_XCPU_AUDIO' value='0x100'>
        <comment>audio interrupt from XCPU</comment>
    </entry>
</enum>

<enum name='SPC_MBOX_CHAN_TYPES'>
    <comment>GSM/GPRS logical channels types</comment>

    <entry name='MBOX_CCH_CHN'>
        <comment>control channel</comment>
    </entry>
    <entry name='MBOX_PDCH_CHN'>
        <comment>packet data channel</comment>
    </entry>
    <entry name='MBOX_TCHF_CHN'>
        <comment>traffic channel full rate</comment>
    </entry>
    <entry name='MBOX_TCHH_CHN'>
        <comment>traffic channel half rate</comment>
    </entry>
    <entry name='MBOX_FACCH_CHN'>
        <comment>fast associated control channel</comment>
    </entry>
    <entry name='MBOX_CDATA_CHN'>
        <comment>circuit switched data channel</comment>
    </entry>
    <entry name='MBOX_CHAN_TYPE_RACH'>
        <comment>random access channel (not defined in palcgsm.h)</comment>
    </entry>
</enum>

<enum name='SPC_MBOX_EGPRS_MODE'>
    <comment>EGPRS mode </comment>

    <entry name='MBOX_NO_EGPRS'>
        <comment> no egprs </comment>
    </entry>
    <entry name='MBOX_EGPRS_NO_IR'>
        <comment> egprs without incremental redundancy </comment>
    </entry>
    <entry name='MBOX_EGPRS_WITH_IR'>
        <comment> egprs with incremental redundancy </comment>
    </entry>
</enum>

<enum name='MBOX_SPEECH_MODE'>
    <entry name='MBOX_AMR475_DEC_MODE' value='0x00f0'></entry>
    <entry name='MBOX_AMR475_ENC_MODE' value='0x000f'></entry>
    <entry name='MBOX_AMR515_DEC_MODE' value='0x00f1'></entry>
    <entry name='MBOX_AMR515_ENC_MODE' value='0x001f'></entry>
    <entry name='MBOX_AMR59_DEC_MODE' value='0x00f2'></entry>
    <entry name='MBOX_AMR59_ENC_MODE' value='0x002f'></entry>
    <entry name='MBOX_AMR67_DEC_MODE' value='0x00f3'></entry>
    <entry name='MBOX_AMR67_ENC_MODE' value='0x003f'></entry>
    <entry name='MBOX_AMR74_DEC_MODE' value='0x00f4'></entry>
    <entry name='MBOX_AMR74_ENC_MODE' value='0x004f'></entry>
    <entry name='MBOX_AMR795_DEC_MODE' value='0x00f5'></entry>
    <entry name='MBOX_AMR795_ENC_MODE' value='0x005f'></entry>
    <entry name='MBOX_AMR102_DEC_MODE' value='0x00f6'></entry>
    <entry name='MBOX_AMR102_ENC_MODE' value='0x006f'></entry>
    <entry name='MBOX_AMR122_DEC_MODE' value='0x00f7'></entry>
    <entry name='MBOX_AMR122_ENC_MODE' value='0x007f'></entry>
    <entry name='MBOX_EFR_MODE' value='0x0177'></entry>
    <entry name='MBOX_FR_MODE' value='0x1fff'></entry>
    <entry name='MBOX_HR_MODE' value='0x2fff'></entry>
    <entry name='MBOX_INVALID_MODE' value='0xffff'></entry>
</enum>

<enum name='SPC_DIGRF_CLKPOL'>
    <entry name='SPC_DIGRF_NORM_CLK_POL' value='0'></entry>
    <entry name='SPC_DIGRF_INV_CLK_POL' value='1'></entry>
</enum>

<enum name='SPC_DIGRF_OVERSAMP'>
    <entry name='SPC_DIGRF_1_SAMPLE_PER_SYMB' value='0'></entry>
    <entry name='SPC_DIGRF_2_SAMPLE_PER_SYMB' value='1'></entry>
</enum>

<enum name='SPC_DIGRF_TX_MODE'>
    <entry name='SPC_DIGRF_TX_STREAM' value='0'></entry>
    <entry name='SPC_DIGRF_TX_BLOCK' value='1'></entry>
</enum>

<enum name='SPC_DIGRF_RX_SAMPLE_ALIGNMENT'>
    <entry name='SPC_DIGRF_SAMPLE_ALIGN_MSB' value='0'></entry>
    <entry name='SPC_DIGRF_SAMPLE_ALIGN_LSB' value='1'></entry>
</enum>

<enum name='SPC_DCOC_MODE'>
    <entry name='SPC_NO_DCOC' value='0'></entry>
    <entry name='SPC_HW_DCOC_ENABLED' value='1'></entry>
    <entry name='SPC_SW_DCOC_ENABLED' value='2'></entry>
</enum>

<typedef name='SPC_MBOX_SPEECH_ENC_OUT'>
    <comment>Structure used to configure VOC frame encode</comment>

    <uint16 name='encMode'>
        <comment>Mode of the voice coded output frame</comment>
    </uint16>
    <uint16 name='encFrameType'>
        <comment>Type of the coded output frame (AMR only)</comment>
    </uint16>
    <uint16 name='echoSkipEncFrame'>
        <comment>Flag for skipping the encoded frame, only valid when the ES is activated (replaces the unused VAD flag)</comment>
    </uint16>
    <uint16 name='sp'>
        <comment>Speech flag (all except AMR)</comment>
    </uint16>
    <uint16 name='encOutBuf' count='MBOX_MAX_SPEECH_FRAME_SIZE'>
        <comment>Encoder output buffer (coded frame in enc_mode)</comment>
    </uint16>
</typedef>

<typedef name='SPC_MBOX_SPEECH_DEC_IN'>
    <comment>Structure used to configure VOC frame decode</comment>

    <uint16 name='dtxOn'>
        <comment>DTX allowed by the network, active-&amp;gt;1</comment>
    </uint16>
    <uint16 name='codecMode'>
        <comment>mode of the next encoder speech frame output  and the current decoder speech frame input</comment>
    </uint16>
    <uint16 name='decFrameType'>
        <comment>Type of the coded input frame (AMR only)</comment>
    </uint16>
    <uint16 name='bfi'>
        <comment>BFI flag (all vocoders except AMR)</comment>
    </uint16>
    <uint16 name='sid'>
        <comment>SID flag (all vocoders except AMR)</comment>
    </uint16>
    <uint16 name='taf'>
        <comment>TAF flag (all vocoders except AMR)</comment>
    </uint16>
    <uint16 name='ufi'>
        <comment>UFI flag (HR only)</comment>
    </uint16>
    <uint16 name='reserved'>
        <comment>reserved (for alignment)</comment>
    </uint16>
    <uint16 name='decInBuf' count='MBOX_MAX_SPEECH_FRAME_SIZE'>
        <comment>Decoder input buffer (coded frame in dec_mode)</comment>
    </uint16>
</typedef>

<typedef name='SPC_MBOX_FCCH_RESULT'>
    <comment>Result structure used for the frequency burst search  the BCPU writes it when the FB has been found or when the  reception window is over.</comment>

    <uint16 name='fof'>
        <comment>frequency offset</comment>
    </uint16>
    <int16 name='tof'>
        <comment>timing offset</comment>
    </int16>
    <bool name='valid'>
        <comment>indicates if FCCH has been found</comment>
    </bool>
</typedef>

<typedef name='SPC_MBOX_SCH_RESULT'>
    <comment>Result structure used for the synchronization burst reception  the BCPU writes it after the SB has been processed.</comment>

    <uint16 name='snr'>
        <comment>signal to noise ratio in dB</comment>
    </uint16>
    <int16 name='fof'>
        <comment>frequency offset computed on the burst</comment>
    </int16>
    <uint8 name='data' count='MBOX_SCH_DATA_BYTE_QTY'>
        <comment>data of the synchro burst</comment>
    </uint8>
    <bool name='valid'>
        <comment>indicates if the SCH has been decoded correctly</comment>
    </bool>
    <int8 name='tof'>
        <comment>timing offset</comment>
    </int8>
    <uint8 name='power'>
        <comment>power computed on the burst</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_MON_RESULT'>
    <comment>Result structure used for monitoring and interference windows</comment>

    <uint8 name='power'></uint8>
</typedef>

<typedef name='SPC_MBOX_NBLOCK_RESULT'>
    <comment>Result structure used for block decoding  when the BCPU has received enough bursts  it decodes a block and writes related  results</comment>

    <ptr name='data' type='uint8' count='MBOX_NBURST_DATA_QTY'>
        <comment>pointer on decoded data</comment>
    </ptr>
    <uint16 name='bitError'>
        <comment>number of corrected bit in the block</comment>
    </uint16>
    <uint16 name='bitTotal'>
        <comment>number of protected bit in the block</comment>
    </uint16>
    <uint8 name='meanBep'>
        <comment>bit error probability on the block</comment>
    </uint8>
    <uint8 name='cvBep'>
        <comment>coefficient of variance of meanBep</comment>
    </uint8>
    <uint8 name='bfi'>
        <comment>bad frame indicator</comment>
    </uint8>
    <uint8 name='cs'>
        <comment>decoded coding scheme in GPRS</comment>
    </uint8>
    <uint8 name='sid'>
        <comment>indicates the silence frame detection</comment>
    </uint8>
    <uint8 name='irBufOvfl'>
        <comment>indicates when IR buffer is in overflow</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_NBURST_RESULT'>
    <comment>Result structure used for normal burst reception</comment>

    <int16 name='dco_I'>
        <comment>DC offset on I samples</comment>
    </int16>
    <int16 name='dco_Q'>
        <comment>DC offset on Q samples</comment>
    </int16>
    <int16 name='fof'>
        <comment>frequency offset measured on the burst</comment>
    </int16>
    <int8 name='tof'>
        <comment>timing offset</comment>
    </int8>
    <uint8 name='snr'>
        <comment>signal to noise ratio in dB</comment>
    </uint8>
    <uint8 name='pwr'>
        <comment>power measured on the burst</comment>
    </uint8>
    <uint8 name='sid'>
        <comment>indicates if the burst belongs to a silence frame</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_WIN_SPC_TO_PAL_RX'>
    <comment>Structure used for burst related Rx results from SPC to PAL</comment>

    <instance name='burstRes' type='SPC_MBOX_NBURST_RESULT'>
        <comment>Used for normal burst reception results</comment>
    </instance>
    <instance name='monRes' type='SPC_MBOX_MON_RESULT' count='MBOX_INTRF_SLOT_QTY'>
        <comment>Used for both multiple Monitoring windows and Interference window</comment>
    </instance>
</typedef>

<typedef name='SPC_MBOX_WIN_SPC_TO_PAL'>
    <comment>Structure defined only to have the same organization as for PAL to SPC</comment>

    <instance name='rx' type='SPC_MBOX_WIN_SPC_TO_PAL_RX'></instance>
</typedef>

<typedef name='SPC_MBOX_STATIC_SPC_TO_PAL_RX'>
    <comment>Structure used for block related Rx results from SPC to PAL</comment>

    <instance name='fcch' type='SPC_MBOX_FCCH_RESULT'>
        <comment>fcch results structure</comment>
    </instance>
    <instance name='sch' type='SPC_MBOX_SCH_RESULT' count='MBOX_SCH_QTY'>
        <comment>sch results structure</comment>
    </instance>
    <instance name='nBlock' type='SPC_MBOX_NBLOCK_RESULT' count='MBOX_MAX_BUF_IDX_QTY'>
        <comment>normal block results structure</comment>
    </instance>
    <uint8 name='decodedUsf' count='MBOX_MAX_TS_QTY'>
        <comment>array of decoded USF in GPRS</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_STATIC_SPC_TO_PAL'>
    <comment>Structure defined only to have the same organization as for PAL to SPC</comment>

    <instance name='rx' type='SPC_MBOX_STATIC_SPC_TO_PAL_RX'></instance>
</typedef>

<typedef name='SPC_MBOX_SPC_TO_PAL'>
    <comment>main structure for SPC to PAL</comment>

    <instance name='win' type='SPC_MBOX_WIN_SPC_TO_PAL' count='MBOX_CTX_SNAP_QTY'>
        <comment>window related results</comment>
    </instance>
    <instance name='statWin' type='SPC_MBOX_STATIC_SPC_TO_PAL'>
        <comment>block related results</comment>
    </instance>
    <instance name='speechDecIn' type='SPC_MBOX_SPEECH_DEC_IN'>
        <comment>decoding structure for VOC</comment>
    </instance>
    <ptr name='encBuff' type='uint8' count='MBOX_MAX_BUF_IDX_QTY+1'>
        <comment>array of pointer given by SPC to store the data to encode  +1 for CSD block to encode</comment>
    </ptr>
    <bool name='dtxUsed'>
        <comment>used by SPC to warn PAL that DTX uplink has been used</comment>
    </bool>
    <uint32 name='debug' count='13'>
        <comment>debug for BCPU</comment>
    </uint32>
</typedef>

<typedef name='SPC_MBOX_AMR_CFG'>
    <comment>Structure used for the AMR management, it contains all the configuration  parameters relative to the AMR modes and link adaptation.  The XCPU writes it at init but can also read it to retrieve the last  AMR configuration.</comment>

    <uint8 name='version'></uint8>
    <uint8 name='noiseSuppression'></uint8>
    <uint8 name='startModeIdx'></uint8>
    <uint8 name='nbActiveCodecSet'></uint8>
    <uint8 name='activeCodecSet' count='4'></uint8>
    <uint8 name='hysteresis' count='3'></uint8>
    <uint8 name='threshold' count='3'></uint8>
    <uint8 name='CMIPhase'></uint8>
</typedef>

<typedef name='SPC_MBOX_RX_NBURST'>
    <comment>Structure used by PAL to parameter a Rx window</comment>

    <uint8 name='bufIdx'>
        <comment>buffer index of the normal burst (from 0 to 4)</comment>
    </uint8>
    <uint8 name='bstIdx'>
        <comment>burst index of the burst (from 0 to 3)</comment>
    </uint8>
    <uint8 name='tsc'>
        <comment>color of the training sequence</comment>
    </uint8>
    <uint8 name='bitMap'>
        <comment>indicates which slots are used in the RX window</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_STATWIN_RX_CFG'>
    <comment>Structure used to describe the logical channel associated with a Rx buffer  index and to indicate wether a decoding interruption is asked or not.</comment>

    <uint8 name='type'>
        <comment>logical channel type</comment>
    </uint8>
    <uint8 name='itr'>
        <comment>indicates if the decoding interruption is requested by PAL</comment>
    </uint8>
    <uint8 name='egprs'>
        <comment>indicates which EGPRS mode is used: 0-> not egprs, 1->egprs with IR, 2-> egprs without IR</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_WIN_TX_ACCESS_ENC'>
    <comment>Structure dedicated to AB encoding</comment>

    <uint16 name='data'>
        <comment>data to encode</comment>
    </uint16>
    <uint8 name='bsic'>
        <comment>base transceiver station identity code</comment>
    </uint8>
    <uint8 name='size'>
        <comment>size of the data in bits</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_STATWIN_TX_CTX'>
    <comment>Structure used to describe the logical channel and coding scheme in case  of GPRS associated with a Tx buffer index and also to indicates if the  data have been encoded or not.</comment>

    <uint8 name='type'>
        <comment>logical channel type associated with a buffer index</comment>
    </uint8>
    <uint8 name='encDone'>
        <comment>set by PAL to ask for encoding of the block and reset  by SPC when encoding has been done</comment>
    </uint8>
    <uint8 name='cs'>
        <comment>block coding scheme in GPRS</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_WIN_PAL_TO_SPC_TX'>
    <comment>Structure used for windows emission programming</comment>

    <uint8 name='routeMap' count='MBOX_MAX_TS_QTY'>
        <comment>this array gives the buffer indexes associated with the slots  in the Tx window (it contains more than one usefull value  only in case of GPRS multislot window)</comment>
    </uint8>
    <uint8 name='winIdx'>
        <comment>index of the Tx window in the frame</comment>
    </uint8>
    <uint8 name='bstIdx'>
        <comment>burst index (from 0 to 3)</comment>
    </uint8>
    <uint8 name='tsc'>
        <comment>training sequence color</comment>
    </uint8>
    <uint8 name='qty'>
        <comment>number of programmed Tx windows</comment>
    </uint8>
    <uint8 name='bitMap'>
        <comment>indicates which slots are used in the Tx window</comment>
    </uint8>
    <bool name='swapIQ'>
        <comment>indicates if I and Q have to be swapped</comment>
    </bool>
</typedef>

<typedef name='SPC_MBOX_WIN_PAL_TO_SPC_RX'>
    <comment>Structure used for window related Rx parameters, from PAL to SPC</comment>

    <uint8 name='qty'>
        <comment>number of programmed Rx window</comment>
    </uint8>
    <uint8 name='rxTypeWin' count='MBOX_WINDOWS_QTY'>
        <comment>type of the Rx window (FB, SB, NB or monitoring)  only one FB window can be programmed per TDMA frame  only one SB window can be programmed per TDMA frame  only one NB window can be programmed per TDMA frame</comment>
    </uint8>
    <uint8 name='monWinIdx' count='MBOX_WINDOWS_QTY'>
        <comment>index of the programmed monitoring windows  used for both monitoring and interference windows</comment>
    </uint8>
    <instance name='nBurst' type='SPC_MBOX_RX_NBURST'>
        <comment>parameters of the programmed NB Rx window</comment>
    </instance>
    <bool name='swapIQ' count='MBOX_WINDOWS_QTY'>
        <comment>indicates for each Rx window if I and Q have to be swapped</comment>
    </bool>
</typedef>

<typedef name='SPC_MBOX_WIN_PAL_TO_SPC'>
    <comment>Structure all window related from PAL to SPC</comment>

    <instance name='tx' type='SPC_MBOX_WIN_PAL_TO_SPC_TX'></instance>
    <instance name='rx' type='SPC_MBOX_WIN_PAL_TO_SPC_RX'></instance>
</typedef>

<typedef name='SPC_MBOX_STATIC_PAL_TO_SPC_TX'>
    <comment>Structure used for blocks related Tx parameters, from PAL to SPC</comment>

    <instance name='enc' type='SPC_MBOX_WIN_TX_ACCESS_ENC'></instance>
    <instance name='ctx' type='SPC_MBOX_STATWIN_TX_CTX' count='MBOX_MAX_BUF_IDX_QTY'></instance>
</typedef>

<typedef name='SPC_MBOX_STATIC_PAL_TO_SPC_RX'>
    <comment>Structure used for blocks related Rx parameters, from PAL to SPC</comment>

    <instance name='cfg' type='SPC_MBOX_STATWIN_RX_CFG' count='MBOX_MAX_BUF_IDX_QTY'></instance>
</typedef>

<typedef name='SPC_MBOX_STATIC_PAL_TO_SPC_DEDICATED'>
    <comment>Structure concerning the current dedicated TCH</comment>

    <instance name='AMRCfg' type='SPC_MBOX_AMR_CFG'>
        <comment>AMR configuration</comment>
    </instance>
    <uint8 name='changedAMRCfg'>
        <comment>indicates if the AMR configuration has been modified by PAL</comment>
    </uint8>
    <uint8 name='mode'>
        <comment>current mode of the TCH as defined in PAL interface</comment>
    </uint8>
    <bool name='active'>
        <comment>indicates if the TCH is started or stopped (respectively 1 and 0)</comment>
    </bool>
    <bool name='initTch'>
        <comment>indicates if the parameters of the TCH has to be reinitialized</comment>
    </bool>
</typedef>

<typedef name='SPC_MBOX_STATIC_PAL_TO_SPC'>
    <comment>Structure used for blocks related parameters, from PAL to SPC</comment>

    <instance name='tx' type='SPC_MBOX_STATIC_PAL_TO_SPC_TX'></instance>
    <instance name='rx' type='SPC_MBOX_STATIC_PAL_TO_SPC_RX'></instance>
    <instance name='dedicated' type='SPC_MBOX_STATIC_PAL_TO_SPC_DEDICATED'></instance>
    <uint8 name='loopMode'>
        <comment>mode for test loop see 3GPP 44.014 for more details</comment>
    </uint8>
    <uint8 name='ciphMode'>
        <comment>mode of ciphering if enabled</comment>
    </uint8>
</typedef>

<typedef name='SPC_MBOX_GSM_COUNTERS'>
    <comment>Structure used to store GSM TDMA frame counters</comment>

    <uint16 name='T1'></uint16>
    <uint8 name='T2'></uint8>
    <uint8 name='T3'></uint8>
</typedef>

<typedef name='SPC_MBOX_TX_BURST_MAPPING_PARAMS'>
    <uint8 name='preamble'></uint8>
    <uint8 name='guardStart'></uint8>
    <uint8 name='postamble'></uint8>
</typedef>

<typedef name='SPC_MBOX_RF_PARAMS'>
    <comment>Structure containing all RF-control related parameters</comment>

    <uint32 name='dtxTcoSettings'>
        <comment>settings for TCO during DTX uplink</comment>
    </uint32>
    <bool name='digrfEnable'>
        <comment>DigRf settings</comment>
    </bool>
    <uint8 name='digrfRxRate'></uint8>
    <uint8 name='digrfRxSampleWidth'></uint8>
    <uint8 name='digrfRxSampleAlign'></uint8>
    <uint8 name='digrfRxClkPol'></uint8>
    <uint8 name='digrfTxMode'></uint8>
    <uint8 name='digrfTxClkPol'></uint8>
    <instance name='txBstMap' type='SPC_MBOX_TX_BURST_MAPPING_PARAMS'></instance>
    <bool name='dcoCalEnable'>
        <comment>Enable Automatic DC Offset calibration mechanism</comment>
    </bool>
</typedef>

<typedef name='SPC_MBOX_PAL_TO_SPC'>
    <comment>main Structure for PAL to SPC</comment>

    <instance name='win' type='SPC_MBOX_WIN_PAL_TO_SPC' count='MBOX_CTX_SNAP_QTY'>
        <comment>window related programmations</comment>
    </instance>
    <instance name='statWin' type='SPC_MBOX_STATIC_PAL_TO_SPC'>
        <comment>block related programmations</comment>
    </instance>
    <instance name='counters' type='SPC_MBOX_GSM_COUNTERS' count='MBOX_CTX_SNAP_QTY'>
        <comment>GSM TDMA counter</comment>
    </instance>
    <instance name='speechEncOut' type='SPC_MBOX_SPEECH_ENC_OUT'>
        <comment>encoding structure comming from VOC</comment>
    </instance>
    <bool name='dtxAllowed'>
        <comment>indicates to SPC if the DTX uplink is allowed for the current TCH</comment>
    </bool>
    <instance name='rf' type='SPC_MBOX_RF_PARAMS'>
        <comment>RF parameters</comment>
    </instance>
</typedef>

<enum name='SPC_MBOX_DBG_REQ'>
    <comment>The debug mechanism is "block based" i.e. it allows  to dump samples (or use external ones) on 4 consecutives  bursts constituting a block.  Debug requests must be done through PAL, which is handling  the frame based mechanism.</comment>

    <entry name='MBOX_DBG_EXT_SAMPLES' value='0x1'></entry>
    <entry name='MBOX_DBG_REC_SAMPLES' value='0x2'></entry>
    <entry name='MBOX_DBG_REC_REF' value='0x4'></entry>
    <entry name='MBOX_DBG_REC_TAPS' value='0x8'></entry>
    <entry name='MBOX_DBG_BST_PARAM' value='0x10'></entry>
</enum>

<typedef name='SPC_MBOX_DEBUG'>
    <ptr name='ext_samples' type='uint32'></ptr>
    <ptr name='samples' type='uint32'></ptr>
    <ptr name='ref' type='uint32'></ptr>
    <ptr name='taps' type='uint32'></ptr>
    <uint32 name='req'></uint32>
</typedef>

<typedef name='SPC_MBX_EXT_SPC_TO_PAL'>
    <comment>Structure used for extra windows, from PAL to SPC</comment>
    <instance name='rxwin' type='SPC_MBOX_WIN_SPC_TO_PAL_RX' count='MBOX_CTX_SNAP_QTY'>
        <comment>window related programmations</comment>
    </instance>
</typedef>

<typedef name='SPC_MBX_EXT_PAL_TO_SPC'>
    <comment>Structure used for extra windows, from SPC to PAL</comment>
    <instance name='rxwin' type='SPC_MBOX_WIN_PAL_TO_SPC_RX' count='MBOX_CTX_SNAP_QTY'>
        <comment>window related results</comment>
    </instance>
</typedef>

<typedef name='SPC_MBX_EXT'>
    <comment>Structure used for extra windows</comment>
    <instance name='spc2pal' type='SPC_MBX_EXT_SPC_TO_PAL'>
        <comment>structure used to program BCPU and give context parameters values</comment>
    </instance>
    <instance name='pal2spc' type='SPC_MBX_EXT_PAL_TO_SPC'>
        <comment>structure used to exchange BCPU processing results</comment>
    </instance>    
</typedef>


<typedef name='SPC_MAILBOX'>
    <comment>The main structure which gathers the three different parts  of the mailbox.</comment>

    <instance name='pal2spc' type='SPC_MBOX_PAL_TO_SPC'>
        <comment>structure used to program BCPU and give context parameters values</comment>
    </instance>
    <instance name='spc2pal' type='SPC_MBOX_SPC_TO_PAL'>
        <comment>structure used to exchange BCPU processing results</comment>
    </instance>
    <ptr name='extRef' type='SPC_MBX_EXT_T'>
    <comment>external reference for extra windows</comment>
    </ptr>
    <uint32 name='rxOnTcoSettings'></uint32>      
    <uint16 name='dummyPchResult'></uint16>  
    <uint16 name='dummyPchThresh'></uint16>  
    <instance name='dbg' type='SPC_MBOX_DEBUG' count='MBOX_CTX_SNAP_QTY'>
        <comment>#ifdef __MBOX_DEBUG__  This is used by the embedded debug stub</comment>
    </instance>
    <uint32 name='palDbgReq'></uint32>  
    <uint32 name='palDbgAck'></uint32>
</typedef>

<cjoker>
/// g_mailbox is a global variable of type SPC_MAILBOX_T which is used
extern volatile SPC_MAILBOX_T g_mailbox;


// =============================================================================
// bcpu_main
// -----------------------------------------------------------------------------
/// BCPU main function.
// =============================================================================
PUBLIC EXPORT VOID bcpu_main(VOID);


/// @}
</cjoker>

</archive>
