		//0x0300		VoC_code_section_1
		//0x0300		CII_JPEG_Decode
0x40101484,	//0x0300		VoC_lw32_d(ACC0,0x4010)
0x400F6C04,	//0x0302		VoC_bez16_d(use_jpeg_swap_buffer,0x400f)
0x405C1584,	//0x0304		VoC_sw32_d(ACC0,0x405c)
		//0x0306		use_jpeg_swap_buffer
0x40141484,	//0x0306		VoC_lw32_d(ACC0,0x4014)
0x1584DFE9,	//0x0308		VoC_sw32_d(ACC0,0x67c8)(lo)	|	VoC_push16(RA,DEFAULT)
0x7F4467C8,	//0x030a		VoC_lw32z(ACC0,DEFAULT)	|	VoC_sw32_d(ACC0,0x67c8)(hi)
0xF000F401,	//0x030c		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xF01DF01C,	//0x030e		VoC_lw16i_short(WRAP1,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP0,0x0,DEFAULT)
0xF01FF01E,	//0x0310		VoC_lw16i_short(WRAP3,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP2,0x0,DEFAULT)
0x7FC11540,	//0x0312		VoC_sw16_d(REG0,0xffc1)
0x003F0A96,	//0x0314		VoC_lw16i(STATUS,0x3f)
0x0F241584,	//0x0316		VoC_sw32_d(ACC0,0xf24)
0x0F261509,	//0x0318		VoC_sw16_d(ACC0_HI,0xf26)
0x053E2B80,	//0x031a		VoC_jal(CII_DMAI_READDATA)
0x63881804,	//0x031c		VoC_lw16i_set_inc(REG0,0x6388,0x1)
0x58FF0AC2,	//0x031e		VoC_lw16i(REG2,0xd8ff)
0xD887D886,	//0x0320		VoC_lw16inc_p(REG7,REG0,DEFAULT)	|	VoC_lw16inc_p(REG6,REG0,DEFAULT)
0x60FF0AC3,	//0x0322		VoC_lw16i(REG3,0xe0ff)
0x04493596,	//0x0324		VoC_bne16_rr(Decode_106,REG2,REG6)
0x0449359F,	//0x0326		VoC_bne16_rr(Decode_106,REG3,REG7)
0xF4037F46,	//0x0328		VoC_lw16i_short(BITCACHE,0x0,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0xE240FFC0,	//0x032a		VoC_lbinc_p(REG0)	|	VoC_NOP
0xF90CE280,	//0x032c		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_rbinc_i(REG4,0x10,DEFAULT)
0x03312E21,	//0x032e		VoC_loop_r(1,REG4)
0xE281E240,	//0x0330		VoC_rbinc_i(REG5,0x10,DEFAULT)	|	VoC_lbinc_p(REG0)
		//0x0331		VoC_endloop1
0xE281E240,	//0x0332		VoC_rbinc_i(REG5,0x10,DEFAULT)	|	VoC_lbinc_p(REG0)
0x00500A84,	//0x0334		VoC_lw16i(REG4,0x50)
0x03393425,	//0x0336		VoC_bgt16_rr(M_DQT_CASE0,REG4,REG5)
0xE240E5DB,	//0x0338		VoC_lbinc_p(REG0)	|	VoC_jump(M_DQT_CASE1)
		//0x0339		M_DQT_CASE0
0xE2A0E2A1,	//0x033a		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0x262E1807,	//0x033c		VoC_lw16i_set_inc(REG3,0x262e,0x1)
0xDCB4FFC0,	//0x033e		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_NOP
0xE240EBE5,	//0x0340		VoC_lbinc_p(REG0)	|	VoC_loop_i_short(0x1f,DEFAULT)
0xE2A0E2A1,	//0x0342		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0xDCB4DCB5,	//0x0344		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
		//0x0345		VoC_endloop0
0xE2A1E240,	//0x0346		VoC_rbinc_i(REG5,0x8,DEFAULT)	|	VoC_lbinc_p(REG0)
0xDCB5E2A0,	//0x0348		VoC_sw16inc_p(REG5,REG3,DEFAULT)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0xDE00DE00,	//0x034a		VoC_inc_p(REG0,DEFAULT)	|	VoC_inc_p(REG0,DEFAULT)
0xE240EC05,	//0x034c		VoC_lbinc_p(REG0)	|	VoC_loop_i_short(0x20,DEFAULT)
0xE2A0E2A1,	//0x034e		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0xDCB4DCB5,	//0x0350		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
		//0x0351		VoC_endloop0
0xE240E5D8,	//0x0352		VoC_lbinc_p(REG0)	|	VoC_jump(M_SOF0_CASE)
		//0x0353		M_DQT_CASE1
0xE2A0E2A1,	//0x0354		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0x262E1807,	//0x0356		VoC_lw16i_set_inc(REG3,0x262e,0x1)
0xDCB4FFC0,	//0x0358		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_NOP
0xE240EBE5,	//0x035a		VoC_lbinc_p(REG0)	|	VoC_loop_i_short(0x1f,DEFAULT)
0xE2A0E2A1,	//0x035c		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0xDCB4DCB5,	//0x035e		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
		//0x035f		VoC_endloop0
0xE2A1E240,	//0x0360		VoC_rbinc_i(REG5,0x8,DEFAULT)	|	VoC_lbinc_p(REG0)
0xDCB5E2A0,	//0x0362		VoC_sw16inc_p(REG5,REG3,DEFAULT)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0xE240EC05,	//0x0364		VoC_lbinc_p(REG0)	|	VoC_loop_i_short(0x20,DEFAULT)
0xE2A0E2A1,	//0x0366		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0xDCB4DCB5,	//0x0368		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
		//0x0369		VoC_endloop0
		//0x036a		M_SOF0_CASE
0xE006DE00,	//0x036a		VoC_movreg16(REG6,REG0,DEFAULT)	|	VoC_inc_p(REG0,DEFAULT)
0xE283E240,	//0x036c		VoC_rbinc_i(REG7,0x10,DEFAULT)	|	VoC_lbinc_p(REG0)
0xE240F90F,	//0x036e		VoC_lbinc_p(REG0)	|	VoC_shru16_ri(REG7,0x1,DEFAULT)
0xE2A0E240,	//0x0370		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_lbinc_p(REG0)
0xE240E281,	//0x0372		VoC_lbinc_p(REG0)	|	VoC_rbinc_i(REG5,0x10,DEFAULT)
0x6218072D,	//0x0374		VoC_add16_rd(REG5,REG5,0x6218)
0xF8E5F925,	//0x0376		VoC_shr16_ri(REG5,0xfffffffc,DEFAULT)	|	VoC_shru16_ri(REG5,0x4,DEFAULT)
0x1505E280,	//0x0378		VoC_sw16_d(REG5,0x2700)(lo)	|	VoC_rbinc_i(REG4,0x10,DEFAULT)
0xF8252700,	//0x037a		VoC_shr16_ri(REG5,0x4,DEFAULT)	|	VoC_sw16_d(REG5,0x2700)(hi)
0x1505FFC0,	//0x037c		VoC_sw16_d(REG5,0x2701)(lo)	|	VoC_NOP
0xE2A12701,	//0x037e		VoC_rbinc_i(REG5,0x8,DEFAULT)	|	VoC_sw16_d(REG5,0x2701)(hi)
0x62180724,	//0x0380		VoC_add16_rd(REG4,REG4,0x6218)
0xF8E4F924,	//0x0382		VoC_shr16_ri(REG4,0xfffffffc,DEFAULT)	|	VoC_shru16_ri(REG4,0x4,DEFAULT)
0x61F107A5,	//0x0384		VoC_sub16_rd(REG5,REG4,0x61f1)
0x1504C1B8,	//0x0386		VoC_sw16_d(REG4,0x26ff)(lo)	|	VoC_add16_rr(REG0,REG6,REG7,DEFAULT)
0xF82426FF,	//0x0388		VoC_shr16_ri(REG4,0x4,DEFAULT)	|	VoC_sw16_d(REG4,0x26ff)(hi)
0x27021505,	//0x038a		VoC_sw16_d(REG5,0x2702)
0x27031504,	//0x038c		VoC_sw16_d(REG4,0x2703)
0x7003DE00,	//0x038e		VoC_lw16i_short(REG3,0x0,DEFAULT)	|	VoC_inc_p(REG0,DEFAULT)
0xE240F007,	//0x0390		VoC_lbinc_p(REG0)	|	VoC_lw16i_short(INC3,0x1,IN_PARALLEL)
0xE240E006,	//0x0392		VoC_lbinc_p(REG0)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xE281E2A0,	//0x0394		VoC_rbinc_i(REG5,0x10,DEFAULT)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0x3C8DE2A3,	//0x0396		VoC_bngt16_rd(M_DHT_CASE0,REG5,0x61ec)(lo)	|	VoC_rbinc_i(REG7,0x8,DEFAULT)
0xE0A261EC,	//0x0398		VoC_movreg16(REG2,REG5,DEFAULT)	|	VoC_bngt16_rd(M_DHT_CASE0,REG5,0x61ec)(hi)
0x61EF2802,	//0x039a		VoC_and16_rd(REG2,0x61ef)
0x03E03182,	//0x039c		VoC_bez16_r(M_SOS_CASE1,REG2)
0x03D42B00,	//0x039e		VoC_jump_lg(M_SOS_CASE0)
		//0x03a0		M_DHT_CASE0
0x2802E0A2,	//0x03a0		VoC_and16_rd(REG2,0x61ef)(lo)	|	VoC_movreg16(REG2,REG5,DEFAULT)
0x318261EF,	//0x03a2		VoC_bez16_r(DHT1,REG2)(lo)	|	VoC_and16_rd(REG2,0x61ef)(hi)
0xFFC003B8,	//0x03a4		VoC_NAD	|	VoC_bez16_r(DHT1,REG2)(hi)
		//0x03a6		DHT0
0x61EF0736,	//0x03a6		VoC_add16_rd(REG6,REG6,0x61ef)
0xC1A8F90D,	//0x03a8		VoC_add16_rr(REG0,REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG5,0x1,DEFAULT)
0xE240E006,	//0x03aa		VoC_lbinc_p(REG0)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xE0A2E281,	//0x03ac		VoC_movreg16(REG2,REG5,DEFAULT)	|	VoC_rbinc_i(REG5,0x10,DEFAULT)
0x61EF2802,	//0x03ae		VoC_and16_rd(REG2,0x61ef)
0x481BDE18,	//0x03b0		VoC_blt16_rd(DHT0_CONTINUE,REG3,0x61f4)(lo)	|	VoC_inc_p(REG3,DEFAULT)
0xE5D961F4,	//0x03b2		VoC_jump(COMPARE0)	|	VoC_blt16_rd(DHT0_CONTINUE,REG3,0x61f4)(hi)
		//0x03b4		DHT0_CONTINUE
0x03A63182,	//0x03b4		VoC_bez16_r(DHT0,REG2)
0x61EF0736,	//0x03b6		VoC_add16_rd(REG6,REG6,0x61ef)
		//0x03b8		DHT1
0xC1A8F90D,	//0x03b8		VoC_add16_rr(REG0,REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG5,0x1,DEFAULT)
0xE240FFC0,	//0x03ba		VoC_lbinc_p(REG0)	|	VoC_NOP
0xE240E006,	//0x03bc		VoC_lbinc_p(REG0)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xE281E2A0,	//0x03be		VoC_rbinc_i(REG5,0x10,DEFAULT)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0xE0A2E2A3,	//0x03c0		VoC_movreg16(REG2,REG5,DEFAULT)	|	VoC_rbinc_i(REG7,0x8,DEFAULT)
0x61EF2802,	//0x03c2		VoC_and16_rd(REG2,0x61ef)
0x481BDE18,	//0x03c4		VoC_blt16_rd(DHT2_CONTINUE,REG3,0x61f4)(lo)	|	VoC_inc_p(REG3,DEFAULT)
0xE5CB61F4,	//0x03c6		VoC_jump(COMPARE1)	|	VoC_blt16_rd(DHT2_CONTINUE,REG3,0x61f4)(hi)
		//0x03c8		DHT2_CONTINUE
0x03A631C2,	//0x03c8		VoC_bnez16_r(DHT0,REG2)
0xFFC0E5EE,	//0x03ca		VoC_NAD	|	VoC_jump(DHT1)
		//0x03cc		COMPARE0
0x03D43182,	//0x03cc		VoC_bez16_r(M_SOS_CASE0,REG2)
0x61EF0736,	//0x03ce		VoC_add16_rd(REG6,REG6,0x61ef)
0xFFC0E5D0,	//0x03d0		VoC_NAD	|	VoC_jump(M_SOS_CASE1)
		//0x03d2		COMPARE1
0x03E03182,	//0x03d2		VoC_bez16_r(M_SOS_CASE1,REG2)
		//0x03d4		M_SOS_CASE0
0x61EF0736,	//0x03d4		VoC_add16_rd(REG6,REG6,0x61ef)
0xC1A8F90D,	//0x03d6		VoC_add16_rr(REG0,REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG5,0x1,DEFAULT)
0xE240E006,	//0x03d8		VoC_lbinc_p(REG0)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xF90DE281,	//0x03da		VoC_shru16_ri(REG5,0x1,DEFAULT)	|	VoC_rbinc_i(REG5,0x10,DEFAULT)
0xFF4741A8,	//0x03dc		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG6,REG5,DEFAULT)
0xE5D1F001,	//0x03de		VoC_jump(Decode_begin_work)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
		//0x03e0		M_SOS_CASE1
0xC1A8F90D,	//0x03e0		VoC_add16_rr(REG0,REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG5,0x1,DEFAULT)
0xE240E006,	//0x03e2		VoC_lbinc_p(REG0)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xE2A0E240,	//0x03e4		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_lbinc_p(REG0)
0xE2A3E281,	//0x03e6		VoC_rbinc_i(REG7,0x8,DEFAULT)	|	VoC_rbinc_i(REG5,0x10,DEFAULT)
0xC1A8F90D,	//0x03e8		VoC_add16_rr(REG0,REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG5,0x1,DEFAULT)
0x5882FFC0,	//0x03ea		VoC_lw16inc_p(REG2,REG0,DEFAULT)	|	VoC_NOP
0xF942E081,	//0x03ec		VoC_shru16_ri(REG2,0x8,DEFAULT)	|	VoC_lw16i_short(REG1,0x8,IN_PARALLEL)
0xF00FE04E,	//0x03ee		VoC_lw16i_short(RL7_HI,0x0,DEFAULT)	|	VoC_movreg16(RL7_LO,REG2,DEFAULT)
		//0x03f0		Decode_begin_work
0xE0077005,	//0x03f0		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x400C1407,	//0x03f2		VoC_lw16_d(REG7,0x400c)
0x262C1505,	//0x03f4		VoC_sw16_d(REG5,0x262c)
0x0F281507,	//0x03f6		VoC_sw16_d(REG7,0xf28)
		//0x03f8		Decode_100
0x1806F003,	//0x03f8		VoC_lw16i_set_inc(REG2,0x102c,0x1)(lo)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0x1505102C,	//0x03fa		VoC_sw16_d(REG5,0x26fc)(lo)	|	VoC_lw16i_set_inc(REG2,0x102c,0x1)(hi)
0x5FC526FC,	//0x03fc		VoC_push16(REG5,DEFAULT)	|	VoC_sw16_d(REG5,0x26fc)(hi)
0xDF41F401,	//0x03fe		VoC_push32(REG23,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
		//0x03ff		Decode_101
0x07732B80,	//0x0400		VoC_jal(CII_DecodeMCUBlock)
0xF0065909,	//0x0402		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_lw32_sd(REG23,0x0,DEFAULT)
0x07042B80,	//0x0404		VoC_jal(CII_StoreBuffer)
0x1407DF01,	//0x0406		VoC_lw16_d(REG7,0xf28)(lo)	|	VoC_pop32(REG23,DEFAULT)
0x402F0F28,	//0x0408		VoC_be16_rd(small_image_case,REG7,0x61f3)(lo)	|	VoC_lw16_d(REG7,0xf28)(hi)
0x071261F3,	//0x040a		VoC_add16_rd(REG2,REG2,0x61f0)(lo)	|	VoC_be16_rd(small_image_case,REG7,0x61f3)(hi)
0xFFC061F0,	//0x040c		VoC_NAD	|	VoC_add16_rd(REG2,REG2,0x61f0)(hi)
		//0x040e		small_image_case
0x61F00712,	//0x040e		VoC_add16_rd(REG2,REG2,0x61f0)
0x61EF071B,	//0x0410		VoC_add16_rd(REG3,REG3,0x61ef)
0x27034AAB,	//0x0412		VoC_blt16_rd(Decode_101,REG3,0x2703)
0x61EF4037,	//0x0414		VoC_be16_rd(Decode_enlarge_picture,REG7,0x61ef)
0x05922B80,	//0x0416		VoC_jal(CII_DMAI_WRITEDATA)
0xE5CDDF85,	//0x0418		VoC_jump(Decode_102)	|	VoC_pop16(REG5,DEFAULT)
		//0x041a		Decode_enlarge_picture
0x0F2B1500,	//0x041a		VoC_sw16_d(REG0,0xf2b)
0x5FC1DF85,	//0x041c		VoC_push16(REG1,DEFAULT)	|	VoC_pop16(REG5,DEFAULT)
0xDFC5DF47,	//0x041e		VoC_push16(REG5,DEFAULT)	|	VoC_push32(RL7,IN_PARALLEL)
0x04512B80,	//0x0420		VoC_jal(CII_zoom)
0x5F81DF85,	//0x0422		VoC_pop16(REG1,DEFAULT)	|	VoC_pop16(REG5,DEFAULT)
0xFFC0DF07,	//0x0424		VoC_NAD	|	VoC_pop32(RL7,IN_PARALLEL)
		//0x0426		Decode_102
0x61EF072D,	//0x0426		VoC_add16_rd(REG5,REG5,0x61ef)
0x0F2B1400,	//0x0428		VoC_lw16_d(REG0,0xf2b)
0x27014C25,	//0x042a		VoC_bnlt16_rd(Decode_103,REG5,0x2701)
0x03F82B00,	//0x042c		VoC_jump_lg(Decode_100)
		//0x042e		Decode_103
0x0F281407,	//0x042e		VoC_lw16_d(REG7,0xf28)
0x043E3187,	//0x0430		VoC_bez16_r(Decode_105,REG7)
0x01400A84,	//0x0432		VoC_lw16i(REG4,0x140)
0x00F00A85,	//0x0434		VoC_lw16i(REG5,0xf0)
0x61F34427,	//0x0436		VoC_bne16_rd(Decode_104,REG7,0x61f3)
0xF80DF80C,	//0x0438		VoC_shr16_ri(REG5,0x1,DEFAULT)	|	VoC_shr16_ri(REG4,0x1,DEFAULT)
		//0x043a		Decode_104
0x26FF1504,	//0x043a		VoC_sw16_d(REG4,0x26ff)
0x27001505,	//0x043c		VoC_sw16_d(REG5,0x2700)
		//0x043e		Decode_105
0x1404FF44,	//0x043e		VoC_lw16_d(REG4,0x26ff)(lo)	|	VoC_lw32z(ACC0,DEFAULT)
0x140526FF,	//0x0440		VoC_lw16_d(REG5,0x2700)(lo)	|	VoC_lw16_d(REG4,0x26ff)(hi)
0xF0032700,	//0x0442		VoC_lw16i_short(REG3,0x0,DEFAULT)	|	VoC_lw16_d(REG5,0x2700)(hi)
0x40301504,	//0x0444		VoC_sw16_d(REG4,0x4030)
0x40311505,	//0x0446		VoC_sw16_d(REG5,0x4031)
0xF7E4E5C4,	//0x0448		VoC_lw16i_short(REG4,0xffffffff,DEFAULT)	|	VoC_jump(Decode_107)
		//0x0449		Decode_106
0x40211504,	//0x044a		VoC_sw16_d(REG4,0x4021)
		//0x044c		Decode_107
0x05742B80,	//0x044c		VoC_jal(CII_DMAI_SYNCDATA)
0xFFC0DFA9,	//0x044e		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDFE9E580,	//0x0450		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x0451		CII_zoom
0x26FC1407,	//0x0452		VoC_lw16_d(REG7,0x26fc)
0x409FF204,	//0x0454		VoC_be16_rd(zoom_begin,REG7,0x5d9d)(lo)	|	VoC_lw16i_short(REG4,0x10,DEFAULT)
0xF3045D9D,	//0x0456		VoC_lw16i_short(REG4,0x18,DEFAULT)	|	VoC_be16_rd(zoom_begin,REG7,0x5d9d)(hi)
0x61EF4087,	//0x0458		VoC_be16_rd(zoom_begin,REG7,0x61ef)
0x00200A84,	//0x045a		VoC_lw16i(REG4,0x20)
0x61F04827,	//0x045c		VoC_blt16_rd(zoom_begin,REG7,0x61f0)
0xFFC0F204,	//0x045e		VoC_NAD	|	VoC_lw16i_short(REG4,0x10,DEFAULT)
		//0x0460		zoom_begin
0xF0077003,	//0x0460		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0x61EF07A4,	//0x0462		VoC_sub16_rd(REG4,REG4,0x61ef)
0x65481805,	//0x0464		VoC_lw16i_set_inc(REG1,0x6548,0x1)
0x052A2E21,	//0x0466		VoC_loop_r(1,REG4)
0xDFC3E062,	//0x0468		VoC_push16(REG3,DEFAULT)	|	VoC_movreg16(REG2,REG3,DEFAULT)
0x61EF2802,	//0x046a		VoC_and16_rd(REG2,0x61ef)
0x622E1804,	//0x046c		VoC_lw16i_set_inc(REG0,0x622e,0x1)
0x047731C2,	//0x046e		VoC_bnez16_r(zoom_100,REG2)
0xF6676066,	//0x0470		VoC_movreg16(REG7,REG3,IN_PARALLEL)	|	VoC_movreg16(REG6,REG3,DEFAULT)
0x26FA1502,	//0x0472		VoC_sw16_d(REG2,0x26fa)
0xF80F780E,	//0x0474		VoC_shr16_ri(REG7,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0x1,DEFAULT)
0xE066E5C8,	//0x0476		VoC_movreg16(REG6,REG3,DEFAULT)	|	VoC_jump(zoom_101)
		//0x0477		zoom_100
0x26FA1502,	//0x0478		VoC_sw16_d(REG2,0x26fa)
0x0737F80E,	//0x047a		VoC_add16_rd(REG7,REG6,0x61ef)(lo)	|	VoC_shr16_ri(REG6,0x1,DEFAULT)
0xFFC061EF,	//0x047c		VoC_NAD	|	VoC_add16_rd(REG7,REG6,0x61ef)(hi)
		//0x047e		zoom_101
0x00B00A83,	//0x047e		VoC_lw16i(REG3,0xb0)
0xC5DFC59E,	//0x0480		VoC_mult16_rr(REG7,REG7,REG3,DEFAULT)	|	VoC_mult16_rr(REG6,REG6,REG3,DEFAULT)
0x0A82F003,	//0x0482		VoC_lw16i(REG2,0x102c)(lo)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0x60C8102C,	//0x0484		VoC_movreg16(ACC0_LO,REG6,DEFAULT)	|	VoC_lw16i(REG2,0x102c)(hi)
0x60EAF6C9,	//0x0486		VoC_movreg16(ACC1_LO,REG7,DEFAULT)	|	VoC_movreg16(ACC0_HI,REG6,IN_PARALLEL)
0x604CF6EB,	//0x0488		VoC_movreg16(RL6_LO,REG2,DEFAULT)	|	VoC_movreg16(ACC1_HI,REG7,IN_PARALLEL)
0x1503F64D,	//0x048a		VoC_sw16_d(REG3,0x262d)(lo)	|	VoC_movreg16(RL6_HI,REG2,IN_PARALLEL)
0xFFC0262D,	//0x048c		VoC_NAD	|	VoC_sw16_d(REG3,0x262d)(hi)
		//0x048e		zoom_105
0x05142D40,	//0x048e		VoC_loop_i(0x0,0xa0)
0x6043D882,	//0x0490		VoC_movreg16(REG3,REG2,DEFAULT)	|	VoC_lw16inc_p(REG2,REG0,DEFAULT)
0x2803DFC0,	//0x0492		VoC_and16_rd(REG3,0x61ef)(lo)	|	VoC_push16(REG0,IN_PARALLEL)
0x31C361EF,	//0x0494		VoC_bnez16_r(zoom_102,REG3)(lo)	|	VoC_and16_rd(REG3,0x61ef)(hi)
0x6044049E,	//0x0496		VoC_movreg16(REG4,REG2,DEFAULT)	|	VoC_bnez16_r(zoom_102,REG3)(hi)
0x1503F645,	//0x0498		VoC_sw16_d(REG3,0x26fb)(lo)	|	VoC_movreg16(REG5,REG2,IN_PARALLEL)
0x780C26FB,	//0x049a		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_sw16_d(REG3,0x26fb)(hi)
0xE5C7F80D,	//0x049c		VoC_jump(zoom_103)	|	VoC_shr16_ri(REG5,0x1,IN_PARALLEL)
		//0x049e		zoom_102
0x1503E044,	//0x049e		VoC_sw16_d(REG3,0x26fb)(lo)	|	VoC_movreg16(REG4,REG2,DEFAULT)
0xF80C26FB,	//0x04a0		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_sw16_d(REG3,0x26fb)(hi)
0x61EF0725,	//0x04a2		VoC_add16_rd(REG5,REG4,0x61ef)
		//0x04a4		zoom_103
0xC9534917,	//0x04a4		VoC_add32_rr(REG67,ACC1,REG45,IN_PARALLEL)	|	VoC_add32_rr(RL7,ACC0,REG45,DEFAULT)
0xC99B49BA,	//0x04a6		VoC_add32_rr(REG67,RL6,REG67,IN_PARALLEL)	|	VoC_add32_rr(REG45,RL6,RL7,DEFAULT)
0x26FA1403,	//0x04a8		VoC_lw16_d(REG3,0x26fa)
0x5855D844,	//0x04aa		VoC_lw16_p(REG5,REG5,DEFAULT)	|	VoC_lw16_p(REG4,REG4,DEFAULT)
0x5866F680,	//0x04ac		VoC_lw16_p(REG6,REG6,DEFAULT)	|	VoC_movreg16(REG0,REG4,IN_PARALLEL)
0x5877F682,	//0x04ae		VoC_lw16_p(REG7,REG7,DEFAULT)	|	VoC_movreg16(REG2,REG4,IN_PARALLEL)
0x1600F95C,	//0x04b0		VoC_and16_ri(REG0,0x7ff)(lo)	|	VoC_shru16_ri(REG4,0xb,IN_PARALLEL)
0xF92807FF,	//0x04b2		VoC_shru16_ri(REG0,0x5,DEFAULT)	|	VoC_and16_ri(REG0,0x7ff)(hi)
0x001F1602,	//0x04b4		VoC_and16_ri(REG2,0x1f)
0x61EF2803,	//0x04b6		VoC_and16_rd(REG3,0x61ef)
0x04CC31C3,	//0x04b8		VoC_bnez16_r(zoom_col,REG3)
0xF6A760A6,	//0x04ba		VoC_movreg16(REG7,REG5,IN_PARALLEL)	|	VoC_movreg16(REG6,REG5,DEFAULT)
0x07FF1606,	//0x04bc		VoC_and16_ri(REG6,0x7ff)
0x792EF95D,	//0x04be		VoC_shru16_ri(REG6,0x5,DEFAULT)	|	VoC_shru16_ri(REG5,0xb,DEFAULT)
0x780CC12C,	//0x04c0		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG5,IN_PARALLEL)
0x1607FF47,	//0x04c2		VoC_and16_ri(REG7,0x1f)(lo)	|	VoC_lw32z(RL7,IN_PARALLEL)
0x4030001F,	//0x04c4		VoC_add16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_and16_ri(REG7,0x1f)(hi)
0x7808C0BA,	//0x04c6		VoC_shr16_ri(REG0,0x1,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG7,IN_PARALLEL)
0x2B00F80A,	//0x04c8		VoC_jump_lg(zoom_104)(lo)	|	VoC_shr16_ri(REG2,0x1,IN_PARALLEL)
0xFFC00509,	//0x04ca		VoC_NAD	|	VoC_jump_lg(zoom_104)(hi)
		//0x04cc		zoom_col
0x26FB1403,	//0x04cc		VoC_lw16_d(REG3,0x26fb)
0x61EF2803,	//0x04ce		VoC_and16_rd(REG3,0x61ef)
0x04E431C3,	//0x04d0		VoC_bnez16_r(zoom_col_odd,REG3)
0xF6C760C5,	//0x04d2		VoC_movreg16(REG7,REG6,IN_PARALLEL)	|	VoC_movreg16(REG5,REG6,DEFAULT)
0x07FF1605,	//0x04d4		VoC_and16_ri(REG5,0x7ff)
0x782DF95E,	//0x04d6		VoC_shr16_ri(REG5,0x5,DEFAULT)	|	VoC_shru16_ri(REG6,0xb,DEFAULT)
0x790CC134,	//0x04d8		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG6,IN_PARALLEL)
0x1607FF47,	//0x04da		VoC_and16_ri(REG7,0x1f)(lo)	|	VoC_lw32z(RL7,IN_PARALLEL)
0x4028001F,	//0x04dc		VoC_add16_rr(REG0,REG0,REG5,DEFAULT)	|	VoC_and16_ri(REG7,0x1f)(hi)
0x7908C0BA,	//0x04de		VoC_shru16_ri(REG0,0x1,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG7,IN_PARALLEL)
0x2B00F90A,	//0x04e0		VoC_jump_lg(zoom_104)(lo)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0xFFC00509,	//0x04e2		VoC_NAD	|	VoC_jump_lg(zoom_104)(hi)
		//0x04e4		zoom_col_odd
0xDF435FC5,	//0x04e4		VoC_push32(REG67,IN_PARALLEL)	|	VoC_push16(REG5,DEFAULT)
0xF95E795D,	//0x04e6		VoC_shru16_ri(REG6,0xb,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xb,DEFAULT)
0xC12C795F,	//0x04e8		VoC_add16_rr(REG4,REG4,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xb,DEFAULT)
0xD6154134,	//0x04ea		VoC_lw16_sd(REG5,0x0,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0xD90B413C,	//0x04ec		VoC_lw32_sd(REG67,0x0,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG7,DEFAULT)
0x07FF1605,	//0x04ee		VoC_and16_ri(REG5,0x7ff)
0x07FF1606,	//0x04f0		VoC_and16_ri(REG6,0x7ff)
0x07FF1607,	//0x04f2		VoC_and16_ri(REG7,0x7ff)
0xF92D7814,	//0x04f4		VoC_shru16_ri(REG5,0x5,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x2,DEFAULT)
0xF92F792E,	//0x04f6		VoC_shru16_ri(REG7,0x5,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x5,DEFAULT)
0xC030C028,	//0x04f8		VoC_add16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xDF854038,	//0x04fa		VoC_pop16(REG5,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG7,DEFAULT)
0xDF037810,	//0x04fc		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_shr16_ri(REG0,0x2,DEFAULT)
0x001F1605,	//0x04fe		VoC_and16_ri(REG5,0x1f)
0x001F1606,	//0x0500		VoC_and16_ri(REG6,0x1f)
0x001F1607,	//0x0502		VoC_and16_ri(REG7,0x1f)
0xFF4740AA,	//0x0504		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG5,DEFAULT)
0xC0BAC0B2,	//0x0506		VoC_add16_rr(REG2,REG2,REG7,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG6,DEFAULT)
0xE08FF812,	//0x0508		VoC_movreg16(RL7_HI,REG4,DEFAULT)	|	VoC_shr16_ri(REG2,0x2,DEFAULT)
		//0x0509		zoom_104
0x61C4FA2F,	//0x050a		VoC_movreg16(REG4,RL7_LO,DEFAULT)	|	VoC_shr32_ri(RL7,0x5,DEFAULT)
0x1600F8D8,	//0x050c		VoC_and16_ri(REG0,0x7ff)(lo)	|	VoC_shr16_ri(REG0,0xfffffffb,IN_PARALLEL)
0x160207FF,	//0x050e		VoC_and16_ri(REG2,0x7ff)(lo)	|	VoC_and16_ri(REG0,0x7ff)(hi)
0xE44407FF,	//0x0510		VoC_or16_rr(REG4,REG0,DEFAULT)	|	VoC_and16_ri(REG2,0x7ff)(hi)
0xDF80E454,	//0x0512		VoC_pop16(REG0,DEFAULT)	|	VoC_or16_rr(REG4,REG2,DEFAULT)
		//0x0514		VoC_endloop0
0x1402DC94,	//0x0514		VoC_lw16_d(REG2,0x262d)(lo)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
0x0712262D,	//0x0516		VoC_add16_rd(REG2,REG2,0x61ef)(lo)	|	VoC_lw16_d(REG2,0x262d)(hi)
0x140561EF,	//0x0518		VoC_lw16_d(REG5,0x26fa)(lo)	|	VoC_add16_rd(REG2,REG2,0x61ef)(hi)
0x150226FA,	//0x051a		VoC_sw16_d(REG2,0x262d)(lo)	|	VoC_lw16_d(REG5,0x26fa)(hi)
0x382A262D,	//0x051c		VoC_bgt16_rd(zoom_106,REG2,0x61ef)(lo)	|	VoC_sw16_d(REG2,0x262d)(hi)
0x2B0061EF,	//0x051e		VoC_jump_lg(zoom_105)(lo)	|	VoC_bgt16_rd(zoom_106,REG2,0x61ef)(hi)
0xFFC0048E,	//0x0520		VoC_NAD	|	VoC_jump_lg(zoom_105)(hi)
		//0x0522		zoom_106
0x61EF4435,	//0x0522		VoC_bne16_rd(zoom_contiune,REG5,0x61ef)
0x06602B80,	//0x0524		VoC_jal(CII_DMAI_WRITEISPDATA)
0x65481805,	//0x0526		VoC_lw16i_set_inc(REG1,0x6548,0x1)
		//0x0528		zoom_contiune
0xFFC0DF83,	//0x0528		VoC_NOP	|	VoC_pop16(REG3,DEFAULT)
		//0x052a		VoC_endloop1
0x1805DE18,	//0x052a		VoC_lw16i_set_inc(REG1,0x6548,0x1)(lo)	|	VoC_inc_p(REG3,DEFAULT)
0x18066548,	//0x052c		VoC_lw16i_set_inc(REG2,0x6688,0x1)(lo)	|	VoC_lw16i_set_inc(REG1,0x6548,0x1)(hi)
0xFFC06688,	//0x052e		VoC_NAD	|	VoC_lw16i_set_inc(REG2,0x6688,0x1)(hi)
0x05372C05,	//0x0530		VoC_loop_i(0x1,0x2)
0x05362D40,	//0x0532		VoC_loop_i(0x0,0xa0)
0xFFC0D893,	//0x0534		VoC_NOP	|	VoC_lw16inc_p(REG3,REG1,DEFAULT)
		//0x0536		VoC_endloop0
0xFFC0DCA3,	//0x0536		VoC_NOP	|	VoC_sw16inc_p(REG3,REG2,DEFAULT)
		//0x0537		VoC_endloop1
0x06602B80,	//0x0538		VoC_jal(CII_DMAI_WRITEISPDATA)
0xFFC0DFA9,	//0x053a		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x053c		VoC_NAD	|	VoC_return
		//0x053e		CII_DMAI_READDATA
0xDFC35F46,	//0x053e		VoC_push16(REG3,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0x31C40A84,	//0x0540		VoC_lw16i(REG4,0x31c4)
0x00E00A85,	//0x0542		VoC_lw16i(REG5,0xe0)
0x405C1486,	//0x0544		VoC_lw32_d(RL6,0x405c)
0xE00B60AA,	//0x0546		VoC_lw16i_short(ACC1_HI,0x0,IN_PARALLEL)	|	VoC_movreg16(ACC1_LO,REG5,DEFAULT)
0xC975FBF5,	//0x0548		VoC_add32_rr(ACC1,ACC1,RL6,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffffe,DEFAULT)
0x40126125,	//0x054a		VoC_blt32_rd(no_ext_vidbuff_wrap,ACC1,0x4012)
0x40120BB5,	//0x054c		VoC_sub32_dr(ACC1,0x4012,RL6)
0xE143FC15,	//0x054e		VoC_movreg16(REG3,ACC1_LO,DEFAULT)	|	VoC_shru32_ri(ACC1,0x2,DEFAULT)
0x7FC31544,	//0x0550		VoC_sw16_d(REG4,0xffc3)
0x7FC21543,	//0x0552		VoC_sw16_d(REG3,0xffc2)
0x7FC415C6,	//0x0554		VoC_sw32_d(RL6,0xffc4)
0xFFC0DE80,	//0x0556		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x0558		VoC_cfg_lg(0x8,)
0xC35D411C,	//0x055a		VoC_sub16_rr(REG5,REG5,REG3,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG3,DEFAULT)
0x40101486,	//0x055c		VoC_lw32_d(RL6,0x4010)
		//0x055e		no_ext_vidbuff_wrap
0x056E3185,	//0x055e		VoC_bez16_r(ext_vidbuff_load_done,REG5)
0x7FC31544,	//0x0560		VoC_sw16_d(REG4,0xffc3)
0x7FC21545,	//0x0562		VoC_sw16_d(REG5,0xffc2)
0x7FC415C6,	//0x0564		VoC_sw32_d(RL6,0xffc4)
0xFFC0DE80,	//0x0566		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x0568		VoC_cfg_lg(0x8,)
0xFC72F004,	//0x056a		VoC_shru32_ri(REG45,0xe,DEFAULT)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0xFFC0C996,	//0x056c		VoC_NAD	|	VoC_add32_rr(RL6,RL6,REG45,DEFAULT)
		//0x056e		ext_vidbuff_load_done
0xDF835F06,	//0x056e		VoC_pop16(REG3,IN_PARALLEL)	|	VoC_pop32(RL6,DEFAULT)
0x405C1586,	//0x0570		VoC_sw32_d(RL6,0x405c)
0xFFC0E580,	//0x0572		VoC_NAD	|	VoC_return
		//0x0574		CII_DMAI_SYNCDATA
0x400F6E1C,	//0x0574		VoC_bnez16_d(no_sync_necessary,0x400f)
0x58FF0ACC,	//0x0576		VoC_lw16i(RL6_LO,0xd8ff)
0x60FF0ACD,	//0x0578		VoC_lw16i(RL6_HI,0xe0ff)
0x037C1FB0,	//0x057a		VoC_lw16i_set_inc(REG0,0x37c,0xfffffffc)
0x638A1809,	//0x057c		VoC_lw16i_set_inc(REG1,0x638a,0x2)
0x05832DBE,	//0x057e		VoC_loop_i(0x0,0xdf)
0x3737D9CF,	//0x0580		VoC_be32_rr(jpeg_sync_found,RL6,RL7)(lo)	|	VoC_lw32inc_p(RL7,REG1,DEFAULT)
0xDE000584,	//0x0582		VoC_inc_p(REG0,DEFAULT)	|	VoC_be32_rr(jpeg_sync_found,RL6,RL7)(hi)
		//0x0583		VoC_endloop0
		//0x0584		jpeg_sync_found
0x0B86F001,	//0x0584		VoC_sub32_dr(RL6,0x405c,REG01)(lo)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0x6436405C,	//0x0586		VoC_bnlt32_rd(no_dewrap_buf,RL6,0x4010)(lo)	|	VoC_sub32_dr(RL6,0x405c,REG01)(hi)
0x09364010,	//0x0588		VoC_add32_rd(RL6,RL6,0x4012)(lo)	|	VoC_bnlt32_rd(no_dewrap_buf,RL6,0x4010)(hi)
0x09B64012,	//0x058a		VoC_sub32_rd(RL6,RL6,0x4010)(lo)	|	VoC_add32_rd(RL6,RL6,0x4012)(hi)
0xFFC04010,	//0x058c		VoC_NOP	|	VoC_sub32_rd(RL6,RL6,0x4010)(hi)
		//0x058d		no_dewrap_buf
0x405C1586,	//0x058e		VoC_sw32_d(RL6,0x405c)
		//0x0590		no_sync_necessary
0xFFC0E580,	//0x0590		VoC_NAD	|	VoC_return
		//0x0592		CII_DMAI_WRITEDATA
0x26FF1404,	//0x0592		VoC_lw16_d(REG4,0x26ff)
0x400E1405,	//0x0594		VoC_lw16_d(REG5,0x400e)
0x05B63145,	//0x0596		VoC_bngtz16_r(image_width_unchanged,REG5)
0x05B634A5,	//0x0598		VoC_bngt16_rr(image_width_unchanged,REG4,REG5)
0xC32D60A4,	//0x059a		VoC_sub16_rr(REG5,REG4,REG5,IN_PARALLEL)	|	VoC_movreg16(REG4,REG5,DEFAULT)
0x7FFC1644,	//0x059c		VoC_and16_ri(REG4,0xfffc)
0xF686780D,	//0x059e		VoC_movreg16(REG6,REG4,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0x1,DEFAULT)
0xDF40780E,	//0x05a0		VoC_push32(REG01,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0x1,DEFAULT)
0x61EF07B6,	//0x05a2		VoC_sub16_rd(REG6,REG6,0x61ef)
0x102C1808,	//0x05a4		VoC_lw16i_set_inc(REG0,0x102c,0x2)
0x102C1809,	//0x05a6		VoC_lw16i_set_inc(REG1,0x102c,0x2)
0xF8FD4028,	//0x05a8		VoC_shr16_ri(REG5,0xffffffff,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0x05B12C21,	//0x05aa		VoC_loop_i(0x1,0x10)
0xD9C66783,	//0x05ac		VoC_lw32inc_p(RL6,REG0,IN_PARALLEL)	|	VoC_loop_r_short(REG6,DEFAULT)
0xDDCED9C6,	//0x05ae		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_lw32inc_p(RL6,REG0,DEFAULT)
		//0x05af		VoC_endloop0
0xDDCEC028,	//0x05b0		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
		//0x05b1		VoC_endloop1
0x7030DF00,	//0x05b2		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_pop32(REG01,DEFAULT)
0xFFC0F005,	//0x05b4		VoC_NAD	|	VoC_lw16i_short(INC1,0x1,IN_PARALLEL)
		//0x05b6		image_width_unchanged
0x67CA1504,	//0x05b6		VoC_sw16_d(REG4,0x67ca)
0x45A5F005,	//0x05b8		VoC_bne16_rd(rotation_required,REG5,0x400d)(lo)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x442F400D,	//0x05ba		VoC_bne16_rd(Decode_original_picture,REG7,0x61f3)(lo)	|	VoC_bne16_rd(rotation_required,REG5,0x400d)(hi)
0x0A8461F3,	//0x05bc		VoC_lw16i(REG4,0x50)(lo)	|	VoC_bne16_rd(Decode_original_picture,REG7,0x61f3)(hi)
0xE5C30050,	//0x05be		VoC_jump(DMA_begin)	|	VoC_lw16i(REG4,0x50)(hi)
		//0x05c0		Decode_original_picture
0x67CA1404,	//0x05c0		VoC_lw16_d(REG4,0x67ca)
		//0x05c2		DMA_begin
0x08160A85,	//0x05c2		VoC_lw16i(REG5,0x816)
0x1486F8EC,	//0x05c4		VoC_lw32_d(RL6,0x67c8)(lo)	|	VoC_shr16_ri(REG4,0xfffffffd,DEFAULT)
0x15C267C8,	//0x05c6		VoC_sw32_d(REG45,0xffc2)(lo)	|	VoC_lw32_d(RL6,0x67c8)(hi)
0x15C67FC2,	//0x05c8		VoC_sw32_d(RL6,0xffc4)(lo)	|	VoC_sw32_d(REG45,0xffc2)(hi)
0x70057FC4,	//0x05ca		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_sw32_d(RL6,0xffc4)(hi)
0xC996F9F4,	//0x05cc		VoC_add32_rr(RL6,RL6,REG45,DEFAULT)	|	VoC_shru16_ri(REG4,0xfffffffe,IN_PARALLEL)
0xFFC0DE80,	//0x05ce		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x05d0		VoC_cfg_lg(0x8,)
0x67C81586,	//0x05d2		VoC_sw32_d(RL6,0x67c8)
0xDF40E580,	//0x05d4		VoC_push32(REG01,DEFAULT)	|	VoC_return
		//0x05d5		rotation_required
0xDF43DF41,	//0x05d6		VoC_push32(REG67,DEFAULT)	|	VoC_push32(REG23,DEFAULT)
0xF045DF47,	//0x05d8		VoC_lw16i_short(REG5,0x2,DEFAULT)	|	VoC_push32(RL7,DEFAULT)
0x400D1404,	//0x05da		VoC_lw16_d(REG4,0x400d)
0x060435AC,	//0x05dc		VoC_bne16_rr(rotation_90_or_270_required,REG5,REG4)
0x67CA1406,	//0x05de		VoC_lw16_d(REG6,0x67ca)
0xFBDBF007,	//0x05e0		VoC_shr32_ri(REG67,0xfffffffb,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,DEFAULT)
0x67C80B9E,	//0x05e2		VoC_sub32_dr(RL6,0x67c8,REG67)
0x0A37FA23,	//0x05e4		VoC_multf32_rd(RL7,REG6,0x2700)(lo)	|	VoC_shr32_ri(REG67,0x4,DEFAULT)
0x15862700,	//0x05e6		VoC_sw32_d(RL6,0x67c8)(lo)	|	VoC_multf32_rd(RL7,REG6,0x2700)(hi)
0xC9BE67C8,	//0x05e8		VoC_add32_rr(RL6,RL6,RL7,DEFAULT)	|	VoC_sw32_d(RL6,0x67c8)(hi)
0x1FBDFBEB,	//0x05ea		VoC_lw16i_set_inc(REG1,0x102b,0xffffffff)(lo)	|	VoC_shr32_ri(REG67,0xfffffffd,DEFAULT)
0xC071102B,	//0x05ec		VoC_add16_rr(REG1,REG1,REG6,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x102b,0xffffffff)(hi)
0x102C1804,	//0x05ee		VoC_lw16i_set_inc(REG0,0x102c,0x1)
0x2C41FA33,	//0x05f0		VoC_loop_i(0x1,0x20)(lo)	|	VoC_shr32_ri(REG67,0x6,DEFAULT)
0xE78405F8,	//0x05f2		VoC_loop_r_short(REG6,DEFAULT)	|	VoC_loop_i(0x1,0x20)(hi)
0xD815D804,	//0x05f4		VoC_lw16_p(REG5,REG1,DEFAULT)	|	VoC_lw16_p(REG4,REG0,DEFAULT)
0xDC85DC94,	//0x05f6		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
		//0x05f7		VoC_endloop0
		//0x05f8		VoC_endloop1
0xFBDBFFC0,	//0x05f8		VoC_shr32_ri(REG67,0xfffffffb,DEFAULT)	|	VoC_NOP
0x08160A87,	//0x05fa		VoC_lw16i(REG7,0x816)
0x15C3FFC0,	//0x05fc		VoC_sw32_d(REG67,0xffc2)(lo)	|	VoC_NOP
0x15C67FC2,	//0x05fe		VoC_sw32_d(RL6,0xffc4)(lo)	|	VoC_sw32_d(REG67,0xffc2)(hi)
0x2B007FC4,	//0x0600		VoC_jump_lg(rotation_end)(lo)	|	VoC_sw32_d(RL6,0xffc4)(hi)
0xFFC00654,	//0x0602		VoC_NAD	|	VoC_jump_lg(rotation_end)(hi)
		//0x0604		rotation_90_or_270_required
0xE20C700D,	//0x0604		VoC_lw16i_short(RL6_LO,0x20,IN_PARALLEL)	|	VoC_lw16i_short(RL6_HI,0x0,DEFAULT)
0x140EF00F,	//0x0606		VoC_lw16_d(RL7_LO,0x2700)(lo)	|	VoC_lw16i_short(RL7_HI,0x0,DEFAULT)
0xFBFF2700,	//0x0608		VoC_shr32_ri(RL7,0xffffffff,DEFAULT)	|	VoC_lw16_d(RL7_LO,0x2700)(hi)
0x67CA1407,	//0x060a		VoC_lw16_d(REG7,0x67ca)
0xC5BEF226,	//0x060c		VoC_mult16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_lw16i_short(REG6,0x11,DEFAULT)
0x4186F020,	//0x060e		VoC_add16_rr(REG6,REG6,REG0,DEFAULT)	|	VoC_lw16i_short(REG0,0x1,DEFAULT)
0x0A81F6E4,	//0x0610		VoC_lw16i(REG1,0x102c)(lo)	|	VoC_movreg16(REG4,REG7,IN_PARALLEL)
0xF020102C,	//0x0612		VoC_lw16i_short(REG0,0x1,DEFAULT)	|	VoC_lw16i(REG1,0x102c)(hi)
0x400D4490,	//0x0614		VoC_bne16_rd(rotation_270,REG0,0x400d)
0x67C80BB6,	//0x0616		VoC_sub32_dr(RL6,0x67c8,RL6)
0xC4BAF1E2,	//0x0618		VoC_mult16_rr(REG2,REG2,REG7,DEFAULT)	|	VoC_lw16i_short(REG2,0xf,DEFAULT)
0x67C81586,	//0x061a		VoC_sw32_d(RL6,0x67c8)
0xE5CCC051,	//0x061c		VoC_jump(rotation_90_end)	|	VoC_add16_rr(REG1,REG1,REG2,DEFAULT)
		//0x061e		rotation_270
0x67C80936,	//0x061e		VoC_add32_rd(RL6,RL6,0x67c8)
0x67C80BBE,	//0x0620		VoC_sub32_dr(RL6,0x67c8,RL7)
0x67C81586,	//0x0622		VoC_sw32_d(RL6,0x67c8)
0xC079C241,	//0x0624		VoC_add16_rr(REG1,REG1,REG7,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG0,DEFAULT)
0xC2A4F002,	//0x0626		VoC_sub16_rr(REG4,REG2,REG4,DEFAULT)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0xC3C7C2B6,	//0x0628		VoC_sub16_rr(REG7,REG7,REG0,DEFAULT)	|	VoC_sub16_rr(REG6,REG2,REG6,DEFAULT)
		//0x0629		rotation_90_end
0x27201804,	//0x062a		VoC_lw16i_set_inc(REG0,0x2720,0x1)
0xF60370BC,	//0x062c		VoC_movreg16(REG3,REG0,IN_PARALLEL)	|	VoC_lw16i_short(WRAP0,0x5,DEFAULT)
0x5815F80B,	//0x062e		VoC_lw16_p(REG5,REG1,DEFAULT)	|	VoC_shr16_ri(REG3,0x1,DEFAULT)
0xFFC0C261,	//0x0630		VoC_NAD	|	VoC_sub16_rr(REG1,REG1,REG4,IN_PARALLEL)
0xC9BE6A04,	//0x0632		VoC_add32_rr(RL6,RL6,RL7,IN_PARALLEL)	|	VoC_loop_i_short(0x10,DEFAULT)
0xC2615815,	//0x0634		VoC_sub16_rr(REG1,REG1,REG4,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG1,DEFAULT)
		//0x0636		VoC_endloop0
0xF102DC85,	//0x0636		VoC_lw16i_short(REG2,0x8,DEFAULT)	|	VoC_sw16inc_p(REG5,REG0,DEFAULT)
0x15C1C071,	//0x0638		VoC_sw32_d(REG23,0xffc2)(lo)	|	VoC_add16_rr(REG1,REG1,REG6,DEFAULT)
0x15C67FC2,	//0x063a		VoC_sw32_d(RL6,0xffc4)(lo)	|	VoC_sw32_d(REG23,0xffc2)(hi)
0xE0037FC4,	//0x063c		VoC_movreg16(REG3,REG0,DEFAULT)	|	VoC_sw32_d(RL6,0xffc4)(hi)
		//0x063d		continue_dma_90
0x5815F80B,	//0x063e		VoC_lw16_p(REG5,REG1,DEFAULT)	|	VoC_shr16_ri(REG3,0x1,DEFAULT)
0xFFC0C261,	//0x0640		VoC_NAD	|	VoC_sub16_rr(REG1,REG1,REG4,IN_PARALLEL)
0xC9BE6A04,	//0x0642		VoC_add32_rr(RL6,RL6,RL7,IN_PARALLEL)	|	VoC_loop_i_short(0x10,DEFAULT)
0xC2615815,	//0x0644		VoC_sub16_rr(REG1,REG1,REG4,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG1,DEFAULT)
		//0x0646		VoC_endloop0
0xC071DC85,	//0x0646		VoC_add16_rr(REG1,REG1,REG6,DEFAULT)	|	VoC_sw16inc_p(REG5,REG0,DEFAULT)
0xFFC0DE80,	//0x0648		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x064a		VoC_cfg_lg(0x8,)
0x7FC215C1,	//0x064c		VoC_sw32_d(REG23,0xffc2)
0x7FC415C6,	//0x064e		VoC_sw32_d(RL6,0xffc4)
0x61EF07BF,	//0x0650		VoC_sub16_rd(REG7,REG7,0x61ef)
0x063D31C7,	//0x0652		VoC_bnez16_r(continue_dma_90,REG7)
		//0x0654		rotation_end
0xFFC0DE80,	//0x0654		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x0656		VoC_cfg_lg(0x8,)
0xDF03DF07,	//0x0658		VoC_pop32(REG67,DEFAULT)	|	VoC_pop32(RL7,DEFAULT)
0xF4045F01,	//0x065a		VoC_lw16i_short(WRAP0,0x0,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xF0055F00,	//0x065c		VoC_lw16i_short(INC1,0x1,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0xFFC0E580,	//0x065e		VoC_NAD	|	VoC_return
		//0x0660		CII_DMAI_WRITEISPDATA
0x01400A84,	//0x0660		VoC_lw16i(REG4,0x140)
0x32A40A85,	//0x0662		VoC_lw16i(REG5,0x32a4)
0x405C1486,	//0x0664		VoC_lw32_d(RL6,0x405c)
0x7FC215C2,	//0x0666		VoC_sw32_d(REG45,0xffc2)
0x7FC415C6,	//0x0668		VoC_sw32_d(RL6,0xffc4)
0xF9F47005,	//0x066a		VoC_shru16_ri(REG4,0xfffffffe,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0xDE80C996,	//0x066c		VoC_cfg(0x0)	|	VoC_add32_rr(RL6,RL6,REG45,DEFAULT)
0x1794FFC0,	//0x066e		VoC_cfg_lg(0x8,)(lo)	|	VoC_NOP
0x15860008,	//0x0670		VoC_sw32_d(RL6,0x67c8)(lo)	|	VoC_cfg_lg(0x8,)(hi)
0xE58067C8,	//0x0672		VoC_return	|	VoC_sw32_d(RL6,0x67c8)(hi)
		//0x0674		CII_storebuffer_intern
0xDF477050,	//0x0674		VoC_push32(RL7,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0x5D8C0A8A,	//0x0676		VoC_lw16i(ACC1_LO,0x5d8c)
0xFF447639,	//0x0678		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xfffffff1,DEFAULT)
0xE00E700C,	//0x067a		VoC_lw16i_short(RL7_LO,0x0,IN_PARALLEL)	|	VoC_lw16i_short(RL6_LO,0x0,DEFAULT)
0x00800A84,	//0x067c		VoC_lw16i(REG4,0x80)
0x06C22C10,	//0x067e		VoC_loop_i(0x0,0x8)
0x83050304,	//0x0680		VoC_add16inc_rp(REG5,REG4,REG0,IN_PARALLEL)	|	VoC_add16inc_rp(REG4,REG4,REG0,DEFAULT)
0xD8966089,	//0x0682		VoC_lw16inc_p(REG6,REG1,IN_PARALLEL)	|	VoC_movreg16(ACC0_HI,REG4,DEFAULT)
0xDFC06140,	//0x0684		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC1_LO,DEFAULT)
0xD8B77BCC,	//0x0686		VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff9,DEFAULT)
0x60AFD230,	//0x0688		VoC_movreg16(RL7_HI,REG5,DEFAULT)	|	VoC_bimac32inc_rp(REG67,REG0)
0x33C4FF26,	//0x068a		VoC_bnltz32_r(CII_StoreBuffer100,ACC0)(lo)	|	VoC_movreg32(RL6,ACC0,IN_PARALLEL)
0xFF44068E,	//0x068c		VoC_lw32z(ACC0,DEFAULT)	|	VoC_bnltz32_r(CII_StoreBuffer100,ACC0)(hi)
		//0x068e		CII_StoreBuffer100
0xFF346124,	//0x068e		VoC_movreg32(ACC0,RL6,IN_PARALLEL)	|	VoC_movreg16(REG4,ACC0_HI,DEFAULT)
0x7954D2B0,	//0x0690		VoC_shru16_ri(REG4,0xa,DEFAULT)	|	VoC_bimsu32inc_rp(REG67,REG0)
0x33C4FBCF,	//0x0692		VoC_bnltz32_r(CII_StoreBuffer106,ACC0)(lo)	|	VoC_shr32_ri(RL7,0xfffffff9,IN_PARALLEL)
0xFF440696,	//0x0694		VoC_lw32z(ACC0,DEFAULT)	|	VoC_bnltz32_r(CII_StoreBuffer106,ACC0)(hi)
		//0x0696		CII_StoreBuffer106
0xFF346125,	//0x0696		VoC_movreg32(ACC0,RL6,IN_PARALLEL)	|	VoC_movreg16(REG5,ACC0_HI,DEFAULT)
0x794DD230,	//0x0698		VoC_shru16_ri(REG5,0x9,DEFAULT)	|	VoC_bimac32inc_rp(REG67,REG0)
0x33C4F9D4,	//0x069a		VoC_bnltz32_r(CII_StoreBuffer101,ACC0)(lo)	|	VoC_shru16_ri(REG4,0xfffffffa,IN_PARALLEL)
0xFF44069E,	//0x069c		VoC_lw32z(ACC0,DEFAULT)	|	VoC_bnltz32_r(CII_StoreBuffer101,ACC0)(hi)
		//0x069e		CII_StoreBuffer101
0xF725646C,	//0x069e		VoC_movreg16(REG5,ACC0_HI,IN_PARALLEL)	|	VoC_or16_rr(REG4,REG5,DEFAULT)
0xF9556140,	//0x06a0		VoC_shru16_ri(REG5,0xa,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC1_LO,DEFAULT)
0xFF3C79DC,	//0x06a2		VoC_movreg32(ACC0,RL7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0xfffffffb,DEFAULT)
0xE46CD230,	//0x06a4		VoC_or16_rr(REG4,REG5,DEFAULT)	|	VoC_bimac32inc_rp(REG67,REG0)
0x06AA33C4,	//0x06a6		VoC_bnltz32_r(CII_StoreBuffer102,ACC0)
0xFFC0FF44,	//0x06a8		VoC_NAD	|	VoC_lw32z(ACC0,DEFAULT)
		//0x06aa		CII_StoreBuffer102
0xFF3C6125,	//0x06aa		VoC_movreg32(ACC0,RL7,IN_PARALLEL)	|	VoC_movreg16(REG5,ACC0_HI,DEFAULT)
0x7955D2B0,	//0x06ac		VoC_shru16_ri(REG5,0xa,DEFAULT)	|	VoC_bimsu32inc_rp(REG67,REG0)
0x33C4DCA4,	//0x06ae		VoC_bnltz32_r(CII_StoreBuffer108,ACC0)(lo)	|	VoC_sw16inc_p(REG4,REG2,IN_PARALLEL)
0xFF4406B2,	//0x06b0		VoC_lw32z(ACC0,DEFAULT)	|	VoC_bnltz32_r(CII_StoreBuffer108,ACC0)(hi)
		//0x06b2		CII_StoreBuffer108
0xFF3C6124,	//0x06b2		VoC_movreg32(ACC0,RL7,IN_PARALLEL)	|	VoC_movreg16(REG4,ACC0_HI,DEFAULT)
0x794CD230,	//0x06b4		VoC_shru16_ri(REG4,0x9,DEFAULT)	|	VoC_bimac32inc_rp(REG67,REG0)
0x33C4F9D5,	//0x06b6		VoC_bnltz32_r(CII_StoreBuffer110,ACC0)(lo)	|	VoC_shru16_ri(REG5,0xfffffffa,IN_PARALLEL)
0xFF4406BA,	//0x06b8		VoC_lw32z(ACC0,DEFAULT)	|	VoC_bnltz32_r(CII_StoreBuffer110,ACC0)(hi)
		//0x06ba		CII_StoreBuffer110
0xF725646C,	//0x06ba		VoC_movreg16(REG5,ACC0_HI,IN_PARALLEL)	|	VoC_or16_rr(REG4,REG5,DEFAULT)
0xF9DC7955,	//0x06bc		VoC_shru16_ri(REG4,0xfffffffb,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xa,DEFAULT)
0xDF80646C,	//0x06be		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_or16_rr(REG4,REG5,DEFAULT)
0x00800A84,	//0x06c0		VoC_lw16i(REG4,0x80)
		//0x06c2		VoC_endloop0
0xFF445CA4,	//0x06c2		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG2,DEFAULT)
0xDF077030,	//0x06c4		VoC_pop32(RL7,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x1,DEFAULT)
0xE580F019,	//0x06c6		VoC_return	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
		//0x06c8		CII_small_image
0x07022C10,	//0x06c8		VoC_loop_i(0x0,0x8)
0x5DA00084,	//0x06ca		VoC_add16inc_pd(REG4,REG0,0x5da0)
0xFA44E089,	//0x06cc		VoC_shr32_ri(ACC0,0x8,DEFAULT)	|	VoC_movreg16(ACC0_HI,REG4,DEFAULT)
0x1008FF26,	//0x06ce		VoC_mac32_pd(REG1,0x5d8c)(lo)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0x10185D8C,	//0x06d0		VoC_mac32_pd(REG3,0x5d8d)(lo)	|	VoC_mac32_pd(REG1,0x5d8c)(hi)
0xFFC05D8D,	//0x06d2		VoC_NOP	|	VoC_mac32_pd(REG3,0x5d8d)(hi)
0x06D833C4,	//0x06d4		VoC_bnltz32_r(CII_small_image100,ACC0)
0xFFC0FF44,	//0x06d6		VoC_NAD	|	VoC_lw32z(ACC0,DEFAULT)
		//0x06d8		CII_small_image100
0x5DA45424,	//0x06d8		VoC_bngt32_rd(CII_small_image103,ACC0,0x5da4)
0xE00977E8,	//0x06da		VoC_lw16i_short(ACC0_HI,0x0,IN_PARALLEL)	|	VoC_lw16i_short(ACC0_LO,0xffff,DEFAULT)
		//0x06dc		CII_small_image103
0xFF34E106,	//0x06dc		VoC_movreg32(ACC0,RL6,DEFAULT)	|	VoC_movreg16(REG6,ACC0_LO,DEFAULT)
0x5D8E1208,	//0x06de		VoC_msu32_pd(REG1,0x5d8e)
0x5D8F1218,	//0x06e0		VoC_msu32_pd(REG3,0x5d8f)
0x78001646,	//0x06e2		VoC_and16_ri(REG6,0xf800)
0x06E833C4,	//0x06e4		VoC_bnltz32_r(CII_small_image106,ACC0)
0xFFC0FF44,	//0x06e6		VoC_NAD	|	VoC_lw32z(ACC0,DEFAULT)
		//0x06e8		CII_small_image106
0x5DA45424,	//0x06e8		VoC_bngt32_rd(CII_small_image107,ACC0,0x5da4)
0xE00977E8,	//0x06ea		VoC_lw16i_short(ACC0_HI,0x0,IN_PARALLEL)	|	VoC_lw16i_short(ACC0_LO,0xffff,DEFAULT)
		//0x06ec		CII_small_image107
0x7F34E105,	//0x06ec		VoC_movreg32(ACC0,RL6,DEFAULT)	|	VoC_movreg16(REG5,ACC0_LO,DEFAULT)
0x1108F92D,	//0x06ee		VoC_mac32inc_pd(REG1,0x5d90)(lo)	|	VoC_shru16_ri(REG5,0x5,IN_PARALLEL)
0x11185D90,	//0x06f0		VoC_mac32inc_pd(REG3,0x5d91)(lo)	|	VoC_mac32inc_pd(REG1,0x5d90)(hi)
0x16055D91,	//0x06f2		VoC_and16_ri(REG5,0x7e0)(lo)	|	VoC_mac32inc_pd(REG3,0x5d91)(hi)
0x33C407E0,	//0x06f4		VoC_bnltz32_r(CII_small_image101,ACC0)(lo)	|	VoC_and16_ri(REG5,0x7e0)(hi)
0xFF4406F8,	//0x06f6		VoC_lw32z(ACC0,DEFAULT)	|	VoC_bnltz32_r(CII_small_image101,ACC0)(hi)
		//0x06f8		CII_small_image101
0x5DA45424,	//0x06f8		VoC_bngt32_rd(CII_small_image104,ACC0,0x5da4)
0xE00977E8,	//0x06fa		VoC_lw16i_short(ACC0_HI,0x0,IN_PARALLEL)	|	VoC_lw16i_short(ACC0_LO,0xffff,DEFAULT)
		//0x06fc		CII_small_image104
0xC1AE6107,	//0x06fc		VoC_add16_rr(REG6,REG6,REG5,IN_PARALLEL)	|	VoC_movreg16(REG7,ACC0_LO,DEFAULT)
0xFF44795F,	//0x06fe		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xb,DEFAULT)
0xFFC0C1F7,	//0x0700		VoC_NOP	|	VoC_add16_rr(REG7,REG7,REG6,DEFAULT)
		//0x0702		VoC_endloop0
0xE580DCA7,	//0x0702		VoC_return	|	VoC_sw16inc_p(REG7,REG2,DEFAULT)
		//0x0704		CII_StoreBuffer
0x5FC1DFE9,	//0x0704		VoC_push16(REG1,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x1805F401,	//0x0706		VoC_lw16i_set_inc(REG1,0xd9a,0x1)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0x18070D9A,	//0x0708		VoC_lw16i_set_inc(REG3,0xdda,0x1)(lo)	|	VoC_lw16i_set_inc(REG1,0xd9a,0x1)(hi)
0x18040DDA,	//0x070a		VoC_lw16i_set_inc(REG0,0xf2c,0x1)(lo)	|	VoC_lw16i_set_inc(REG3,0xdda,0x1)(hi)
0x14070F2C,	//0x070c		VoC_lw16_d(REG7,0xf28)(lo)	|	VoC_lw16i_set_inc(REG0,0xf2c,0x1)(hi)
0x442F0F28,	//0x070e		VoC_bne16_rd(StoreBuffer_begin,REG7,0x61f3)(lo)	|	VoC_lw16_d(REG7,0xf28)(hi)
0x2B0061F3,	//0x0710		VoC_jump_lg(small_image)(lo)	|	VoC_bne16_rd(StoreBuffer_begin,REG7,0x61f3)(hi)
0xFFC00765,	//0x0712		VoC_NAD	|	VoC_jump_lg(small_image)(hi)
		//0x0714		StoreBuffer_begin
0x07283187,	//0x0714		VoC_bez16_r(block_4,REG7)
0x26FC1407,	//0x0716		VoC_lw16_d(REG7,0x26fc)
0x5D9D4427,	//0x0718		VoC_bne16_rd(block_1,REG7,0x5d9d)
0xFFC0E5DE,	//0x071a		VoC_NAD	|	VoC_jump(row_select_case0)
		//0x071c		block_1
0x61EF4427,	//0x071c		VoC_bne16_rd(block_2,REG7,0x61ef)
0x07482B00,	//0x071e		VoC_jump_lg(row_select_case1)
		//0x0720		block_2
0x620A4427,	//0x0720		VoC_bne16_rd(block_3,REG7,0x620a)
0x07482B00,	//0x0722		VoC_jump_lg(row_select_case1)
		//0x0724		block_3
0x61F04427,	//0x0724		VoC_bne16_rd(block_4,REG7,0x61f0)
0xFFC0E5D2,	//0x0726		VoC_NAD	|	VoC_jump(row_select_case0)
		//0x0728		block_4
0x07342C11,	//0x0728		VoC_loop_i(0x1,0x8)
0x06742B80,	//0x072a		VoC_jal(CII_storebuffer_intern)
0x27020712,	//0x072c		VoC_add16_rd(REG2,REG2,0x2702)
0x61F00789,	//0x072e		VoC_sub16_rd(REG1,REG1,0x61f0)
0x61F0079B,	//0x0730		VoC_sub16_rd(REG3,REG3,0x61f0)
0x06742B80,	//0x0732		VoC_jal(CII_storebuffer_intern)
		//0x0734		VoC_endloop1
0x27020712,	//0x0734		VoC_add16_rd(REG2,REG2,0x2702)
0x076E2B00,	//0x0736		VoC_jump_lg(storeBuffer_end)
		//0x0738		row_select_case0
0x07442C09,	//0x0738		VoC_loop_i(0x1,0x4)
0x06742B80,	//0x073a		VoC_jal(CII_storebuffer_intern)
0x62180700,	//0x073c		VoC_add16_rd(REG0,REG0,0x6218)
0x27020712,	//0x073e		VoC_add16_rd(REG2,REG2,0x2702)
0x06742B80,	//0x0740		VoC_jal(CII_storebuffer_intern)
0x62180700,	//0x0742		VoC_add16_rd(REG0,REG0,0x6218)
		//0x0744		VoC_endloop1
0x27020712,	//0x0744		VoC_add16_rd(REG2,REG2,0x2702)
0x076E2B00,	//0x0746		VoC_jump_lg(storeBuffer_end)
		//0x0748		row_select_case1
0x07542C05,	//0x0748		VoC_loop_i(0x1,0x2)
0x06742B80,	//0x074a		VoC_jal(CII_storebuffer_intern)
0x62180700,	//0x074c		VoC_add16_rd(REG0,REG0,0x6218)
0x27020712,	//0x074e		VoC_add16_rd(REG2,REG2,0x2702)
0x06742B80,	//0x0750		VoC_jal(CII_storebuffer_intern)
0x62180700,	//0x0752		VoC_add16_rd(REG0,REG0,0x6218)
		//0x0754		VoC_endloop1
0x27020712,	//0x0754		VoC_add16_rd(REG2,REG2,0x2702)
0x07622C09,	//0x0756		VoC_loop_i(0x1,0x4)
0x06742B80,	//0x0758		VoC_jal(CII_storebuffer_intern)
0x27020712,	//0x075a		VoC_add16_rd(REG2,REG2,0x2702)
0x61F00789,	//0x075c		VoC_sub16_rd(REG1,REG1,0x61f0)
0x61F0079B,	//0x075e		VoC_sub16_rd(REG3,REG3,0x61f0)
0x06742B80,	//0x0760		VoC_jal(CII_storebuffer_intern)
		//0x0762		VoC_endloop1
0x27020712,	//0x0762		VoC_add16_rd(REG2,REG2,0x2702)
0xF050E5CA,	//0x0764		VoC_lw16i_short(INC0,0x2,DEFAULT)	|	VoC_jump(storeBuffer_end)
		//0x0765		small_image
0x076C2C11,	//0x0766		VoC_loop_i(0x1,0x8)
0x06C82B80,	//0x0768		VoC_jal(CII_small_image)
0x62B80712,	//0x076a		VoC_add16_rd(REG2,REG2,0x62b8)
		//0x076c		VoC_endloop1
0x61F10700,	//0x076c		VoC_add16_rd(REG0,REG0,0x61f1)
		//0x076e		storeBuffer_end
0xDFA9DF81,	//0x076e		VoC_pop16(RA,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x0F2B2004,	//0x0770		VoC_lw16d_set_inc(REG0,0xf2b,0x1)
0xDFE9E580,	//0x0772		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x0773		CII_DecodeMCUBlock
0x0C9A180A,	//0x0774		VoC_lw16i_set_inc(REG2,0xc9a,0x2)
0x1502FF44,	//0x0776		VoC_sw16_d(REG2,0xf29)(lo)	|	VoC_lw32z(ACC0,DEFAULT)
0x2D800F29,	//0x0778		VoC_loop_i(0x0,0xc0)(lo)	|	VoC_sw16_d(REG2,0xf29)(hi)
0xDDD4077B,	//0x077a		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_loop_i(0x0,0xc0)(hi)
		//0x077b		VoC_endloop0
0x0FB40A83,	//0x077c		VoC_lw16i(REG3,0xfb4)
0x0FAC0A82,	//0x077e		VoC_lw16i(REG2,0xfac)
0x0F340A85,	//0x0780		VoC_lw16i(REG5,0xf34)
0x0F2C0A84,	//0x0782		VoC_lw16i(REG4,0xf2c)
0xDFC2DFC3,	//0x0784		VoC_push16(REG2,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0xFF415FC5,	//0x0786		VoC_lw32z(REG23,IN_PARALLEL)	|	VoC_push16(REG5,DEFAULT)
		//0x0788		Y_IDCT_START
0x0F240A85,	//0x0788		VoC_lw16i(REG5,0xf24)
0xDFC4DFC3,	//0x078a		VoC_push16(REG4,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0xE0227003,	//0x078c		VoC_lw16i_short(REG2,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0x262E0A84,	//0x078e		VoC_lw16i(REG4,0x262e)
0x080A2B80,	//0x0790		VoC_jal(CII_HufBlock)
0x003F1603,	//0x0792		VoC_and16_ri(REG3,0x3f)
0xDF40DF47,	//0x0794		VoC_push32(REG01,DEFAULT)	|	VoC_push32(RL7,DEFAULT)
0x079C31C3,	//0x0796		VoC_bnez16_r(Y_IDCT_44_C,REG3)
0x09382B80,	//0x0798		VoC_jal(CII_IDCT_11_C)
0xFFC0E5CA,	//0x079a		VoC_NAD	|	VoC_jump(Y_IDCT_end)
		//0x079c		Y_IDCT_44_C
0x61F54C33,	//0x079c		VoC_bnlt16_rd(Y_IDCT_88_C,REG3,0x61f5)
0x09422B80,	//0x079e		VoC_jal(CII_IDCT_44_C)
0xFFC0E5C4,	//0x07a0		VoC_NAD	|	VoC_jump(Y_IDCT_end)
		//0x07a2		Y_IDCT_88_C
0x09582B80,	//0x07a2		VoC_jal(CII_IDCT_88_C)
		//0x07a4		Y_IDCT_end
0x200ADF00,	//0x07a4		VoC_lw16d_set_inc(REG2,0xf29,0x2)(lo)	|	VoC_pop32(REG01,DEFAULT)
0x70300F29,	//0x07a6		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_lw16d_set_inc(REG2,0xf29,0x2)(hi)
0x7053DF83,	//0x07a8		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_pop16(REG3,IN_PARALLEL)
0xFFC0D9D4,	//0x07aa		VoC_NAD	|	VoC_lw32inc_p(ACC0,REG2,IN_PARALLEL)
0x07B22C11,	//0x07ac		VoC_loop_i(0x1,0x8)
0x07B12C08,	//0x07ae		VoC_loop_i(0x0,0x4)
0xDDDCD9D4,	//0x07b0		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
		//0x07b1		VoC_endloop0
		//0x07b2		VoC_endloop1
0x61F0071B,	//0x07b2		VoC_add16_rd(REG3,REG3,0x61f0)
0xDF075F83,	//0x07b4		VoC_pop32(RL7,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0x0F291402,	//0x07b6		VoC_lw16_d(REG2,0xf29)
0x5D9C0712,	//0x07b8		VoC_add16_rd(REG2,REG2,0x5d9c)
0x1502F033,	//0x07ba		VoC_sw16_d(REG2,0xf29)(lo)	|	VoC_lw16i_short(INC3,0x1,DEFAULT)
0x4C3B0F29,	//0x07bc		VoC_bnlt16_rd(U_IDCT_START,REG3,0x61f4)(lo)	|	VoC_sw16_d(REG2,0xf29)(hi)
0x5E1861F4,	//0x07be		VoC_inc_p(REG3,DEFAULT)	|	VoC_bnlt16_rd(U_IDCT_START,REG3,0x61f4)(hi)
0x2B00DF84,	//0x07c0		VoC_jump_lg(Y_IDCT_START)(lo)	|	VoC_pop16(REG4,IN_PARALLEL)
0xFFC00788,	//0x07c2		VoC_NAD	|	VoC_jump_lg(Y_IDCT_START)(hi)
		//0x07c4		U_IDCT_START
0xE0327023,	//0x07c4		VoC_lw16i_short(REG2,0x3,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x1,DEFAULT)
0x0F250A85,	//0x07c6		VoC_lw16i(REG5,0xf25)
0x266E0A84,	//0x07c8		VoC_lw16i(REG4,0x266e)
0x080A2B80,	//0x07ca		VoC_jal(CII_HufBlock)
0x003F1603,	//0x07cc		VoC_and16_ri(REG3,0x3f)
0xDF40DF47,	//0x07ce		VoC_push32(REG01,DEFAULT)	|	VoC_push32(RL7,DEFAULT)
0x07D631C3,	//0x07d0		VoC_bnez16_r(U_IDCT_44_C,REG3)
0x09382B80,	//0x07d2		VoC_jal(CII_IDCT_11_C)
0xFFC0E5CA,	//0x07d4		VoC_NAD	|	VoC_jump(U_IDCT_END)
		//0x07d6		U_IDCT_44_C
0x61F54C33,	//0x07d6		VoC_bnlt16_rd(U_IDCT_88_C,REG3,0x61f5)
0x09422B80,	//0x07d8		VoC_jal(CII_IDCT_44_C)
0xFFC0E5C4,	//0x07da		VoC_NAD	|	VoC_jump(U_IDCT_END)
		//0x07dc		U_IDCT_88_C
0x09582B80,	//0x07dc		VoC_jal(CII_IDCT_88_C)
		//0x07de		U_IDCT_END
0x1402DF00,	//0x07de		VoC_lw16_d(REG2,0xf29)(lo)	|	VoC_pop32(REG01,DEFAULT)
0x07120F29,	//0x07e0		VoC_add16_rd(REG2,REG2,0x5d9c)(lo)	|	VoC_lw16_d(REG2,0xf29)(hi)
0x5F075D9C,	//0x07e2		VoC_pop32(RL7,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0x5d9c)(hi)
0x1502F004,	//0x07e4		VoC_sw16_d(REG2,0xf29)(lo)	|	VoC_lw16i_short(INC0,0x1,IN_PARALLEL)
0x70230F29,	//0x07e6		VoC_lw16i_short(REG3,0x1,DEFAULT)	|	VoC_sw16_d(REG2,0xf29)(hi)
0x0A85E032,	//0x07e8		VoC_lw16i(REG5,0xf26)(lo)	|	VoC_lw16i_short(REG2,0x3,IN_PARALLEL)
0x0A840F26,	//0x07ea		VoC_lw16i(REG4,0x266e)(lo)	|	VoC_lw16i(REG5,0xf26)(hi)
0xFFC0266E,	//0x07ec		VoC_NAD	|	VoC_lw16i(REG4,0x266e)(hi)
0x080A2B80,	//0x07ee		VoC_jal(CII_HufBlock)
0x0F2B1500,	//0x07f0		VoC_sw16_d(REG0,0xf2b)
0x003F1603,	//0x07f2		VoC_and16_ri(REG3,0x3f)
0xDFC15F47,	//0x07f4		VoC_push16(REG1,IN_PARALLEL)	|	VoC_push32(RL7,DEFAULT)
0x07FC31C3,	//0x07f6		VoC_bnez16_r(V_IDCT_44_C,REG3)
0x09382B80,	//0x07f8		VoC_jal(CII_IDCT_11_C)
0xFFC0E5CA,	//0x07fa		VoC_NAD	|	VoC_jump(V_IDCT_END)
		//0x07fc		V_IDCT_44_C
0x61F54C33,	//0x07fc		VoC_bnlt16_rd(V_IDCT_88_C,REG3,0x61f5)
0x09422B80,	//0x07fe		VoC_jal(CII_IDCT_44_C)
0xFFC0E5C4,	//0x0800		VoC_NAD	|	VoC_jump(V_IDCT_END)
		//0x0802		V_IDCT_88_C
0x09582B80,	//0x0802		VoC_jal(CII_IDCT_88_C)
		//0x0804		V_IDCT_END
0xDF075F81,	//0x0804		VoC_pop32(RL7,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xF030DFA9,	//0x0806		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x0808		VoC_NAD	|	VoC_return
		//0x080a		CII_HufBlock
0xF0065FE9,	//0x080a		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xDFC25F42,	//0x080c		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0x5D9E1484,	//0x080e		VoC_lw32_d(ACC0,0x5d9e)
0x083431C3,	//0x0810		VoC_bnez16_r(DecodeChromDc_CASE,REG3)
0x61F04C21,	//0x0812		VoC_bnlt16_rd(DecodeLumDc_100,REG1,0x61f0)
0x090E2B80,	//0x0814		VoC_jal(CII_ReadByte)
		//0x0816		DecodeLumDc_100
0x078FFF3A,	//0x0816		VoC_sub16_rd(REG7,REG1,0x61f0)(lo)	|	VoC_movreg32(REG45,RL7,DEFAULT)
0x7EBA61F0,	//0x0818		VoC_shr32_rr(REG45,REG7,DEFAULT)	|	VoC_sub16_rd(REG7,REG1,0x61f0)(hi)
0x1604FF46,	//0x081a		VoC_and16_ri(REG4,0xff)(lo)	|	VoC_lw32z(RL6,IN_PARALLEL)
0xE08500FF,	//0x081c		VoC_movreg16(REG5,REG4,DEFAULT)	|	VoC_and16_ri(REG4,0xff)(hi)
0x0A82F925,	//0x081e		VoC_lw16i(REG2,0x5dae)(lo)	|	VoC_shru16_ri(REG5,0x4,DEFAULT)
0x0A865DAE,	//0x0820		VoC_lw16i(REG6,0xf0)(lo)	|	VoC_lw16i(REG2,0x5dae)(hi)
0x343400F0,	//0x0822		VoC_bgt16_rr(DecodeLumDc_101,REG6,REG4)(lo)	|	VoC_lw16i(REG6,0xf0)(hi)
0xC3350828,	//0x0824		VoC_sub16_rr(REG5,REG4,REG6,DEFAULT)	|	VoC_bgt16_rr(DecodeLumDc_101,REG6,REG4)(hi)
0x5DBE0A82,	//0x0826		VoC_lw16i(REG2,0x5dbe)
		//0x0828		DecodeLumDc_101
0xFFC0C0AA,	//0x0828		VoC_NOP	|	VoC_add16_rr(REG2,REG2,REG5,DEFAULT)
0xE2A2E242,	//0x082a		VoC_rbinc_i(REG6,0x8,DEFAULT)	|	VoC_lbinc_p(REG2)
0xC261E2A0,	//0x082c		VoC_sub16_rr(REG1,REG1,REG4,DEFAULT)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0x085631C6,	//0x082e		VoC_bnez16_r(DecodeDc_100,REG6)
0x2B00F004,	//0x0830		VoC_jump_lg(HufBlock_100)(lo)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0xFFC0086C,	//0x0832		VoC_NAD	|	VoC_jump_lg(HufBlock_100)(hi)
		//0x0834		DecodeChromDc_CASE
		//0x0834		DecodeChromDc_CIRCLE
0x61F54C29,	//0x0834		VoC_bnlt16_rd(DecodeChromDc_100,REG1,0x61f5)
0x090E2B80,	//0x0836		VoC_jal(CII_ReadByte)
0xFF3AE5FC,	//0x0838		VoC_movreg32(REG45,RL7,DEFAULT)	|	VoC_jump(DecodeChromDc_CIRCLE)
		//0x0839		DecodeChromDc_100
0x61F5078F,	//0x083a		VoC_sub16_rd(REG7,REG1,0x61f5)
0xFF467EBA,	//0x083c		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_shr32_rr(REG45,REG7,DEFAULT)
0x03FF1604,	//0x083e		VoC_and16_ri(REG4,0x3ff)
0xF92DE085,	//0x0840		VoC_shru16_ri(REG5,0x5,DEFAULT)	|	VoC_movreg16(REG5,REG4,DEFAULT)
0x5DCE0A82,	//0x0842		VoC_lw16i(REG2,0x5dce)
0x03E00A86,	//0x0844		VoC_lw16i(REG6,0x3e0)
0x084B3434,	//0x0846		VoC_bgt16_rr(DecodeChromDc_101,REG6,REG4)
0x0A82C335,	//0x0848		VoC_lw16i(REG2,0x5dee)(lo)	|	VoC_sub16_rr(REG5,REG4,REG6,DEFAULT)
0xC0AA5DEE,	//0x084a		VoC_add16_rr(REG2,REG2,REG5,DEFAULT)	|	VoC_lw16i(REG2,0x5dee)(hi)
		//0x084b		DecodeChromDc_101
0xE242FFC0,	//0x084c		VoC_lbinc_p(REG2)	|	VoC_NOP
0xE2A0E2A2,	//0x084e		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_rbinc_i(REG6,0x8,DEFAULT)
0x31C6C261,	//0x0850		VoC_bnez16_r(DecodeDc_100,REG6)(lo)	|	VoC_sub16_rr(REG1,REG1,REG4,DEFAULT)
0xF0040856,	//0x0852		VoC_lw16i_short(REG4,0x0,DEFAULT)	|	VoC_bnez16_r(DecodeDc_100,REG6)(hi)
0xFFC0E5D8,	//0x0854		VoC_NAD	|	VoC_jump(HufBlock_100)
		//0x0856		DecodeDc_100
0x085C34B1,	//0x0856		VoC_bngt16_rr(DecodeDc_101,REG6,REG1)
		//0x0858		DecodeDc_CIRCLE0
0x090E2B80,	//0x0858		VoC_jal(CII_ReadByte)
0x08583439,	//0x085a		VoC_bgt16_rr(DecodeDc_CIRCLE0,REG7,REG1)
		//0x085c		DecodeDc_101
0x624B0B34,	//0x085c		VoC_sub16_dr(REG4,0x624b,REG6)
0xC2717F3D,	//0x085e		VoC_sub16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_movreg32(ACC1,RL7,DEFAULT)
0xFEE47E8D,	//0x0860		VoC_shru32_rr(ACC0,REG4,IN_PARALLEL)	|	VoC_shr32_rr(ACC1,REG1,DEFAULT)
0x07B6E4E5,	//0x0862		VoC_sub16_rd(REG6,REG6,0x61ef)(lo)	|	VoC_and32_rr(ACC1,ACC0,DEFAULT)
0x7F2E61EF,	//0x0864		VoC_movreg32(RL6,ACC1,DEFAULT)	|	VoC_sub16_rd(REG6,REG6,0x61ef)(hi)
0x092DFEF5,	//0x0866		VoC_add32_rd(ACC1,ACC1,0x5d9e)(lo)	|	VoC_shru32_rr(ACC1,REG6,IN_PARALLEL)
0xFEE55D9E,	//0x0868		VoC_shru32_rr(ACC1,REG4,DEFAULT)	|	VoC_add32_rd(ACC1,ACC1,0x5d9e)(hi)
0xFFC0CBAB,	//0x086a		VoC_NAD	|	VoC_sub32_rr(REG67,RL6,ACC1,DEFAULT)
		//0x086c		HufBlock_100
0xDF855F01,	//0x086c		VoC_pop16(REG5,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0x0F291407,	//0x086e		VoC_lw16_d(REG7,0xf29)
0x7F0E819E,	//0x0870		VoC_movreg32(RL6,REG23,DEFAULT)	|	VoC_add16_rp(REG6,REG6,REG3,DEFAULT)
0xDC368994,	//0x0872		VoC_sw16_p(REG6,REG3,DEFAULT)	|	VoC_mult16_rp(REG4,REG6,REG2,IN_PARALLEL)
0xF6A27023,	//0x0874		VoC_movreg16(REG2,REG5,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x1,DEFAULT)
0xF0075C74,	//0x0876		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_sw16_p(REG4,REG7,DEFAULT)
		//0x0878		HufBlock_101
0xE0275F41,	//0x0878		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xE1065F46,	//0x087a		VoC_lw16i_short(REG6,0x10,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0x08B03597,	//0x087c		VoC_bne16_rr(DecodeChromAc_CASE,REG2,REG7)
		//0x087e		DecodeLumAc_CIRCLE
0x088434B1,	//0x087e		VoC_bngt16_rr(DecodeLumAc_100,REG6,REG1)
0x090E2B80,	//0x0880		VoC_jal(CII_ReadByte)
0xFFC0E5FC,	//0x0882		VoC_NOP	|	VoC_jump(DecodeLumAc_CIRCLE)
		//0x0884		DecodeLumAc_100
0xFF3A4277,	//0x0884		VoC_movreg32(REG45,RL7,IN_PARALLEL)	|	VoC_sub16_rr(REG7,REG1,REG6,DEFAULT)
0xF005FEBA,	//0x0886		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_shr32_rr(REG45,REG7,DEFAULT)
0x5DA66082,	//0x0888		VoC_blt32_rd(DecodeLumAc_101,REG45,0x5da6)
0xFF467BFA,	//0x088a		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_shr32_ri(REG45,0xffffffff,DEFAULT)
0x63740911,	//0x088c		VoC_add32_rd(REG23,REG45,0x6374)
0xFFC0E5D7,	//0x088e		VoC_NOP	|	VoC_jump(DecodeLumAc_104)
		//0x0890		DecodeLumAc_101
0x5DA86082,	//0x0890		VoC_blt32_rd(DecodeLumAc_102,REG45,0x5da8)
0x7BFAFA22,	//0x0892		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_shr32_ri(REG45,0x4,DEFAULT)
0x0911FF46,	//0x0894		VoC_add32_rd(REG23,REG45,0x6372)(lo)	|	VoC_lw32z(RL6,IN_PARALLEL)
0xE5CE6372,	//0x0896		VoC_jump(DecodeLumAc_104)	|	VoC_add32_rd(REG23,REG45,0x6372)(hi)
		//0x0898		DecodeLumAc_102
0x5DAA6082,	//0x0898		VoC_blt32_rd(DecodeLumAc_103,REG45,0x5daa)
0x7BFAFA3A,	//0x089a		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_shr32_ri(REG45,0x7,DEFAULT)
0x0911FF46,	//0x089c		VoC_add32_rd(REG23,REG45,0x6370)(lo)	|	VoC_lw32z(RL6,IN_PARALLEL)
0xE5C66370,	//0x089e		VoC_jump(DecodeLumAc_104)	|	VoC_add32_rd(REG23,REG45,0x6370)(hi)
		//0x08a0		DecodeLumAc_103
0xFBFAFA5A,	//0x08a0		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_shr32_ri(REG45,0xb,DEFAULT)
0x636E0911,	//0x08a2		VoC_add32_rd(REG23,REG45,0x636e)
0xE242FF46,	//0x08a4		VoC_lbinc_p(REG2)	|	VoC_lw32z(RL6,DEFAULT)
		//0x08a5		DecodeLumAc_104
0x62A2E2A3,	//0x08a6		VoC_rbinc_i(REG6,0x8,DEFAULT)	|	VoC_rbinc_i(REG7,0x8,DEFAULT)
0x31C68451,	//0x08a8		VoC_bnez16_r(DecodeAc_100,REG6)(lo)	|	VoC_sub16_rp(REG1,REG1,REG2,IN_PARALLEL)
0x700808E2,	//0x08aa		VoC_lw16i_short(ACC0_LO,0x0,DEFAULT)	|	VoC_bnez16_r(DecodeAc_100,REG6)(hi)
0xDF01DF02,	//0x08ac		VoC_pop32(REG23,DEFAULT)	|	VoC_pop32(REG45,IN_PARALLEL)
0x08F82B00,	//0x08ae		VoC_jump_lg(HufBlock_102)
		//0x08b0		DecodeChromAc_CASE
		//0x08b0		DecodeChromAc_CIRCLE
0x61F14C31,	//0x08b0		VoC_bnlt16_rd(DecodeChromAc_100,REG1,0x61f1)
0x090E2B80,	//0x08b2		VoC_jal(CII_ReadByte)
0xFFC0E5FC,	//0x08b4		VoC_NAD	|	VoC_jump(DecodeChromAc_CIRCLE)
		//0x08b6		DecodeChromAc_100
0xFF3A4277,	//0x08b6		VoC_movreg32(REG45,RL7,IN_PARALLEL)	|	VoC_sub16_rr(REG7,REG1,REG6,DEFAULT)
0xF005FEBA,	//0x08b8		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_shr32_rr(REG45,REG7,DEFAULT)
0x5DA66082,	//0x08ba		VoC_blt32_rd(DecodeChromAc_101,REG45,0x5da6)
0xFF467BFA,	//0x08bc		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_shr32_ri(REG45,0xffffffff,DEFAULT)
0x637C0911,	//0x08be		VoC_add32_rd(REG23,REG45,0x637c)
0xFFC0E5D7,	//0x08c0		VoC_NOP	|	VoC_jump(DecodeChromAc_104)
		//0x08c2		DecodeChromAc_101
0x5DA86082,	//0x08c2		VoC_blt32_rd(DecodeChromAc_102,REG45,0x5da8)
0x7BFAFA22,	//0x08c4		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_shr32_ri(REG45,0x4,DEFAULT)
0x0911FF46,	//0x08c6		VoC_add32_rd(REG23,REG45,0x637a)(lo)	|	VoC_lw32z(RL6,IN_PARALLEL)
0xE5CE637A,	//0x08c8		VoC_jump(DecodeChromAc_104)	|	VoC_add32_rd(REG23,REG45,0x637a)(hi)
		//0x08ca		DecodeChromAc_102
0x5DAC6082,	//0x08ca		VoC_blt32_rd(DecodeChromAc_103,REG45,0x5dac)
0x7BFAFA3A,	//0x08cc		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_shr32_ri(REG45,0x7,DEFAULT)
0x0911FF46,	//0x08ce		VoC_add32_rd(REG23,REG45,0x6378)(lo)	|	VoC_lw32z(RL6,IN_PARALLEL)
0xE5C66378,	//0x08d0		VoC_jump(DecodeChromAc_104)	|	VoC_add32_rd(REG23,REG45,0x6378)(hi)
		//0x08d2		DecodeChromAc_103
0xFBFAFA5A,	//0x08d2		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_shr32_ri(REG45,0xb,DEFAULT)
0x63760911,	//0x08d4		VoC_add32_rd(REG23,REG45,0x6376)
0xE242FF46,	//0x08d6		VoC_lbinc_p(REG2)	|	VoC_lw32z(RL6,DEFAULT)
		//0x08d7		DecodeChromAc_104
0x62A2E2A3,	//0x08d8		VoC_rbinc_i(REG6,0x8,DEFAULT)	|	VoC_rbinc_i(REG7,0x8,DEFAULT)
0x31C68451,	//0x08da		VoC_bnez16_r(DecodeAc_100,REG6)(lo)	|	VoC_sub16_rp(REG1,REG1,REG2,IN_PARALLEL)
0x700808E2,	//0x08dc		VoC_lw16i_short(ACC0_LO,0x0,DEFAULT)	|	VoC_bnez16_r(DecodeAc_100,REG6)(hi)
0xDF01DF02,	//0x08de		VoC_pop32(REG23,DEFAULT)	|	VoC_pop32(REG45,IN_PARALLEL)
0xFFC0E5D8,	//0x08e0		VoC_NAD	|	VoC_jump(HufBlock_102)
		//0x08e2		DecodeAc_100
0x08E834B1,	//0x08e2		VoC_bngt16_rr(DecodeAc_101,REG6,REG1)
0x090E2B80,	//0x08e4		VoC_jal(CII_ReadByte)
0xFFC0E5FC,	//0x08e6		VoC_NAD	|	VoC_jump(DecodeAc_100)
		//0x08e8		DecodeAc_101
0xFF3E603B,	//0x08e8		VoC_movreg32(RL6,RL7,IN_PARALLEL)	|	VoC_movreg16(BITCACHE,REG1,DEFAULT)
0xE2027005,	//0x08ea		VoC_lw16i_short(REG2,0x20,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0xC2716370,	//0x08ec		VoC_sub16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_rb_r(REG4,REG6,DEFAULT)
0xFDFA7F14,	//0x08ee		VoC_shru32_ri(REG45,0xffffffff,IN_PARALLEL)	|	VoC_movreg32(ACC0,REG45,DEFAULT)
0xC2B27EF2,	//0x08f0		VoC_sub16_rr(REG2,REG2,REG6,IN_PARALLEL)	|	VoC_shru32_rr(REG45,REG6,DEFAULT)
0x5D9E0915,	//0x08f2		VoC_add32_rd(ACC1,REG45,0x5d9e)
0xDF027ED5,	//0x08f4		VoC_pop32(REG45,IN_PARALLEL)	|	VoC_shru32_rr(ACC1,REG2,DEFAULT)
0xDF014B2C,	//0x08f6		VoC_pop32(REG23,IN_PARALLEL)	|	VoC_sub32_rr(ACC0,ACC0,ACC1,DEFAULT)
		//0x08f8		HufBlock_102
0xF70640FB,	//0x08f8		VoC_movreg16(REG6,ACC0_LO,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG7,DEFAULT)
0x090B3303,	//0x08fa		VoC_bez32_r(HufBlock_103,REG67)
0xFF16411F,	//0x08fc		VoC_movreg32(RL6,REG45,IN_PARALLEL)	|	VoC_add16_rr(REG7,REG4,REG3,DEFAULT)
0x637E071F,	//0x08fe		VoC_add16_rd(REG7,REG3,0x637e)
0xF40309BE,	//0x0900		VoC_lw16i_short(BITCACHE,0x0,IN_PARALLEL)	|	VoC_mult16_rp(REG6,REG6,REG7,DEFAULT)
0x0F29003F,	//0x0902		VoC_add16_pd(REG7,REG7,0xf29)
0x622D4C33,	//0x0904		VoC_bnlt16_rd(HufBlock_113,REG3,0x622d)
0xDE185C76,	//0x0906		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_sw16_p(REG6,REG7,DEFAULT)
0x08782B00,	//0x0908		VoC_jump_lg(HufBlock_101)
		//0x090a		HufBlock_113
0xDFA9DC76,	//0x090a		VoC_pop16(RA,DEFAULT)	|	VoC_sw16_p(REG6,REG7,DEFAULT)
		//0x090b		HufBlock_103
0xE580F01B,	//0x090c		VoC_return	|	VoC_lw16i_short(BITCACHE,0x0,DEFAULT)
		//0x090e		CII_ReadByte
0x0A82FF46,	//0x090e		VoC_lw16i(REG2,0x6388)(lo)	|	VoC_lw32z(RL6,DEFAULT)
0x42146388,	//0x0910		VoC_sub16_rr(REG4,REG0,REG2,DEFAULT)	|	VoC_lw16i(REG2,0x6388)(hi)
0x488CF403,	//0x0912		VoC_blt16_rd(ReadByte_begin,REG4,0x637f)(lo)	|	VoC_lw16i_short(BITCACHE,0x0,IN_PARALLEL)
0xDFE9637F,	//0x0914		VoC_push16(RA,DEFAULT)	|	VoC_blt16_rd(ReadByte_begin,REG4,0x637f)(hi)
0x053E2B80,	//0x0916		VoC_jal(CII_DMAI_READDATA)
0x63880A80,	//0x0918		VoC_lw16i(REG0,0x6388)
0xFFC0DFA9,	//0x091a		VoC_NAD	|	VoC_pop16(RA,DEFAULT)
		//0x091c		ReadByte_begin
0x262C1404,	//0x091c		VoC_lw16_d(REG4,0x262c)
0x7022E240,	//0x091e		VoC_lw16i_short(REG2,0x1,DEFAULT)	|	VoC_lbinc_p(REG0)
0x443CEF83,	//0x0920		VoC_bne16_rd(ReadByte_100,REG4,0x61ef)(lo)	|	VoC_lw16i_short(REG3,0xfffffff8,IN_PARALLEL)
0xE28061EF,	//0x0922		VoC_rbinc_i(REG4,0x10,DEFAULT)	|	VoC_bne16_rd(ReadByte_100,REG4,0x61ef)(hi)
0x61EC40B4,	//0x0924		VoC_be16_rd(ReadByte_1022,REG4,0x61ec)
0xE5CBF002,	//0x0926		VoC_jump(ReadByte_1022)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
		//0x0928		ReadByte_100
0xE2A1E2A0,	//0x0928		VoC_rbinc_i(REG5,0x8,DEFAULT)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0x61EC4424,	//0x092a		VoC_bne16_rd(ReadByte_101,REG4,0x61ec)
0xE5C7E08C,	//0x092c		VoC_jump(ReadByte_102)	|	VoC_movreg16(RL6_LO,REG4,DEFAULT)
		//0x092e		ReadByte_101
0x442DF603,	//0x092e		VoC_bne16_rd(ReadByte_102,REG5,0x61ec)(lo)	|	VoC_lw16i_short(REG3,0xfffffff0,DEFAULT)
0xFFC061EC,	//0x0930		VoC_NAD	|	VoC_bne16_rd(ReadByte_102,REG5,0x61ec)(hi)
		//0x0932		ReadByte_1022
0x262C1502,	//0x0932		VoC_sw16_d(REG2,0x262c)
		//0x0934		ReadByte_102
0xFEDFC259,	//0x0934		VoC_shru32_rr(RL7,REG3,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG3,DEFAULT)
0xE580E537,	//0x0936		VoC_return	|	VoC_or32_rr(RL7,RL6,DEFAULT)
		//0x0938		CII_IDCT_11_C
0x0F291401,	//0x0938		VoC_lw16_d(REG1,0xf29)
0x808AF082,	//0x093a		VoC_add16_rp(REG2,REG2,REG1,DEFAULT)	|	VoC_lw16i_short(REG2,0x4,DEFAULT)
0xF83AF8E2,	//0x093c		VoC_shr16_ri(REG2,0x7,DEFAULT)	|	VoC_shr16_ri(REG2,0xfffffffc,DEFAULT)
0xEC01E043,	//0x093e		VoC_loop_i_short(0x20,DEFAULT)	|	VoC_movreg16(REG3,REG2,DEFAULT)
		//0x0940		VoC_endloop0
0xE580DDC9,	//0x0940		VoC_return	|	VoC_sw32inc_p(REG23,REG1,DEFAULT)
		//0x0942		CII_IDCT_44_C
0x77F3DFE9,	//0x0942		VoC_lw16i_short(INC3,0xffffffff,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x2009F401,	//0x0944		VoC_lw16d_set_inc(REG1,0xf29,0x2)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xFFC00F29,	//0x0946		VoC_NAD	|	VoC_lw16d_set_inc(REG1,0xf29,0x2)(hi)
0x094C2C09,	//0x0948		VoC_loop_i(0x1,0x4)
0x0A7D2B80,	//0x094a		VoC_jal(CII_idctrow4)
		//0x094c		VoC_endloop1
0x2021FFC0,	//0x094c		VoC_lw16d_set_inc(REG1,0xf29,0x8)(lo)	|	VoC_NAD
0xFFC00F29,	//0x094e		VoC_NAD	|	VoC_lw16d_set_inc(REG1,0xf29,0x8)(hi)
0x09542C11,	//0x0950		VoC_loop_i(0x1,0x8)
0x0AE12B80,	//0x0952		VoC_jal(CII_idctcol4)
		//0x0954		VoC_endloop1
0xDFA9FFC0,	//0x0954		VoC_pop16(RA,DEFAULT)	|	VoC_NAD
0xE580F019,	//0x0956		VoC_return	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
		//0x0958		CII_IDCT_88_C
0xF3FF5FE9,	//0x0958		VoC_lw16i_short(INC3,0xffffffff,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x0F292009,	//0x095a		VoC_lw16d_set_inc(REG1,0xf29,0x2)
0x09602C11,	//0x095c		VoC_loop_i(0x1,0x8)
0x096C2B80,	//0x095e		VoC_jal(CII_idctrow)
		//0x0960		VoC_endloop1
0x2021FFC0,	//0x0960		VoC_lw16d_set_inc(REG1,0xf29,0x8)(lo)	|	VoC_NAD
0xFFC00F29,	//0x0962		VoC_NAD	|	VoC_lw16d_set_inc(REG1,0xf29,0x8)(hi)
0x09682C11,	//0x0964		VoC_loop_i(0x1,0x8)
0x09E82B80,	//0x0966		VoC_jal(CII_idctcol)
		//0x0968		VoC_endloop1
0xDFA9FFC0,	//0x0968		VoC_pop16(RA,DEFAULT)	|	VoC_NAD
0xE580F019,	//0x096a		VoC_return	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
		//0x096c		CII_idctrow
0xDFC1F051,	//0x096c		VoC_push16(REG1,DEFAULT)	|	VoC_lw16i_short(INC1,0x2,DEFAULT)
0x59CAD9C9,	//0x096e		VoC_lw32inc_p(REG45,REG1,DEFAULT)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0x59CBFF46,	//0x0970		VoC_lw32inc_p(REG67,REG1,DEFAULT)	|	VoC_lw32z(RL6,IN_PARALLEL)
0x59CDFF44,	//0x0972		VoC_lw32inc_p(ACC1,REG1,DEFAULT)	|	VoC_lw32z(ACC0,IN_PARALLEL)
0x7A2EF6CD,	//0x0974		VoC_shr32_ri(RL6,0x5,DEFAULT)	|	VoC_movreg16(RL6_HI,REG6,IN_PARALLEL)
0x31C3F649,	//0x0976		VoC_bnez16_r(idctrow_100,REG3)(lo)	|	VoC_movreg16(ACC0_HI,REG2,IN_PARALLEL)
0x33420988,	//0x0978		VoC_bnez32_r(idctrow_100,REG45)(lo)	|	VoC_bnez16_r(idctrow_100,REG3)(hi)
0x33460988,	//0x097a		VoC_bnez32_r(idctrow_100,RL6)(lo)	|	VoC_bnez32_r(idctrow_100,REG45)(hi)
0x31C70988,	//0x097c		VoC_bnez16_r(idctrow_100,REG7)(lo)	|	VoC_bnez32_r(idctrow_100,RL6)(hi)
0x33450988,	//0x097e		VoC_bnez32_r(idctrow_100,ACC1)(lo)	|	VoC_bnez16_r(idctrow_100,REG7)(hi)
0xF8EA0988,	//0x0980		VoC_shr16_ri(REG2,0xfffffffd,DEFAULT)	|	VoC_bnez32_r(idctrow_100,ACC1)(hi)
0xF6435F81,	//0x0982		VoC_movreg16(REG3,REG2,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xDDC9E881,	//0x0984		VoC_sw32inc_p(REG23,REG1,DEFAULT)	|	VoC_loop_i_short(0x4,DEFAULT)
		//0x0985		VoC_endloop0
0xFFC0E580,	//0x0986		VoC_NAD	|	VoC_return
		//0x0988		idctrow_100
0x5D921806,	//0x0988		VoC_lw16i_set_inc(REG2,0x5d92,0x1)
0xFA2C7F28,	//0x098a		VoC_shr32_ri(ACC0,0x5,IN_PARALLEL)	|	VoC_movreg32(REG01,ACC1,DEFAULT)
0x5DA00924,	//0x098c		VoC_add32_rd(ACC0,ACC0,0x5da0)
0xCB374106,	//0x098e		VoC_sub32_rr(RL7,ACC0,RL6,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG4,REG0,DEFAULT)
0x9B951994,	//0x0990		VoC_multf32inc_rp(ACC1,REG6,REG2,IN_PARALLEL)	|	VoC_multf32_rp(ACC0,REG6,REG2,DEFAULT)
0xD1824936,	//0x0992		VoC_msu32inc_rp(REG0,REG2,IN_PARALLEL)	|	VoC_add32_rr(RL6,ACC0,RL6,DEFAULT)
0xC0CE5122,	//0x0994		VoC_add16_rr(REG6,REG3,REG1,IN_PARALLEL)	|	VoC_mac32inc_rp(REG4,REG2,DEFAULT)
0x26F21808,	//0x0996		VoC_lw16i_set_inc(REG0,0x26f2,0x2)
0xCBA649A4,	//0x0998		VoC_sub32_rr(RL6,RL6,ACC0,IN_PARALLEL)	|	VoC_add32_rr(ACC0,RL6,ACC0,DEFAULT)
0xCBED49EF,	//0x099a		VoC_sub32_rr(ACC1,RL7,ACC1,IN_PARALLEL)	|	VoC_add32_rr(RL7,RL7,ACC1,DEFAULT)
0x99945DC4,	//0x099c		VoC_multf32_rp(ACC0,REG6,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x9B955DC7,	//0x099e		VoC_multf32inc_rp(ACC1,REG6,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(RL7,REG0,DEFAULT)
0xDDC5511A,	//0x09a0		VoC_sw32inc_p(ACC1,REG0,IN_PARALLEL)	|	VoC_mac32inc_rp(REG3,REG2,DEFAULT)
0xD18A5DC6,	//0x09a2		VoC_msu32inc_rp(REG1,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC1EBFF27,	//0x09a4		VoC_add16_rr(REG3,REG7,REG5,DEFAULT)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0x9AD518D4,	//0x09a6		VoC_multf32inc_rp(ACC1,REG3,REG2,IN_PARALLEL)	|	VoC_multf32_rp(ACC0,REG3,REG2,DEFAULT)
0xD1BA7F2E,	//0x09a8		VoC_msu32inc_rp(REG7,REG2,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC1,DEFAULT)
0xF40251AA,	//0x09aa		VoC_lw16i_short(FORMATX,0x0,IN_PARALLEL)	|	VoC_msu32inc_rp(REG5,REG2,DEFAULT)
0x63801808,	//0x09ac		VoC_lw16i_set_inc(REG0,0x6380,0x2)
0xCBEF49EB,	//0x09ae		VoC_sub32_rr(RL7,RL7,ACC1,IN_PARALLEL)	|	VoC_add32_rr(REG67,RL7,ACC1,DEFAULT)
0xCBA549A6,	//0x09b0		VoC_sub32_rr(ACC1,RL6,ACC0,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,ACC0,DEFAULT)
0xF5895DC3,	//0x09b2		VoC_lw16i_short(FORMAT32,0xfffffff1,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
0xCBEB49EA,	//0x09b4		VoC_sub32_rr(REG67,RL7,ACC1,IN_PARALLEL)	|	VoC_add32_rr(REG45,RL7,ACC1,DEFAULT)
0xF90E790C,	//0x09b6		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0x99D51954,	//0x09b8		VoC_multf32_rp(ACC1,REG7,REG2,IN_PARALLEL)	|	VoC_multf32_rp(ACC0,REG5,REG2,DEFAULT)
0xD1725062,	//0x09ba		VoC_macXinc_rp(REG6,REG2,IN_PARALLEL)	|	VoC_macX_rp(REG4,REG2,DEFAULT)
0x26F2180A,	//0x09bc		VoC_lw16i_set_inc(REG2,0x26f2,0x2)
0x91551114,	//0x09be		VoC_add32_rp(ACC1,ACC1,REG2,IN_PARALLEL)	|	VoC_add32_rp(ACC0,ACC0,REG2,DEFAULT)
0xFA3D7A3C,	//0x09c0		VoC_shr32_ri(ACC1,0x7,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x7,DEFAULT)
0xDF8170E3,	//0x09c2		VoC_pop16(REG1,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x7,DEFAULT)
0xF0055DC4,	//0x09c4		VoC_lw16i_short(INC1,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xC05B5DC5,	//0x09c6		VoC_add16_rr(REG3,REG1,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0x63801808,	//0x09c8		VoC_lw16i_set_inc(REG0,0x6380,0x2)
0xF4015D86,	//0x09ca		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_sw32_p(RL6,REG0,DEFAULT)
0xB6853084,	//0x09cc		VoC_sub32inc_pp(ACC1,REG2,REG0,IN_PARALLEL)	|	VoC_add32_pp(ACC0,REG2,REG0,DEFAULT)
0xB0867A44,	//0x09ce		VoC_add32_pp(RL6,REG2,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x8,DEFAULT)
0xB6877A45,	//0x09d0		VoC_sub32inc_pp(RL7,REG2,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x8,DEFAULT)
0xDC987A46,	//0x09d2		VoC_sw16inc_p(ACC0_LO,REG1,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0x8,DEFAULT)
0xDCBA7A47,	//0x09d4		VoC_sw16inc_p(ACC1_LO,REG3,IN_PARALLEL)	|	VoC_shr32_ri(RL7,0x8,DEFAULT)
0xB6853084,	//0x09d6		VoC_sub32inc_pp(ACC1,REG2,REG0,IN_PARALLEL)	|	VoC_add32_pp(ACC0,REG2,REG0,DEFAULT)
0xDC9C7A44,	//0x09d8		VoC_sw16inc_p(RL6_LO,REG1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x8,DEFAULT)
0xDCBE7A45,	//0x09da		VoC_sw16inc_p(RL7_LO,REG3,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x8,DEFAULT)
0xB6873086,	//0x09dc		VoC_sub32inc_pp(RL7,REG2,REG0,IN_PARALLEL)	|	VoC_add32_pp(RL6,REG2,REG0,DEFAULT)
0xDC987A46,	//0x09de		VoC_sw16inc_p(ACC0_LO,REG1,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0x8,DEFAULT)
0xDCBA7A47,	//0x09e0		VoC_sw16inc_p(ACC1_LO,REG3,IN_PARALLEL)	|	VoC_shr32_ri(RL7,0x8,DEFAULT)
0xE0475C9C,	//0x09e2		VoC_lw16i_short(REG7,0x4,IN_PARALLEL)	|	VoC_sw16inc_p(RL6_LO,REG1,DEFAULT)
0xC0795CBE,	//0x09e4		VoC_add16_rr(REG1,REG1,REG7,IN_PARALLEL)	|	VoC_sw16inc_p(RL7_LO,REG3,DEFAULT)
0xFFC0E580,	//0x09e6		VoC_NAD	|	VoC_return
		//0x09e8		CII_idctcol
0xFF445FC1,	//0x09e8		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0xFF465899,	//0x09ea		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_lw16inc_p(ACC0_HI,REG1,DEFAULT)
0xD894D893,	//0x09ec		VoC_lw16inc_p(REG4,REG1,DEFAULT)	|	VoC_lw16inc_p(REG3,REG1,DEFAULT)
0xD89DD895,	//0x09ee		VoC_lw16inc_p(RL6_HI,REG1,DEFAULT)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
0xD8977A46,	//0x09f0		VoC_lw16inc_p(REG7,REG1,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0x8,DEFAULT)
0xD891D890,	//0x09f2		VoC_lw16inc_p(REG1,REG1,DEFAULT)	|	VoC_lw16inc_p(REG0,REG1,DEFAULT)
0x0A0A31C3,	//0x09f4		VoC_bnez16_r(idctcol_100,REG3)
0x0A0A3342,	//0x09f6		VoC_bnez32_r(idctcol_100,REG45)
0x0A0A3346,	//0x09f8		VoC_bnez32_r(idctcol_100,RL6)
0x0A0A31C7,	//0x09fa		VoC_bnez16_r(idctcol_100,REG7)
0x0A0A3340,	//0x09fc		VoC_bnez32_r(idctcol_100,REG01)
0x0712E122,	//0x09fe		VoC_add16_rd(REG2,REG2,0x624b)(lo)	|	VoC_movreg16(REG2,ACC0_HI,DEFAULT)
0xF8FA624B,	//0x0a00		VoC_shr16_ri(REG2,0xffffffff,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0x624b)(hi)
0xDF81783A,	//0x0a02		VoC_pop16(REG1,IN_PARALLEL)	|	VoC_shr16_ri(REG2,0x7,DEFAULT)
0xDC92E901,	//0x0a04		VoC_sw16inc_p(REG2,REG1,DEFAULT)	|	VoC_loop_i_short(0x8,DEFAULT)
		//0x0a05		VoC_endloop0
0x622D0789,	//0x0a06		VoC_sub16_rd(REG1,REG1,0x622d)
0xFFC0E580,	//0x0a08		VoC_NAD	|	VoC_return
		//0x0a0a		idctcol_100
0x5D921806,	//0x0a0a		VoC_lw16i_set_inc(REG2,0x5d92,0x1)
0xF4017A44,	//0x0a0c		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x8,DEFAULT)
0x5DA20927,	//0x0a0e		VoC_add32_rd(RL7,ACC0,0x5da2)
0xE0097088,	//0x0a10		VoC_lw16i_short(ACC0_HI,0x0,IN_PARALLEL)	|	VoC_lw16i_short(ACC0_LO,0x4,DEFAULT)
0xF01AC106,	//0x0a12		VoC_lw16i_short(FORMATX,0x0,DEFAULT)	|	VoC_add16_rr(REG6,REG4,REG0,DEFAULT)
0xFF255F44,	//0x0a14		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_push32(ACC0,DEFAULT)
0xD1325032,	//0x0a16		VoC_mac32inc_rp(REG6,REG2,IN_PARALLEL)	|	VoC_mac32_rp(REG6,REG2,DEFAULT)
0xD18240CE,	//0x0a18		VoC_msu32inc_rp(REG0,REG2,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG3,REG1,DEFAULT)
0x26F21808,	//0x0a1a		VoC_lw16i_set_inc(REG0,0x26f2,0x2)
0xFA1D5122,	//0x0a1c		VoC_shr32_ri(ACC1,0x3,IN_PARALLEL)	|	VoC_mac32inc_rp(REG4,REG2,DEFAULT)
0xCBF749F6,	//0x0a1e		VoC_sub32_rr(RL7,RL7,RL6,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL7,RL6,DEFAULT)
0xC1EC7A1C,	//0x0a20		VoC_add16_rr(REG4,REG7,REG5,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x3,DEFAULT)
0xCBA649A4,	//0x0a22		VoC_sub32_rr(RL6,RL6,ACC0,IN_PARALLEL)	|	VoC_add32_rr(ACC0,RL6,ACC0,DEFAULT)
0xCBED49EF,	//0x0a24		VoC_sub32_rr(ACC1,RL7,ACC1,IN_PARALLEL)	|	VoC_add32_rr(RL7,RL7,ACC1,DEFAULT)
0xD90C5DC4,	//0x0a26		VoC_lw32_sd(ACC0,0x0,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xDDC75032,	//0x0a28		VoC_sw32inc_p(RL7,REG0,IN_PARALLEL)	|	VoC_mac32_rp(REG6,REG2,DEFAULT)
0xD1327F25,	//0x0a2a		VoC_mac32inc_rp(REG6,REG2,IN_PARALLEL)	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
0xD11A5DC5,	//0x0a2c		VoC_mac32inc_rp(REG3,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xDDC6518A,	//0x0a2e		VoC_sw32inc_p(RL6,REG0,IN_PARALLEL)	|	VoC_msu32inc_rp(REG1,REG2,DEFAULT)
0xD90D7F2F,	//0x0a30		VoC_lw32_sd(ACC1,0x0,IN_PARALLEL)	|	VoC_movreg32(RL7,ACC1,DEFAULT)
0xDF047F26,	//0x0a32		VoC_pop32(ACC0,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0xD1225022,	//0x0a34		VoC_mac32inc_rp(REG4,REG2,IN_PARALLEL)	|	VoC_mac32_rp(REG4,REG2,DEFAULT)
0xD1BA7A1F,	//0x0a36		VoC_msu32inc_rp(REG7,REG2,IN_PARALLEL)	|	VoC_shr32_ri(RL7,0x3,DEFAULT)
0xFA1E51AA,	//0x0a38		VoC_shr32_ri(RL6,0x3,IN_PARALLEL)	|	VoC_msu32inc_rp(REG5,REG2,DEFAULT)
0xF3E37A1D,	//0x0a3a		VoC_lw16i_short(INC3,0xfffffff8,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x3,DEFAULT)
0xF5897A1C,	//0x0a3c		VoC_lw16i_short(FORMAT32,0xfffffff1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x3,DEFAULT)
0xCBA349A2,	//0x0a3e		VoC_sub32_rr(REG67,RL6,ACC0,IN_PARALLEL)	|	VoC_add32_rr(REG45,RL6,ACC0,DEFAULT)
0xCBEF49EE,	//0x0a40		VoC_sub32_rr(RL7,RL7,ACC1,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL7,ACC1,DEFAULT)
0xCBDB49D8,	//0x0a42		VoC_sub32_rr(REG67,RL7,REG67,IN_PARALLEL)	|	VoC_add32_rr(REG01,RL7,REG67,DEFAULT)
0x99D51854,	//0x0a44		VoC_multf32_rp(ACC1,REG7,REG2,IN_PARALLEL)	|	VoC_multf32_rp(ACC0,REG1,REG2,DEFAULT)
0xF90E7908,	//0x0a46		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0x1,DEFAULT)
0xD1725042,	//0x0a48		VoC_macXinc_rp(REG6,REG2,IN_PARALLEL)	|	VoC_macX_rp(REG0,REG2,DEFAULT)
0x6380180A,	//0x0a4a		VoC_lw16i_set_inc(REG2,0x6380,0x2)
0x91571113,	//0x0a4c		VoC_add32_rp(RL7,ACC1,REG2,IN_PARALLEL)	|	VoC_add32_rp(REG67,ACC0,REG2,DEFAULT)
0xF6407A3B,	//0x0a4e		VoC_movreg16(REG0,REG2,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0x7,DEFAULT)
0xFA3F5DD6,	//0x0a50		VoC_shr32_ri(RL7,0x7,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
0xDF815DD3,	//0x0a52		VoC_pop16(REG1,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG2,DEFAULT)
0xE3875DD7,	//0x0a54		VoC_lw16i_short(REG7,0x38,IN_PARALLEL)	|	VoC_sw32inc_p(RL7,REG2,DEFAULT)
0x26F2180A,	//0x0a56		VoC_lw16i_set_inc(REG2,0x26f2,0x2)
0xC07B5D92,	//0x0a58		VoC_add16_rr(REG3,REG1,REG7,IN_PARALLEL)	|	VoC_sw32_p(REG45,REG2,DEFAULT)
0xB6853014,	//0x0a5a		VoC_sub32inc_pp(ACC1,REG2,REG0,IN_PARALLEL)	|	VoC_add32_pp(ACC0,REG0,REG2,DEFAULT)
0xFBBD7BBC,	//0x0a5c		VoC_shr32_ri(ACC1,0xfffffff7,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff7,DEFAULT)
0xB0167A3C,	//0x0a5e		VoC_add32_pp(RL6,REG0,REG2,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x7,DEFAULT)
0xB6877A3D,	//0x0a60		VoC_sub32inc_pp(RL7,REG2,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x7,DEFAULT)
0xDC997BBE,	//0x0a62		VoC_sw16inc_p(ACC0_HI,REG1,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0xfffffff7,DEFAULT)
0xDCBB7BBF,	//0x0a64		VoC_sw16inc_p(ACC1_HI,REG3,IN_PARALLEL)	|	VoC_shr32_ri(RL7,0xfffffff7,DEFAULT)
0xB0147A3E,	//0x0a66		VoC_add32_pp(ACC0,REG0,REG2,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0x7,DEFAULT)
0xB6857A3F,	//0x0a68		VoC_sub32inc_pp(ACC1,REG2,REG0,IN_PARALLEL)	|	VoC_shr32_ri(RL7,0x7,DEFAULT)
0xDC9D7BBC,	//0x0a6a		VoC_sw16inc_p(RL6_HI,REG1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff7,DEFAULT)
0xDCBF7BBD,	//0x0a6c		VoC_sw16inc_p(RL7_HI,REG3,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xfffffff7,DEFAULT)
0xB0167A3C,	//0x0a6e		VoC_add32_pp(RL6,REG0,REG2,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x7,DEFAULT)
0xB6877A3D,	//0x0a70		VoC_sub32inc_pp(RL7,REG2,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x7,DEFAULT)
0xDC997BBE,	//0x0a72		VoC_sw16inc_p(ACC0_HI,REG1,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0xfffffff7,DEFAULT)
0xDCBB7BBF,	//0x0a74		VoC_sw16inc_p(ACC1_HI,REG3,IN_PARALLEL)	|	VoC_shr32_ri(RL7,0xfffffff7,DEFAULT)
0xE1F77A3E,	//0x0a76		VoC_lw16i_short(REG7,0x1f,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0x7,DEFAULT)
0xDC9DFA3F,	//0x0a78		VoC_sw16inc_p(RL6_HI,REG1,DEFAULT)	|	VoC_shr32_ri(RL7,0x7,DEFAULT)
0xDCBF4279,	//0x0a7a		VoC_sw16inc_p(RL7_HI,REG3,IN_PARALLEL)	|	VoC_sub16_rr(REG1,REG1,REG7,DEFAULT)
0xDFC1E580,	//0x0a7c		VoC_push16(REG1,DEFAULT)	|	VoC_return
		//0x0a7d		CII_idctrow4
0xF40159C9,	//0x0a7e		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xFF4459CA,	//0x0a80		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG1,DEFAULT)
0x0A8C31C3,	//0x0a82		VoC_bnez16_r(idctrow4_100,REG3)
0x0A8C3342,	//0x0a84		VoC_bnez32_r(idctrow4_100,REG45)
0x5F81F8EA,	//0x0a86		VoC_pop16(REG1,DEFAULT)	|	VoC_shr16_ri(REG2,0xfffffffd,DEFAULT)
0xE881F643,	//0x0a88		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_movreg16(REG3,REG2,IN_PARALLEL)
		//0x0a8a		VoC_endloop0
0xE580DDC9,	//0x0a8a		VoC_return	|	VoC_sw32inc_p(REG23,REG1,DEFAULT)
		//0x0a8c		idctrow4_100
0xFA2CE049,	//0x0a8c		VoC_shr32_ri(ACC0,0x5,DEFAULT)	|	VoC_movreg16(ACC0_HI,REG2,DEFAULT)
0x5DA00927,	//0x0a8e		VoC_add32_rd(RL7,ACC0,0x5da0)
0x5D920A24,	//0x0a90		VoC_multf32_rd(ACC0,REG4,0x5d92)
0x5D940E20,	//0x0a92		VoC_mac32_rd(REG4,0x5d94)
0x180AFF25,	//0x0a94		VoC_lw16i_set_inc(REG2,0x26f2,0x2)(lo)	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
0x49E426F2,	//0x0a96		VoC_add32_rr(ACC0,RL7,ACC0,DEFAULT)	|	VoC_lw16i_set_inc(REG2,0x26f2,0x2)(hi)
0x49EFCBE6,	//0x0a98		VoC_add32_rr(RL7,RL7,ACC1,DEFAULT)	|	VoC_sub32_rr(RL6,RL7,ACC0,IN_PARALLEL)
0xDDD4CBED,	//0x0a9a		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sub32_rr(ACC1,RL7,ACC1,IN_PARALLEL)
0x0A1CDDD7,	//0x0a9c		VoC_multf32_rd(ACC0,REG3,0x5d95)(lo)	|	VoC_sw32inc_p(RL7,REG2,DEFAULT)
0x0E185D95,	//0x0a9e		VoC_mac32_rd(REG3,0x5d96)(lo)	|	VoC_multf32_rd(ACC0,REG3,0x5d95)(hi)
0x7F255D96,	//0x0aa0		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_mac32_rd(REG3,0x5d96)(hi)
0x7F27DDD5,	//0x0aa2		VoC_movreg32(RL7,ACC0,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,IN_PARALLEL)
0x0A2CDDD6,	//0x0aa4		VoC_multf32_rd(ACC0,REG5,0x5d98)(lo)	|	VoC_sw32inc_p(RL6,REG2,IN_PARALLEL)
0x0F285D98,	//0x0aa6		VoC_msu32_rd(REG5,0x5d9a)(lo)	|	VoC_multf32_rd(ACC0,REG5,0x5d98)(hi)
0x7F265D9A,	//0x0aa8		VoC_movreg32(RL6,ACC0,DEFAULT)	|	VoC_msu32_rd(REG5,0x5d9a)(hi)
0x180AF589,	//0x0aaa		VoC_lw16i_set_inc(REG2,0x6380,0x2)(lo)	|	VoC_lw16i_short(FORMAT32,0xfffffff1,IN_PARALLEL)
0x49F66380,	//0x0aac		VoC_add32_rr(RL6,RL7,RL6,DEFAULT)	|	VoC_lw16i_set_inc(REG2,0x6380,0x2)(hi)
0x4962CBF7,	//0x0aae		VoC_add32_rr(REG45,ACC1,ACC0,DEFAULT)	|	VoC_sub32_rr(RL7,RL7,RL6,IN_PARALLEL)
0x49E8CB65,	//0x0ab0		VoC_add32_rr(REG01,RL7,ACC1,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,IN_PARALLEL)
0x0A0CCBED,	//0x0ab2		VoC_multf32_rd(ACC0,REG1,0x5d9b)(lo)	|	VoC_sub32_rr(ACC1,RL7,ACC1,IN_PARALLEL)
0x79085D9B,	//0x0ab4		VoC_shru16_ri(REG0,0x1,DEFAULT)	|	VoC_multf32_rd(ACC0,REG1,0x5d9b)(hi)
0x0E00F401,	//0x0ab6		VoC_mac32_rd(REG0,0x5d9b)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xDDD65D9B,	//0x0ab8		VoC_sw32inc_p(RL6,REG2,DEFAULT)	|	VoC_mac32_rd(REG0,0x5d9b)(hi)
0x5D9C0923,	//0x0aba		VoC_add32_rd(REG67,ACC0,0x5d9c)
0xF5897A3B,	//0x0abc		VoC_lw16i_short(FORMAT32,0xfffffff1,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0x7,DEFAULT)
0x0A0CFF28,	//0x0abe		VoC_multf32_rd(ACC0,REG1,0x5d9b)(lo)	|	VoC_movreg32(REG01,ACC1,DEFAULT)
0x79085D9B,	//0x0ac0		VoC_shru16_ri(REG0,0x1,DEFAULT)	|	VoC_multf32_rd(ACC0,REG1,0x5d9b)(hi)
0x0E00F401,	//0x0ac2		VoC_mac32_rd(REG0,0x5d9b)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xDDD35D9B,	//0x0ac4		VoC_sw32inc_p(REG67,REG2,DEFAULT)	|	VoC_mac32_rd(REG0,0x5d9b)(hi)
0x5D9C0927,	//0x0ac6		VoC_add32_rd(RL7,ACC0,0x5d9c)
0x1808FA3F,	//0x0ac8		VoC_lw16i_set_inc(REG0,0x6380,0x2)(lo)	|	VoC_shr32_ri(RL7,0x7,DEFAULT)
0x5DD76380,	//0x0aca		VoC_sw32inc_p(RL7,REG2,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x6380,0x2)(hi)
0x5DD2DF81,	//0x0acc		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_pop16(REG1,IN_PARALLEL)
0x180AF005,	//0x0ace		VoC_lw16i_set_inc(REG2,0x26f2,0x2)(lo)	|	VoC_lw16i_short(INC1,0x1,IN_PARALLEL)
0x070B26F2,	//0x0ad0		VoC_add16_rd(REG3,REG1,0x620a)(lo)	|	VoC_lw16i_set_inc(REG2,0x26f2,0x2)(hi)
0x3282620A,	//0x0ad2		VoC_add32inc_pp(REG45,REG2,REG0,DEFAULT)	|	VoC_add16_rd(REG3,REG1,0x620a)(hi)
0x6886B483,	//0x0ad4		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_sub32_pp(REG67,REG2,REG0,IN_PARALLEL)
0xFA43FA42,	//0x0ad6		VoC_shr32_ri(REG67,0x8,DEFAULT)	|	VoC_shr32_ri(REG45,0x8,IN_PARALLEL)
0x3282DC94,	//0x0ad8		VoC_add32inc_pp(REG45,REG2,REG0,DEFAULT)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
0x5CB6B483,	//0x0ada		VoC_sw16inc_p(REG6,REG3,DEFAULT)	|	VoC_sub32_pp(REG67,REG2,REG0,IN_PARALLEL)
		//0x0adb		VoC_endloop0
0xF051FA42,	//0x0adc		VoC_lw16i_short(INC1,0x2,DEFAULT)	|	VoC_shr32_ri(REG45,0x8,IN_PARALLEL)
0x61FC0709,	//0x0ade		VoC_add16_rd(REG1,REG1,0x61fc)
0xDFC1E580,	//0x0ae0		VoC_push16(REG1,DEFAULT)	|	VoC_return
		//0x0ae1		CII_idctcol4
0xFF447019,	//0x0ae2		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xD896D892,	//0x0ae4		VoC_lw16inc_p(REG6,REG1,DEFAULT)	|	VoC_lw16inc_p(REG2,REG1,DEFAULT)
0x5895D894,	//0x0ae6		VoC_lw16inc_p(REG5,REG1,DEFAULT)	|	VoC_lw16inc_p(REG4,REG1,DEFAULT)
0x31C6F649,	//0x0ae8		VoC_bnez16_r(idctcol4_100,REG6)(lo)	|	VoC_movreg16(ACC0_HI,REG2,IN_PARALLEL)
0x33420AF7,	//0x0aea		VoC_bnez32_r(idctcol4_100,REG45)(lo)	|	VoC_bnez16_r(idctcol4_100,REG6)(hi)
0x07120AF7,	//0x0aec		VoC_add16_rd(REG2,REG2,0x624b)(lo)	|	VoC_bnez32_r(idctcol4_100,REG45)(hi)
0xF8FA624B,	//0x0aee		VoC_shr16_ri(REG2,0xffffffff,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0x624b)(hi)
0xDF81783A,	//0x0af0		VoC_pop16(REG1,IN_PARALLEL)	|	VoC_shr16_ri(REG2,0x7,DEFAULT)
0xDC92E901,	//0x0af2		VoC_sw16inc_p(REG2,REG1,DEFAULT)	|	VoC_loop_i_short(0x8,DEFAULT)
		//0x0af3		VoC_endloop0
0x622D0789,	//0x0af4		VoC_sub16_rd(REG1,REG1,0x622d)
0xFA44E580,	//0x0af6		VoC_shr32_ri(ACC0,0x8,DEFAULT)	|	VoC_return
		//0x0af7		idctcol4_100
0x5DA20927,	//0x0af8		VoC_add32_rd(RL7,ACC0,0x5da2)
0x5D920A24,	//0x0afa		VoC_multf32_rd(ACC0,REG4,0x5d92)
0x5D940E20,	//0x0afc		VoC_mac32_rd(REG4,0x5d94)
0x7A1CFF25,	//0x0afe		VoC_shr32_ri(ACC0,0x3,DEFAULT)	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
0x180AFA1D,	//0x0b00		VoC_lw16i_set_inc(REG2,0x26f2,0x2)(lo)	|	VoC_shr32_ri(ACC1,0x3,IN_PARALLEL)
0x49E426F2,	//0x0b02		VoC_add32_rr(ACC0,RL7,ACC0,DEFAULT)	|	VoC_lw16i_set_inc(REG2,0x26f2,0x2)(hi)
0x49EFCBE6,	//0x0b04		VoC_add32_rr(RL7,RL7,ACC1,DEFAULT)	|	VoC_sub32_rr(RL6,RL7,ACC0,IN_PARALLEL)
0xDDD4CBED,	//0x0b06		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sub32_rr(ACC1,RL7,ACC1,IN_PARALLEL)
0x0A34DDD7,	//0x0b08		VoC_multf32_rd(ACC0,REG6,0x5d95)(lo)	|	VoC_sw32inc_p(RL7,REG2,DEFAULT)
0x0E305D95,	//0x0b0a		VoC_mac32_rd(REG6,0x5d96)(lo)	|	VoC_multf32_rd(ACC0,REG6,0x5d95)(hi)
0x7F255D96,	//0x0b0c		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_mac32_rd(REG6,0x5d96)(hi)
0x7F27DDD5,	//0x0b0e		VoC_movreg32(RL7,ACC0,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,IN_PARALLEL)
0x7A1DDDD6,	//0x0b10		VoC_shr32_ri(ACC1,0x3,DEFAULT)	|	VoC_sw32inc_p(RL6,REG2,IN_PARALLEL)
0x0A2CFA1F,	//0x0b12		VoC_multf32_rd(ACC0,REG5,0x5d98)(lo)	|	VoC_shr32_ri(RL7,0x3,IN_PARALLEL)
0x0F285D98,	//0x0b14		VoC_msu32_rd(REG5,0x5d9a)(lo)	|	VoC_multf32_rd(ACC0,REG5,0x5d98)(hi)
0x7F265D9A,	//0x0b16		VoC_movreg32(RL6,ACC0,DEFAULT)	|	VoC_msu32_rd(REG5,0x5d9a)(hi)
0x7A1EF589,	//0x0b18		VoC_shr32_ri(RL6,0x3,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0xfffffff1,IN_PARALLEL)
0x180AFA1C,	//0x0b1a		VoC_lw16i_set_inc(REG2,0x6380,0x2)(lo)	|	VoC_shr32_ri(ACC0,0x3,IN_PARALLEL)
0x49F66380,	//0x0b1c		VoC_add32_rr(RL6,RL7,RL6,DEFAULT)	|	VoC_lw16i_set_inc(REG2,0x6380,0x2)(hi)
0x4962CBF7,	//0x0b1e		VoC_add32_rr(REG45,ACC1,ACC0,DEFAULT)	|	VoC_sub32_rr(RL7,RL7,RL6,IN_PARALLEL)
0x49E8CB65,	//0x0b20		VoC_add32_rr(REG01,RL7,ACC1,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,IN_PARALLEL)
0x0A0CCBED,	//0x0b22		VoC_multf32_rd(ACC0,REG1,0x5d9b)(lo)	|	VoC_sub32_rr(ACC1,RL7,ACC1,IN_PARALLEL)
0x79085D9B,	//0x0b24		VoC_shru16_ri(REG0,0x1,DEFAULT)	|	VoC_multf32_rd(ACC0,REG1,0x5d9b)(hi)
0x0E00F401,	//0x0b26		VoC_mac32_rd(REG0,0x5d9b)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xDDD65D9B,	//0x0b28		VoC_sw32inc_p(RL6,REG2,DEFAULT)	|	VoC_mac32_rd(REG0,0x5d9b)(hi)
0x5D9C0923,	//0x0b2a		VoC_add32_rd(REG67,ACC0,0x5d9c)
0xF5897A3B,	//0x0b2c		VoC_lw16i_short(FORMAT32,0xfffffff1,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0x7,DEFAULT)
0x0A0CFF28,	//0x0b2e		VoC_multf32_rd(ACC0,REG1,0x5d9b)(lo)	|	VoC_movreg32(REG01,ACC1,DEFAULT)
0x79085D9B,	//0x0b30		VoC_shru16_ri(REG0,0x1,DEFAULT)	|	VoC_multf32_rd(ACC0,REG1,0x5d9b)(hi)
0x0E00F401,	//0x0b32		VoC_mac32_rd(REG0,0x5d9b)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xDDD35D9B,	//0x0b34		VoC_sw32inc_p(REG67,REG2,DEFAULT)	|	VoC_mac32_rd(REG0,0x5d9b)(hi)
0x5D9C0927,	//0x0b36		VoC_add32_rd(RL7,ACC0,0x5d9c)
0x1808FA3F,	//0x0b38		VoC_lw16i_set_inc(REG0,0x26f2,0x2)(lo)	|	VoC_shr32_ri(RL7,0x7,DEFAULT)
0x5DD726F2,	//0x0b3a		VoC_sw32inc_p(RL7,REG2,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x26f2,0x2)(hi)
0xDDD2F3E3,	//0x0b3c		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_lw16i_short(INC3,0xfffffff8,IN_PARALLEL)
0x6380180A,	//0x0b3e		VoC_lw16i_set_inc(REG2,0x6380,0x2)
0xE3835F81,	//0x0b40		VoC_lw16i_short(REG3,0x38,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xFFC0C0CB,	//0x0b42		VoC_NAD	|	VoC_add16_rr(REG3,REG3,REG1,DEFAULT)
0xB0126889,	//0x0b44		VoC_add32_pp(REG45,REG0,REG2,IN_PARALLEL)	|	VoC_loop_i_short(0x4,DEFAULT)
0xB6137BBA,	//0x0b46		VoC_sub32inc_pp(REG67,REG0,REG2,IN_PARALLEL)	|	VoC_shr32_ri(REG45,0xfffffff7,DEFAULT)
0xFBBB783D,	//0x0b48		VoC_shr32_ri(REG67,0xfffffff7,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0x7,DEFAULT)
0xB012783F,	//0x0b4a		VoC_add32_pp(REG45,REG0,REG2,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x7,DEFAULT)
0xDCB7DC95,	//0x0b4c		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_sw16inc_p(REG5,REG1,DEFAULT)
		//0x0b4d		VoC_endloop0
0x624A0789,	//0x0b4e		VoC_sub16_rd(REG1,REG1,0x624a)
0xFFC0E580,	//0x0b50		VoC_NAD	|	VoC_return
