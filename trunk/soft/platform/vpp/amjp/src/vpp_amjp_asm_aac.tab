		//0x0d00		VoC_code_section_2
		//0x0d00		Coolsand_AACDecode
0x6C39DFE9,	//0x0d00		VoC_bez16_d(AACDecode_Begin,0x4001)(lo)	|	VoC_push16(RA,DEFAULT)
0x2B804001,	//0x0d02		VoC_jal(vpp_AmjpCircBuffInit)(lo)	|	VoC_bez16_d(AACDecode_Begin,0x4001)(hi)
0xF000013C,	//0x0d04		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_jal(vpp_AmjpCircBuffInit)(hi)
0xF01DF01C,	//0x0d06		VoC_lw16i_short(WRAP1,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP0,0x0,DEFAULT)
0xF01FF01E,	//0x0d08		VoC_lw16i_short(WRAP3,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP2,0x0,DEFAULT)
0x7FC11540,	//0x0d0a		VoC_sw16_d(REG0,0xffc1)
0x003F0A96,	//0x0d0c		VoC_lw16i(STATUS,0x3f)
0xFF44F01B,	//0x0d0e		VoC_lw32z(ACC0,DEFAULT)	|	VoC_lw16i_short(BITCACHE,0x0,DEFAULT)
0x00000A81,	//0x0d10		VoC_lw16i(REG1,0x0)
0x40011509,	//0x0d12		VoC_sw16_d(ACC0_HI,0x4001)
0x14271509,	//0x0d14		VoC_sw16_d(ACC0_HI,0x1427)
0x041B1509,	//0x0d16		VoC_sw16_d(ACC0_HI,0x41b)
0x04141509,	//0x0d18		VoC_sw16_d(ACC0_HI,0x414)
0x040A1509,	//0x0d1a		VoC_sw16_d(ACC0_HI,0x40a)
0x040B1509,	//0x0d1c		VoC_sw16_d(ACC0_HI,0x40b)
0x14201509,	//0x0d1e		VoC_sw16_d(ACC0_HI,0x1420)
0x14211509,	//0x0d20		VoC_sw16_d(ACC0_HI,0x1421)
0x0420180B,	//0x0d22		VoC_lw16i_set_inc(REG3,0x420,0x2)
0x0D282C09,	//0x0d24		VoC_loop_i(0x1,0x4)
0xDDDCE801,	//0x0d26		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_loop_i_short(0x100,DEFAULT)
		//0x0d27		VoC_endloop0
		//0x0d28		VoC_endloop1
0x180BFFC0,	//0x0d28		VoC_lw16i_set_inc(REG3,0xc20,0x2)(lo)	|	VoC_NOP
0x2C090C20,	//0x0d2a		VoC_loop_i(0x1,0x4)(lo)	|	VoC_lw16i_set_inc(REG3,0xc20,0x2)(hi)
0xE8010D2F,	//0x0d2c		VoC_loop_i_short(0x100,DEFAULT)	|	VoC_loop_i(0x1,0x4)(hi)
		//0x0d2e		VoC_endloop0
0xFFC0DDDC,	//0x0d2e		VoC_NOP	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x0d2f		VoC_endloop1
0x27201584,	//0x0d30		VoC_sw32_d(ACC0,0x2720)
0x14221584,	//0x0d32		VoC_sw32_d(ACC0,0x1422)
0x14241509,	//0x0d34		VoC_sw16_d(ACC0_HI,0x1424)
0x14251501,	//0x0d36		VoC_sw16_d(REG1,0x1425)
0x14261501,	//0x0d38		VoC_sw16_d(REG1,0x1426)
		//0x0d3a		AACDecode_Begin
0xFFC0F15E,	//0x0d3a		VoC_NAD	|	VoC_lw16i_short(WRAP2,0xa,DEFAULT)
0x0E642B80,	//0x0d3c		VoC_jal(Coolsand_reload_data)
0x1427141B,	//0x0d3e		VoC_lw16_d(BITCACHE,0x1427)
0x14221486,	//0x0d40		VoC_lw32_d(RL6,0x1422)
0x14241401,	//0x0d42		VoC_lw16_d(REG1,0x1424)
0xF00678E9,	//0x0d44		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0xfffffffd,DEFAULT)
0x14261402,	//0x0d46		VoC_lw16_d(REG2,0x1426)
0x041B6E19,	//0x0d48		VoC_bnez16_d(AACDecode_L0,0x41b)
0x506A4C19,	//0x0d4a		VoC_bnlt16_rd(AACDecode_L1,REG1,0x506a)
0xE242E5EE,	//0x0d4c		VoC_lbinc_p(REG2)	|	VoC_jump(AACDecode_Begin)
		//0x0d4d		AACDecode_L1
0xE242E280,	//0x0d4e		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG4,0x10,DEFAULT)
0x0A86E281,	//0x0d50		VoC_lw16i(REG6,0x4144)(lo)	|	VoC_rbinc_i(REG5,0x10,DEFAULT)
0x0A874144,	//0x0d52		VoC_lw16i(REG7,0x4946)(lo)	|	VoC_lw16i(REG6,0x4144)(hi)
0xF0234946,	//0x0d54		VoC_lw16i_short(REG3,0x1,DEFAULT)	|	VoC_lw16i(REG7,0x4946)(hi)
0x0D5C3793,	//0x0d56		VoC_bne32_rr(AACDecode_L2,REG45,REG67)
0x31C0F043,	//0x0d58		VoC_bnez16_r(AACDecode_End,REG0)(lo)	|	VoC_lw16i_short(REG3,0x2,DEFAULT)
0xFFC00E3E,	//0x0d5a		VoC_NAD	|	VoC_bnez16_r(AACDecode_End,REG0)(hi)
		//0x0d5c		AACDecode_L2
0x041B1503,	//0x0d5c		VoC_sw16_d(REG3,0x41b)
0x505C0792,	//0x0d5e		VoC_sub16_rd(REG2,REG2,0x505c)
0xF026F01B,	//0x0d60		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_lw16i_short(BITCACHE,0x0,DEFAULT)
		//0x0d61		AACDecode_L0
0x041B1407,	//0x0d62		VoC_lw16_d(REG7,0x41b)
0x0D8635B7,	//0x0d64		VoC_bne16_rr(AACDecode_L3,REG6,REG7)
0x04146E19,	//0x0d66		VoC_bnez16_d(AACDecode_L4,0x414)
0x209A2B80,	//0x0d68		VoC_jal(Coolsand_AACFindSyncWord)
0x0D6E3243,	//0x0d6a		VoC_bnltz16_r(AACDecode_L5,REG3)
0x0D3A2B00,	//0x0d6c		VoC_jump_lg(AACDecode_Begin)
		//0x0d6e		AACDecode_L5
0x14240B1C,	//0x0d6e		VoC_sub16_dr(REG4,0x1424,REG3)
0x06000A85,	//0x0d70		VoC_lw16i(REG5,0x600)
0x0D763425,	//0x0d72		VoC_bgt16_rr(AACDecode_X1,REG4,REG5)
0x0D3A2B00,	//0x0d74		VoC_jump_lg(AACDecode_Begin)
		//0x0d76		AACDecode_X1
0x15F22B80,	//0x0d76		VoC_jal(Coolsand_UnpackADTSHeader)
0x0E3E31C0,	//0x0d78		VoC_bnez16_r(AACDecode_End,REG0)
0x4426F7E6,	//0x0d7a		VoC_bne16_rd(AACDecode_L4,REG6,0x415)(lo)	|	VoC_lw16i_short(REG6,0xffffffff,DEFAULT)
0x31C00415,	//0x0d7c		VoC_bnez16_r(AACDecode_End,REG0)(lo)	|	VoC_bne16_rd(AACDecode_L4,REG6,0x415)(hi)
0xF0260E3E,	//0x0d7e		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_bnez16_r(AACDecode_End,REG0)(hi)
		//0x0d7f		AACDecode_L4
0x04140B36,	//0x0d80		VoC_sub16_dr(REG6,0x414,REG6)
0x1506FFC0,	//0x0d82		VoC_sw16_d(REG6,0x414)(lo)	|	VoC_NOP
0xE5C60414,	//0x0d84		VoC_jump(AACDecode_L6)	|	VoC_sw16_d(REG6,0x414)(hi)
		//0x0d86		AACDecode_L3
0x4426F066,	//0x0d86		VoC_bne16_rd(AACDecode_L6,REG6,0x41b)(lo)	|	VoC_lw16i_short(REG6,0x3,DEFAULT)
0x31C0041B,	//0x0d88		VoC_bnez16_r(AACDecode_End,REG0)(lo)	|	VoC_bne16_rd(AACDecode_L6,REG6,0x41b)(hi)
0xF6200E3E,	//0x0d8a		VoC_lw16i_short(REG0,0xfffffff1,DEFAULT)	|	VoC_bnez16_r(AACDecode_End,REG0)(hi)
		//0x0d8b		AACDecode_L6
0xE0077046,	//0x0d8c		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x2,DEFAULT)
0x04141404,	//0x0d8e		VoC_lw16_d(REG4,0x414)
0x04151405,	//0x0d90		VoC_lw16_d(REG5,0x415)
0x0E3E3426,	//0x0d92		VoC_bgt16_rr(AACDecode_End,REG4,REG6)
0x0E3E3145,	//0x0d94		VoC_bngtz16_r(AACDecode_End,REG5)
0x1507F006,	//0x0d96		VoC_sw16_d(REG7,0x41d)(lo)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0x1507041D,	//0x0d98		VoC_sw16_d(REG7,0x41e)(lo)	|	VoC_sw16_d(REG7,0x41d)(hi)
0xF15E041E,	//0x0d9a		VoC_lw16i_short(WRAP2,0xa,DEFAULT)	|	VoC_sw16_d(REG7,0x41e)(hi)
		//0x0d9b		AACDecode_L7
0xF0065FC6,	//0x0d9c		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0x12262B80,	//0x0d9e		VoC_jal(Coolsand_DecodeNextElement)
0x0E3E31C0,	//0x0da0		VoC_bnez16_r(AACDecode_End,REG0)
0x504A0A84,	//0x0da2		VoC_lw16i(REG4,0x504a)
0x040E0724,	//0x0da4		VoC_add16_rd(REG4,REG4,0x40e)
0xE0275F86,	//0x0da6		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_pop16(REG6,DEFAULT)
0x81A45845,	//0x0da8		VoC_add16_rp(REG4,REG6,REG4,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG4,DEFAULT)
0x0DB034A7,	//0x0daa		VoC_bngt16_rr(AACDecode_L8,REG4,REG7)
0x7FF10AC0,	//0x0dac		VoC_lw16i(REG0,0xfffffff1)
0x0E3E2B00,	//0x0dae		VoC_jump_lg(AACDecode_End)
		//0x0db0		AACDecode_L8
0x21A92B80,	//0x0db0		VoC_jal(vpp_AmjpAacGenerateSfBandLong)
0xDFC57004,	//0x0db2		VoC_push16(REG5,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0xFFC0DFC6,	//0x0db4		VoC_NAD	|	VoC_push16(REG6,DEFAULT)
		//0x0db6		AACDecode_L9
0x0DCC34AC,	//0x0db6		VoC_bngt16_rr(AACDecode_L10,REG5,REG4)
0x5F42F15E,	//0x0db8		VoC_push32(REG45,DEFAULT)	|	VoC_lw16i_short(WRAP2,0xa,DEFAULT)
0xFFC0F681,	//0x0dba		VoC_NAD	|	VoC_movreg16(REG1,REG4,IN_PARALLEL)
0x1DD22B80,	//0x0dbc		VoC_jal(Coolsand_DecodeNoiselessData)
0x0E3E31C0,	//0x0dbe		VoC_bnez16_r(AACDecode_End,REG0)
0xD90BF01E,	//0x0dc0		VoC_lw32_sd(REG67,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP2,0x0,DEFAULT)
0xDFC25F46,	//0x0dc2		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0x132A2B80,	//0x0dc4		VoC_jal(Coolsand_Dequantize)
0xDF065F82,	//0x0dc6		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0xE0165F02,	//0x0dc8		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xE5EBC134,	//0x0dca		VoC_jump(AACDecode_L9)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
		//0x0dcc		AACDecode_L10
0x44BCF024,	//0x0dcc		VoC_bne16_rd(AACDecode_L11,REG4,0x40e)(lo)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x5F46040E,	//0x0dce		VoC_push32(RL6,DEFAULT)	|	VoC_bne16_rd(AACDecode_L11,REG4,0x40e)(hi)
0xFFC0DFC2,	//0x0dd0		VoC_NAD	|	VoC_push16(REG2,IN_PARALLEL)
0x1EAC2B80,	//0x0dd2		VoC_jal(Coolsand_StereoProcess)
0xDF065F82,	//0x0dd4		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0x0DDC3180,	//0x0dd6		VoC_bez16_r(AACDecode_L11,REG0)
0x2B00F6C0,	//0x0dd8		VoC_jump_lg(AACDecode_End)(lo)	|	VoC_lw16i_short(REG0,0xfffffff6,DEFAULT)
0xFFC00E3E,	//0x0dda		VoC_NAD	|	VoC_jump_lg(AACDecode_End)(hi)
		//0x0ddc		AACDecode_L11
0xDF867004,	//0x0ddc		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x5F46DF85,	//0x0dde		VoC_push32(RL6,DEFAULT)	|	VoC_pop16(REG5,DEFAULT)
0xFFC0DFC2,	//0x0de0		VoC_NAD	|	VoC_push16(REG2,IN_PARALLEL)
		//0x0de2		AACDecode_L12
0x0E1234AC,	//0x0de2		VoC_bngt16_rr(AACDecode_L13,REG5,REG4)
0xDFC65F42,	//0x0de4		VoC_push16(REG6,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0xFFC0DFC4,	//0x0de6		VoC_NAD	|	VoC_push16(REG4,DEFAULT)
0x20ED2B80,	//0x0de8		VoC_jal(vpp_AmjpAacGenerateCos4Sin4)
0x21A92B80,	//0x0dea		VoC_jal(vpp_AmjpAacGenerateSfBandLong)
0x10CC2B80,	//0x0dec		VoC_jal(Coolsand_PNS)
0x0DF33180,	//0x0dee		VoC_bez16_r(AACDecode_L14,REG0)
0x2B00F6A0,	//0x0df0		VoC_jump_lg(AACDecode_End)(lo)	|	VoC_lw16i_short(REG0,0xfffffff5,DEFAULT)
0xDF840E3E,	//0x0df2		VoC_pop16(REG4,DEFAULT)	|	VoC_jump_lg(AACDecode_End)(hi)
		//0x0df3		AACDecode_L14
0x1FB42B80,	//0x0df4		VoC_jal(Coolsand_TNSFilter)
0xD614590B,	//0x0df6		VoC_lw16_sd(REG4,0x0,IN_PARALLEL)	|	VoC_lw32_sd(REG67,0x0,DEFAULT)
0xFFC0C1A7,	//0x0df8		VoC_NAD	|	VoC_add16_rr(REG7,REG6,REG4,DEFAULT)
0x1BB52B80,	//0x0dfa		VoC_jal(Coolsand_IMDCT)
0xE0165F02,	//0x0dfc		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0x04154106,	//0x0dfe		VoC_be16_rd(AACDecode_NoStereoCopy,REG6,0x415)
0x62F81804,	//0x0e00		VoC_lw16i_set_inc(REG0,0x62f8,0x1)
0x14281809,	//0x0e02		VoC_lw16i_set_inc(REG1,0x1428,0x2)
0xD8824061,	//0x0e04		VoC_lw16inc_p(REG2,REG0,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0x0E0C2C21,	//0x0e06		VoC_loop_i(0x1,0x10)
0x0E0B2C80,	//0x0e08		VoC_loop_i(0x0,0x40)
0xDC92D882,	//0x0e0a		VoC_sw16inc_p(REG2,REG1,DEFAULT)	|	VoC_lw16inc_p(REG2,REG0,DEFAULT)
		//0x0e0b		VoC_endloop0
		//0x0e0c		VoC_endloop1
0xFFC0FFC0,	//0x0e0c		VoC_NAD	|	VoC_NOP
		//0x0e0e		AACDecode_NoStereoCopy
0xDF864134,	//0x0e0e		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0x0DE22B00,	//0x0e10		VoC_jump_lg(AACDecode_L12)
		//0x0e12		AACDecode_L13
0xDF065F82,	//0x0e12		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0xC1AE70E7,	//0x0e14		VoC_add16_rr(REG6,REG6,REG5,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x7,DEFAULT)
0x040E1404,	//0x0e16		VoC_lw16_d(REG4,0x40e)
0x0D9B35BC,	//0x0e18		VoC_bne16_rr(AACDecode_L7,REG7,REG4)
0x0A87F025,	//0x0e1a		VoC_lw16i(REG7,0x200)(lo)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0x0A860200,	//0x0e1c		VoC_lw16i(REG6,0x317c)(lo)	|	VoC_lw16i(REG7,0x200)(hi)
0x403D317C,	//0x0e1e		VoC_be16_rd(AACDecode_NoStereoWrite,REG5,0x415)(lo)	|	VoC_lw16i(REG6,0x317c)(hi)
0x0A870415,	//0x0e20		VoC_lw16i(REG7,0x400)(lo)	|	VoC_be16_rd(AACDecode_NoStereoWrite,REG5,0x415)(hi)
0x0A860400,	//0x0e22		VoC_lw16i(REG6,0xa14)(lo)	|	VoC_lw16i(REG7,0x400)(hi)
0xFFC00A14,	//0x0e24		VoC_NAD	|	VoC_lw16i(REG6,0xa14)(hi)
		//0x0e26		AACDecode_NoStereoWrite
0x40081484,	//0x0e26		VoC_lw32_d(ACC0,0x4008)
0x7FC31546,	//0x0e28		VoC_sw16_d(REG6,0xffc3)
0x7FC21547,	//0x0e2a		VoC_sw16_d(REG7,0xffc2)
0x7FC415C4,	//0x0e2c		VoC_sw32_d(ACC0,0xffc4)
0xFFC0DE80,	//0x0e2e		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x0e30		VoC_cfg_lg(0x8,)
0xDF85DFDB,	//0x0e32		VoC_pop16(REG5,DEFAULT)	|	VoC_push16(BITCACHE,DEFAULT)
0x1605F000,	//0x0e34		VoC_and16_ri(REG5,0x7)(lo)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0xE3280007,	//0x0e36		VoC_rbinc_r(REG4,REG5,DEFAULT)	|	VoC_and16_ri(REG5,0x7)(hi)
0x14221586,	//0x0e38		VoC_sw32_d(RL6,0x1422)
0x1427151B,	//0x0e3a		VoC_sw16_d(BITCACHE,0x1427)
0x14261502,	//0x0e3c		VoC_sw16_d(REG2,0x1426)
		//0x0e3e		AACDecode_End
0x04151403,	//0x0e3e		VoC_lw16_d(REG3,0x415)
0x50580B1B,	//0x0e40		VoC_sub16_dr(REG3,0x5058,REG3)
0x04000A85,	//0x0e42		VoC_lw16i(REG5,0x400)
0xEFF37E1D,	//0x0e44		VoC_lw16i_short(REG3,0xffffffff,IN_PARALLEL)	|	VoC_shr16_rr(REG5,REG3,DEFAULT)
0xFC825FA9,	//0x0e46		VoC_shru32_ri(REG45,0x10,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0x40211500,	//0x0e48		VoC_sw16_d(REG0,0x4021)
0x0E623180,	//0x0e4a		VoC_bez16_r(AACDecode_error_manage,REG0)
0x0E623503,	//0x0e4c		VoC_be16_rr(AACDecode_error_manage,REG0,REG3)
0x14261402,	//0x0e4e		VoC_lw16_d(REG2,0x1426)
0x14221486,	//0x0e50		VoC_lw32_d(RL6,0x1422)
0x1427141B,	//0x0e52		VoC_lw16_d(BITCACHE,0x1427)
0x6C04F004,	//0x0e54		VoC_bez16_d(AACDecode_error_manage_L0,0x4021)(lo)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x15044021,	//0x0e56		VoC_sw16_d(REG4,0x414)(lo)	|	VoC_bez16_d(AACDecode_error_manage_L0,0x4021)(hi)
0xFFC00414,	//0x0e58		VoC_NOP	|	VoC_sw16_d(REG4,0x414)(hi)
		//0x0e59		AACDecode_error_manage_L0
0xE2A0E242,	//0x0e5a		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_lbinc_p(REG2)
0x14261502,	//0x0e5c		VoC_sw16_d(REG2,0x1426)
0x14221586,	//0x0e5e		VoC_sw32_d(RL6,0x1422)
0x1427151B,	//0x0e60		VoC_sw16_d(BITCACHE,0x1427)
		//0x0e62		AACDecode_error_manage
0xFFC0E580,	//0x0e62		VoC_NAD	|	VoC_return
		//0x0e64		Coolsand_reload_data
0x14261407,	//0x0e64		VoC_lw16_d(REG7,0x1426)
0x07FF1607,	//0x0e66		VoC_and16_ri(REG7,0x7ff)
0x14251406,	//0x0e68		VoC_lw16_d(REG6,0x1425)
0x14261507,	//0x0e6a		VoC_sw16_d(REG7,0x1426)
0x0A83C3BD,	//0x0e6c		VoC_lw16i(REG3,0x800)(lo)	|	VoC_sub16_rr(REG5,REG6,REG7,DEFAULT)
0x31050800,	//0x0e6e		VoC_bgtz16_r(aac_reload_data_temp_L0,REG5)(lo)	|	VoC_lw16i(REG3,0x800)(hi)
0xC15D0E72,	//0x0e70		VoC_add16_rr(REG5,REG5,REG3,DEFAULT)	|	VoC_bgtz16_r(aac_reload_data_temp_L0,REG5)(hi)
		//0x0e72		aac_reload_data_temp_L0
0x06000A83,	//0x0e72		VoC_lw16i(REG3,0x600)
0x14241505,	//0x0e74		VoC_sw16_d(REG5,0x1424)
0x0E8B342B,	//0x0e76		VoC_bgt16_rr(aac_reload_data_temp_L1,REG5,REG3)
0xF8177816,	//0x0e78		VoC_shr16_ri(REG7,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0x2,DEFAULT)
0x3107C3F7,	//0x0e7a		VoC_bgtz16_r(aac_reload_data_temp_L2,REG7)(lo)	|	VoC_sub16_rr(REG7,REG7,REG6,DEFAULT)
0x0A850E80,	//0x0e7c		VoC_lw16i(REG5,0x200)(lo)	|	VoC_bgtz16_r(aac_reload_data_temp_L2,REG7)(hi)
0xC1EF0200,	//0x0e7e		VoC_add16_rr(REG7,REG7,REG5,DEFAULT)	|	VoC_lw16i(REG5,0x200)(hi)
		//0x0e80		aac_reload_data_temp_L2
0x7FFC1647,	//0x0e80		VoC_and16_ri(REG7,0xfffc)
0x0A85F144,	//0x0e82		VoC_lw16i(REG5,0x1ff)(lo)	|	VoC_lw16i_short(REG4,0xa,DEFAULT)
0xDFE901FF,	//0x0e84		VoC_push16(RA,DEFAULT)	|	VoC_lw16i(REG5,0x1ff)(hi)
0x01062B80,	//0x0e86		VoC_jal(vpp_AmjpCircBuffDmaRd)
0x1505DFA9,	//0x0e88		VoC_sw16_d(REG5,0x1425)(lo)	|	VoC_pop16(RA,DEFAULT)
0xE5801425,	//0x0e8a		VoC_return	|	VoC_sw16_d(REG5,0x1425)(hi)
		//0x0e8b		aac_reload_data_temp_L1
		//0x0e8c		Coolsand_CLZ
0x00200A86,	//0x0e8c		VoC_lw16i(REG6,0x20)
0x0EB13306,	//0x0e8e		VoC_bez32_r(CLZ_End,RL6)
0xFC867F37,	//0x0e90		VoC_shru32_ri(RL6,0x10,IN_PARALLEL)	|	VoC_movreg32(RL7,RL6,DEFAULT)
0xE1077026,	//0x0e92		VoC_lw16i_short(REG7,0x10,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x1,DEFAULT)
0x0E983346,	//0x0e94		VoC_bnez32_r(CLZ_L0,RL6)
0xFD8741BE,	//0x0e96		VoC_shru32_ri(RL7,0xfffffff0,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG7,DEFAULT)
		//0x0e98		CLZ_L0
0x7CC6FF3E,	//0x0e98		VoC_shru32_ri(RL6,0x18,DEFAULT)	|	VoC_movreg32(RL6,RL7,DEFAULT)
0x3346E087,	//0x0e9a		VoC_bnez32_r(CLZ_L1,RL6)(lo)	|	VoC_lw16i_short(REG7,0x8,IN_PARALLEL)
0x41BE0E9F,	//0x0e9c		VoC_add16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_bnez32_r(CLZ_L1,RL6)(hi)
0xFF3EFDC7,	//0x0e9e		VoC_movreg32(RL6,RL7,DEFAULT)	|	VoC_shru32_ri(RL7,0xfffffff8,IN_PARALLEL)
		//0x0e9f		CLZ_L1
0xE0477CE6,	//0x0ea0		VoC_lw16i_short(REG7,0x4,IN_PARALLEL)	|	VoC_shru32_ri(RL6,0x1c,DEFAULT)
0x0EA63346,	//0x0ea2		VoC_bnez32_r(CLZ_L2,RL6)
0xFDE741BE,	//0x0ea4		VoC_shru32_ri(RL7,0xfffffffc,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG7,DEFAULT)
		//0x0ea6		CLZ_L2
0x7CF6FF3E,	//0x0ea6		VoC_shru32_ri(RL6,0x1e,DEFAULT)	|	VoC_movreg32(RL6,RL7,DEFAULT)
0x3346E027,	//0x0ea8		VoC_bnez32_r(CLZ_L3,RL6)(lo)	|	VoC_lw16i_short(REG7,0x2,IN_PARALLEL)
0x41BE0EAE,	//0x0eaa		VoC_add16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_bnez32_r(CLZ_L3,RL6)(hi)
0xFFC0FDF7,	//0x0eac		VoC_NAD	|	VoC_shru32_ri(RL7,0xfffffffe,IN_PARALLEL)
		//0x0eae		CLZ_L3
0xE0077CFF,	//0x0eae		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_shru32_ri(RL7,0x1f,DEFAULT)
0xE580CAFB,	//0x0eb0		VoC_return	|	VoC_sub32_rr(REG67,REG67,RL7,DEFAULT)
		//0x0eb1		CLZ_End
		//0x0eb2		Coolsand_MULSHIFT32
0xF90E4C7C,	//0x0eb2		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x0eb4		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xE580CE78,	//0x0eb6		VoC_return	|	VoC_macX_rr(REG7,REG0,DEFAULT)
		//0x0eb8		Coolsand_MADD64
0xF6C56004,	//0x0eb8		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_movreg16(REG4,REG0,DEFAULT)
0xCE0F790E,	//0x0eba		VoC_mac32_rr(REG1,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEB17908,	//0x0ebc		VoC_macX_rr(REG6,REG1,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0x1,DEFAULT)
0xCEB8700D,	//0x0ebe		VoC_macX_rr(REG7,REG0,IN_PARALLEL)	|	VoC_lw16i_short(RL6_HI,0x0,DEFAULT)
0x00600A96,	//0x0ec0		VoC_lw16i(STATUS,0x60)
0x4E06F02C,	//0x0ec2		VoC_mac32_rr(REG0,REG6,DEFAULT)	|	VoC_lw16i_short(RL6_LO,0x1,DEFAULT)
0x1605F5F1,	//0x0ec4		VoC_and16_ri(REG5,0x1)(lo)	|	VoC_lw16i_short(FORMAT32,0xfffffffe,IN_PARALLEL)
0x30800001,	//0x0ec6		VoC_bcz16_r(MADD64_L0)(lo)	|	VoC_and16_ri(REG5,0x1)(hi)
0x70960ECC,	//0x0ec8		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_bcz16_r(MADD64_L0)(hi)
0xFFC0C975,	//0x0eca		VoC_NAD	|	VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)
		//0x0ecc		MADD64_L0
0xF57A4E47,	//0x0ecc		VoC_lw16i_short(FORMATX,0xffffffef,IN_PARALLEL)	|	VoC_macX_rr(REG0,REG7,DEFAULT)
0x00011604,	//0x0ece		VoC_and16_ri(REG4,0x1)
0x0ED43080,	//0x0ed0		VoC_bcz16_r(MADD64_L1)
0xC9757096,	//0x0ed2		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0ed4		MADD64_L1
0xF9F84E4E,	//0x0ed4		VoC_shru16_ri(REG0,0xffffffff,IN_PARALLEL)	|	VoC_macX_rr(REG1,REG6,DEFAULT)
0xF9FE71FA,	//0x0ed6		VoC_shru16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_lw16i_short(FORMATX,0xf,DEFAULT)
0x0EDC3080,	//0x0ed8		VoC_bcz16_r(MADD64_L2)
0xC9757096,	//0x0eda		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0edc		MADD64_L2
0x0EE63184,	//0x0edc		VoC_bez16_r(MADD64_L3,REG4)
0xFAFB7F1F,	//0x0ede		VoC_shr32_ri(REG67,0x1f,IN_PARALLEL)	|	VoC_movreg32(RL7,REG67,DEFAULT)
0xC95D493C,	//0x0ee0		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
0x0EE63080,	//0x0ee2		VoC_bcz16_r(MADD64_L3)
0xC9757096,	//0x0ee4		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0ee6		MADD64_L3
0x0EF03185,	//0x0ee6		VoC_bez16_r(MADD64_L4,REG5)
0xFAF87F07,	//0x0ee8		VoC_shr32_ri(REG01,0x1f,IN_PARALLEL)	|	VoC_movreg32(RL7,REG01,DEFAULT)
0xC945493C,	//0x0eea		VoC_add32_rr(ACC1,ACC1,REG01,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
0x0EF03080,	//0x0eec		VoC_bcz16_r(MADD64_L4)
0xC9757096,	//0x0eee		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0ef0		MADD64_L4
0x3184E42C,	//0x0ef0		VoC_bez16_r(MADD64_L5,REG4)(lo)	|	VoC_and16_rr(REG4,REG5,DEFAULT)
0xC9340EF8,	//0x0ef2		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_bez16_r(MADD64_L5,REG4)(hi)
0x0EF83080,	//0x0ef4		VoC_bcz16_r(MADD64_L5)
0xC9757096,	//0x0ef6		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0ef8		MADD64_L5
0x00200A96,	//0x0ef8		VoC_lw16i(STATUS,0x20)
0xFFC0E580,	//0x0efa		VoC_NAD	|	VoC_return
		//0x0efc		Coolsand_PreMultiplyRescale
0xF47A7019,	//0x0efc		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xF3FA7006,	//0x0efe		VoC_lw16i_short(INC2,0xfffffffe,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0x01000A85,	//0x0f00		VoC_lw16i(REG5,0x100)
0x50F80A84,	//0x0f02		VoC_lw16i(REG4,0x50f8)
0x0F0A3183,	//0x0f04		VoC_bez16_r(PreMultiplyRescale_L0,REG3)
0x01000A86,	//0x0f06		VoC_lw16i(REG6,0x100)
0x08000A85,	//0x0f08		VoC_lw16i(REG5,0x800)
		//0x0f0a		PreMultiplyRescale_L0
0xC133406A,	//0x0f0a		VoC_add16_rr(REG3,REG4,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG1,REG5,DEFAULT)
0xF00B781D,	//0x0f0c		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0x3,DEFAULT)
0xFFC0DE10,	//0x0f0e		VoC_NAD	|	VoC_inc_p(REG2,DEFAULT)
0x0F592E28,	//0x0f10		VoC_loop_r(0,REG5)
0xD98B59DE,	//0x0f12		VoC_lw32_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG3,DEFAULT)
0xD99559DA,	//0x0f14		VoC_lw32_p(ACC1,REG2,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG3,DEFAULT)
0xFE857E83,	//0x0f16		VoC_shr32_rr(ACC1,REG0,IN_PARALLEL)	|	VoC_shr32_rr(REG67,REG0,DEFAULT)
0xFF1748EB,	//0x0f18		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,ACC1,DEFAULT)
0xF90E4D7C,	//0x0f1a		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x0f1c		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xFF2B4E7C,	//0x0f1e		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xFBFF7F32,	//0x0f20		VoC_shr32_ri(RL7,0xffffffff,IN_PARALLEL)	|	VoC_movreg32(REG45,RL6,DEFAULT)
0xCD7D790E,	//0x0f22		VoC_multf32_rr(ACC1,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEB5790C,	//0x0f24		VoC_macX_rr(REG6,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEBC4BBA,	//0x0f26		VoC_macX_rr(REG7,REG4,IN_PARALLEL)	|	VoC_sub32_rr(REG45,RL6,RL7,DEFAULT)
0xD98B7F27,	//0x0f28		VoC_lw32_p(REG67,REG1,IN_PARALLEL)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0xCB7D7E83,	//0x0f2a		VoC_sub32_rr(ACC1,ACC1,RL7,IN_PARALLEL)	|	VoC_shr32_rr(REG67,REG0,DEFAULT)
0xF90E4D7C,	//0x0f2c		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x0f2e		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xD9DE4E7C,	//0x0f30		VoC_lw32inc_p(RL6,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0x505C0794,	//0x0f32		VoC_sub16_rd(REG4,REG2,0x505c)
0xD9DA493C,	//0x0f34		VoC_lw32inc_p(REG45,REG3,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
0xFF1759A3,	//0x0f36		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG4,DEFAULT)
0xFE835DCC,	//0x0f38		VoC_shr32_rr(REG67,REG0,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x7E84D98C,	//0x0f3a		VoC_shr32_rr(ACC0,REG0,DEFAULT)	|	VoC_lw32_p(ACC0,REG1,DEFAULT)
0x48E3DDCD,	//0x0f3c		VoC_add32_rr(REG67,REG67,ACC0,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG1,IN_PARALLEL)
0x7F25DF43,	//0x0f3e		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_push32(REG67,IN_PARALLEL)
0x4D7CF90E,	//0x0f40		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E75F90C,	//0x0f42		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x4E7CFBFF,	//0x0f44		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shr32_ri(RL7,0xffffffff,IN_PARALLEL)
0xFF32FF2B,	//0x0f46		VoC_movreg32(REG45,RL6,DEFAULT)	|	VoC_movreg32(REG67,ACC1,IN_PARALLEL)
0xCD7D790E,	//0x0f48		VoC_multf32_rr(ACC1,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEB5790C,	//0x0f4a		VoC_macX_rr(REG6,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEBC4BBA,	//0x0f4c		VoC_macX_rr(REG7,REG4,IN_PARALLEL)	|	VoC_sub32_rr(REG45,RL6,RL7,DEFAULT)
0x5F03FF27,	//0x0f4e		VoC_pop32(REG67,DEFAULT)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0x4D7CCB7D,	//0x0f50		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,RL7,IN_PARALLEL)
0x4E75F90E,	//0x0f52		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE7CF90C,	//0x0f54		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xC93CDDD5,	//0x0f56		VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
0xDDD4FFC0,	//0x0f58		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_NOP
		//0x0f59		VoC_endloop0
0xFFC0E580,	//0x0f5a		VoC_NAD	|	VoC_return
		//0x0f5c		Coolsand_PostMultiplyRescale
0x50580B00,	//0x0f5c		VoC_sub16_dr(REG0,0x5058,REG0)
0xF3FA73C6,	//0x0f5e		VoC_lw16i_short(INC2,0xfffffffe,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x1e,DEFAULT)
0x01000A85,	//0x0f60		VoC_lw16i(REG5,0x100)
0x50F80A84,	//0x0f62		VoC_lw16i(REG4,0x50f8)
0x0F693183,	//0x0f64		VoC_bez16_r(PostMultiplyRescale_L0,REG3)
0x0A85F046,	//0x0f66		VoC_lw16i(REG5,0x800)(lo)	|	VoC_lw16i_short(REG6,0x2,DEFAULT)
0xC06A0800,	//0x0f68		VoC_add16_rr(REG2,REG1,REG5,DEFAULT)	|	VoC_lw16i(REG5,0x800)(hi)
		//0x0f69		PostMultiplyRescale_L0
0x5F40FFC0,	//0x0f6a		VoC_push32(REG01,DEFAULT)	|	VoC_NOP
0x5F42DFE9,	//0x0f6c		VoC_push32(REG45,DEFAULT)	|	VoC_push16(RA,IN_PARALLEL)
0xDF43DFC2,	//0x0f6e		VoC_push32(REG67,DEFAULT)	|	VoC_push16(REG2,IN_PARALLEL)
0x21652B80,	//0x0f70		VoC_jal(vpp_AmjpAacGenerateCos1)
0xF3FA5F03,	//0x0f72		VoC_lw16i_short(INC2,0xfffffffe,IN_PARALLEL)	|	VoC_pop32(REG67,DEFAULT)
0xF0095F02,	//0x0f74		VoC_lw16i_short(INC1,0x2,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xDF825F00,	//0x0f76		VoC_pop16(REG2,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x0A83DFA9,	//0x0f78		VoC_lw16i(REG3,0x59f8)(lo)	|	VoC_pop16(RA,DEFAULT)
0x705359F8,	//0x0f7a		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_lw16i(REG3,0x59f8)(hi)
0x7019DE10,	//0x0f7c		VoC_lw16i_short(FORMAT32,0x0,DEFAULT)	|	VoC_inc_p(REG2,IN_PARALLEL)
0x59DEF009,	//0x0f7e		VoC_lw32inc_p(RL6,REG3,DEFAULT)	|	VoC_lw16i_short(INC1,0x2,IN_PARALLEL)
0x599FC0F3,	//0x0f80		VoC_lw32_p(RL7,REG3,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x2E28F81D,	//0x0f82		VoC_loop_r(0,REG5)(lo)	|	VoC_shr16_ri(REG5,0x3,IN_PARALLEL)
0xDFC60FCF,	//0x0f84		VoC_push16(REG6,DEFAULT)	|	VoC_loop_r(0,REG5)(hi)
0x108AD9CA,	//0x0f86		VoC_add32_rp(REG45,REG45,REG1,DEFAULT)	|	VoC_lw32inc_p(REG45,REG1,DEFAULT)
0x4D7CFF3B,	//0x0f88		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0x4E75F90E,	//0x0f8a		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E7CF90C,	//0x0f8c		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x598AE027,	//0x0f8e		VoC_lw32_p(REG45,REG1,DEFAULT)	|	VoC_lw16i_short(REG7,0x2,IN_PARALLEL)
0x7F33C279,	//0x0f90		VoC_movreg32(REG67,RL6,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG7,IN_PARALLEL)
0x4D7CFF25,	//0x0f92		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_movreg32(ACC1,ACC0,IN_PARALLEL)
0x4E75F90E,	//0x0f94		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E7CF90C,	//0x0f96		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x4BBBFBFF,	//0x0f98		VoC_sub32_rr(REG67,RL6,RL7,DEFAULT)	|	VoC_shr32_ri(RL7,0xffffffff,IN_PARALLEL)
0x4B64D98A,	//0x0f9a		VoC_sub32_rr(ACC0,ACC1,ACC0,DEFAULT)	|	VoC_lw32_p(REG45,REG1,IN_PARALLEL)
0xFE84D996,	//0x0f9c		VoC_shr32_rr(ACC0,REG0,DEFAULT)	|	VoC_lw32_p(RL6,REG2,IN_PARALLEL)
0xF90E4D7C,	//0x0f9e		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C5DD4,	//0x0fa0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG2,DEFAULT)
0xDF864E75,	//0x0fa2		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0x59DFCE7C,	//0x0fa4		VoC_lw32inc_p(RL7,REG3,DEFAULT)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0x599AC0F3,	//0x0fa6		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x5FC6C964,	//0x0fa8		VoC_push16(REG6,DEFAULT)	|	VoC_add32_rr(ACC0,ACC1,ACC0,IN_PARALLEL)
0x5993FF45,	//0x0faa		VoC_lw32_p(REG67,REG2,DEFAULT)	|	VoC_lw32z(ACC1,IN_PARALLEL)
0x48EBCB75,	//0x0fac		VoC_add32_rr(REG67,REG67,ACC1,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,RL6,IN_PARALLEL)
0x7F16FE84,	//0x0fae		VoC_movreg32(RL6,REG45,DEFAULT)	|	VoC_shr32_rr(ACC0,REG0,IN_PARALLEL)
0x5DCCCD7C,	//0x0fb0		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E75F90E,	//0x0fb2		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E7CF90C,	//0x0fb4		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x7F2BFF3A,	//0x0fb6		VoC_movreg32(REG67,ACC1,DEFAULT)	|	VoC_movreg32(REG45,RL7,IN_PARALLEL)
0x7F25F90C,	//0x0fb8		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x4D7CF90E,	//0x0fba		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E75DF46,	//0x0fbc		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_push32(RL6,IN_PARALLEL)
0x4E7CFBFE,	//0x0fbe		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shr32_ri(RL6,0xffffffff,IN_PARALLEL)
0x5992CBF3,	//0x0fc0		VoC_lw32_p(REG45,REG2,DEFAULT)	|	VoC_sub32_rr(REG67,RL7,RL6,IN_PARALLEL)
0x4B67FF3E,	//0x0fc2		VoC_sub32_rr(RL7,ACC1,ACC0,DEFAULT)	|	VoC_movreg32(RL6,RL7,IN_PARALLEL)
0x7E87F90E,	//0x0fc4		VoC_shr32_rr(RL7,REG0,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E2FF90C,	//0x0fc6		VoC_mac32_rr(REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x4E75FF2C,	//0x0fc8		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_movreg32(ACC0,ACC1,IN_PARALLEL)
0xCE7CDDD7,	//0x0fca		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_sw32inc_p(RL7,REG2,IN_PARALLEL)
0xFE84DF86,	//0x0fcc		VoC_shr32_rr(ACC0,REG0,DEFAULT)	|	VoC_pop16(REG6,DEFAULT)
0xDDCCDF07,	//0x0fce		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(RL7,DEFAULT)
		//0x0fcf		VoC_endloop0
0xF000E580,	//0x0fd0		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_return
		//0x0fd1		Coolsand_DCT4
0xDFE97087,	//0x0fd2		VoC_push16(RA,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x4,DEFAULT)
0x0FD734BA,	//0x0fd4		VoC_bngt16_rr(DCT4_L0,REG7,REG2)
0xDFC3C3D0,	//0x0fd6		VoC_push16(REG3,DEFAULT)	|	VoC_sub16_rr(REG0,REG7,REG2,DEFAULT)
		//0x0fd7		DCT4_L0
0xFFC0DF40,	//0x0fd8		VoC_NAD	|	VoC_push32(REG01,DEFAULT)
0x0EFC2B80,	//0x0fda		VoC_jal(Coolsand_PreMultiplyRescale)
0xD9085613,	//0x0fdc		VoC_lw32_sd(REG01,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0x15B32B80,	//0x0fde		VoC_jal(Coolsand_R4FFT)
0xDF005F83,	//0x0fe0		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0x0F5C2B80,	//0x0fe2		VoC_jal(Coolsand_PostMultiplyRescale)
0xFFC0DFA9,	//0x0fe4		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xF180E580,	//0x0fe6		VoC_lw16i_short(REG0,0xc,DEFAULT)	|	VoC_return
		//0x0fe7		Coolsand_InvRootR
0xFF1D7D20,	//0x0fe8		VoC_movreg32(ACC1,REG67,IN_PARALLEL)	|	VoC_shru32_ri(REG01,0xffffffe4,DEFAULT)
0xF90E4C7C,	//0x0fea		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x0fec		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xE0604E78,	//0x0fee		VoC_lw16i_short(REG0,0x6,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0xFDF4FD20,	//0x0ff0		VoC_shru32_ri(ACC0,0xfffffffe,DEFAULT)	|	VoC_shru32_ri(REG01,0xffffffe4,DEFAULT)
0xE89BC900,	//0x0ff2		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_add32_rr(REG01,ACC0,REG01,DEFAULT)
0xFF077F03,	//0x0ff4		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_movreg32(REG67,REG01,DEFAULT)
0xF90E4C7C,	//0x0ff6		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x0ff8		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xFF2BCE78,	//0x0ffa		VoC_movreg32(REG67,ACC1,DEFAULT)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0x4C7CFF20,	//0x0ffc		VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)	|	VoC_movreg32(REG01,ACC0,DEFAULT)
0x4E71F90E,	//0x0ffe		VoC_macX_rr(REG6,REG1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE78F908,	//0x1000		VoC_macX_rr(REG7,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x1,IN_PARALLEL)
0xE0CE7F38,	//0x1002		VoC_lw16i_short(RL7_LO,0xc,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xFDF4FD47,	//0x1004		VoC_shru32_ri(ACC0,0xfffffffe,DEFAULT)	|	VoC_shru32_ri(RL7,0xffffffe8,DEFAULT)
0x4C7CCBE3,	//0x1006		VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)	|	VoC_sub32_rr(REG67,RL7,ACC0,DEFAULT)
0x4E71F90E,	//0x1008		VoC_macX_rr(REG6,REG1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE78F908,	//0x100a		VoC_macX_rr(REG7,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x1,IN_PARALLEL)
0xFDDCFFC0,	//0x100c		VoC_shru32_ri(ACC0,0xfffffffb,DEFAULT)	|	VoC_NOP
		//0x100e		VoC_endloop0
0x7AF4FF20,	//0x100e		VoC_shr32_ri(ACC0,0x1e,DEFAULT)	|	VoC_movreg32(REG01,ACC0,DEFAULT)
0x3304E016,	//0x1010		VoC_bez32_r(InvRootR_L0,ACC0)(lo)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0xFB131016,	//0x1012		VoC_shr32_ri(REG67,0xffffffe2,DEFAULT)	|	VoC_bez32_r(InvRootR_L0,ACC0)(hi)
0x505A0998,	//0x1014		VoC_sub32_rd(REG01,REG67,0x505a)
		//0x1016		InvRootR_L0
0xE580FF03,	//0x1016		VoC_return	|	VoC_movreg32(REG67,REG01,DEFAULT)
		//0x1018		Coolsand_ScaleNoiseVector
0xF00A7119,	//0x1018		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x8,DEFAULT)
0xF6827F44,	//0x101a		VoC_movreg16(REG2,REG4,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x10203180,	//0x101c		VoC_bez16_r(ScaleNoiseVector_L0,REG0)
0xD412E601,	//0x101e		VoC_mac32inc_pp(REG2,REG2,DEFAULT)	|	VoC_loop_r_short(REG0,DEFAULT)
		//0x101f		VoC_endloop0
		//0x1020		ScaleNoiseVector_L0
0x3304F019,	//0x1020		VoC_bez32_r(ScaleNoiseVector_End,ACC0)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0x5F451082,	//0x1022		VoC_push32(ACC1,DEFAULT)	|	VoC_bez32_r(ScaleNoiseVector_End,ACC0)(hi)
0xDF46DFE9,	//0x1024		VoC_push32(RL6,DEFAULT)	|	VoC_push16(RA,IN_PARALLEL)
0x6066DF47,	//0x1026		VoC_movreg16(REG6,REG3,DEFAULT)	|	VoC_push32(RL7,DEFAULT)
0x0A82DFC0,	//0x1028		VoC_lw16i(REG2,0x4d54)(lo)	|	VoC_push16(REG0,IN_PARALLEL)
0x16064D54,	//0x102a		VoC_and16_ri(REG6,0x3)(lo)	|	VoC_lw16i(REG2,0x4d54)(hi)
0x78FE0003,	//0x102c		VoC_shr16_ri(REG6,0xffffffff,DEFAULT)	|	VoC_and16_ri(REG6,0x3)(hi)
0x40B2F813,	//0x102e		VoC_add16_rr(REG2,REG2,REG6,DEFAULT)	|	VoC_shr16_ri(REG3,0x2,IN_PARALLEL)
0xC0F3E056,	//0x1030		VoC_add16_rr(REG3,REG3,REG6,DEFAULT)	|	VoC_lw16i_short(REG6,0x5,IN_PARALLEL)
0xFF265995,	//0x1032		VoC_movreg32(RL6,ACC0,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG2,DEFAULT)
0x0E8C2B80,	//0x1034		VoC_jal(Coolsand_CLZ)
0x505C07B5,	//0x1036		VoC_sub16_rd(REG5,REG6,0x505c)
0x7FFE1645,	//0x1038		VoC_and16_ri(REG5,0xfffe)
0x50580B28,	//0x103a		VoC_sub16_dr(REG0,0x5058,REG5)
0xDF457F23,	//0x103c		VoC_push32(ACC1,IN_PARALLEL)	|	VoC_movreg32(REG67,ACC0,DEFAULT)
0xFFC0FE83,	//0x103e		VoC_NAD	|	VoC_shr32_rr(REG67,REG0,DEFAULT)
0x0FE72B80,	//0x1040		VoC_jal(Coolsand_InvRootR)
0xE1367F1C,	//0x1042		VoC_lw16i_short(REG6,0x13,IN_PARALLEL)	|	VoC_movreg32(ACC0,REG67,DEFAULT)
0xDF05780D,	//0x1044		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0x1,DEFAULT)
0x42F3C3AE,	//0x1046		VoC_sub16_rr(REG3,REG3,REG6,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)
0xFFC0FF26,	//0x1048		VoC_NAD	|	VoC_movreg32(RL6,ACC0,IN_PARALLEL)
0x0E8C2B80,	//0x104a		VoC_jal(Coolsand_CLZ)
0x505A0B36,	//0x104c		VoC_sub16_dr(REG6,0x505a,REG6)
0x0736FEB4,	//0x104e		VoC_add16_rd(REG6,REG6,0x505f)(lo)	|	VoC_shr32_rr(ACC0,REG6,DEFAULT)
0xC19D505F,	//0x1050		VoC_add16_rr(REG5,REG6,REG3,DEFAULT)	|	VoC_add16_rd(REG6,REG6,0x505f)(hi)
0xFF2B7F20,	//0x1052		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_movreg32(REG01,ACC0,DEFAULT)
0xF90E4C7C,	//0x1054		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x1056		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xEE104E78,	//0x1058		VoC_lw16i_short(REG0,0xffffffe1,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0x50580B2D,	//0x105a		VoC_sub16_dr(REG5,0x5058,REG5)
0x10603485,	//0x105c		VoC_bngt16_rr(ScaleNoiseVector_L1,REG0,REG5)
0xFFC0E005,	//0x105e		VoC_NAD	|	VoC_movreg16(REG5,REG0,DEFAULT)
		//0x1060		ScaleNoiseVector_L1
0x27791486,	//0x1060		VoC_lw32_d(RL6,0x2779)
0xF6825F80,	//0x1062		VoC_movreg16(REG2,REG4,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x3105F004,	//0x1064		VoC_bgtz16_r(ScaleNoiseVector_L2,REG5)(lo)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x60A4106A,	//0x1066		VoC_movreg16(REG4,REG5,DEFAULT)	|	VoC_bgtz16_r(ScaleNoiseVector_L2,REG5)(hi)
0xFFC0E005,	//0x1068		VoC_NAD	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
		//0x106a		ScaleNoiseVector_L2
0xFF256611,	//0x106a		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_loop_r_short(REG0,DEFAULT)
0xFF2B5990,	//0x106c		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_lw32_p(REG01,REG2,DEFAULT)
0x4C7CFEA0,	//0x106e		VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)	|	VoC_shr32_rr(REG01,REG4,DEFAULT)
0x4E71F90E,	//0x1070		VoC_macX_rr(REG6,REG1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE78F908,	//0x1072		VoC_macX_rr(REG7,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x1,IN_PARALLEL)
0xFEACFFC0,	//0x1074		VoC_shr32_rr(ACC0,REG5,DEFAULT)	|	VoC_NOP
0xFAFC7F23,	//0x1076		VoC_shr32_ri(ACC0,0x1f,IN_PARALLEL)	|	VoC_movreg32(REG67,ACC0,DEFAULT)
0xDDD46563,	//0x1078		VoC_sw32inc_p(ACC0,REG2,IN_PARALLEL)	|	VoC_xor32_rr(REG67,ACC0,DEFAULT)
0xE51ECAE3,	//0x107a		VoC_or32_rr(RL6,REG67,DEFAULT)	|	VoC_sub32_rr(REG67,REG67,ACC0,DEFAULT)
		//0x107b		VoC_endloop0
0xDFA95F07,	//0x107c		VoC_pop16(RA,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0xDF05DF06,	//0x107e		VoC_pop32(ACC1,DEFAULT)	|	VoC_pop32(RL6,DEFAULT)
0x27791586,	//0x1080		VoC_sw32_d(RL6,0x2779)
		//0x1082		ScaleNoiseVector_End
0xFFC0E580,	//0x1082		VoC_NAD	|	VoC_return
		//0x1084		Coolsand_GenerateNoiseVector
0x10BD3140,	//0x1084		VoC_bngtz16_r(GenerateNoiseVector_L0,REG0)
0xDFC65F40,	//0x1086		VoC_push16(REG6,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xDFC75F45,	//0x1088		VoC_push16(REG7,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xDFC25F46,	//0x108a		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0xDFC35F47,	//0x108c		VoC_push16(REG3,IN_PARALLEL)	|	VoC_push32(RL7,DEFAULT)
0xF00A6082,	//0x108e		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_movreg16(REG2,REG4,DEFAULT)
0x2720180B,	//0x1090		VoC_lw16i_set_inc(REG3,0x2720,0x2)
0x735F0ACA,	//0x1092		VoC_lw16i(ACC1_LO,0xf35f)
0x3C6E0A8B,	//0x1094		VoC_lw16i(ACC1_HI,0x3c6e)
0x00480A96,	//0x1096		VoC_lw16i(STATUS,0x48)
0xE61AF096,	//0x1098		VoC_loop_r_short(REG0,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0x7F26D99C,	//0x109a		VoC_movreg32(RL6,ACC0,DEFAULT)	|	VoC_lw32_p(ACC0,REG3,DEFAULT)
0x4934FD84,	//0x109c		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_shru32_ri(ACC0,0xfffffff0,IN_PARALLEL)
0x7F37FDF6,	//0x109e		VoC_movreg32(RL7,RL6,DEFAULT)	|	VoC_shru32_ri(RL6,0xfffffffe,IN_PARALLEL)
0xF096FDFE,	//0x10a0		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_shru32_ri(RL6,0xffffffff,IN_PARALLEL)
0xF096C9BE,	//0x10a2		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_add32_rr(RL6,RL6,RL7,DEFAULT)
0xFDCE4934,	//0x10a4		VoC_shru32_ri(RL6,0xfffffff9,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)
0x4934F096,	//0x10a6		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xF096FDE6,	//0x10a8		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_shru32_ri(RL6,0xfffffffc,IN_PARALLEL)
0xFDD64934,	//0x10aa		VoC_shru32_ri(RL6,0xfffffffa,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)
0xC934F096,	//0x10ac		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xC92CF096,	//0x10ae		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xFA847096,	//0x10b0		VoC_shr32_ri(ACC0,0x10,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xDDD4DD9C,	//0x10b2		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32_p(ACC0,REG3,DEFAULT)
		//0x10b3		VoC_endloop0
0x5F07F116,	//0x10b4		VoC_pop32(RL7,DEFAULT)	|	VoC_lw16i_short(STATUS,0x8,DEFAULT)
0x5F06DF83,	//0x10b6		VoC_pop32(RL6,DEFAULT)	|	VoC_pop16(REG3,IN_PARALLEL)
0x5F05DF82,	//0x10b8		VoC_pop32(ACC1,DEFAULT)	|	VoC_pop16(REG2,IN_PARALLEL)
0x5F00DF87,	//0x10ba		VoC_pop32(REG01,DEFAULT)	|	VoC_pop16(REG7,IN_PARALLEL)
0xE580DF86,	//0x10bc		VoC_return	|	VoC_pop16(REG6,IN_PARALLEL)
		//0x10bd		GenerateNoiseVector_L0
		//0x10be		Coolsand_CopyNoiseVector
0x6082DF41,	//0x10be		VoC_movreg16(REG2,REG4,DEFAULT)	|	VoC_push32(REG23,DEFAULT)
0x60E3F00A,	//0x10c0		VoC_movreg16(REG3,REG7,DEFAULT)	|	VoC_lw16i_short(INC2,0x2,IN_PARALLEL)
0x3140F00B,	//0x10c2		VoC_bngtz16_r(CopyNoiseVecto_L0,REG0)(lo)	|	VoC_lw16i_short(INC3,0x2,IN_PARALLEL)
0xE60310C9,	//0x10c4		VoC_loop_r_short(REG0,DEFAULT)	|	VoC_bngtz16_r(CopyNoiseVecto_L0,REG0)(hi)
0xFFC0D9D4,	//0x10c6		VoC_NOP	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
		//0x10c8		VoC_endloop0
0xDF01DDDC,	//0x10c8		VoC_pop32(REG23,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x10c9		CopyNoiseVecto_L0
0xFFC0E580,	//0x10ca		VoC_NAD	|	VoC_return
		//0x10cc		Coolsand_PNS
0xDFE97078,	//0x10cc		VoC_push16(RA,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT16,0x3,DEFAULT)
0x25341403,	//0x10ce		VoC_lw16_d(REG3,0x2534)
0x24361804,	//0x10d0		VoC_lw16i_set_inc(REG0,0x2436,0x1)
0x271E0A84,	//0x10d2		VoC_lw16i(REG4,0x271e)
0x505A4481,	//0x10d4		VoC_bne16_rd(Coolsand_PNS_L0,REG1,0x505a)
0x271F0A84,	//0x10d6		VoC_lw16i(REG4,0x271f)
0x505A4023,	//0x10d8		VoC_be16_rd(Coolsand_PNS_L0,REG3,0x505a)
0x24451804,	//0x10da		VoC_lw16i_set_inc(REG0,0x2445,0x1)
		//0x10dc		Coolsand_PNS_L0
0xFF465844,	//0x10dc		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_lw16_p(REG4,REG4,DEFAULT)
0x10E431C4,	//0x10de		VoC_bnez16_r(Coolsand_PNS_L0_sub0,REG4)
0x2B00F000,	//0x10e0		VoC_jump_lg(Coolsand_PNS_End)(lo)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0xFFC011D6,	//0x10e2		VoC_NAD	|	VoC_jump_lg(Coolsand_PNS_End)(hi)
		//0x10e4		Coolsand_PNS_L0_sub0
0x27791586,	//0x10e4		VoC_sw32_d(RL6,0x2779)
0xF0085E00,	//0x10e6		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xF00C6026,	//0x10e8		VoC_lw16i_short(INC0,0x3,IN_PARALLEL)	|	VoC_movreg16(REG6,REG1,DEFAULT)
0xF0045883,	//0x10ea		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_lw16inc_p(REG3,REG0,DEFAULT)
0xF4015884,	//0x10ec		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0xF47A5885,	//0x10ee		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x27781504,	//0x10f0		VoC_sw16_d(REG4,0x2778)
0x277B1505,	//0x10f2		VoC_sw16_d(REG5,0x277b)
0x4E680A84,	//0x10f4		VoC_lw16i(REG4,0x4e68)
0x59F81805,	//0x10f6		VoC_lw16i_set_inc(REG1,0x59f8,0x1)
0x04000A87,	//0x10f8		VoC_lw16i(REG7,0x400)
0x505C4483,	//0x10fa		VoC_bne16_rd(Coolsand_PNS_L1,REG3,0x505c)
0x4F420A84,	//0x10fc		VoC_lw16i(REG4,0x4f42)
0x4F4E1805,	//0x10fe		VoC_lw16i_set_inc(REG1,0x4f4e,0x1)
0x00800A87,	//0x1100		VoC_lw16i(REG7,0x80)
		//0x1102		Coolsand_PNS_L1
0x040C0724,	//0x1102		VoC_add16_rd(REG4,REG4,0x40c)
0x8061F005,	//0x1104		VoC_add16_rp(REG1,REG1,REG4,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x277E1507,	//0x1106		VoC_sw16_d(REG7,0x277e)
0x27771506,	//0x1108		VoC_sw16_d(REG6,0x2777)
0xE0137002,	//0x110a		VoC_lw16i_short(REG3,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x277C1502,	//0x110c		VoC_sw16_d(REG2,0x277c)
0x040E4433,	//0x110e		VoC_bne16_rd(Coolsand_PNS_L1_sub0,REG3,0x40e)
0x25344423,	//0x1110		VoC_bne16_rd(Coolsand_PNS_L1_sub0,REG3,0x2534)
0x277C1503,	//0x1112		VoC_sw16_d(REG3,0x277c)
		//0x1114		Coolsand_PNS_L1_sub0
0x11203186,	//0x1114		VoC_bez16_r(Coolsand_PNS_L2,REG6)
0x1C280A84,	//0x1116		VoC_lw16i(REG4,0x1c28)
0x269D1806,	//0x1118		VoC_lw16i_set_inc(REG2,0x269d,0x1)
0x25AD1807,	//0x111a		VoC_lw16i_set_inc(REG3,0x25ad,0x1)
0x27750A86,	//0x111c		VoC_lw16i(REG6,0x2775)
0xFFC0E5CA,	//0x111e		VoC_NAD	|	VoC_jump(Coolsand_PNS_L3)
		//0x1120		Coolsand_PNS_L2
0x14280A84,	//0x1120		VoC_lw16i(REG4,0x1428)
0x26251806,	//0x1122		VoC_lw16i_set_inc(REG2,0x2625,0x1)
0x25351807,	//0x1124		VoC_lw16i_set_inc(REG3,0x2535,0x1)
0x27740A86,	//0x1126		VoC_lw16i(REG6,0x2774)
		//0x1128		Coolsand_PNS_L3
0x1506FF0D,	//0x1128		VoC_sw16_d(REG6,0x277f)(lo)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0x1501277F,	//0x112a		VoC_sw16_d(REG1,0x277e)(lo)	|	VoC_sw16_d(REG6,0x277f)(hi)
0xFF47277E,	//0x112c		VoC_lw32z(RL7,DEFAULT)	|	VoC_sw16_d(REG1,0x277e)(hi)
		//0x112e		Coolsand_PNS_L10
0x1405E1E6,	//0x112e		VoC_lw16_d(REG5,0x277b)(lo)	|	VoC_movreg16(REG6,RL7_HI,DEFAULT)
0x34AE277B,	//0x1130		VoC_bngt16_rr(Coolsand_PNS_L11,REG5,REG6)(lo)	|	VoC_lw16_d(REG5,0x277b)(hi)
0xD88511C6,	//0x1132		VoC_lw16inc_p(REG5,REG0,DEFAULT)	|	VoC_bngt16_rr(Coolsand_PNS_L11,REG5,REG6)(hi)
0xFFC0DFC0,	//0x1134		VoC_NAD	|	VoC_push16(REG0,DEFAULT)
0x11BD2E29,	//0x1136		VoC_loop_r(1,REG5)
0x27780836,	//0x1138		VoC_mult16_rd(REG6,REG6,0x2778)
0x277E1401,	//0x113a		VoC_lw16_d(REG1,0x277e)
0xF82660C5,	//0x113c		VoC_shr16_ri(REG6,0x4,IN_PARALLEL)	|	VoC_movreg16(REG5,REG6,DEFAULT)
0x27761506,	//0x113e		VoC_sw16_d(REG6,0x2776)
0x27160A80,	//0x1140		VoC_lw16i(REG0,0x2716)
0x1605C180,	//0x1142		VoC_and16_ri(REG5,0xf)(lo)	|	VoC_add16_rr(REG0,REG6,REG0,DEFAULT)
0x5886000F,	//0x1144		VoC_lw16inc_p(REG6,REG0,DEFAULT)	|	VoC_and16_ri(REG5,0xf)(hi)
0x7E6EF742,	//0x1146		VoC_shru16_rr(REG6,REG5,DEFAULT)	|	VoC_movreg16(REG2,ACC1_LO,IN_PARALLEL)
0x600CF6AD,	//0x1148		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_movreg16(RL6_HI,REG5,IN_PARALLEL)
0x1401F742,	//0x114a		VoC_lw16_d(REG1,0x277e)(lo)	|	VoC_movreg16(REG2,ACC1_LO,IN_PARALLEL)
0xFFC0277E,	//0x114c		VoC_NAD	|	VoC_lw16_d(REG1,0x277e)(hi)
		//0x114e		Coolsand_PNS_L5
0xF00661C0,	//0x114e		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0x27781405,	//0x1150		VoC_lw16_d(REG5,0x2778)
0x11B834A8,	//0x1152		VoC_bngt16_rr(Coolsand_PNS_L4,REG5,REG0)
0xD890D8A5,	//0x1154		VoC_lw16inc_p(REG0,REG1,DEFAULT)	|	VoC_lw16inc_p(REG5,REG2,DEFAULT)
0xDFC4B840,	//0x1156		VoC_push16(REG4,DEFAULT)	|	VoC_sub16_pr(REG0,REG1,REG0,DEFAULT)
0xDF405FC6,	//0x1158		VoC_push32(REG01,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0xE0D75FC2,	//0x115a		VoC_lw16i_short(REG7,0xd,IN_PARALLEL)	|	VoC_push16(REG2,DEFAULT)
0x11A135AF,	//0x115c		VoC_bne16_rr(Coolsand_PNS_L6,REG5,REG7)
0x6E19F027,	//0x115e		VoC_bnez16_d(Coolsand_PNS_L7,0x2777)(lo)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
0x2B802777,	//0x1160		VoC_jal(Coolsand_GenerateNoiseVector)(lo)	|	VoC_bnez16_d(Coolsand_PNS_L7,0x2777)(hi)
0xE1C71084,	//0x1162		VoC_movreg16(REG7,RL7_LO,DEFAULT)	|	VoC_jal(Coolsand_GenerateNoiseVector)(hi)
0x269D0A85,	//0x1164		VoC_lw16i(REG5,0x269d)
0x072DC17D,	//0x1166		VoC_add16_rd(REG5,REG5,0x2776)(lo)	|	VoC_add16_rr(REG5,REG5,REG7,DEFAULT)
0x6C0D2776,	//0x1168		VoC_bez16_d(Coolsand_PNS_L4_sub0,0x277c)(lo)	|	VoC_add16_rd(REG5,REG5,0x2776)(hi)
0xD855277C,	//0x116a		VoC_lw16_p(REG5,REG5,DEFAULT)	|	VoC_bez16_d(Coolsand_PNS_L4_sub0,0x277c)(hi)
0x50664495,	//0x116c		VoC_bne16_rd(Coolsand_PNS_L4_sub0,REG5,0x5066)
0x14280A86,	//0x116e		VoC_lw16i(REG6,0x1428)
0x1C280A87,	//0x1170		VoC_lw16i(REG7,0x1c28)
0xC1F7C336,	//0x1172		VoC_add16_rr(REG7,REG7,REG6,DEFAULT)	|	VoC_sub16_rr(REG6,REG4,REG6,DEFAULT)
0x10BE2B80,	//0x1174		VoC_jal(Coolsand_CopyNoiseVector)
		//0x1176		Coolsand_PNS_L4_sub0
0x11982B00,	//0x1176		VoC_jump_lg(Coolsand_PNS_L7_sub3)
		//0x1178		Coolsand_PNS_L7
0x277D1507,	//0x1178		VoC_sw16_d(REG7,0x277d)
0x0A85E1C7,	//0x117a		VoC_lw16i(REG5,0x2625)(lo)	|	VoC_movreg16(REG7,RL7_LO,DEFAULT)
0xC17D2625,	//0x117c		VoC_add16_rr(REG5,REG5,REG7,DEFAULT)	|	VoC_lw16i(REG5,0x2625)(hi)
0x2776072D,	//0x117e		VoC_add16_rd(REG5,REG5,0x2776)
0x277C6C14,	//0x1180		VoC_bez16_d(Coolsand_PNS_L7_sub0,0x277c)
0x450DD855,	//0x1182		VoC_bne16_rd(Coolsand_PNS_L7_sub0,REG5,0x5066)(lo)	|	VoC_lw16_p(REG5,REG5,DEFAULT)
0x70275066,	//0x1184		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_bne16_rd(Coolsand_PNS_L7_sub0,REG5,0x5066)(hi)
0x1606E005,	//0x1186		VoC_and16_ri(REG6,0x1)(lo)	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
0x31860001,	//0x1188		VoC_bez16_r(Coolsand_PNS_L7_sub1,REG6)(lo)	|	VoC_and16_ri(REG6,0x1)(hi)
0x4427118F,	//0x118a		VoC_bne16_rd(Coolsand_PNS_L7_sub1,REG7,0x2715)(lo)	|	VoC_bez16_r(Coolsand_PNS_L7_sub1,REG6)(hi)
0x15052715,	//0x118c		VoC_sw16_d(REG5,0x277d)(lo)	|	VoC_bne16_rd(Coolsand_PNS_L7_sub1,REG7,0x2715)(hi)
0xF047277D,	//0x118e		VoC_lw16i_short(REG7,0x2,DEFAULT)	|	VoC_sw16_d(REG5,0x277d)(hi)
		//0x118f		Coolsand_PNS_L7_sub1
0x27154427,	//0x1190		VoC_bne16_rd(Coolsand_PNS_L7_sub0,REG7,0x2715)
0x277D1505,	//0x1192		VoC_sw16_d(REG5,0x277d)
		//0x1194		Coolsand_PNS_L7_sub0
0x277D6C04,	//0x1194		VoC_bez16_d(Coolsand_PNS_L7_sub3,0x277d)
0x10842B80,	//0x1196		VoC_jal(Coolsand_GenerateNoiseVector)
		//0x1198		Coolsand_PNS_L7_sub3
0xF76561C7,	//0x1198		VoC_movreg16(REG5,ACC1_HI,IN_PARALLEL)	|	VoC_movreg16(REG7,RL7_LO,DEFAULT)
0x072DC17D,	//0x119a		VoC_add16_rd(REG5,REG5,0x2776)(lo)	|	VoC_add16_rr(REG5,REG5,REG7,DEFAULT)
0xFFC02776,	//0x119c		VoC_NOP	|	VoC_add16_rd(REG5,REG5,0x2776)(hi)
0x2B80D853,	//0x119e		VoC_jal(Coolsand_ScaleNoiseVector)(lo)	|	VoC_lw16_p(REG3,REG5,DEFAULT)
0xDF821018,	//0x11a0		VoC_pop16(REG2,DEFAULT)	|	VoC_jal(Coolsand_ScaleNoiseVector)(hi)
		//0x11a1		Coolsand_PNS_L6
0xDF005F86,	//0x11a2		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG6,DEFAULT)
0xF8F85F84,	//0x11a4		VoC_shr16_ri(REG0,0xffffffff,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0x6180C104,	//0x11a6		VoC_movreg16(REG0,RL6_LO,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG0,DEFAULT)
0xF90EF7A5,	//0x11a8		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG5,RL6_HI,IN_PARALLEL)
0x505A072D,	//0x11aa		VoC_add16_rd(REG5,REG5,0x505a)
0x50694425,	//0x11ac		VoC_bne16_rd(Coolsand_PNS_L8,REG5,0x5069)
0xF005D886,	//0x11ae		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_lw16inc_p(REG6,REG0,DEFAULT)
		//0x11b0		Coolsand_PNS_L8
0xF6AD600C,	//0x11b0		VoC_movreg16(RL6_HI,REG5,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0x0700E1C0,	//0x11b2		VoC_add16_rd(REG0,REG0,0x505a)(lo)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0xE00E505A,	//0x11b4		VoC_movreg16(RL7_LO,REG0,DEFAULT)	|	VoC_add16_rd(REG0,REG0,0x505a)(hi)
0x114E2B00,	//0x11b6		VoC_jump_lg(Coolsand_PNS_L5)
		//0x11b8		Coolsand_PNS_L4
0x277E1407,	//0x11b8		VoC_lw16_d(REG7,0x277e)
0x85CE700E,	//0x11ba		VoC_sub16_rp(REG6,REG7,REG1,IN_PARALLEL)	|	VoC_lw16i_short(RL7_LO,0x0,DEFAULT)
0xC134F8FE,	//0x11bc		VoC_add16_rr(REG4,REG4,REG6,DEFAULT)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
		//0x11bd		VoC_endloop1
0x0736E1E6,	//0x11be		VoC_add16_rd(REG6,REG6,0x505a)(lo)	|	VoC_movreg16(REG6,RL7_HI,DEFAULT)
0xE0CF505A,	//0x11c0		VoC_movreg16(RL7_HI,REG6,DEFAULT)	|	VoC_add16_rd(REG6,REG6,0x505a)(hi)
0xDF807F0D,	//0x11c2		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0x112E2B00,	//0x11c4		VoC_jump_lg(Coolsand_PNS_L10)
		//0x11c6		Coolsand_PNS_L11
0x27740A80,	//0x11c6		VoC_lw16i(REG0,0x2774)
0x27776C04,	//0x11c8		VoC_bez16_d(Coolsand_PNS_L12,0x2777)
0x27750A80,	//0x11ca		VoC_lw16i(REG0,0x2775)
		//0x11cc		Coolsand_PNS_L12
0x27791486,	//0x11cc		VoC_lw32_d(RL6,0x2779)
0x0E8C2B80,	//0x11ce		VoC_jal(Coolsand_CLZ)
0x505A07B6,	//0x11d0		VoC_sub16_rd(REG6,REG6,0x505a)
0x348ED801,	//0x11d2		VoC_bngt16_rr(Coolsand_PNS_End,REG1,REG6)(lo)	|	VoC_lw16_p(REG1,REG0,DEFAULT)
0xDC0611D6,	//0x11d4		VoC_sw16_p(REG6,REG0,DEFAULT)	|	VoC_bngt16_rr(Coolsand_PNS_End,REG1,REG6)(hi)
		//0x11d6		Coolsand_PNS_End
0xF000DFA9,	//0x11d6		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xE290E580,	//0x11d8		VoC_rbinc_i(REG4,0x4,DEFAULT)	|	VoC_return
		//0x11d9		Coolsand_DecodeSingleChannelElement
0x1504F000,	//0x11da		VoC_sw16_d(REG4,0x40f)(lo)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0xE580040F,	//0x11dc		VoC_return	|	VoC_sw16_d(REG4,0x40f)(hi)
		//0x11de		Coolsand_DecodeChannelPairElement
0xE285E290,	//0x11de		VoC_rbinc_i(REG5,0x1,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0x1504E242,	//0x11e0		VoC_sw16_d(REG4,0x40f)(lo)	|	VoC_lbinc_p(REG2)
0x1505040F,	//0x11e2		VoC_sw16_d(REG5,0x2534)(lo)	|	VoC_sw16_d(REG4,0x40f)(hi)
0x31852534,	//0x11e4		VoC_bez16_r(DecodeChannelPairElement_End,REG5)(lo)	|	VoC_sw16_d(REG5,0x2534)(hi)
0xDFE9120E,	//0x11e6		VoC_push16(RA,DEFAULT)	|	VoC_bez16_r(DecodeChannelPairElement_End,REG5)(hi)
0x24361804,	//0x11e8		VoC_lw16i_set_inc(REG0,0x2436,0x1)
0x1C4F2B80,	//0x11ea		VoC_jal(Coolsand_DecodeICSInfo)
0xDFA9628B,	//0x11ec		VoC_pop16(RA,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x2,DEFAULT)
0x1507E242,	//0x11ee		VoC_sw16_d(REG7,0x2715)(lo)	|	VoC_lbinc_p(REG2)
0x45AF2715,	//0x11f0		VoC_bne16_rd(DecodeChannelPairElement_End,REG7,0x505a)(lo)	|	VoC_sw16_d(REG7,0x2715)(hi)
0x1804505A,	//0x11f2		VoC_lw16i_set_inc(REG0,0x2716,0x1)(lo)	|	VoC_bne16_rd(DecodeChannelPairElement_End,REG7,0x505a)(hi)
0x14072716,	//0x11f4		VoC_lw16_d(REG7,0x243c)(lo)	|	VoC_lw16i_set_inc(REG0,0x2716,0x1)(hi)
0x1403243C,	//0x11f6		VoC_lw16_d(REG3,0x2439)(lo)	|	VoC_lw16_d(REG7,0x243c)(hi)
0x70262439,	//0x11f8		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_lw16_d(REG3,0x2439)(hi)
0x3147FF42,	//0x11fa		VoC_bngtz16_r(DecodeChannelPairElement_End,REG7)(lo)	|	VoC_lw32z(REG45,IN_PARALLEL)
0x3143120E,	//0x11fc		VoC_bngtz16_r(DecodeChannelPairElement_End,REG3)(lo)	|	VoC_bngtz16_r(DecodeChannelPairElement_End,REG7)(hi)
0x2E39120E,	//0x11fe		VoC_loop_r(1,REG7)(lo)	|	VoC_bngtz16_r(DecodeChannelPairElement_End,REG3)(hi)
0xE6CB120D,	//0x1200		VoC_loop_r_short(REG3,DEFAULT)	|	VoC_loop_r(1,REG7)(hi)
0x7E67E287,	//0x1202		VoC_shru16_rr(REG7,REG4,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0x647DC334,	//0x1204		VoC_or16_rr(REG5,REG7,DEFAULT)	|	VoC_sub16_rr(REG4,REG4,REG6,IN_PARALLEL)
0x35A1EF01,	//0x1206		VoC_bne16_rr(DecodeChannelPairElement_L0,REG4,REG1)(lo)	|	VoC_lw16i_short(REG1,0xfffffff0,IN_PARALLEL)
0x7F42120C,	//0x1208		VoC_lw32z(REG45,DEFAULT)	|	VoC_bne16_rr(DecodeChannelPairElement_L0,REG4,REG1)(hi)
0xE242DC85,	//0x120a		VoC_lbinc_p(REG2)	|	VoC_sw16inc_p(REG5,REG0,IN_PARALLEL)
		//0x120c		DecodeChannelPairElement_L0
		//0x120c		VoC_endloop0
0xFFC0DC05,	//0x120c		VoC_NOP	|	VoC_sw16_p(REG5,REG0,DEFAULT)
		//0x120d		VoC_endloop1
		//0x120e		DecodeChannelPairElement_End
0xE242FFC0,	//0x120e		VoC_lbinc_p(REG2)	|	VoC_NOP
0xE580F000,	//0x1210		VoC_return	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
		//0x1212		Coolsand_DecodeFillElement
0x77E1E290,	//0x1212		VoC_lw16i_short(REG1,0xffffffff,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0x4434E013,	//0x1214		VoC_bne16_rd(DecodeFillElement_L0,REG4,0x5068)(lo)	|	VoC_lw16i_short(REG3,0x1,IN_PARALLEL)
0x62A15068,	//0x1216		VoC_rbinc_i(REG5,0x8,DEFAULT)	|	VoC_bne16_rd(DecodeFillElement_L0,REG4,0x5068)(hi)
0xE242C31C,	//0x1218		VoC_lbinc_p(REG2)	|	VoC_sub16_rr(REG4,REG4,REG3,IN_PARALLEL)
0xF000C12C,	//0x121a		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG5,DEFAULT)
		//0x121b		DecodeFillElement_L0
0x040F1501,	//0x121c		VoC_sw16_d(REG1,0x40f)
		//0x121e		DecodeFillElement_L1
0x12243144,	//0x121e		VoC_bngtz16_r(DecodeFillElement_End,REG4)
0xC31C62A1,	//0x1220		VoC_sub16_rr(REG4,REG4,REG3,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0xE5FBE242,	//0x1222		VoC_jump(DecodeFillElement_L1)	|	VoC_lbinc_p(REG2)
		//0x1224		DecodeFillElement_End
0xFFC0E580,	//0x1224		VoC_NAD	|	VoC_return
		//0x1226		Coolsand_DecodeNextElement
0xE0005FE9,	//0x1226		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x040E1406,	//0x1228		VoC_lw16_d(REG6,0x40e)
0xE242E28C,	//0x122a		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG4,0x3,DEFAULT)
0x25341500,	//0x122c		VoC_sw16_d(REG0,0x2534)
0x040D1506,	//0x122e		VoC_sw16_d(REG6,0x40d)
0x040E1504,	//0x1230		VoC_sw16_d(REG4,0x40e)
0x123831C4,	//0x1232		VoC_bnez16_r(DecodeNextElement_L0,REG4)
0x11D92B80,	//0x1234		VoC_jal(Coolsand_DecodeSingleChannelElement)
0xFFC0E5DE,	//0x1236		VoC_NAD	|	VoC_jump(DecodeNextElement_L6)
		//0x1238		DecodeNextElement_L0
0x505A4434,	//0x1238		VoC_bne16_rd(DecodeNextElement_L1,REG4,0x505a)
0x11DE2B80,	//0x123a		VoC_jal(Coolsand_DecodeChannelPairElement)
0xFFC0E5D8,	//0x123c		VoC_NAD	|	VoC_jump(DecodeNextElement_L6)
		//0x123e		DecodeNextElement_L1
0x505C4424,	//0x123e		VoC_bne16_rd(DecodeNextElement_L2,REG4,0x505c)
0xFFC0E5D4,	//0x1240		VoC_NAD	|	VoC_jump(DecodeNextElement_L6)
		//0x1242		DecodeNextElement_L2
0xE0477066,	//0x1242		VoC_lw16i_short(REG7,0x4,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x3,DEFAULT)
0x124835A6,	//0x1244		VoC_bne16_rr(DecodeNextElement_L3,REG4,REG6)
0xFFC0E5CE,	//0x1246		VoC_NAD	|	VoC_jump(DecodeNextElement_L6)
		//0x1248		DecodeNextElement_L3
0x124C35A7,	//0x1248		VoC_bne16_rr(DecodeNextElement_L4,REG4,REG7)
0xFFC0E5CA,	//0x124a		VoC_NAD	|	VoC_jump(DecodeNextElement_L6)
		//0x124c		DecodeNextElement_L4
0xE06770A6,	//0x124c		VoC_lw16i_short(REG7,0x6,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x5,DEFAULT)
0x125035A6,	//0x124e		VoC_bne16_rr(DecodeNextElement_L5,REG4,REG6)
		//0x1250		DecodeNextElement_L5
0x125435A7,	//0x1250		VoC_bne16_rr(DecodeNextElement_L6,REG4,REG7)
0x12122B80,	//0x1252		VoC_jal(Coolsand_DecodeFillElement)
		//0x1254		DecodeNextElement_L6
0x3180DFA9,	//0x1254		VoC_bez16_r(DecodeNextElement_End,REG0)(lo)	|	VoC_pop16(RA,DEFAULT)
0xF7001258,	//0x1256		VoC_lw16i_short(REG0,0xfffffff8,DEFAULT)	|	VoC_bez16_r(DecodeNextElement_End,REG0)(hi)
		//0x1258		DecodeNextElement_End
0xFFC0E580,	//0x1258		VoC_NAD	|	VoC_return
		//0x125a		Coolsand_DequantBlock
0x13283146,	//0x125a		VoC_bngtz16_r(DequantBlock_End,REG6)
0x00640A81,	//0x125c		VoC_lw16i(REG1,0x64)
0x4208DFE9,	//0x125e		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x6001F009,	//0x1260		VoC_movreg16(REG1,REG0,DEFAULT)	|	VoC_lw16i_short(INC1,0x2,IN_PARALLEL)
0x1600E102,	//0x1262		VoC_and16_ri(REG0,0x3)(lo)	|	VoC_lw16i_short(REG2,0x10,IN_PARALLEL)
0xF8F80003,	//0x1264		VoC_shr16_ri(REG0,0xffffffff,DEFAULT)	|	VoC_and16_ri(REG0,0x3)(hi)
0x4D540A83,	//0x1266		VoC_lw16i(REG3,0x4d54)
0xC0C34482,	//0x1268		VoC_add16_rr(REG3,REG3,REG0,IN_PARALLEL)	|	VoC_mult16_rr(REG2,REG2,REG0,DEFAULT)
0x4D5C0A85,	//0x126a		VoC_lw16i(REG5,0x4d5c)
0xC155599D,	//0x126c		VoC_add16_rr(REG5,REG5,REG2,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG3,DEFAULT)
0xE0527811,	//0x126e		VoC_lw16i_short(REG2,0x5,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x2,DEFAULT)
0xE1C04057,	//0x1270		VoC_lw16i_short(REG0,0x1c,IN_PARALLEL)	|	VoC_add16_rr(REG7,REG1,REG2,DEFAULT)
0xEE124238,	//0x1272		VoC_lw16i_short(REG2,0xffffffe1,IN_PARALLEL)	|	VoC_sub16_rr(REG0,REG0,REG7,DEFAULT)
0xF6A17F44,	//0x1274		VoC_movreg16(REG1,REG5,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x2776180B,	//0x1276		VoC_lw16i_set_inc(REG3,0x2776,0x2)
0x12863100,	//0x1278		VoC_bgtz16_r(DequantBlock_L1,REG0)
0x127D3490,	//0x127a		VoC_bngt16_rr(DequantBlock_L2,REG2,REG0)
0xE846E040,	//0x127c		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_movreg16(REG0,REG2,DEFAULT)
		//0x127d		DequantBlock_L2
0x59CED9CC,	//0x127e		VoC_lw32inc_p(RL6,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xFE86FE84,	//0x1280		VoC_shr32_rr(RL6,REG0,DEFAULT)	|	VoC_shr32_rr(ACC0,REG0,IN_PARALLEL)
0xDDDEDDDC,	//0x1282		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x1283		VoC_endloop0
0xFFC0E5CE,	//0x1284		VoC_NAD	|	VoC_jump(DequantBlock_L5)
		//0x1286		DequantBlock_L1
0xDE085DDC,	//0x1286		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
0x7E84D9CC,	//0x1288		VoC_shr32_rr(ACC0,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0x59CFD9CE,	//0x128a		VoC_lw32inc_p(RL7,REG1,DEFAULT)	|	VoC_lw32inc_p(RL6,REG1,IN_PARALLEL)
0x7E87FE86,	//0x128c		VoC_shr32_rr(RL7,REG0,DEFAULT)	|	VoC_shr32_rr(RL6,REG0,IN_PARALLEL)
0xDDDEDDDC,	//0x128e		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,IN_PARALLEL)
0xFFC0DD9F,	//0x1290		VoC_NAD	|	VoC_sw32_p(RL7,REG3,DEFAULT)
		//0x1292		DequantBlock_L5
0xFF466083,	//0x1292		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_movreg16(REG3,REG4,DEFAULT)
0x27760A84,	//0x1294		VoC_lw16i(REG4,0x2776)
0x13252E30,	//0x1296		VoC_loop_r(0,REG6)
0xF66E5831,	//0x1298		VoC_movreg16(RL7_LO,REG3,IN_PARALLEL)	|	VoC_lw16_p(REG1,REG3,DEFAULT)
0x6020E02F,	//0x129a		VoC_movreg16(REG0,REG1,DEFAULT)	|	VoC_movreg16(RL7_HI,REG1,DEFAULT)
0x6488F879,	//0x129c		VoC_xor16_rr(REG0,REG1,DEFAULT)	|	VoC_shr16_ri(REG1,0xf,IN_PARALLEL)
0xC208E042,	//0x129e		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i_short(REG2,0x4,IN_PARALLEL)
0xC036C026,	//0x12a0		VoC_add16_rr(REG6,REG0,REG6,DEFAULT)	|	VoC_add16_rr(REG6,REG0,REG4,DEFAULT)
0x12A73490,	//0x12a2		VoC_bngt16_rr(DequantBlock_L6,REG2,REG0)
0x2B00D9B4,	//0x12a4		VoC_jump_lg(DequantBlock_L16)(lo)	|	VoC_lw32_p(ACC0,REG6,DEFAULT)
0xC02E131A,	//0x12a6		VoC_add16_rr(REG6,REG0,REG5,DEFAULT)	|	VoC_jump_lg(DequantBlock_L16)(hi)
		//0x12a7		DequantBlock_L6
0xC1867202,	//0x12a8		VoC_add16_rr(REG6,REG6,REG0,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x10,DEFAULT)
0x12B13490,	//0x12aa		VoC_bngt16_rr(DequantBlock_L7,REG2,REG0)
0x59B4F323,	//0x12ac		VoC_lw32_p(ACC0,REG6,DEFAULT)	|	VoC_lw16i_short(REG3,0x19,DEFAULT)
0x2B00C2FB,	//0x12ae		VoC_jump_lg(DequantBlock_L13)(lo)	|	VoC_sub16_rr(REG3,REG3,REG7,IN_PARALLEL)
0xC2161310,	//0x12b0		VoC_sub16_rr(REG6,REG0,REG2,DEFAULT)	|	VoC_jump_lg(DequantBlock_L13)(hi)
		//0x12b1		DequantBlock_L7
0xF8FE78F2,	//0x12b2		VoC_shr16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_shr16_ri(REG2,0xfffffffe,DEFAULT)
0x12C43490,	//0x12b4		VoC_bngt16_rr(DequantBlock_L8,REG2,REG0)
0x4DDC0A83,	//0x12b6		VoC_lw16i(REG3,0x4ddc)
0xF2A3C0F6,	//0x12b8		VoC_lw16i_short(REG3,0x15,DEFAULT)	|	VoC_add16_rr(REG6,REG3,REG6,DEFAULT)
0xDFC7C2FB,	//0x12ba		VoC_push16(REG7,DEFAULT)	|	VoC_sub16_rr(REG3,REG3,REG7,DEFAULT)
0xFF2859B3,	//0x12bc		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0x0EB22B80,	//0x12be		VoC_jal(Coolsand_MULSHIFT32)
0x2B00DF87,	//0x12c0		VoC_jump_lg(DequantBlock_L13)(lo)	|	VoC_pop16(REG7,DEFAULT)
0xFFC01310,	//0x12c2		VoC_NAD	|	VoC_jump_lg(DequantBlock_L13)(hi)
		//0x12c4		DequantBlock_L8
0xDF457001,	//0x12c4		VoC_push32(ACC1,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xE0037B78,	//0x12c6		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xffffffef,DEFAULT)
0xE01A700B,	//0x12c8		VoC_lw16i_short(ACC1_LO,0x1,IN_PARALLEL)	|	VoC_lw16i_short(ACC1_HI,0x0,DEFAULT)
0xE0467B2D,	//0x12ca		VoC_lw16i_short(REG6,0x4,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xffffffe5,DEFAULT)
0x12D036A8,	//0x12cc		VoC_bngt32_rr(DequantBlock_L9,ACC1,REG01)
0xC0F37BE0,	//0x12ce		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xfffffffc,DEFAULT)
		//0x12d0		DequantBlock_L9
0xE0267BF5,	//0x12d0		VoC_lw16i_short(REG6,0x2,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xfffffffe,DEFAULT)
0x12D636A8,	//0x12d2		VoC_bngt32_rr(DequantBlock_L10,ACC1,REG01)
0xC0F37BF0,	//0x12d4		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xfffffffe,DEFAULT)
		//0x12d6		DequantBlock_L10
0xE0167BFD,	//0x12d6		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xffffffff,DEFAULT)
0x12DC36A8,	//0x12d8		VoC_bngt32_rr(DequantBlock_L11,ACC1,REG01)
0xC0F37BF8,	//0x12da		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xffffffff,DEFAULT)
		//0x12dc		DequantBlock_L11
0x4E46180A,	//0x12dc		VoC_lw16i_set_inc(REG2,0x4e46,0x2)
0x799A0A8A,	//0x12de		VoC_lw16i(ACC1_LO,0x799a)
0x5A820A8B,	//0x12e0		VoC_lw16i(ACC1_HI,0x5a82)
0x12E636A8,	//0x12e2		VoC_bngt32_rr(DequantBlock_L12,ACC1,REG01)
0x4E3C180A,	//0x12e4		VoC_lw16i_set_inc(REG2,0x4e3c,0x2)
		//0x12e6		DequantBlock_L12
0x7F05DFC7,	//0x12e6		VoC_movreg32(ACC1,REG01,DEFAULT)	|	VoC_push16(REG7,DEFAULT)
0xFFC0D9D3,	//0x12e8		VoC_NAD	|	VoC_lw32inc_p(REG67,REG2,IN_PARALLEL)
0x0EB22B80,	//0x12ea		VoC_jal(Coolsand_MULSHIFT32)
0xFF281313,	//0x12ec		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)
0x0EB22B80,	//0x12ee		VoC_jal(Coolsand_MULSHIFT32)
0xFF281313,	//0x12f0		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)
0x0EB22B80,	//0x12f2		VoC_jal(Coolsand_MULSHIFT32)
0xFF281313,	//0x12f4		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)
0x0EB22B80,	//0x12f6		VoC_jal(Coolsand_MULSHIFT32)
0x4E580A80,	//0x12f8		VoC_lw16i(REG0,0x4e58)
0xF66178FB,	//0x12fa		VoC_movreg16(REG1,REG3,IN_PARALLEL)	|	VoC_shr16_ri(REG3,0xffffffff,DEFAULT)
0x9313C018,	//0x12fc		VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,DEFAULT)
0xF6235980,	//0x12fe		VoC_movreg16(REG3,REG1,IN_PARALLEL)	|	VoC_lw32_p(REG01,REG0,DEFAULT)
0x0EB22B80,	//0x1300		VoC_jal(Coolsand_MULSHIFT32)
0xDF057BEC,	//0x1302		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffffd,DEFAULT)
0xFF237F28,	//0x1304		VoC_movreg32(REG67,ACC0,IN_PARALLEL)	|	VoC_movreg32(REG01,ACC1,DEFAULT)
0x0EB22B80,	//0x1306		VoC_jal(Coolsand_MULSHIFT32)
0x4E500A86,	//0x1308		VoC_lw16i(REG6,0x4e50)
0x7302DF87,	//0x130a		VoC_lw16i_short(REG2,0x18,DEFAULT)	|	VoC_pop16(REG7,DEFAULT)
0xC2BAC0F6,	//0x130c		VoC_sub16_rr(REG2,REG2,REG7,DEFAULT)	|	VoC_add16_rr(REG6,REG3,REG6,IN_PARALLEL)
0xFFC084B3,	//0x130e		VoC_NAD	|	VoC_sub16_rp(REG3,REG2,REG6,DEFAULT)
		//0x1310		DequantBlock_L13
0x13183243,	//0x1310		VoC_bnltz16_r(DequantBlock_L14,REG3)
0x3493F422,	//0x1312		VoC_bngt16_rr(DequantBlock_L15,REG2,REG3)(lo)	|	VoC_lw16i_short(REG2,0xffffffe1,DEFAULT)
0xE0431316,	//0x1314		VoC_movreg16(REG3,REG2,DEFAULT)	|	VoC_bngt16_rr(DequantBlock_L15,REG2,REG3)(hi)
		//0x1316		DequantBlock_L15
0xE5C3FE9C,	//0x1316		VoC_jump(DequantBlock_L16)	|	VoC_shr32_rr(ACC0,REG3,DEFAULT)
		//0x1318		DequantBlock_L14
0xFFC0FE9C,	//0x1318		VoC_NAD	|	VoC_shr32_rr(ACC0,REG3,DEFAULT)
		//0x131a		DequantBlock_L16
0xFF2661E1,	//0x131a		VoC_movreg32(RL6,ACC0,IN_PARALLEL)	|	VoC_movreg16(REG1,RL7_HI,DEFAULT)
0xFAF861C3,	//0x131c		VoC_shr32_ri(REG01,0x1f,IN_PARALLEL)	|	VoC_movreg16(REG3,RL7_LO,DEFAULT)
0x27822A06,	//0x131e		VoC_or32_rd(RL6,0x2782)
0xF00B6544,	//0x1320		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_xor32_rr(ACC0,REG01,DEFAULT)
0x1586CB04,	//0x1322		VoC_sw32_d(RL6,0x2782)(lo)	|	VoC_sub32_rr(ACC0,ACC0,REG01,DEFAULT)
0xDDDC2782,	//0x1324		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sw32_d(RL6,0x2782)(hi)
		//0x1325		VoC_endloop0
0xE064DFA9,	//0x1326		VoC_movreg16(REG4,REG3,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
		//0x1328		DequantBlock_End
0xFFC0E580,	//0x1328		VoC_NAD	|	VoC_return
		//0x132a		Coolsand_Dequantize
0x25341403,	//0x132a		VoC_lw16_d(REG3,0x2534)
0xFF467024,	//0x132c		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x24361804,	//0x132e		VoC_lw16i_set_inc(REG0,0x2436,0x1)
0x133635B4,	//0x1330		VoC_bne16_rr(Dequantize_L0,REG6,REG4)
0x1336351C,	//0x1332		VoC_be16_rr(Dequantize_L0,REG3,REG4)
0x24451804,	//0x1334		VoC_lw16i_set_inc(REG0,0x2445,0x1)
		//0x1336		Dequantize_L0
0x27821586,	//0x1336		VoC_sw32_d(RL6,0x2782)
0xF0085E00,	//0x1338		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xE0547070,	//0x133a		VoC_lw16i_short(REG4,0x5,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x3,DEFAULT)
0xF0045883,	//0x133c		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_lw16inc_p(REG3,REG0,DEFAULT)
0xF4015884,	//0x133e		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0xF47A5885,	//0x1340		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x27811504,	//0x1342		VoC_sw16_d(REG4,0x2781)
0x27801505,	//0x1344		VoC_sw16_d(REG5,0x2780)
0x4E680A84,	//0x1346		VoC_lw16i(REG4,0x4e68)
0x59F81805,	//0x1348		VoC_lw16i_set_inc(REG1,0x59f8,0x1)
0x04000A87,	//0x134a		VoC_lw16i(REG7,0x400)
0x35ABF045,	//0x134c		VoC_bne16_rr(Dequantize_L1,REG5,REG3)(lo)	|	VoC_lw16i_short(REG5,0x2,DEFAULT)
0x0A841356,	//0x134e		VoC_lw16i(REG4,0x4f42)(lo)	|	VoC_bne16_rr(Dequantize_L1,REG5,REG3)(hi)
0x18054F42,	//0x1350		VoC_lw16i_set_inc(REG1,0x4f4e,0x1)(lo)	|	VoC_lw16i(REG4,0x4f42)(hi)
0x0A874F4E,	//0x1352		VoC_lw16i(REG7,0x80)(lo)	|	VoC_lw16i_set_inc(REG1,0x4f4e,0x1)(hi)
0xFFC00080,	//0x1354		VoC_NAD	|	VoC_lw16i(REG7,0x80)(hi)
		//0x1356		Dequantize_L1
0x040C0724,	//0x1356		VoC_add16_rd(REG4,REG4,0x40c)
0x8061F005,	//0x1358		VoC_add16_rp(REG1,REG1,REG4,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x136E3186,	//0x135a		VoC_bez16_r(Dequantize_L2,REG6)
0x27231505,	//0x135c		VoC_sw16_d(REG5,0x2723)
0x271F1505,	//0x135e		VoC_sw16_d(REG5,0x271f)
0x27230A88,	//0x1360		VoC_lw16i(ACC0_LO,0x2723)
0x271F0A89,	//0x1362		VoC_lw16i(ACC0_HI,0x271f)
0x1C280A84,	//0x1364		VoC_lw16i(REG4,0x1c28)
0x269D1806,	//0x1366		VoC_lw16i_set_inc(REG2,0x269d,0x1)
0x25AD1807,	//0x1368		VoC_lw16i_set_inc(REG3,0x25ad,0x1)
0x27750A86,	//0x136a		VoC_lw16i(REG6,0x2775)
0xFFC0E5D2,	//0x136c		VoC_NAD	|	VoC_jump(Dequantize_L3)
		//0x136e		Dequantize_L2
0x27221505,	//0x136e		VoC_sw16_d(REG5,0x2722)
0x271E1505,	//0x1370		VoC_sw16_d(REG5,0x271e)
0x27220A88,	//0x1372		VoC_lw16i(ACC0_LO,0x2722)
0x271E0A89,	//0x1374		VoC_lw16i(ACC0_HI,0x271e)
0x14280A84,	//0x1376		VoC_lw16i(REG4,0x1428)
0x26251806,	//0x1378		VoC_lw16i_set_inc(REG2,0x2625,0x1)
0x25351807,	//0x137a		VoC_lw16i_set_inc(REG3,0x2535,0x1)
0x27740A86,	//0x137c		VoC_lw16i(REG6,0x2774)
		//0x137e		Dequantize_L3
0x1506FF0D,	//0x137e		VoC_sw16_d(REG6,0x277f)(lo)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0x1501277F,	//0x1380		VoC_sw16_d(REG1,0x277e)(lo)	|	VoC_sw16_d(REG6,0x277f)(hi)
0x5FE9277E,	//0x1382		VoC_push16(RA,DEFAULT)	|	VoC_sw16_d(REG1,0x277e)(hi)
0xFF46FF47,	//0x1384		VoC_lw32z(RL6,DEFAULT)	|	VoC_lw32z(RL7,IN_PARALLEL)
		//0x1386		Dequantize_L10
0x1405E1E6,	//0x1386		VoC_lw16_d(REG5,0x2780)(lo)	|	VoC_movreg16(REG6,RL7_HI,DEFAULT)
0x34AE2780,	//0x1388		VoC_bngt16_rr(Dequantize_L11,REG5,REG6)(lo)	|	VoC_lw16_d(REG5,0x2780)(hi)
0xF02513D1,	//0x138a		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_bngt16_rr(Dequantize_L11,REG5,REG6)(hi)
0x60CFC176,	//0x138c		VoC_movreg16(RL7_HI,REG6,DEFAULT)	|	VoC_add16_rr(REG6,REG5,REG6,DEFAULT)
0x2E31D886,	//0x138e		VoC_loop_r(1,REG6)(lo)	|	VoC_lw16inc_p(REG6,REG0,IN_PARALLEL)
0xFF2913CD,	//0x1390		VoC_movreg32(REG23,ACC1,DEFAULT)	|	VoC_loop_r(1,REG6)(hi)
0x277E1401,	//0x1392		VoC_lw16_d(REG1,0x277e)
		//0x1394		Dequantize_L5
0x61C6F032,	//0x1394		VoC_movreg16(REG6,RL7_LO,DEFAULT)	|	VoC_lw16i_short(INC2,0x1,DEFAULT)
0x1405F005,	//0x1396		VoC_lw16_d(REG5,0x2781)(lo)	|	VoC_lw16i_short(INC1,0x1,IN_PARALLEL)
0x34AE2781,	//0x1398		VoC_bngt16_rr(Dequantize_L4,REG5,REG6)(lo)	|	VoC_lw16_d(REG5,0x2781)(hi)
0xF02513CA,	//0x139a		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_bngt16_rr(Dequantize_L4,REG5,REG6)(hi)
0xD8A541AE,	//0x139c		VoC_lw16inc_p(REG5,REG2,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG5,DEFAULT)
0xF6CE5896,	//0x139e		VoC_movreg16(RL7_LO,REG6,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0xF0073876,	//0x13a0		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_sub16_pr(REG6,REG1,REG6,DEFAULT)
0xD8B0DF40,	//0x13a2		VoC_lw16inc_p(REG0,REG3,DEFAULT)	|	VoC_push32(REG01,DEFAULT)
0x13B73205,	//0x13a4		VoC_bltz16_r(Dequantize_L6,REG5)
0x5065390D,	//0x13a6		VoC_bgt16_rd(Dequantize_L6,REG5,0x5065)
0xDFC75F47,	//0x13a8		VoC_push16(REG7,IN_PARALLEL)	|	VoC_push32(RL7,DEFAULT)
0xDFC25F45,	//0x13aa		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xDFC35F44,	//0x13ac		VoC_push16(REG3,IN_PARALLEL)	|	VoC_push32(ACC0,DEFAULT)
0x125A2B80,	//0x13ae		VoC_jal(Coolsand_DequantBlock)
0xDF045F83,	//0x13b0		VoC_pop32(ACC0,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDF055F82,	//0x13b2		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0xDF075F87,	//0x13b4		VoC_pop32(RL7,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xF8FEE5D0,	//0x13b6		VoC_shr16_ri(REG6,0xffffffff,DEFAULT)	|	VoC_jump(Dequantize_L9)
		//0x13b7		Dequantize_L6
0x6126C134,	//0x13b8		VoC_movreg16(REG6,ACC0_HI,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0x4425E010,	//0x13ba		VoC_bne16_rd(Dequantize_L7,REG5,0x5066)(lo)	|	VoC_lw16i_short(REG0,0x1,IN_PARALLEL)
0xDC605066,	//0x13bc		VoC_sw16_p(REG0,REG6,DEFAULT)	|	VoC_bne16_rd(Dequantize_L7,REG5,0x5066)(hi)
0xE106E5C8,	//0x13be		VoC_movreg16(REG6,ACC0_LO,DEFAULT)	|	VoC_jump(Dequantize_L9)
		//0x13bf		Dequantize_L7
0x5067402D,	//0x13c0		VoC_be16_rd(Dequantize_L8,REG5,0x5067)
0x5068401D,	//0x13c2		VoC_be16_rd(Dequantize_L8,REG5,0x5068)
0xDC60E5C2,	//0x13c4		VoC_sw16_p(REG0,REG6,DEFAULT)	|	VoC_jump(Dequantize_L9)
		//0x13c5		Dequantize_L8
		//0x13c6		Dequantize_L9
0x2B00DF00,	//0x13c6		VoC_jump_lg(Dequantize_L5)(lo)	|	VoC_pop32(REG01,DEFAULT)
0xFFC01394,	//0x13c8		VoC_NAD	|	VoC_jump_lg(Dequantize_L5)(hi)
		//0x13ca		Dequantize_L4
0x85CE700E,	//0x13ca		VoC_sub16_rp(REG6,REG7,REG1,IN_PARALLEL)	|	VoC_lw16i_short(RL7_LO,0x0,DEFAULT)
0xC134F8FE,	//0x13cc		VoC_add16_rr(REG4,REG4,REG6,DEFAULT)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
		//0x13cd		VoC_endloop1
0x2B00FF0D,	//0x13ce		VoC_jump_lg(Dequantize_L10)(lo)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0xE1261386,	//0x13d0		VoC_movreg16(REG6,ACC0_HI,DEFAULT)	|	VoC_jump_lg(Dequantize_L10)(hi)
		//0x13d1		Dequantize_L11
0x277F1401,	//0x13d2		VoC_lw16_d(REG1,0x277f)
0x2886D866,	//0x13d4		VoC_or16_rd(REG6,0x41e)(lo)	|	VoC_lw16_p(REG6,REG6,DEFAULT)
0x7025041E,	//0x13d6		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_or16_rd(REG6,0x41e)(hi)
0x1506E000,	//0x13d8		VoC_sw16_d(REG6,0x41e)(lo)	|	VoC_lw16i_short(REG0,0x0,IN_PARALLEL)
0x1486041E,	//0x13da		VoC_lw32_d(RL6,0x2782)(lo)	|	VoC_sw16_d(REG6,0x41e)(hi)
0xFFC02782,	//0x13dc		VoC_NAD	|	VoC_lw32_d(RL6,0x2782)(hi)
0x0E8C2B80,	//0x13de		VoC_jal(Coolsand_CLZ)
0xDFA943AE,	//0x13e0		VoC_pop16(RA,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)
0x27821586,	//0x13e2		VoC_sw32_d(RL6,0x2782)
0xE580DC16,	//0x13e4		VoC_return	|	VoC_sw16_p(REG6,REG1,DEFAULT)
		//0x13e6		Coolsand_BitReverse
0x2B80DFE9,	//0x13e6		VoC_jal(vpp_AmjpAacGenerateBitRev)(lo)	|	VoC_push16(RA,DEFAULT)
0xDFA92177,	//0x13e8		VoC_pop16(RA,DEFAULT)	|	VoC_jal(vpp_AmjpAacGenerateBitRev)(hi)
0x6020F050,	//0x13ea		VoC_movreg16(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0x7006F006,	//0x13ec		VoC_lw16i_short(REG6,0x0,DEFAULT)	|	VoC_lw16i_short(INC2,0x1,IN_PARALLEL)
0x3183EF97,	//0x13ee		VoC_bez16_r(BitReverse_L0,REG3)(lo)	|	VoC_lw16i_short(REG7,0xfffffff9,IN_PARALLEL)
0x722613F4,	//0x13f0		VoC_lw16i_short(REG6,0x11,DEFAULT)	|	VoC_bez16_r(BitReverse_L0,REG3)(hi)
0xFFC0EF67,	//0x13f2		VoC_NAD	|	VoC_lw16i_short(REG7,0xfffffff6,IN_PARALLEL)
		//0x13f4		BitReverse_L0
0xE0437024,	//0x13f4		VoC_lw16i_short(REG3,0x4,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x59F80A85,	//0x13f6		VoC_lw16i(REG5,0x59f8)
0xFE3C4172,	//0x13f8		VoC_shr16_rr(REG4,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG5,REG6,DEFAULT)
0xFF03C061,	//0x13fa		VoC_movreg32(REG67,REG01,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x13fc		BitReverse_L2
0x3184D8A4,	//0x13fc		VoC_bez16_r(BitReverse_L1,REG4)(lo)	|	VoC_lw16inc_p(REG4,REG2,DEFAULT)
0x58A51438,	//0x13fe		VoC_lw16inc_p(REG5,REG2,DEFAULT)	|	VoC_bez16_r(BitReverse_L1,REG4)(hi)
0x78EDF8EC,	//0x1400		VoC_shr16_ri(REG5,0xfffffffd,DEFAULT)	|	VoC_shr16_ri(REG4,0xfffffffd,IN_PARALLEL)
0xC1A9C1A0,	//0x1402		VoC_add16_rr(REG1,REG6,REG5,DEFAULT)	|	VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)
0x5985D9C4,	//0x1404		VoC_lw32_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xD9CEC1A0,	//0x1406		VoC_lw32inc_p(RL6,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)
0xC1A9598F,	//0x1408		VoC_add16_rr(REG1,REG6,REG5,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0xDDC7DDC6,	//0x140a		VoC_sw32inc_p(RL7,REG0,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0x5D8DDDCC,	//0x140c		VoC_sw32_p(ACC1,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xD9C4C1E9,	//0x140e		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)
0xC1A05985,	//0x1410		VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG0,DEFAULT)
0xC01859CE,	//0x1412		VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG1,DEFAULT)
0xC1E9598F,	//0x1414		VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0x5D87DDC6,	//0x1416		VoC_sw32_p(RL7,REG0,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xDDCCC1E0,	//0x1418		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG7,REG4,IN_PARALLEL)
0xC1A95D8D,	//0x141a		VoC_add16_rr(REG1,REG6,REG5,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG1,DEFAULT)
0xC05959C4,	//0x141c		VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xC1E05985,	//0x141e		VoC_add16_rr(REG0,REG7,REG4,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG0,DEFAULT)
0xC1A959CE,	//0x1420		VoC_add16_rr(REG1,REG6,REG5,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG1,DEFAULT)
0xC059598F,	//0x1422		VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0xDDCCDDC6,	//0x1424		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC1E95D8D,	//0x1426		VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG1,DEFAULT)
0x59C4DDC7,	//0x1428		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(RL7,REG0,DEFAULT)
0x5985C059,	//0x142a		VoC_lw32_p(ACC1,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)
0x59CEC1E0,	//0x142c		VoC_lw32inc_p(RL6,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG7,REG4,IN_PARALLEL)
0x598FC018,	//0x142e		VoC_lw32_p(RL7,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)
0x5DC6C1E9,	//0x1430		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)
0xDDC7C059,	//0x1432		VoC_sw32inc_p(RL7,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)
0xDD8DDDCC,	//0x1434		VoC_sw32_p(ACC1,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x13FC2B00,	//0x1436		VoC_jump_lg(BitReverse_L2)
		//0x1438		BitReverse_L1
0xC1E1F8EC,	//0x1438		VoC_add16_rr(REG1,REG7,REG4,DEFAULT)	|	VoC_shr16_ri(REG4,0xfffffffd,DEFAULT)
0xFFC0C1A0,	//0x143a		VoC_NAD	|	VoC_add16_rr(REG0,REG6,REG4,DEFAULT)
		//0x143c		BitReverse_L3
0xC01859CE,	//0x143c		VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG1,DEFAULT)
0xC1E1598F,	//0x143e		VoC_add16_rr(REG1,REG7,REG4,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0x5985D9C4,	//0x1440		VoC_lw32_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0x5DCCC1A0,	//0x1442		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)
0xD8A4C018,	//0x1444		VoC_lw16inc_p(REG4,REG2,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)
0xF8EC5D8D,	//0x1446		VoC_shr16_ri(REG4,0xfffffffd,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG1,DEFAULT)
0xC1E15DC6,	//0x1448		VoC_add16_rr(REG1,REG7,REG4,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC1A05D87,	//0x144a		VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)	|	VoC_sw32_p(RL7,REG0,DEFAULT)
0x143C31C4,	//0x144c		VoC_bnez16_r(BitReverse_L3,REG4)
0xFFC0E580,	//0x144e		VoC_NAD	|	VoC_return
		//0x1450		Coolsand_R4FirstPass
0xF6227052,	//0x1450		VoC_movreg16(REG2,REG1,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x2,DEFAULT)
0xDFC2E6E6,	//0x1452		VoC_push16(REG2,DEFAULT)	|	VoC_loop_r_short(REG3,DEFAULT)
0xD9D7D9D0,	//0x1454		VoC_lw32inc_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(REG01,REG2,DEFAULT)
0xD9D3D9D2,	//0x1456		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xD9D5D9D4,	//0x1458		VoC_lw32inc_p(ACC1,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
0x5997D9D6,	//0x145a		VoC_lw32_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(RL6,REG2,DEFAULT)
0x4810FF39,	//0x145c		VoC_add32_rr(REG01,REG01,REG45,DEFAULT)	|	VoC_movreg32(REG23,RL7,IN_PARALLEL)
0x4859CA12,	//0x145e		VoC_add32_rr(REG23,REG23,REG67,DEFAULT)	|	VoC_sub32_rr(REG45,REG01,REG45,IN_PARALLEL)
0x4934CA5B,	//0x1460		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_sub32_rr(REG67,REG23,REG67,IN_PARALLEL)
0x497DCB36,	//0x1462		VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)	|	VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)
0x4820CB7F,	//0x1464		VoC_add32_rr(REG01,REG01,ACC0,DEFAULT)	|	VoC_sub32_rr(RL7,ACC1,RL7,IN_PARALLEL)
0x4869CA24,	//0x1466		VoC_add32_rr(REG23,REG23,ACC1,DEFAULT)	|	VoC_sub32_rr(ACC0,REG01,ACC0,IN_PARALLEL)
0x48BACA6D,	//0x1468		VoC_add32_rr(REG45,REG45,RL7,DEFAULT)	|	VoC_sub32_rr(ACC1,REG23,ACC1,IN_PARALLEL)
0x5F45CABF,	//0x146a		VoC_push32(ACC1,DEFAULT)	|	VoC_sub32_rr(RL7,REG45,RL7,IN_PARALLEL)
0xDF82FF0D,	//0x146c		VoC_pop16(REG2,DEFAULT)	|	VoC_movreg32(ACC1,REG23,IN_PARALLEL)
0xCAF348F6,	//0x146e		VoC_sub32_rr(REG67,REG67,RL6,IN_PARALLEL)	|	VoC_add32_rr(RL6,REG67,RL6,DEFAULT)
0xDDD5DDD0,	//0x1470		VoC_sw32inc_p(ACC1,REG2,DEFAULT)	|	VoC_sw32inc_p(REG01,REG2,DEFAULT)
0xDDD2DF05,	//0x1472		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_pop32(ACC1,DEFAULT)
0xDDD4DDD3,	//0x1474		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32inc_p(REG67,REG2,DEFAULT)
0xDDD7DDD5,	//0x1476		VoC_sw32inc_p(RL7,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
		//0x1478		VoC_endloop0
0xE580DDD6,	//0x1478		VoC_return	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
		//0x147a		Coolsand_R8FirstPass
0x7052F053,	//0x147a		VoC_lw16i_short(INC2,0x2,DEFAULT)	|	VoC_lw16i_short(INC3,0x2,DEFAULT)
0x2E18F622,	//0x147c		VoC_loop_r(0,REG3)(lo)	|	VoC_movreg16(REG2,REG1,IN_PARALLEL)
0xDFC21527,	//0x147e		VoC_push16(REG2,DEFAULT)	|	VoC_loop_r(0,REG3)(hi)
0xD9D7D9D0,	//0x1480		VoC_lw32inc_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(REG01,REG2,DEFAULT)
0xD9D3D9D2,	//0x1482		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xD9D5D9D4,	//0x1484		VoC_lw32inc_p(ACC1,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
0x5997D9D6,	//0x1486		VoC_lw32_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(RL6,REG2,DEFAULT)
0x4810FF39,	//0x1488		VoC_add32_rr(REG01,REG01,REG45,DEFAULT)	|	VoC_movreg32(REG23,RL7,IN_PARALLEL)
0x4859CA12,	//0x148a		VoC_add32_rr(REG23,REG23,REG67,DEFAULT)	|	VoC_sub32_rr(REG45,REG01,REG45,IN_PARALLEL)
0x4934CA5B,	//0x148c		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_sub32_rr(REG67,REG23,REG67,IN_PARALLEL)
0x497DCB36,	//0x148e		VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)	|	VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)
0x4820CB7F,	//0x1490		VoC_add32_rr(REG01,REG01,ACC0,DEFAULT)	|	VoC_sub32_rr(RL7,ACC1,RL7,IN_PARALLEL)
0x4869CA24,	//0x1492		VoC_add32_rr(REG23,REG23,ACC1,DEFAULT)	|	VoC_sub32_rr(ACC0,REG01,ACC0,IN_PARALLEL)
0x48BFCA6D,	//0x1494		VoC_add32_rr(RL7,REG45,RL7,DEFAULT)	|	VoC_sub32_rr(ACC1,REG23,ACC1,IN_PARALLEL)
0x48F6CABA,	//0x1496		VoC_add32_rr(RL6,REG67,RL6,DEFAULT)	|	VoC_sub32_rr(REG45,REG45,RL7,IN_PARALLEL)
0x7A0ACAF3,	//0x1498		VoC_shr32_ri(REG45,0x1,DEFAULT)	|	VoC_sub32_rr(REG67,REG67,RL6,IN_PARALLEL)
0x7A08FA0F,	//0x149a		VoC_shr32_ri(REG01,0x1,DEFAULT)	|	VoC_shr32_ri(RL7,0x1,IN_PARALLEL)
0x7A09FA0C,	//0x149c		VoC_shr32_ri(REG23,0x1,DEFAULT)	|	VoC_shr32_ri(ACC0,0x1,IN_PARALLEL)
0x5F42FA0D,	//0x149e		VoC_push32(REG45,DEFAULT)	|	VoC_shr32_ri(ACC1,0x1,IN_PARALLEL)
0xD612FF0A,	//0x14a0		VoC_lw16_sd(REG2,0x0,DEFAULT)	|	VoC_movreg32(REG45,REG23,IN_PARALLEL)
0xFA0B7A0E,	//0x14a2		VoC_shr32_ri(REG67,0x1,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0x1,DEFAULT)
0xDDD2DDD0,	//0x14a4		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_sw32inc_p(REG01,REG2,DEFAULT)
0xDDD7DF02,	//0x14a6		VoC_sw32inc_p(RL7,REG2,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0xDDD4DDD3,	//0x14a8		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32inc_p(REG67,REG2,DEFAULT)
0xDDD2DDD5,	//0x14aa		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
0xD9D0DDD6,	//0x14ac		VoC_lw32inc_p(REG01,REG2,DEFAULT)	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
0xD9D2D9D7,	//0x14ae		VoC_lw32inc_p(REG45,REG2,DEFAULT)	|	VoC_lw32inc_p(RL7,REG2,DEFAULT)
0xD9D4D9D3,	//0x14b0		VoC_lw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_lw32inc_p(REG67,REG2,DEFAULT)
0xD9D6D9D5,	//0x14b2		VoC_lw32inc_p(RL6,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC1,REG2,DEFAULT)
0xFF395997,	//0x14b4		VoC_movreg32(REG23,RL7,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG2,DEFAULT)
0xCA124810,	//0x14b6		VoC_sub32_rr(REG45,REG01,REG45,IN_PARALLEL)	|	VoC_add32_rr(REG01,REG01,REG45,DEFAULT)
0xCA5B4859,	//0x14b8		VoC_sub32_rr(REG67,REG23,REG67,IN_PARALLEL)	|	VoC_add32_rr(REG23,REG23,REG67,DEFAULT)
0xCB364934,	//0x14ba		VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)
0xCB7F497D,	//0x14bc		VoC_sub32_rr(RL7,ACC1,RL7,IN_PARALLEL)	|	VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)
0xCA244820,	//0x14be		VoC_sub32_rr(ACC0,REG01,ACC0,IN_PARALLEL)	|	VoC_add32_rr(REG01,REG01,ACC0,DEFAULT)
0xCA6D4869,	//0x14c0		VoC_sub32_rr(ACC1,REG23,ACC1,IN_PARALLEL)	|	VoC_add32_rr(REG23,REG23,ACC1,DEFAULT)
0xFA0C7A08,	//0x14c2		VoC_shr32_ri(ACC0,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0x1,DEFAULT)
0xFA0D7A09,	//0x14c4		VoC_shr32_ri(ACC1,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG23,0x1,DEFAULT)
0xFF0A5F42,	//0x14c6		VoC_movreg32(REG45,REG23,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0xDF825F43,	//0x14c8		VoC_pop16(REG2,IN_PARALLEL)	|	VoC_push32(REG67,DEFAULT)
0xF6435F46,	//0x14ca		VoC_movreg16(REG3,REG2,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0xE1065F47,	//0x14cc		VoC_lw16i_short(REG6,0x10,IN_PARALLEL)	|	VoC_push32(RL7,DEFAULT)
0xE02740F3,	//0x14ce		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG6,DEFAULT)
0xC1D65996,	//0x14d0		VoC_add16_rr(REG6,REG7,REG2,IN_PARALLEL)	|	VoC_lw32_p(RL6,REG2,DEFAULT)
0xCB804986,	//0x14d2		VoC_sub32_rr(REG01,RL6,REG01,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,REG01,DEFAULT)
0xE06659B7,	//0x14d4		VoC_lw16i_short(REG6,0x6,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG6,DEFAULT)
0xCBD249D7,	//0x14d6		VoC_sub32_rr(REG45,RL7,REG45,IN_PARALLEL)	|	VoC_add32_rr(RL7,RL7,REG45,DEFAULT)
0xDDD8DDD6,	//0x14d8		VoC_sw32inc_p(REG01,REG3,DEFAULT)	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
0xC0B25D97,	//0x14da		VoC_add16_rr(REG2,REG2,REG6,IN_PARALLEL)	|	VoC_sw32_p(RL7,REG2,DEFAULT)
0xC0F35D9A,	//0x14dc		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_sw32_p(REG45,REG3,DEFAULT)
0xC1D65996,	//0x14de		VoC_add16_rr(REG6,REG7,REG2,IN_PARALLEL)	|	VoC_lw32_p(RL6,REG2,DEFAULT)
0xCBAD49AE,	//0x14e0		VoC_sub32_rr(ACC1,RL6,ACC1,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,ACC1,DEFAULT)
0x49E7D9B7,	//0x14e2		VoC_add32_rr(RL7,RL7,ACC0,DEFAULT)	|	VoC_lw32_p(RL7,REG6,DEFAULT)
0xDDD6CBE4,	//0x14e4		VoC_sw32inc_p(RL6,REG2,DEFAULT)	|	VoC_sub32_rr(ACC0,RL7,ACC0,IN_PARALLEL)
0xDDD4DDDD,	//0x14e6		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0xDF07DDDF,	//0x14e8		VoC_pop32(RL7,DEFAULT)	|	VoC_sw32inc_p(RL7,REG3,DEFAULT)
0x50521480,	//0x14ea		VoC_lw32_d(REG01,0x5052)
0xF9085F06,	//0x14ec		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_pop32(RL6,DEFAULT)
0xDF02DF03,	//0x14ee		VoC_pop32(REG45,DEFAULT)	|	VoC_pop32(REG67,DEFAULT)
0xCABA48BF,	//0x14f0		VoC_sub32_rr(REG45,REG45,RL7,IN_PARALLEL)	|	VoC_add32_rr(RL7,REG45,RL7,DEFAULT)
0xCAF648F3,	//0x14f2		VoC_sub32_rr(RL6,REG67,RL6,IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,RL6,DEFAULT)
0xCA9B489A,	//0x14f4		VoC_sub32_rr(REG67,REG45,REG67,IN_PARALLEL)	|	VoC_add32_rr(REG45,REG45,REG67,DEFAULT)
0xCBF749F6,	//0x14f6		VoC_sub32_rr(RL7,RL7,RL6,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL7,RL6,DEFAULT)
0xF90E790C,	//0x14f8		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCC6D4C7C,	//0x14fa		VoC_multf32_rr(ACC1,REG1,REG5,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xCEA14E71,	//0x14fc		VoC_macX_rr(REG4,REG1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xCEA84E78,	//0x14fe		VoC_macX_rr(REG5,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0xFF3B7F32,	//0x1500		VoC_movreg32(REG67,RL7,IN_PARALLEL)	|	VoC_movreg32(REG45,RL6,DEFAULT)
0xFF2F7F26,	//0x1502		VoC_movreg32(RL7,ACC1,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0xF90E790C,	//0x1504		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCC6D4C7C,	//0x1506		VoC_multf32_rr(ACC1,REG1,REG5,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xCEA14E71,	//0x1508		VoC_macX_rr(REG4,REG1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xCEA84E78,	//0x150a		VoC_macX_rr(REG5,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0x5990F047,	//0x150c		VoC_lw32_p(REG01,REG2,DEFAULT)	|	VoC_lw16i_short(REG7,0x2,DEFAULT)
0x4A30C0BE,	//0x150e		VoC_sub32_rr(REG01,REG01,RL6,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG7,IN_PARALLEL)
0x59B2C836,	//0x1510		VoC_lw32_p(REG45,REG6,DEFAULT)	|	VoC_add32_rr(RL6,REG01,RL6,IN_PARALLEL)
0x4ABAE0A6,	//0x1512		VoC_sub32_rr(REG45,REG45,RL7,DEFAULT)	|	VoC_lw16i_short(REG6,0xa,IN_PARALLEL)
0xDDD0C8BF,	//0x1514		VoC_sw32inc_p(REG01,REG2,DEFAULT)	|	VoC_add32_rr(RL7,REG45,RL7,IN_PARALLEL)
0x5D92DDDE,	//0x1516		VoC_sw32_p(REG45,REG2,DEFAULT)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
0x5D9FC2B2,	//0x1518		VoC_sw32_p(RL7,REG3,DEFAULT)	|	VoC_sub16_rr(REG2,REG2,REG6,IN_PARALLEL)
0x5990C2F3,	//0x151a		VoC_lw32_p(REG01,REG2,DEFAULT)	|	VoC_sub16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x4828C0BE,	//0x151c		VoC_add32_rr(REG01,REG01,ACC1,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG7,IN_PARALLEL)
0x59B2CA2D,	//0x151e		VoC_lw32_p(REG45,REG6,DEFAULT)	|	VoC_sub32_rr(ACC1,REG01,ACC1,IN_PARALLEL)
0x48A2E1A6,	//0x1520		VoC_add32_rr(REG45,REG45,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1a,IN_PARALLEL)
0x5DD0CAA4,	//0x1522		VoC_sw32inc_p(REG01,REG2,DEFAULT)	|	VoC_sub32_rr(ACC0,REG45,ACC0,IN_PARALLEL)
0xDD94C0B2,	//0x1524		VoC_sw32_p(ACC0,REG2,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG6,IN_PARALLEL)
0xDD9ADDDD,	//0x1526		VoC_sw32_p(REG45,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
		//0x1527		VoC_endloop0
0xD9C6E580,	//0x1528		VoC_lw32inc_p(RL6,REG0,DEFAULT)	|	VoC_return
		//0x1529		Coolsand_R4Core_subfunction
0xD98AD9CF,	//0x152a		VoC_lw32_p(REG45,REG1,DEFAULT)	|	VoC_lw32inc_p(RL7,REG1,DEFAULT)
0xC8BA5981,	//0x152c		VoC_add32_rr(REG45,REG45,RL7,IN_PARALLEL)	|	VoC_lw32_p(REG23,REG0,DEFAULT)
0xF90A4D5C,	//0x152e		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG3,DEFAULT)
0xF90C4E55,	//0x1530		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xD9C14E5C,	//0x1532		VoC_lw32inc_p(REG23,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF3A7BF9,	//0x1534		VoC_movreg32(REG45,RL7,IN_PARALLEL)	|	VoC_shr32_ri(REG23,0xffffffff,DEFAULT)
0xC8717F27,	//0x1536		VoC_add32_rr(REG23,REG23,RL6,IN_PARALLEL)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0xF90A4D5C,	//0x1538		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG3,DEFAULT)
0xF90C4E55,	//0x153a		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xFF314E5C,	//0x153c		VoC_movreg32(REG23,RL6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xF90A598A,	//0x153e		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG1,DEFAULT)
0xFF254D5C,	//0x1540		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG3,DEFAULT)
0xF90C4E55,	//0x1542		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCB7DCE5C,	//0x1544		VoC_sub32_rr(ACC1,ACC1,RL7,DEFAULT)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xE580C93C,	//0x1546		VoC_return	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
		//0x1548		Coolsand_R4Core
0x7050F019,	//0x1548		VoC_lw16i_short(INC0,0x2,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xFFC0F009,	//0x154a		VoC_NAD	|	VoC_lw16i_short(INC1,0x2,IN_PARALLEL)
		//0x154c		R4Core_LX
0x15B23184,	//0x154c		VoC_bez16_r(R4Core_L0,REG4)
0xE02760A6,	//0x154e		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_movreg16(REG6,REG5,DEFAULT)
0xF8F64D2C,	//0x1550		VoC_shr16_ri(REG6,0xfffffffe,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG4,REG5,DEFAULT)
0xDFE943BE,	//0x1552		VoC_push16(RA,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
0xDF425FC1,	//0x1554		VoC_push32(REG45,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0x15AA3304,	//0x1556		VoC_bez32_r(R4Core_L1,ACC0)
0x15A82E21,	//0x1558		VoC_loop_r(1,REG4)
0xDFC5DFC0,	//0x155a		VoC_push16(REG5,DEFAULT)	|	VoC_push16(REG0,DEFAULT)
0x15A32E28,	//0x155c		VoC_loop_r(0,REG5)
0x598DD9CC,	//0x155e		VoC_lw32_p(ACC1,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0x5F44C071,	//0x1560		VoC_push32(ACC0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)
0xDF45DFC6,	//0x1562		VoC_push32(ACC1,DEFAULT)	|	VoC_push16(REG6,IN_PARALLEL)
0x15292B80,	//0x1564		VoC_jal(Coolsand_R4Core_subfunction)
0xC0715F45,	//0x1566		VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xFFC0DF44,	//0x1568		VoC_NAD	|	VoC_push32(ACC0,DEFAULT)
0x15292B80,	//0x156a		VoC_jal(Coolsand_R4Core_subfunction)
0xC0715F45,	//0x156c		VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xFFC0DF44,	//0x156e		VoC_NAD	|	VoC_push32(ACC0,DEFAULT)
0x15292B80,	//0x1570		VoC_jal(Coolsand_R4Core_subfunction)
0xE0225F07,	//0x1572		VoC_lw16i_short(REG2,0x2,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0xC251DF06,	//0x1574		VoC_sub16_rr(REG1,REG1,REG2,DEFAULT)	|	VoC_pop32(RL6,DEFAULT)
0xDFC05F02,	//0x1576		VoC_push16(REG0,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xDFC15F01,	//0x1578		VoC_push16(REG1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDFC65F03,	//0x157a		VoC_push16(REG6,IN_PARALLEL)	|	VoC_pop32(REG67,DEFAULT)
0xFA135F00,	//0x157c		VoC_shr32_ri(REG67,0x2,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x4808FA10,	//0x157e		VoC_add32_rr(REG01,REG01,REG23,DEFAULT)	|	VoC_shr32_ri(REG01,0x2,DEFAULT)
0x48D3CA09,	//0x1580		VoC_add32_rr(REG67,REG67,REG45,DEFAULT)	|	VoC_sub32_rr(REG23,REG01,REG23,IN_PARALLEL)
0x49AECAD2,	//0x1582		VoC_add32_rr(RL6,RL6,ACC1,DEFAULT)	|	VoC_sub32_rr(REG45,REG67,REG45,IN_PARALLEL)
0x493CCBAD,	//0x1584		VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)	|	VoC_sub32_rr(ACC1,RL6,ACC1,IN_PARALLEL)
0x4830CB3F,	//0x1586		VoC_add32_rr(REG01,REG01,RL6,DEFAULT)	|	VoC_sub32_rr(RL7,ACC0,RL7,IN_PARALLEL)
0x4879CA36,	//0x1588		VoC_add32_rr(REG23,REG23,RL7,DEFAULT)	|	VoC_sub32_rr(RL6,REG01,RL6,IN_PARALLEL)
0x48AACA7F,	//0x158a		VoC_add32_rr(REG45,REG45,ACC1,DEFAULT)	|	VoC_sub32_rr(RL7,REG23,RL7,IN_PARALLEL)
0x5F40CAAD,	//0x158c		VoC_push32(REG01,DEFAULT)	|	VoC_sub32_rr(ACC1,REG45,ACC1,IN_PARALLEL)
0xF081DF80,	//0x158e		VoC_lw16i_short(REG1,0x4,DEFAULT)	|	VoC_pop16(REG0,IN_PARALLEL)
0xC0085F81,	//0x1590		VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xCAE448E3,	//0x1592		VoC_sub32_rr(ACC0,REG67,ACC0,IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,ACC0,DEFAULT)
0xC2415DC9,	//0x1594		VoC_sub16_rr(REG1,REG1,REG0,IN_PARALLEL)	|	VoC_sw32inc_p(REG23,REG1,DEFAULT)
0x5DCEDD8A,	//0x1596		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_sw32_p(REG45,REG1,DEFAULT)
0xDD8CC241,	//0x1598		VoC_sw32_p(ACC0,REG1,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG0,IN_PARALLEL)
0x5DCFDF01,	//0x159a		VoC_sw32inc_p(RL7,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0xDD8DC241,	//0x159c		VoC_sw32_p(ACC1,REG1,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG0,IN_PARALLEL)
0xE0225DC9,	//0x159e		VoC_lw16i_short(REG2,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG23,REG1,DEFAULT)
0xE0335DCB,	//0x15a0		VoC_lw16i_short(REG3,0x3,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xDF86DF80,	//0x15a2		VoC_pop16(REG6,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
		//0x15a3		VoC_endloop0
0xDF854194,	//0x15a4		VoC_pop16(REG5,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG6,REG2,DEFAULT)
0xDF80C51C,	//0x15a6		VoC_pop16(REG0,DEFAULT)	|	VoC_mult16_rr(REG4,REG4,REG3,DEFAULT)
		//0x15a8		VoC_endloop1
0xFFC0C061,	//0x15a8		VoC_NAD	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x15aa		R4Core_L1
0xDF814020,	//0x15aa		VoC_pop16(REG1,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0xDF025FA9,	//0x15ac		VoC_pop32(REG45,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0xF8F57814,	//0x15ae		VoC_shr16_ri(REG5,0xfffffffe,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x2,DEFAULT)
0x154C2B00,	//0x15b0		VoC_jump_lg(R4Core_LX)
		//0x15b2		R4Core_L0
0xE060E580,	//0x15b2		VoC_movreg16(REG0,REG3,DEFAULT)	|	VoC_return
		//0x15b3		Coolsand_R4FFT
0xDF40DFE9,	//0x15b4		VoC_push32(REG01,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x13E62B80,	//0x15b6		VoC_jal(Coolsand_BitReverse)
0xDF0070C6,	//0x15b8		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x6,DEFAULT)
0x00400A87,	//0x15ba		VoC_lw16i(REG7,0x40)
0x15C23180,	//0x15bc		VoC_bez16_r(R4FFT_L0,REG0)
0x0A87F126,	//0x15be		VoC_lw16i(REG7,0x200)(lo)	|	VoC_lw16i_short(REG6,0x9,DEFAULT)
0xFFC00200,	//0x15c0		VoC_NAD	|	VoC_lw16i(REG7,0x200)(hi)
		//0x15c2		R4FFT_L0
0xF6E060E3,	//0x15c2		VoC_movreg16(REG0,REG7,IN_PARALLEL)	|	VoC_movreg16(REG3,REG7,DEFAULT)
0x00011606,	//0x15c4		VoC_and16_ri(REG6,0x1)
0x15DC3186,	//0x15c6		VoC_bez16_r(R4FFT_L1,REG6)
0xDF40F81B,	//0x15c8		VoC_push32(REG01,DEFAULT)	|	VoC_shr16_ri(REG3,0x3,DEFAULT)
0x147A2B80,	//0x15ca		VoC_jal(Coolsand_R8FirstPass)
0xDF43DF41,	//0x15cc		VoC_push32(REG67,DEFAULT)	|	VoC_push32(REG23,DEFAULT)
0x210D2B80,	//0x15ce		VoC_jal(vpp_AmjpAacGenerateTwidOdd)
0xDF01DF03,	//0x15d0		VoC_pop32(REG23,DEFAULT)	|	VoC_pop32(REG67,DEFAULT)
0x6004DF00,	//0x15d2		VoC_movreg16(REG4,REG0,DEFAULT)	|	VoC_pop32(REG01,DEFAULT)
0x0A80E085,	//0x15d4		VoC_lw16i(REG0,0x59f8)(lo)	|	VoC_lw16i_short(REG5,0x8,IN_PARALLEL)
0xF82C59F8,	//0x15d6		VoC_shr16_ri(REG4,0x5,DEFAULT)	|	VoC_lw16i(REG0,0x59f8)(hi)
0x15482B80,	//0x15d8		VoC_jal(Coolsand_R4Core)
0xFFC0E5D4,	//0x15da		VoC_NAD	|	VoC_jump(R4FFT_L2)
		//0x15dc		R4FFT_L1
0xF8135F40,	//0x15dc		VoC_shr16_ri(REG3,0x2,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x14502B80,	//0x15de		VoC_jal(Coolsand_R4FirstPass)
0xDF43DF41,	//0x15e0		VoC_push32(REG67,DEFAULT)	|	VoC_push32(REG23,DEFAULT)
0x21392B80,	//0x15e2		VoC_jal(vpp_AmjpAacGenerateTwidEven)
0xDF01DF03,	//0x15e4		VoC_pop32(REG23,DEFAULT)	|	VoC_pop32(REG67,DEFAULT)
0x6004DF00,	//0x15e6		VoC_movreg16(REG4,REG0,DEFAULT)	|	VoC_pop32(REG01,DEFAULT)
0x0A80E045,	//0x15e8		VoC_lw16i(REG0,0x59f8)(lo)	|	VoC_lw16i_short(REG5,0x4,IN_PARALLEL)
0xF82459F8,	//0x15ea		VoC_shr16_ri(REG4,0x4,DEFAULT)	|	VoC_lw16i(REG0,0x59f8)(hi)
0x15482B80,	//0x15ec		VoC_jal(Coolsand_R4Core)
		//0x15ee		R4FFT_L2
0xFFC0DFA9,	//0x15ee		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x15f0		VoC_NAD	|	VoC_return
		//0x15f2		Coolsand_UnpackADTSHeader
0xEFD062B0,	//0x15f2		VoC_lw16i_short(REG0,0xfffffffd,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0xc,DEFAULT)
0x506B1405,	//0x15f4		VoC_lw16_d(REG5,0x506b)
0x166E35A5,	//0x15f6		VoC_bne16_rr(UnpackADTSHeader_End,REG4,REG5)
0x1805E242,	//0x15f8		VoC_lw16i_set_inc(REG1,0x2428,0x1)(lo)	|	VoC_lbinc_p(REG2)
0xE2842428,	//0x15fa		VoC_rbinc_i(REG4,0x1,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x2428,0x1)(hi)
0xE286E289,	//0x15fc		VoC_rbinc_i(REG6,0x1,DEFAULT)	|	VoC_rbinc_i(REG5,0x2,DEFAULT)
0xDC94628B,	//0x15fe		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x2,DEFAULT)
0xDC956290,	//0x1600		VoC_sw16inc_p(REG5,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0xDC966285,	//0x1602		VoC_sw16inc_p(REG6,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0xDC97628E,	//0x1604		VoC_sw16inc_p(REG7,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x3,DEFAULT)
0xDC946287,	//0x1606		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0x6284E242,	//0x1608		VoC_rbinc_i(REG4,0x1,DEFAULT)	|	VoC_lbinc_p(REG2)
0x6285DC95,	//0x160a		VoC_rbinc_i(REG5,0x1,DEFAULT)	|	VoC_sw16inc_p(REG5,REG1,IN_PARALLEL)
0x6286DC96,	//0x160c		VoC_rbinc_i(REG6,0x1,DEFAULT)	|	VoC_sw16inc_p(REG6,REG1,IN_PARALLEL)
0x62B7DC97,	//0x160e		VoC_rbinc_i(REG7,0xd,DEFAULT)	|	VoC_sw16inc_p(REG7,REG1,IN_PARALLEL)
0xE242DC94,	//0x1610		VoC_lbinc_p(REG2)	|	VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)
0xDC9562AD,	//0x1612		VoC_sw16inc_p(REG5,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0xb,DEFAULT)
0xDC96628A,	//0x1614		VoC_sw16inc_p(REG6,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x2,DEFAULT)
0x505A0736,	//0x1616		VoC_add16_rd(REG6,REG6,0x505a)
0xE0835C97,	//0x1618		VoC_lw16i_short(REG3,0x8,IN_PARALLEL)	|	VoC_sw16inc_p(REG7,REG1,DEFAULT)
0xDC95E242,	//0x161a		VoC_sw16inc_p(REG5,REG1,DEFAULT)	|	VoC_lbinc_p(REG2)
0x6E05DC96,	//0x161c		VoC_bnez16_d(UnpackADTSHeader_L1,0x242a)(lo)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
0xE283242A,	//0x161e		VoC_rbinc_i(REG7,0x10,DEFAULT)	|	VoC_bnez16_d(UnpackADTSHeader_L1,0x242a)(hi)
0xFFC0E242,	//0x1620		VoC_NAD	|	VoC_lbinc_p(REG2)
		//0x1622		UnpackADTSHeader_L1
0xE0165FDB,	//0x1622		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_push16(BITCACHE,DEFAULT)
0xE0C75F80,	//0x1624		VoC_lw16i_short(REG7,0xc,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x00071600,	//0x1626		VoC_and16_ri(REG0,0x7)
0xFF446300,	//0x1628		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_rbinc_r(REG4,REG0,DEFAULT)
0xE08377A0,	//0x162a		VoC_lw16i_short(REG3,0x8,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xfffffffd,DEFAULT)
0x24291404,	//0x162c		VoC_lw16_d(REG4,0x2429)
0x242B1405,	//0x162e		VoC_lw16_d(REG5,0x242b)
0x166E31C4,	//0x1630		VoC_bnez16_r(UnpackADTSHeader_End,REG4)
0x166E35B5,	//0x1632		VoC_bne16_rr(UnpackADTSHeader_End,REG6,REG5)
0x242C1404,	//0x1634		VoC_lw16_d(REG4,0x242c)
0x242E1405,	//0x1636		VoC_lw16_d(REG5,0x242e)
0x166E34BC,	//0x1638		VoC_bngt16_rr(UnpackADTSHeader_End,REG7,REG4)
0x166E349D,	//0x163a		VoC_bngt16_rr(UnpackADTSHeader_End,REG3,REG5)
0x242C1400,	//0x163c		VoC_lw16_d(REG0,0x242c)
0x502A0A83,	//0x163e		VoC_lw16i(REG3,0x502a)
0x242E071B,	//0x1640		VoC_add16_rd(REG3,REG3,0x242e)
0x040C1500,	//0x1642		VoC_sw16_d(REG0,0x40c)
0xEFF15830,	//0x1644		VoC_lw16i_short(REG1,0xffffffff,IN_PARALLEL)	|	VoC_lw16_p(REG0,REG3,DEFAULT)
0x040B6E04,	//0x1646		VoC_bnez16_d(UnpackADTSHeader_L2,0x40b)
0x040A1500,	//0x1648		VoC_sw16_d(REG0,0x40a)
		//0x164a		UnpackADTSHeader_L2
0x040D1501,	//0x164a		VoC_sw16_d(REG1,0x40d)
0x040E1501,	//0x164c		VoC_sw16_d(REG1,0x40e)
0x04161584,	//0x164e		VoC_sw32_d(ACC0,0x416)
0x041C1509,	//0x1650		VoC_sw16_d(ACC0_HI,0x41c)
0x040F1501,	//0x1652		VoC_sw16_d(REG1,0x40f)
0x040A1404,	//0x1654		VoC_lw16_d(REG4,0x40a)
0x242B1405,	//0x1656		VoC_lw16_d(REG5,0x242b)
0x24351406,	//0x1658		VoC_lw16_d(REG6,0x2435)
0x040C1400,	//0x165a		VoC_lw16_d(REG0,0x40c)
0x0A81F8F8,	//0x165c		VoC_lw16i(REG1,0x5032)(lo)	|	VoC_shr16_ri(REG0,0xffffffff,DEFAULT)
0xC0085032,	//0x165e		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i(REG1,0x5032)(hi)
0x04151504,	//0x1660		VoC_sw16_d(REG4,0x415)
0x40231504,	//0x1662		VoC_sw16_d(REG4,0x4023)
0x041A1505,	//0x1664		VoC_sw16_d(REG5,0x41a)
0x1506D984,	//0x1666		VoC_sw16_d(REG6,0x414)(lo)	|	VoC_lw32_p(ACC0,REG0,DEFAULT)
0x15840414,	//0x1668		VoC_sw32_d(ACC0,0x418)(lo)	|	VoC_sw16_d(REG6,0x414)(hi)
0x15840418,	//0x166a		VoC_sw32_d(ACC0,0x4024)(lo)	|	VoC_sw32_d(ACC0,0x418)(hi)
0xF0004024,	//0x166c		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_sw32_d(ACC0,0x4024)(hi)
		//0x166e		UnpackADTSHeader_End
0xF2A3E580,	//0x166e		VoC_lw16i_short(REG3,0x15,DEFAULT)	|	VoC_return
		//0x166f		Coolsand_DecodeHuffmanScalar
0xFF43401B,	//0x1670		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG0,REG3,DEFAULT)
0xFF445E00,	//0x1672		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xE0030059,	//0x1674		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_add16_rp(REG1,REG1,REG3,DEFAULT)
		//0x1676		DecodeHuffmanScalar_L0
0x7A82E065,	//0x1676		VoC_shr32_ri(REG45,0x10,DEFAULT)	|	VoC_movreg16(REG5,REG3,DEFAULT)
0x48D3C059,	//0x1678		VoC_add32_rr(REG67,REG67,REG45,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)
0x7BFBE005,	//0x167a		VoC_shr32_ri(REG67,0xffffffff,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
0xE242D883,	//0x167c		VoC_lbinc_p(REG2)	|	VoC_lw16inc_p(REG3,REG0,IN_PARALLEL)
0xFBFC6284,	//0x167e		VoC_shr32_ri(ACC0,0xffffffff,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xCB1AE514,	//0x1680		VoC_sub32_rr(REG45,ACC0,REG67,DEFAULT)	|	VoC_or32_rr(ACC0,REG45,DEFAULT)
0x1676349C,	//0x1682		VoC_bngt16_rr(DecodeHuffmanScalar_L0,REG3,REG4)
0xE242C061,	//0x1684		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0xE580D816,	//0x1686		VoC_return	|	VoC_lw16_p(REG6,REG1,DEFAULT)
		//0x1688		Coolsand_UnpackZeros
0xF6807066,	//0x1688		VoC_movreg16(REG0,REG4,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x3,DEFAULT)
0xFF4341F4,	//0x168a		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG7,REG6,DEFAULT)
0xF0087814,	//0x168c		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x2,DEFAULT)
0x16953184,	//0x168e		VoC_bez16_r(UnpackZeros_End,REG4)
0xDDC3E704,	//0x1690		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_loop_r_short(REG4,DEFAULT)
0xDDC3DDC3,	//0x1692		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
		//0x1694		VoC_endloop0
0xF030DDC3,	//0x1694		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
		//0x1695		UnpackZeros_End
0xFFC0E580,	//0x1696		VoC_NAD	|	VoC_return
		//0x1698		Coolsand_UnpackQuads
0xE1607025,	//0x1698		VoC_lw16i_short(REG0,0x16,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF68A43AD,	//0x169a		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG5,DEFAULT)
0xE0364545,	//0x169c		VoC_lw16i_short(REG6,0x3,IN_PARALLEL)	|	VoC_mult16_rr(REG5,REG5,REG0,DEFAULT)
0x50F80A80,	//0x169e		VoC_lw16i(REG0,0x50f8)
0x405E0A81,	//0x16a0		VoC_lw16i(REG1,0x405e)
0xC1F74028,	//0x16a2		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xFF077817,	//0x16a4		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x2,DEFAULT)
0x16F53147,	//0x16a6		VoC_bngtz16_r(UnpackQuads_L0,REG7)
0xFFC0DFE9,	//0x16a8		VoC_NAD	|	VoC_push16(RA,DEFAULT)
0x16F22E38,	//0x16aa		VoC_loop_r(0,REG7)
0x166F2B80,	//0x16ac		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xF6C760C3,	//0x16ae		VoC_movreg16(REG7,REG6,IN_PARALLEL)	|	VoC_movreg16(REG3,REG6,DEFAULT)
0xF6C479E3,	//0x16b0		VoC_movreg16(REG4,REG6,IN_PARALLEL)	|	VoC_shru16_ri(REG3,0xfffffffc,DEFAULT)
0xF6C579CC,	//0x16b2		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0xfffffff9,DEFAULT)
0xF99E79B5,	//0x16b4		VoC_shru16_ri(REG6,0xfffffff3,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xfffffff6,DEFAULT)
0xF86C786B,	//0x16b6		VoC_shr16_ri(REG4,0xd,IN_PARALLEL)	|	VoC_shr16_ri(REG3,0xd,DEFAULT)
0xF9FF786D,	//0x16b8		VoC_shru16_ri(REG7,0xffffffff,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xd,DEFAULT)
0xF86E796F,	//0x16ba		VoC_shr16_ri(REG6,0xd,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xd,DEFAULT)
0x16DD3187,	//0x16bc		VoC_bez16_r(UnpackQuads_L1,REG7)
0x16C63183,	//0x16be		VoC_bez16_r(UnpackQuads_L2,REG3)
0xF98FE287,	//0x16c0		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BBF87F,	//0x16c2		VoC_xor16_rr(REG3,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC0C2FB,	//0x16c4		VoC_NAD	|	VoC_sub16_rr(REG3,REG3,REG7,DEFAULT)
		//0x16c6		UnpackQuads_L2
0x16CE3184,	//0x16c6		VoC_bez16_r(UnpackQuads_L3,REG4)
0xF98FE287,	//0x16c8		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BCF87F,	//0x16ca		VoC_xor16_rr(REG4,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC0C33C,	//0x16cc		VoC_NAD	|	VoC_sub16_rr(REG4,REG4,REG7,DEFAULT)
		//0x16ce		UnpackQuads_L3
0x16D63185,	//0x16ce		VoC_bez16_r(UnpackQuads_L4,REG5)
0xF98FE287,	//0x16d0		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BDF87F,	//0x16d2		VoC_xor16_rr(REG5,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC0C37D,	//0x16d4		VoC_NAD	|	VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)
		//0x16d6		UnpackQuads_L4
0x16DD3186,	//0x16d6		VoC_bez16_r(UnpackQuads_L1,REG6)
0xF98FE287,	//0x16d8		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BEF87F,	//0x16da		VoC_xor16_rr(REG6,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xF053C3BE,	//0x16dc		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
		//0x16dd		UnpackQuads_L1
0xF6CB7F44,	//0x16de		VoC_movreg16(ACC1_HI,REG6,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xF7436069,	//0x16e0		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_movreg16(ACC0_HI,REG3,DEFAULT)
0xFF437A84,	//0x16e2		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x10,DEFAULT)
0x5DDCE242,	//0x16e4		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_lbinc_p(REG2)
0x7A83F687,	//0x16e6		VoC_shr32_ri(REG67,0x10,DEFAULT)	|	VoC_movreg16(REG7,REG4,IN_PARALLEL)
0xE0A9FF44,	//0x16e8		VoC_movreg16(ACC0_HI,REG5,DEFAULT)	|	VoC_lw32z(ACC0,IN_PARALLEL)
0xFA845DDB,	//0x16ea		VoC_shr32_ri(ACC0,0x10,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG3,DEFAULT)
0xF7677006,	//0x16ec		VoC_movreg16(REG7,ACC1_HI,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0xDDDCFA83,	//0x16ee		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_shr32_ri(REG67,0x10,DEFAULT)
0xFF385DDB,	//0x16f0		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG3,DEFAULT)
		//0x16f2		VoC_endloop0
0xDFA9E06A,	//0x16f2		VoC_pop16(RA,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG3,DEFAULT)
0xE580F033,	//0x16f4		VoC_return	|	VoC_lw16i_short(INC3,0x1,DEFAULT)
		//0x16f5		UnpackQuads_L0
		//0x16f6		Coolsand_UnpackPairsNoEsc
0xE1607025,	//0x16f6		VoC_lw16i_short(REG0,0x16,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF68A43AD,	//0x16f8		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG5,DEFAULT)
0xE0164545,	//0x16fa		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_mult16_rr(REG5,REG5,REG0,DEFAULT)
0x50F80A80,	//0x16fc		VoC_lw16i(REG0,0x50f8)
0x405E0A81,	//0x16fe		VoC_lw16i(REG1,0x405e)
0xC1F74028,	//0x1700		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xFF07780F,	//0x1702		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x1,DEFAULT)
0x17313147,	//0x1704		VoC_bngtz16_r(UnpackPairsNoEsc_L0,REG7)
0xDFE967E8,	//0x1706		VoC_push16(RA,IN_PARALLEL)	|	VoC_loop_r_short(REG7,DEFAULT)
0x166F2B80,	//0x1708		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xF6C560C7,	//0x170a		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG6,DEFAULT)
0xF9AE79D5,	//0x170c		VoC_shru16_ri(REG6,0xfffffff5,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xfffffffa,DEFAULT)
0xF9E7785D,	//0x170e		VoC_shru16_ri(REG7,0xfffffffc,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xb,DEFAULT)
0xF85E7977,	//0x1710		VoC_shr16_ri(REG6,0xb,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xe,DEFAULT)
0x17233187,	//0x1712		VoC_bez16_r(UnpackPairsNoEsc_L1,REG7)
0x171C3185,	//0x1714		VoC_bez16_r(UnpackPairsNoEsc_L2,REG5)
0xF98FE287,	//0x1716		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BDF87F,	//0x1718		VoC_xor16_rr(REG5,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC0C37D,	//0x171a		VoC_NAD	|	VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)
		//0x171c		UnpackPairsNoEsc_L2
0x17233186,	//0x171c		VoC_bez16_r(UnpackPairsNoEsc_L1,REG6)
0xF98FE287,	//0x171e		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BEF87F,	//0x1720		VoC_xor16_rr(REG6,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xF053C3BE,	//0x1722		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
		//0x1723		UnpackPairsNoEsc_L1
0xF6C460A7,	//0x1724		VoC_movreg16(REG4,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG5,DEFAULT)
0xF7437A83,	//0x1726		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0x10,DEFAULT)
0x7A84E089,	//0x1728		VoC_shr32_ri(ACC0,0x10,DEFAULT)	|	VoC_movreg16(ACC0_HI,REG4,DEFAULT)
0xE242DDDB,	//0x172a		VoC_lbinc_p(REG2)	|	VoC_sw32inc_p(REG67,REG3,IN_PARALLEL)
0xFF385DDC,	//0x172c		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x172e		VoC_endloop0
0xDFA9E06A,	//0x172e		VoC_pop16(RA,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG3,DEFAULT)
0xE580F033,	//0x1730		VoC_return	|	VoC_lw16i_short(INC3,0x1,DEFAULT)
		//0x1731		UnpackPairsNoEsc_L0
		//0x1732		Coolsand_UnpackPairsEsc
0xE1607025,	//0x1732		VoC_lw16i_short(REG0,0x16,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF68A43AD,	//0x1734		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG5,DEFAULT)
0xE0164545,	//0x1736		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_mult16_rr(REG5,REG5,REG0,DEFAULT)
0x50F80A80,	//0x1738		VoC_lw16i(REG0,0x50f8)
0x405E0A81,	//0x173a		VoC_lw16i(REG1,0x405e)
0xC1F74028,	//0x173c		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xFF07780F,	//0x173e		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x1,DEFAULT)
0x17953147,	//0x1740		VoC_bngtz16_r(UnpackPairsEsc_L0,REG7)
0xFFC0DFE9,	//0x1742		VoC_NAD	|	VoC_push16(RA,DEFAULT)
0x17922E38,	//0x1744		VoC_loop_r(0,REG7)
0x166F2B80,	//0x1746		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xF6C560C7,	//0x1748		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG6,DEFAULT)
0xF9B679E5,	//0x174a		VoC_shru16_ri(REG6,0xfffffff6,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xfffffffc,DEFAULT)
0xF9F77855,	//0x174c		VoC_shru16_ri(REG7,0xfffffffe,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xa,DEFAULT)
0xF8567977,	//0x174e		VoC_shr16_ri(REG6,0xa,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xe,DEFAULT)
0x6083E338,	//0x1750		VoC_movreg16(REG3,REG4,DEFAULT)	|	VoC_rbinc_r(REG4,REG7,DEFAULT)
0x43E4E104,	//0x1752		VoC_sub16_rr(REG4,REG7,REG4,DEFAULT)	|	VoC_lw16i_short(REG4,0x10,IN_PARALLEL)
0x7E63FF04,	//0x1754		VoC_shru16_rr(REG3,REG4,DEFAULT)	|	VoC_movreg32(ACC0,REG01,IN_PARALLEL)
0x35A8E100,	//0x1756		VoC_bne16_rr(UnpackPairsEsc_L1,REG5,REG0)(lo)	|	VoC_lw16i_short(REG0,0x10,IN_PARALLEL)
0x70811767,	//0x1758		VoC_lw16i_short(REG1,0x4,DEFAULT)	|	VoC_bne16_rr(UnpackPairsEsc_L1,REG5,REG0)(hi)
0xFFC0E014,	//0x175a		VoC_NAD	|	VoC_lw16i_short(REG4,0x1,IN_PARALLEL)
		//0x175c		UnpackPairsEsc_L2
0xE0006285,	//0x175c		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0x35ACE242,	//0x175e		VoC_bne16_rr(UnpackPairsEsc_L3,REG5,REG4)(lo)	|	VoC_lbinc_p(REG2)
0xC0611763,	//0x1760		VoC_add16_rr(REG1,REG1,REG4,DEFAULT)	|	VoC_bne16_rr(UnpackPairsEsc_L3,REG5,REG4)(hi)
0xC208E5FA,	//0x1762		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_jump(UnpackPairsEsc_L2)
		//0x1763		UnpackPairsEsc_L3
0xFE046309,	//0x1764		VoC_shr16_rr(REG4,REG0,IN_PARALLEL)	|	VoC_rbinc_r(REG5,REG1,DEFAULT)
0xF200C165,	//0x1766		VoC_lw16i_short(REG0,0x10,DEFAULT)	|	VoC_add16_rr(REG5,REG5,REG4,DEFAULT)
		//0x1767		UnpackPairsEsc_L1
0x177735B0,	//0x1768		VoC_bne16_rr(UnpackPairsEsc_L4,REG6,REG0)
0xE0147081,	//0x176a		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x4,DEFAULT)
		//0x176c		UnpackPairsEsc_L5
0xE0006286,	//0x176c		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x1,DEFAULT)
0x35B4E242,	//0x176e		VoC_bne16_rr(UnpackPairsEsc_L6,REG6,REG4)(lo)	|	VoC_lbinc_p(REG2)
0xC0611773,	//0x1770		VoC_add16_rr(REG1,REG1,REG4,DEFAULT)	|	VoC_bne16_rr(UnpackPairsEsc_L6,REG6,REG4)(hi)
0xC208E5FA,	//0x1772		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_jump(UnpackPairsEsc_L5)
		//0x1773		UnpackPairsEsc_L6
0xFE04630A,	//0x1774		VoC_shr16_rr(REG4,REG0,IN_PARALLEL)	|	VoC_rbinc_r(REG6,REG1,DEFAULT)
0xFF20C1A6,	//0x1776		VoC_movreg32(REG01,ACC0,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG4,DEFAULT)
		//0x1777		UnpackPairsEsc_L4
0x17873187,	//0x1778		VoC_bez16_r(UnpackPairsEsc_L7,REG7)
0x17823185,	//0x177a		VoC_bez16_r(UnpackPairsEsc_L8,REG5)
0xF87B6064,	//0x177c		VoC_shr16_ri(REG3,0xf,IN_PARALLEL)	|	VoC_movreg16(REG4,REG3,DEFAULT)
0xF9FC649D,	//0x177e		VoC_shru16_ri(REG4,0xffffffff,IN_PARALLEL)	|	VoC_xor16_rr(REG5,REG3,DEFAULT)
0xF683435D,	//0x1780		VoC_movreg16(REG3,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG5,REG3,DEFAULT)
		//0x1782		UnpackPairsEsc_L8
0x17873186,	//0x1782		VoC_bez16_r(UnpackPairsEsc_L7,REG6)
0xE49EF87B,	//0x1784		VoC_xor16_rr(REG6,REG3,DEFAULT)	|	VoC_shr16_ri(REG3,0xf,DEFAULT)
0xF053C39E,	//0x1786		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG3,DEFAULT)
		//0x1787		UnpackPairsEsc_L7
0xF6C460A7,	//0x1788		VoC_movreg16(REG4,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG5,DEFAULT)
0xF7437A83,	//0x178a		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0x10,DEFAULT)
0x7A84E089,	//0x178c		VoC_shr32_ri(ACC0,0x10,DEFAULT)	|	VoC_movreg16(ACC0_HI,REG4,DEFAULT)
0xE242DDDB,	//0x178e		VoC_lbinc_p(REG2)	|	VoC_sw32inc_p(REG67,REG3,IN_PARALLEL)
0xFF385DDC,	//0x1790		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x1792		VoC_endloop0
0xDFA9E06A,	//0x1792		VoC_pop16(RA,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG3,DEFAULT)
0xE580F033,	//0x1794		VoC_return	|	VoC_lw16i_short(INC3,0x1,DEFAULT)
		//0x1795		UnpackPairsEsc_L0
		//0x1796		Coolsand_DecodeSpectrumLong
0xDFE95E00,	//0x1796		VoC_push16(RA,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xDE006026,	//0x1798		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_movreg16(REG6,REG1,DEFAULT)
0x4E680A84,	//0x179a		VoC_lw16i(REG4,0x4e68)
0x040C0724,	//0x179c		VoC_add16_rd(REG4,REG4,0x40c)
0x59F80A85,	//0x179e		VoC_lw16i(REG5,0x59f8)
0xD8050160,	//0x17a0		VoC_lw16_p(REG5,REG0,IN_PARALLEL)	|	VoC_add16_rp(REG0,REG5,REG4,DEFAULT)
0x14281809,	//0x17a2		VoC_lw16i_set_inc(REG1,0x1428,0x2)
0x26251807,	//0x17a4		VoC_lw16i_set_inc(REG3,0x2625,0x1)
0x24540A84,	//0x17a6		VoC_lw16i(REG4,0x2454)
0x17B03186,	//0x17a8		VoC_bez16_r(DecodeSpectrumLong_L0,REG6)
0x1C281809,	//0x17aa		VoC_lw16i_set_inc(REG1,0x1c28,0x2)
0x269D1807,	//0x17ac		VoC_lw16i_set_inc(REG3,0x269d,0x1)
0x245F0A84,	//0x17ae		VoC_lw16i(REG4,0x245f)
		//0x17b0		DecodeSpectrumLong_L0
0xDFC45F40,	//0x17b0		VoC_push16(REG4,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x17DE3145,	//0x17b2		VoC_bngtz16_r(DecodeSpectrumLong_L12,REG5)
0x17DC2E29,	//0x17b4		VoC_loop_r(1,REG5)
0xD8B6D887,	//0x17b6		VoC_lw16inc_p(REG6,REG3,DEFAULT)	|	VoC_lw16inc_p(REG7,REG0,DEFAULT)
0xF624383F,	//0x17b8		VoC_movreg16(REG4,REG1,IN_PARALLEL)	|	VoC_sub16_pr(REG7,REG0,REG7,DEFAULT)
0xDF405FC3,	//0x17ba		VoC_push32(REG01,IN_PARALLEL)	|	VoC_push16(REG3,DEFAULT)
0x31C6DFC7,	//0x17bc		VoC_bnez16_r(DecodeSpectrumLong_L3,REG6)(lo)	|	VoC_push16(REG7,DEFAULT)
0x2B8017C2,	//0x17be		VoC_jal(Coolsand_UnpackZeros)(lo)	|	VoC_bnez16_r(DecodeSpectrumLong_L3,REG6)(hi)
0xE5D71688,	//0x17c0		VoC_jump(DecodeSpectrumLong_L8)	|	VoC_jal(Coolsand_UnpackZeros)(hi)
		//0x17c2		DecodeSpectrumLong_L3
0xE0A17080,	//0x17c2		VoC_lw16i_short(REG1,0xa,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x4,DEFAULT)
0x17CA3430,	//0x17c4		VoC_bgt16_rr(DecodeSpectrumLong_L4,REG6,REG0)
0x16982B80,	//0x17c6		VoC_jal(Coolsand_UnpackQuads)
0xFFC0E5D0,	//0x17c8		VoC_NAD	|	VoC_jump(DecodeSpectrumLong_L8)
		//0x17ca		DecodeSpectrumLong_L4
0x17D03431,	//0x17ca		VoC_bgt16_rr(DecodeSpectrumLong_L5,REG6,REG1)
0x16F62B80,	//0x17cc		VoC_jal(Coolsand_UnpackPairsNoEsc)
0xFFC0E5CA,	//0x17ce		VoC_NAD	|	VoC_jump(DecodeSpectrumLong_L8)
		//0x17d0		DecodeSpectrumLong_L5
0x50654436,	//0x17d0		VoC_bne16_rd(DecodeSpectrumLong_L6,REG6,0x5065)
0x17322B80,	//0x17d2		VoC_jal(Coolsand_UnpackPairsEsc)
0xFFC0E5C4,	//0x17d4		VoC_NAD	|	VoC_jump(DecodeSpectrumLong_L8)
		//0x17d6		DecodeSpectrumLong_L6
0x16882B80,	//0x17d6		VoC_jal(Coolsand_UnpackZeros)
		//0x17d8		DecodeSpectrumLong_L8
0xDF005F87,	//0x17d8		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xF8FF5F83,	//0x17da		VoC_shr16_ri(REG7,0xffffffff,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
		//0x17dc		VoC_endloop1
0xFFC0C1C9,	//0x17dc		VoC_NAD	|	VoC_add16_rr(REG1,REG7,REG1,DEFAULT)
		//0x17de		DecodeSpectrumLong_L12
0x04000A84,	//0x17de		VoC_lw16i(REG4,0x400)
0xF6240507,	//0x17e0		VoC_movreg16(REG4,REG1,IN_PARALLEL)	|	VoC_sub16_rp(REG7,REG4,REG0,DEFAULT)
0x16882B80,	//0x17e2		VoC_jal(Coolsand_UnpackZeros)
0x5F00DF84,	//0x17e4		VoC_pop32(REG01,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xD8C7DFA9,	//0x17e6		VoC_lw16inc_p(REG7,REG4,DEFAULT)	|	VoC_pop16(RA,IN_PARALLEL)
0x18033187,	//0x17e8		VoC_bez16_r(DecodeSpectrumLong_L9,REG7)
0xE04658C7,	//0x17ea		VoC_lw16i_short(REG6,0x4,IN_PARALLEL)	|	VoC_lw16inc_p(REG7,REG4,DEFAULT)
0xC1338220,	//0x17ec		VoC_add16_rr(REG3,REG4,REG6,DEFAULT)	|	VoC_add16inc_rp(REG0,REG0,REG4,DEFAULT)
0xF6805885,	//0x17ee		VoC_movreg16(REG0,REG4,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x18033187,	//0x17f0		VoC_bez16_r(DecodeSpectrumLong_L9,REG7)
0x834567D0,	//0x17f2		VoC_add16inc_rp(REG5,REG5,REG0,IN_PARALLEL)	|	VoC_loop_r_short(REG7,DEFAULT)
0x414CF8FD,	//0x17f4		VoC_add16_rr(REG4,REG5,REG1,DEFAULT)	|	VoC_shr16_ri(REG5,0xffffffff,DEFAULT)
0x59A4D8B7,	//0x17f6		VoC_lw32_p(ACC0,REG4,DEFAULT)	|	VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)
0x32C4FA83,	//0x17f8		VoC_bngtz32_r(DecodeSpectrumLong_L10,ACC0)(lo)	|	VoC_shr32_ri(REG67,0x10,IN_PARALLEL)
0xC91C17FE,	//0x17fa		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_bngtz32_r(DecodeSpectrumLong_L10,ACC0)(hi)
0xFFC0E5C5,	//0x17fc		VoC_NAD	|	VoC_jump(DecodeSpectrumLong_L11)
		//0x17fe		DecodeSpectrumLong_L10
0x180132C4,	//0x17fe		VoC_bngtz32_r(DecodeSpectrumLong_L11,ACC0)
0x8345CB1C,	//0x1800		VoC_add16inc_rp(REG5,REG5,REG0,DEFAULT)	|	VoC_sub32_rr(ACC0,ACC0,REG67,DEFAULT)
		//0x1801		DecodeSpectrumLong_L11
		//0x1802		VoC_endloop0
0xE580DDA4,	//0x1802		VoC_return	|	VoC_sw32_p(ACC0,REG4,DEFAULT)
		//0x1803		DecodeSpectrumLong_L9
		//0x1804		Coolsand_DecodeSpectrumShort
0xE0266024,	//0x1804		VoC_lw16i_short(REG6,0x2,IN_PARALLEL)	|	VoC_movreg16(REG4,REG1,DEFAULT)
0x14281807,	//0x1806		VoC_lw16i_set_inc(REG3,0x1428,0x1)
0x26251805,	//0x1808		VoC_lw16i_set_inc(REG1,0x2625,0x1)
0x18103184,	//0x180a		VoC_bez16_r(DecodeSpectrumShort_L0,REG4)
0x1C281807,	//0x180c		VoC_lw16i_set_inc(REG3,0x1c28,0x1)
0x269D1805,	//0x180e		VoC_lw16i_set_inc(REG1,0x269d,0x1)
		//0x1810		DecodeSpectrumShort_L0
0xE0564187,	//0x1810		VoC_lw16i_short(REG6,0x5,IN_PARALLEL)	|	VoC_add16_rr(REG7,REG6,REG0,DEFAULT)
0xDFE94180,	//0x1812		VoC_push16(RA,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG6,REG0,DEFAULT)
0x4F420A84,	//0x1814		VoC_lw16i(REG4,0x4f42)
0x040C0724,	//0x1816		VoC_add16_rd(REG4,REG4,0x40c)
0x4F4E0A85,	//0x1818		VoC_lw16i(REG5,0x4f4e)
0xD8750164,	//0x181a		VoC_lw16_p(REG5,REG7,IN_PARALLEL)	|	VoC_add16_rp(REG4,REG5,REG4,DEFAULT)
0xFF155886,	//0x181c		VoC_movreg32(ACC1,REG45,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG0,DEFAULT)
0xF7436068,	//0x181e		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_movreg16(ACC0_LO,REG3,DEFAULT)
0xE0077024,	//0x1820		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
		//0x1822		DecodeSpectrumShort_L10
0x189034B7,	//0x1822		VoC_bngt16_rr(DecodeSpectrumShort_L11,REG6,REG7)
0xE165C1E7,	//0x1824		VoC_movreg16(REG5,ACC1_HI,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG4,DEFAULT)
0xDFC35F43,	//0x1826		VoC_push16(REG3,IN_PARALLEL)	|	VoC_push32(REG67,DEFAULT)
0x186A3145,	//0x1828		VoC_bngtz16_r(DecodeSpectrumShort_L12,REG5)
0x18682E29,	//0x182a		VoC_loop_r(1,REG5)
0xD8B7D896,	//0x182c		VoC_lw16inc_p(REG7,REG3,DEFAULT)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0xF66A38FF,	//0x182e		VoC_movreg16(ACC1_LO,REG3,IN_PARALLEL)	|	VoC_sub16_pr(REG7,REG3,REG7,DEFAULT)
0xE0035805,	//0x1830		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG0,DEFAULT)
		//0x1832		DecodeSpectrumShort_L2
0x186434AB,	//0x1832		VoC_bngt16_rr(DecodeSpectrumShort_L1,REG5,REG3)
0x0A84DF40,	//0x1834		VoC_lw16i(REG4,0x80)(lo)	|	VoC_push32(REG01,DEFAULT)
0x451C0080,	//0x1836		VoC_mult16_rr(REG4,REG4,REG3,DEFAULT)	|	VoC_lw16i(REG4,0x80)(hi)
0x5FC5F705,	//0x1838		VoC_push16(REG5,DEFAULT)	|	VoC_movreg16(REG5,ACC0_LO,IN_PARALLEL)
0x5FC8DF45,	//0x183a		VoC_push16(ACC0_LO,DEFAULT)	|	VoC_push32(ACC1,IN_PARALLEL)
0x78FCDF43,	//0x183c		VoC_shr16_ri(REG4,0xffffffff,DEFAULT)	|	VoC_push32(REG67,IN_PARALLEL)
0x5FC3DE18,	//0x183e		VoC_push16(REG3,DEFAULT)	|	VoC_inc_p(REG3,IN_PARALLEL)
0x31C6C164,	//0x1840		VoC_bnez16_r(DecodeSpectrumShort_L3,REG6)(lo)	|	VoC_add16_rr(REG4,REG5,REG4,IN_PARALLEL)
0x2B801846,	//0x1842		VoC_jal(Coolsand_UnpackZeros)(lo)	|	VoC_bnez16_r(DecodeSpectrumShort_L3,REG6)(hi)
0xE5D71688,	//0x1844		VoC_jump(DecodeSpectrumShort_L8)	|	VoC_jal(Coolsand_UnpackZeros)(hi)
		//0x1846		DecodeSpectrumShort_L3
0xE0A17080,	//0x1846		VoC_lw16i_short(REG1,0xa,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x4,DEFAULT)
0x184E3430,	//0x1848		VoC_bgt16_rr(DecodeSpectrumShort_L4,REG6,REG0)
0x16982B80,	//0x184a		VoC_jal(Coolsand_UnpackQuads)
0xFFC0E5D0,	//0x184c		VoC_NAD	|	VoC_jump(DecodeSpectrumShort_L8)
		//0x184e		DecodeSpectrumShort_L4
0x18533431,	//0x184e		VoC_bgt16_rr(DecodeSpectrumShort_L5,REG6,REG1)
0x16F62B80,	//0x1850		VoC_jal(Coolsand_UnpackPairsNoEsc)
0xF160E5CA,	//0x1852		VoC_lw16i_short(REG0,0xb,DEFAULT)	|	VoC_jump(DecodeSpectrumShort_L8)
		//0x1853		DecodeSpectrumShort_L5
0x185A35B0,	//0x1854		VoC_bne16_rr(DecodeSpectrumShort_L6,REG6,REG0)
0x17322B80,	//0x1856		VoC_jal(Coolsand_UnpackPairsEsc)
0xFFC0E5C4,	//0x1858		VoC_NAD	|	VoC_jump(DecodeSpectrumShort_L8)
		//0x185a		DecodeSpectrumShort_L6
0x16882B80,	//0x185a		VoC_jal(Coolsand_UnpackZeros)
		//0x185c		DecodeSpectrumShort_L8
0xDF035F83,	//0x185c		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDF055F88,	//0x185e		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_pop16(ACC0_LO,DEFAULT)
0xDF005F85,	//0x1860		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
0x18322B00,	//0x1862		VoC_jump_lg(DecodeSpectrumShort_L2)
		//0x1864		DecodeSpectrumShort_L1
0xF70678FF,	//0x1864		VoC_movreg16(REG6,ACC0_LO,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0xffffffff,DEFAULT)
0xC1F66143,	//0x1866		VoC_add16_rr(REG6,REG7,REG6,IN_PARALLEL)	|	VoC_movreg16(REG3,ACC1_LO,DEFAULT)
		//0x1868		VoC_endloop1
0xFFC0E0C8,	//0x1868		VoC_NAD	|	VoC_movreg16(ACC0_LO,REG6,DEFAULT)
		//0x186a		DecodeSpectrumShort_L12
0xD8856147,	//0x186a		VoC_lw16inc_p(REG5,REG0,IN_PARALLEL)	|	VoC_movreg16(REG7,ACC1_LO,DEFAULT)
0x00800A86,	//0x186c		VoC_lw16i(REG6,0x80)
0x85BF6104,	//0x186e		VoC_sub16_rp(REG7,REG6,REG7,IN_PARALLEL)	|	VoC_movreg16(REG4,ACC0_LO,DEFAULT)
0xC1E35FC0,	//0x1870		VoC_add16_rr(REG3,REG7,REG4,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xE01041DB,	//0x1872		VoC_lw16i_short(REG0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG7,REG3,DEFAULT)
0xC430C340,	//0x1874		VoC_mult16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_sub16_rr(REG0,REG5,REG0,DEFAULT)
0xF8F8E242,	//0x1876		VoC_shr16_ri(REG0,0xffffffff,DEFAULT)	|	VoC_lbinc_p(REG2)
0xF8FE40C3,	//0x1878		VoC_shr16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG0,DEFAULT)
0xE0036068,	//0x187a		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_movreg16(ACC0_LO,REG3,DEFAULT)
0x188A3185,	//0x187c		VoC_bez16_r(DecodeSpectrumShort_L9,REG5)
0x18882E29,	//0x187e		VoC_loop_r(1,REG5)
0x5FC4C4F5,	//0x1880		VoC_push16(REG4,DEFAULT)	|	VoC_mult16_rr(REG5,REG3,REG6,DEFAULT)
0x412CDE18,	//0x1882		VoC_add16_rr(REG4,REG4,REG5,DEFAULT)	|	VoC_inc_p(REG3,IN_PARALLEL)
0x2B80DF43,	//0x1884		VoC_jal(Coolsand_UnpackZeros)(lo)	|	VoC_push32(REG67,IN_PARALLEL)
0xDF031688,	//0x1886		VoC_pop32(REG67,DEFAULT)	|	VoC_jal(Coolsand_UnpackZeros)(hi)
		//0x1888		VoC_endloop1
0xFFC0DF84,	//0x1888		VoC_NAD	|	VoC_pop16(REG4,DEFAULT)
		//0x188a		DecodeSpectrumShort_L9
0xDF805F03,	//0x188a		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_pop32(REG67,DEFAULT)
0xE0145F83,	//0x188c		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0x18222B00,	//0x188e		VoC_jump_lg(DecodeSpectrumShort_L10)
		//0x1890		DecodeSpectrumShort_L11
0xFFC0DFA9,	//0x1890		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1892		VoC_NAD	|	VoC_return
		//0x1894		Coolsand_DecWindowOverlap
0x04000A83,	//0x1894		VoC_lw16i(REG3,0x400)
0xF3F94019,	//0x1896		VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG3,DEFAULT)
0xF0086020,	//0x1898		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_movreg16(REG0,REG1,DEFAULT)
0x04151403,	//0x189a		VoC_lw16_d(REG3,0x415)
0xDE087F06,	//0x189c		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x07FE0A81,	//0x189e		VoC_lw16i(REG1,0x7fe)
0xC10D7032,	//0x18a0		VoC_add16_rr(REG5,REG4,REG1,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x1,DEFAULT)
0xE0007809,	//0x18a2		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x1,DEFAULT)
0xFF1777F3,	//0x18a4		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw16i_short(INC3,0xffffffff,DEFAULT)
0x0A81C08B,	//0x18a6		VoC_lw16i(REG1,0x100)(lo)	|	VoC_add16_rr(REG3,REG2,REG1,DEFAULT)
0x443F0100,	//0x18a8		VoC_bne16_rd(DecWindowOverlap_L0,REG7,0x505a)(lo)	|	VoC_lw16i(REG1,0x100)(hi)
0x0A80505A,	//0x18aa		VoC_lw16i(REG0,0x59f8)(lo)	|	VoC_bne16_rd(DecWindowOverlap_L0,REG7,0x505a)(hi)
0xC00859F8,	//0x18ac		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i(REG0,0x59f8)(hi)
0xFFC0E5C6,	//0x18ae		VoC_NAD	|	VoC_jump(DecWindowOverlap_L1)
		//0x18b0		DecWindowOverlap_L0
0x50F80A80,	//0x18b0		VoC_lw16i(REG0,0x50f8)
0xFFC0C008,	//0x18b2		VoC_NAD	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
		//0x18b4		DecWindowOverlap_L1
0x18EE35B7,	//0x18b4		VoC_bne16_rr(DecWindowOverlap_L2,REG6,REG7)
		//0x18b6		DecWindowOverlap_L3
0x59C3D9C2,	//0x18b6		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x790EF90C,	//0x18b8		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F42DFC0,	//0x18ba		VoC_push32(REG45,DEFAULT)	|	VoC_push16(REG0,IN_PARALLEL)
0xDF43F780,	//0x18bc		VoC_push32(REG67,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x5F41D9C1,	//0x18be		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x18c0		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x18c2		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x18c4		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x18c6		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x5F01FF38,	//0x18c8		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x3C24E016,	//0x18ca		VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0x114DE007,	//0x18cc		VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0x491CFBF3,	//0x18ce		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)
0x7B9CC95D,	//0x18d0		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x5F02DF03,	//0x18d2		VoC_pop32(REG45,DEFAULT)	|	VoC_pop32(REG67,IN_PARALLEL)
0x5CA9FB9D,	//0x18d4		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0xDCBBF7A1,	//0x18d6		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0xF62D59C9,	//0x18d8		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF90A5F41,	//0x18da		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x18dc		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x18de		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x18e0		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDF01FF38,	//0x18e2		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDDC5,	//0x18e4		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xFF075F80,	//0x18e6		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x343EFF3B,	//0x18e8		VoC_bgt16_rr(DecWindowOverlap_L3,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,DEFAULT)
0x2B0018B6,	//0x18ea		VoC_jump_lg(DecWindowOverlap_L4)(lo)	|	VoC_bgt16_rr(DecWindowOverlap_L3,REG7,REG6)(hi)
0xFFC01930,	//0x18ec		VoC_NAD	|	VoC_jump_lg(DecWindowOverlap_L4)(hi)
		//0x18ee		DecWindowOverlap_L2
0x505A4436,	//0x18ee		VoC_bne16_rd(DecWindowOverlap_L5,REG6,0x505a)
0x59F80A80,	//0x18f0		VoC_lw16i(REG0,0x59f8)
0xE5C4C009,	//0x18f2		VoC_jump(DecWindowOverlap_L6)	|	VoC_add16_rr(REG1,REG0,REG1,DEFAULT)
		//0x18f4		DecWindowOverlap_L5
0x50F80A80,	//0x18f4		VoC_lw16i(REG0,0x50f8)
0xD9C2C009,	//0x18f6		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG0,REG1,DEFAULT)
		//0x18f7		DecWindowOverlap_L6
0xF90C59C3,	//0x18f8		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF7805FC0,	//0x18fa		VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xDFC1790E,	//0x18fc		VoC_push16(REG1,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0x5F41D9C1,	//0x18fe		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x1900		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x1902		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x1904		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x1906		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x5F01FF38,	//0x1908		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x3C24E016,	//0x190a		VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0x114DE007,	//0x190c		VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0xDF80FBF3,	//0x190e		VoC_pop16(REG0,DEFAULT)	|	VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)
0xC95D491C,	//0x1910		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)
0xD9C27B9C,	//0x1912		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xFB9D59C3,	//0x1914		VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF7A15CA9,	//0x1916		VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
0xF90C5CBB,	//0x1918		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)
0xF90E59C9,	//0x191a		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF62D5F41,	//0x191c		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0x4CECF90A,	//0x191e		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,DEFAULT)
0x4E55CCFD,	//0x1920		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x1922		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x7F38CE9E,	//0x1924		VoC_movreg32(REG01,RL7,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0xDF01DFC0,	//0x1926		VoC_pop32(REG23,DEFAULT)	|	VoC_push16(REG0,IN_PARALLEL)
0xDDCCDDC5,	//0x1928		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xFF075F81,	//0x192a		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xFF3B5F80,	//0x192c		VoC_movreg32(REG67,RL7,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x18F7343E,	//0x192e		VoC_bgt16_rr(DecWindowOverlap_L6,REG7,REG6)
		//0x1930		DecWindowOverlap_L4
0xFFC0E580,	//0x1930		VoC_NAD	|	VoC_return
		//0x1932		Coolsand_DecWindowOverlapLongStart
0x04000A83,	//0x1932		VoC_lw16i(REG3,0x400)
0xF3F94019,	//0x1934		VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG3,DEFAULT)
0xF0086020,	//0x1936		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_movreg16(REG0,REG1,DEFAULT)
0x04151403,	//0x1938		VoC_lw16_d(REG3,0x415)
0xDE087F06,	//0x193a		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x07FE0A81,	//0x193c		VoC_lw16i(REG1,0x7fe)
0xC10D7032,	//0x193e		VoC_add16_rr(REG5,REG4,REG1,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x1,DEFAULT)
0xE0007809,	//0x1940		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x1,DEFAULT)
0xFF1777F3,	//0x1942		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw16i_short(INC3,0xffffffff,DEFAULT)
0xDFC6408B,	//0x1944		VoC_push16(REG6,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG2,REG1,DEFAULT)
0x01000A81,	//0x1946		VoC_lw16i(REG1,0x100)
0x505A4437,	//0x1948		VoC_bne16_rd(DecWindowOverlapLongStart_L0,REG7,0x505a)
0x59F80A80,	//0x194a		VoC_lw16i(REG0,0x59f8)
0xE5C5C008,	//0x194c		VoC_jump(DecWindowOverlapLongStart_L1)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
		//0x194e		DecWindowOverlapLongStart_L0
0x50F80A80,	//0x194e		VoC_lw16i(REG0,0x50f8)
0xFFC0C008,	//0x1950		VoC_NAD	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
		//0x1952		DecWindowOverlapLongStart_L1
0x197D2C05,	//0x1952		VoC_loop_i(0x1,0x2)
0x197C2DC0,	//0x1954		VoC_loop_i(0x0,0xe0)
0x59C3D9C2,	//0x1956		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x1958		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xF90EF780,	//0x195a		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x5F41D9C1,	//0x195c		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x195e		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x1960		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x1962		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x1964		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x5F01FF38,	//0x1966		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x3C24E016,	//0x1968		VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0x114DE007,	//0x196a		VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0xE1A1FBF3,	//0x196c		VoC_movreg16(REG1,RL6_HI,DEFAULT)	|	VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)
0xC95D491C,	//0x196e		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)
0xF62D59CA,	//0x1970		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG1,DEFAULT)
0xFB9D7B9C,	//0x1972		VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xFF447F38,	//0x1974		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xFA0A5CA9,	//0x1976		VoC_shr32_ri(REG45,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
0x5DC2DDCC,	//0x1978		VoC_sw32inc_p(REG45,REG0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xDF80FF07,	//0x197a		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
		//0x197c		VoC_endloop0
0xFFC0DCBB,	//0x197c		VoC_NOP	|	VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)
		//0x197d		VoC_endloop1
0x442EDF86,	//0x197e		VoC_bne16_rd(DecWindowOverlapLongStart_L2,REG6,0x505a)(lo)	|	VoC_pop16(REG6,DEFAULT)
0x0A81505A,	//0x1980		VoC_lw16i(REG1,0x59f8)(lo)	|	VoC_bne16_rd(DecWindowOverlapLongStart_L2,REG6,0x505a)(hi)
0xE5C359F8,	//0x1982		VoC_jump(DecWindowOverlapLongStart_L3)	|	VoC_lw16i(REG1,0x59f8)(hi)
		//0x1984		DecWindowOverlapLongStart_L2
0x50F80A81,	//0x1984		VoC_lw16i(REG1,0x50f8)
		//0x1986		DecWindowOverlapLongStart_L3
0x59C3D9C2,	//0x1986		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x1988		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x790EF780,	//0x198a		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0xD9C1DFC1,	//0x198c		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0xF90A5F41,	//0x198e		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1990		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1992		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1994		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF38600C,	//0x1996		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0xE0165F01,	//0x1998		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0073C24,	//0x199a		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)
0xFBF3114D,	//0x199c		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0x491CDF80,	//0x199e		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
0x7B9CC95D,	//0x19a0		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x59C3D9C2,	//0x19a2		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0x5CA9FB9D,	//0x19a4		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0x5CBBF7A1,	//0x19a6		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0x59C9F90C,	//0x19a8		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F41F90E,	//0x19aa		VoC_push32(REG23,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90AF62D,	//0x19ac		VoC_shru16_ri(REG2,0x1,DEFAULT)	|	VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)
0xCCFD4CEC,	//0x19ae		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x19b0		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x19b2		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x19b4		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDF01,	//0x19b6		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0x5F81DDC5,	//0x19b8		VoC_pop16(REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0x5F80FF07,	//0x19ba		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x343EFF3B,	//0x19bc		VoC_bgt16_rr(DecWindowOverlapLongStart_L3,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0xE5801986,	//0x19be		VoC_return	|	VoC_bgt16_rr(DecWindowOverlapLongStart_L3,REG7,REG6)(hi)
		//0x19c0		Coolsand_DecWindowOverlapLongStop
0x04000A83,	//0x19c0		VoC_lw16i(REG3,0x400)
0xF3F94019,	//0x19c2		VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG3,DEFAULT)
0xF0086020,	//0x19c4		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_movreg16(REG0,REG1,DEFAULT)
0x04151403,	//0x19c6		VoC_lw16_d(REG3,0x415)
0xDE087F06,	//0x19c8		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x07FE0A81,	//0x19ca		VoC_lw16i(REG1,0x7fe)
0xC10D7032,	//0x19cc		VoC_add16_rr(REG5,REG4,REG1,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x1,DEFAULT)
0xE0007809,	//0x19ce		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x1,DEFAULT)
0xF6234459,	//0x19d0		VoC_movreg16(REG3,REG1,IN_PARALLEL)	|	VoC_mult16_rr(REG1,REG1,REG3,DEFAULT)
0xFF1777F3,	//0x19d2		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw16i_short(INC3,0xffffffff,DEFAULT)
0x0A84C09B,	//0x19d4		VoC_lw16i(REG4,0x100)(lo)	|	VoC_add16_rr(REG3,REG2,REG3,DEFAULT)
0x442F0100,	//0x19d6		VoC_bne16_rd(DecWindowOverlapLongStop_L0,REG7,0x505a)(lo)	|	VoC_lw16i(REG4,0x100)(hi)
0x0A80505A,	//0x19d8		VoC_lw16i(REG0,0x59f8)(lo)	|	VoC_bne16_rd(DecWindowOverlapLongStop_L0,REG7,0x505a)(hi)
0xE5C359F8,	//0x19da		VoC_jump(DecWindowOverlapLongStop_L1)	|	VoC_lw16i(REG0,0x59f8)(hi)
		//0x19dc		DecWindowOverlapLongStop_L0
0x50F80A80,	//0x19dc		VoC_lw16i(REG0,0x50f8)
		//0x19de		DecWindowOverlapLongStop_L1
0x505A4436,	//0x19de		VoC_bne16_rd(DecWindowOverlapLongStop_L2,REG6,0x505a)
0x59F80A81,	//0x19e0		VoC_lw16i(REG1,0x59f8)
0xE5C4C061,	//0x19e2		VoC_jump(DecWindowOverlapLongStop_L3)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x19e4		DecWindowOverlapLongStop_L2
0x50F80A81,	//0x19e4		VoC_lw16i(REG1,0x50f8)
0xDFC0C061,	//0x19e6		VoC_push16(REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x19e7		DecWindowOverlapLongStop_L3
0x1A132C05,	//0x19e8		VoC_loop_i(0x1,0x2)
0x1A122DC0,	//0x19ea		VoC_loop_i(0x0,0xe0)
0xDFC1E180,	//0x19ec		VoC_push16(REG1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,DEFAULT)
0xF60C59C5,	//0x19ee		VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)	|	VoC_lw32inc_p(ACC1,REG0,DEFAULT)
0xFF387A0D,	//0x19f0		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x1,DEFAULT)
0xE0077026,	//0x19f2		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x1,DEFAULT)
0xFBF3114D,	//0x19f4		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0x10C4DF80,	//0x19f6		VoC_add32_rp(ACC0,REG67,REG0,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
0x7B9CC95D,	//0x19f8		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x59C3D9C2,	//0x19fa		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0x5CA9FB9D,	//0x19fc		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0x5CBBF7A1,	//0x19fe		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0x59C9F90C,	//0x1a00		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F41F90E,	//0x1a02		VoC_push32(REG23,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90AF62D,	//0x1a04		VoC_shru16_ri(REG2,0x1,DEFAULT)	|	VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)
0xCCFD4CEC,	//0x1a06		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1a08		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1a0a		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x1a0c		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDF01,	//0x1a0e		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0xFF075DC5,	//0x1a10		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
		//0x1a12		VoC_endloop0
0xFFC0DF81,	//0x1a12		VoC_NOP	|	VoC_pop16(REG1,DEFAULT)
		//0x1a13		VoC_endloop1
0xFFC0DF80,	//0x1a14		VoC_NOP	|	VoC_pop16(REG0,DEFAULT)
		//0x1a16		DecWindowOverlapLongStop_L4
0x59C3D9C2,	//0x1a16		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F780,	//0x1a18		VoC_push16(REG0,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x790EF90C,	//0x1a1a		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xD9C1DFC1,	//0x1a1c		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0xF90A5F41,	//0x1a1e		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1a20		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1a22		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1a24		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF38600C,	//0x1a26		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0xE0165F01,	//0x1a28		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0073C24,	//0x1a2a		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)
0xFBF3114D,	//0x1a2c		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0x491CDF80,	//0x1a2e		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
0x7B9CC95D,	//0x1a30		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x59C3D9C2,	//0x1a32		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0x5CA9FB9D,	//0x1a34		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0x5CBBF7A1,	//0x1a36		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0x59C9F90C,	//0x1a38		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F41F90E,	//0x1a3a		VoC_push32(REG23,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90AF62D,	//0x1a3c		VoC_shru16_ri(REG2,0x1,DEFAULT)	|	VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)
0xCCFD4CEC,	//0x1a3e		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1a40		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1a42		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x1a44		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDF01,	//0x1a46		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0x5F81DDC5,	//0x1a48		VoC_pop16(REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0x5F80FF07,	//0x1a4a		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x343EFF3B,	//0x1a4c		VoC_bgt16_rr(DecWindowOverlapLongStop_L4,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0xE5801A16,	//0x1a4e		VoC_return	|	VoC_bgt16_rr(DecWindowOverlapLongStop_L4,REG7,REG6)(hi)
		//0x1a50		Coolsand_DecWindowOverlapShort
0xE0017050,	//0x1a50		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0xF6805FC0,	//0x1a52		VoC_movreg16(REG0,REG4,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x702CF032,	//0x1a54		VoC_lw16i_short(RL6_LO,0x1,DEFAULT)	|	VoC_lw16i_short(INC2,0x1,DEFAULT)
0xFBF6E00D,	//0x1a56		VoC_shr32_ri(RL6,0xfffffffe,DEFAULT)	|	VoC_lw16i_short(RL6_HI,0x0,IN_PARALLEL)
0x1A612DC0,	//0x1a58		VoC_loop_i(0x0,0xe0)
0xD9C5D9C4,	//0x1a5a		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xC9754934,	//0x1a5c		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)
0xFB9DFB9C,	//0x1a5e		VoC_shr32_ri(ACC1,0xfffffff3,DEFAULT)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xDCABDCA9,	//0x1a60		VoC_sw16inc_p(ACC1_HI,REG2,DEFAULT)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
		//0x1a61		VoC_endloop0
0xF3F96004,	//0x1a62		VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)	|	VoC_movreg16(REG4,REG0,DEFAULT)
0x0A83DF80,	//0x1a64		VoC_lw16i(REG3,0x80)(lo)	|	VoC_pop16(REG0,DEFAULT)
0x40180080,	//0x1a66		VoC_add16_rr(REG0,REG0,REG3,DEFAULT)	|	VoC_lw16i(REG3,0x80)(hi)
0xE001E003,	//0x1a68		VoC_movreg16(REG1,REG0,DEFAULT)	|	VoC_lw16i_short(REG3,0x0,IN_PARALLEL)
0x0415079D,	//0x1a6a		VoC_sub16_rd(REG5,REG3,0x415)
0xF7F3DE08,	//0x1a6c		VoC_lw16i_short(INC3,0xffffffff,DEFAULT)	|	VoC_inc_p(REG1,DEFAULT)
0x00FE0A83,	//0x1a6e		VoC_lw16i(REG3,0xfe)
0xC11D7F06,	//0x1a70		VoC_add16_rr(REG5,REG4,REG3,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0xFF17780B,	//0x1a72		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_shr16_ri(REG3,0x1,DEFAULT)
0x442FC09B,	//0x1a74		VoC_bne16_rd(DecWindowOverlapShort_L0,REG7,0x505a)(lo)	|	VoC_add16_rr(REG3,REG2,REG3,DEFAULT)
0x0A80505A,	//0x1a76		VoC_lw16i(REG0,0x59f8)(lo)	|	VoC_bne16_rd(DecWindowOverlapShort_L0,REG7,0x505a)(hi)
0xE5C359F8,	//0x1a78		VoC_jump(DecWindowOverlapShort_L1)	|	VoC_lw16i(REG0,0x59f8)(hi)
		//0x1a7a		DecWindowOverlapShort_L0
0x50F80A80,	//0x1a7a		VoC_lw16i(REG0,0x50f8)
		//0x1a7c		DecWindowOverlapShort_L1
0x505A4436,	//0x1a7c		VoC_bne16_rd(DecWindowOverlapShort_L2,REG6,0x505a)
0x59F80A81,	//0x1a7e		VoC_lw16i(REG1,0x59f8)
0xFFC0E5C4,	//0x1a80		VoC_NAD	|	VoC_jump(DecWindowOverlapShort_L3)
		//0x1a82		DecWindowOverlapShort_L2
0x50F80A81,	//0x1a82		VoC_lw16i(REG1,0x50f8)
		//0x1a84		DecWindowOverlapShort_L3
		//0x1a84		DecWindowOverlapShort_L4
0x59C3D9C2,	//0x1a84		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x1a86		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x790EF780,	//0x1a88		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x59C1DFC1,	//0x1a8a		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0x5F41F60C,	//0x1a8c		VoC_push32(REG23,DEFAULT)	|	VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)
0xFF38F90A,	//0x1a8e		VoC_movreg32(REG01,RL7,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0xCCFD4CEC,	//0x1a90		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1a92		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1a94		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xE0075F01,	//0x1a96		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0163C24,	//0x1a98		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)
0xFBF3114D,	//0x1a9a		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0xF7A15F80,	//0x1a9c		VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0xC95D491C,	//0x1a9e		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)
0xD9C27B9C,	//0x1aa0		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xFB9D59C3,	//0x1aa2		VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF90C5CA9,	//0x1aa4		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
0xF90E5CBB,	//0x1aa6		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)
0xF62D59C9,	//0x1aa8		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF90A5F41,	//0x1aaa		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1aac		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1aae		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1ab0		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x1ab2		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDC5DF01,	//0x1ab4		VoC_sw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0x5F81DDCC,	//0x1ab6		VoC_pop16(REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x5F80FF07,	//0x1ab8		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x343EFF3B,	//0x1aba		VoC_bgt16_rr(DecWindowOverlapShort_L4,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0x60201A84,	//0x1abc		VoC_movreg16(REG0,REG1,DEFAULT)	|	VoC_bgt16_rr(DecWindowOverlapShort_L4,REG7,REG6)(hi)
0xFFC0F601,	//0x1abe		VoC_NAD	|	VoC_movreg16(REG1,REG0,IN_PARALLEL)
0x1B152C06,	//0x1ac0		VoC_loop_i(0x0,0x3)
0x01000A86,	//0x1ac2		VoC_lw16i(REG6,0x100)
0xFF324230,	//0x1ac4		VoC_movreg32(REG45,RL6,IN_PARALLEL)	|	VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)
0xE027780E,	//0x1ac6		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0x1,DEFAULT)
0xFF385F40,	//0x1ac8		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xC0304134,	//0x1aca		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0xC33D7027,	//0x1acc		VoC_sub16_rr(REG5,REG4,REG7,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
0xFF1643BE,	//0x1ace		VoC_movreg32(RL6,REG45,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
0xF8FE60C7,	//0x1ad0		VoC_shr16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_movreg16(REG7,REG6,DEFAULT)
0xF026C031,	//0x1ad2		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_add16_rr(REG1,REG0,REG6,DEFAULT)
0xF8D645BF,	//0x1ad4		VoC_shr16_ri(REG6,0xfffffffa,IN_PARALLEL)	|	VoC_mult16_rr(REG7,REG6,REG7,DEFAULT)
0xDF007F07,	//0x1ad6		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_movreg32(RL7,REG01,DEFAULT)
0xC0BBC0B2,	//0x1ad8		VoC_add16_rr(REG3,REG2,REG7,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG6,DEFAULT)
		//0x1ada		DecWindowOverlapShort_L5
0x59C3D9C2,	//0x1ada		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x790EF90C,	//0x1adc		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5FC0F780,	//0x1ade		VoC_push16(REG0,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x5F43DF42,	//0x1ae0		VoC_push32(REG67,DEFAULT)	|	VoC_push32(REG45,IN_PARALLEL)
0x5F41D9C1,	//0x1ae2		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,IN_PARALLEL)
0x4CECF90A,	//0x1ae4		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x1ae6		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x1ae8		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x1aea		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x0A84FF38,	//0x1aec		VoC_lw16i(REG4,0x100)(lo)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x42240100,	//0x1aee		VoC_sub16_rr(REG4,REG0,REG4,DEFAULT)	|	VoC_lw16i(REG4,0x100)(hi)
0x5F01C265,	//0x1af0		VoC_pop32(REG23,DEFAULT)	|	VoC_sub16_rr(REG5,REG1,REG4,IN_PARALLEL)
0x3D24E016,	//0x1af2		VoC_sub32_pr(ACC0,REG4,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0x116DE007,	//0x1af4		VoC_add32_rp(ACC1,ACC1,REG5,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0x1104FBF3,	//0x1af6		VoC_add32_rp(ACC0,ACC0,REG0,DEFAULT)	|	VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)
0x114DC95D,	//0x1af8		VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x7B9CC91C,	//0x1afa		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,REG67,IN_PARALLEL)
0x5F02DF03,	//0x1afc		VoC_pop32(REG45,DEFAULT)	|	VoC_pop32(REG67,IN_PARALLEL)
0x5CA9FB9D,	//0x1afe		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0xDCBBF7A1,	//0x1b00		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0xF62D59C9,	//0x1b02		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF90A5F41,	//0x1b04		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1b06		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1b08		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1b0a		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDF01FF38,	//0x1b0c		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDC5DDCC,	//0x1b0e		VoC_sw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xFF075F80,	//0x1b10		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x343EFF3B,	//0x1b12		VoC_bgt16_rr(DecWindowOverlapShort_L5,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,DEFAULT)
0xFFC01ADA,	//0x1b14		VoC_NAD	|	VoC_bgt16_rr(DecWindowOverlapShort_L5,REG7,REG6)(hi)
		//0x1b15		VoC_endloop0
0x01000A86,	//0x1b16		VoC_lw16i(REG6,0x100)
0xFF324230,	//0x1b18		VoC_movreg32(REG45,RL6,IN_PARALLEL)	|	VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)
0xE027780E,	//0x1b1a		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0x1,DEFAULT)
0xFF385F40,	//0x1b1c		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x06800A85,	//0x1b1e		VoC_lw16i(REG5,0x680)
0xC2284134,	//0x1b20		VoC_sub16_rr(REG0,REG0,REG5,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0xC33D7027,	//0x1b22		VoC_sub16_rr(REG5,REG4,REG7,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
0x78FEC3BE,	//0x1b24		VoC_shr16_ri(REG6,0xffffffff,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
0xF027FF16,	//0x1b26		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_movreg32(RL6,REG45,IN_PARALLEL)
0xF8D74031,	//0x1b28		VoC_shr16_ri(REG7,0xfffffffa,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG6,DEFAULT)
0xDF007F07,	//0x1b2a		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_movreg32(RL7,REG01,DEFAULT)
0xD9C2C0BA,	//0x1b2c		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG7,DEFAULT)
		//0x1b2d		DecWindowOverlapShort_L6
0xF90C59C3,	//0x1b2e		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF780790E,	//0x1b30		VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xDF425FC0,	//0x1b32		VoC_push32(REG45,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xD9C1DF43,	//0x1b34		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push32(REG67,DEFAULT)
0xF90A5F41,	//0x1b36		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1b38		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1b3a		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1b3c		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF38600C,	//0x1b3e		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0x06000A84,	//0x1b40		VoC_lw16i(REG4,0x600)
0xC0654024,	//0x1b42		VoC_add16_rr(REG5,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xE0165F01,	//0x1b44		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0073D24,	//0x1b46		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG4,ACC0,DEFAULT)
0x07000A84,	//0x1b48		VoC_lw16i(REG4,0x700)
0xFBF34024,	//0x1b4a		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xC91C116D,	//0x1b4c		VoC_add32_rr(ACC0,ACC0,REG67,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG5,DEFAULT)
0x01000A85,	//0x1b4e		VoC_lw16i(REG5,0x100)
0xC26D1124,	//0x1b50		VoC_sub16_rr(REG5,REG1,REG5,IN_PARALLEL)	|	VoC_add32_rp(ACC0,ACC0,REG4,DEFAULT)
0xDF037B9C,	//0x1b52		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0x5CA9DDED,	//0x1b54		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG5,DEFAULT)
0xDF02F7A1,	//0x1b56		VoC_pop32(REG45,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0xF62D59C9,	//0x1b58		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF90A5F41,	//0x1b5a		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1b5c		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1b5e		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1b60		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDF01FF38,	//0x1b62		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDDC5,	//0x1b64		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xFF075F80,	//0x1b66		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x343EFF3B,	//0x1b68		VoC_bgt16_rr(DecWindowOverlapShort_L6,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,DEFAULT)
0x2C061B2D,	//0x1b6a		VoC_loop_i(0x0,0x3)(lo)	|	VoC_bgt16_rr(DecWindowOverlapShort_L6,REG7,REG6)(hi)
0xFF321BAA,	//0x1b6c		VoC_movreg32(REG45,RL6,DEFAULT)	|	VoC_loop_i(0x0,0x3)(hi)
0x01000A86,	//0x1b6e		VoC_lw16i(REG6,0x100)
0xE0274230,	//0x1b70		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)
0xF6C161C0,	//0x1b72		VoC_movreg16(REG1,REG6,IN_PARALLEL)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0xF80E5F40,	//0x1b74		VoC_shr16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xC0304134,	//0x1b76		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0xC33D4009,	//0x1b78		VoC_sub16_rr(REG5,REG4,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG1,DEFAULT)
0x7F07C279,	//0x1b7a		VoC_movreg32(RL7,REG01,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG7,DEFAULT)
0xFF16DF00,	//0x1b7c		VoC_movreg32(RL6,REG45,DEFAULT)	|	VoC_pop32(REG01,IN_PARALLEL)
		//0x1b7e		DecWindowOverlapShort_L7
0x59C3D9C2,	//0x1b7e		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x1b80		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xF90EF780,	//0x1b82		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x5F41D9C1,	//0x1b84		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x1b86		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x1b88		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x1b8a		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x1b8c		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x0A82FF38,	//0x1b8e		VoC_lw16i(REG2,0x100)(lo)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x42120100,	//0x1b90		VoC_sub16_rr(REG2,REG0,REG2,DEFAULT)	|	VoC_lw16i(REG2,0x100)(hi)
0xE1A1C253,	//0x1b92		VoC_movreg16(REG1,RL6_HI,DEFAULT)	|	VoC_sub16_rr(REG3,REG1,REG2,IN_PARALLEL)
0x915DBCA4,	//0x1b94		VoC_add32_rp(ACC1,ACC1,REG3,DEFAULT)	|	VoC_sub32_pr(ACC0,REG2,ACC0,DEFAULT)
0xD9C9DD94,	//0x1b96		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_sw32_p(ACC0,REG2,DEFAULT)
0xF90A5D9D,	//0x1b98		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG3,DEFAULT)
0xCCFD4CEC,	//0x1b9a		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1b9c		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1b9e		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xF62D7F38,	//0x1ba0		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDC5DF01,	//0x1ba2		VoC_sw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0xFF075DCC,	//0x1ba4		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xFF3B5F80,	//0x1ba6		VoC_movreg32(REG67,RL7,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x1B7E343E,	//0x1ba8		VoC_bgt16_rr(DecWindowOverlapShort_L7,REG7,REG6)
		//0x1baa		VoC_endloop0
0xE1C0FFC0,	//0x1baa		VoC_movreg16(REG0,RL7_LO,DEFAULT)	|	VoC_NAD
0x00800A81,	//0x1bac		VoC_lw16i(REG1,0x80)
0xFF444008,	//0x1bae		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
0x1BB32DC0,	//0x1bb0		VoC_loop_i(0x0,0xe0)
0xDDC4DDC4,	//0x1bb2		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x1bb3		VoC_endloop0
0xDFE9E580,	//0x1bb4		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x1bb5		Coolsand_IMDCT
0x25341403,	//0x1bb6		VoC_lw16_d(REG3,0x2534)
0x24361804,	//0x1bb8		VoC_lw16i_set_inc(REG0,0x2436,0x1)
0x14281809,	//0x1bba		VoC_lw16i_set_inc(REG1,0x1428,0x2)
0x27741806,	//0x1bbc		VoC_lw16i_set_inc(REG2,0x2774,0x1)
0x505A4496,	//0x1bbe		VoC_bne16_rd(IMDCT_L0,REG6,0x505a)
0x1C281809,	//0x1bc0		VoC_lw16i_set_inc(REG1,0x1c28,0x2)
0x27751806,	//0x1bc2		VoC_lw16i_set_inc(REG2,0x2775,0x1)
0x505A4023,	//0x1bc4		VoC_be16_rd(IMDCT_L0,REG3,0x505a)
0x24451804,	//0x1bc6		VoC_lw16i_set_inc(REG0,0x2445,0x1)
		//0x1bc8		IMDCT_L0
0xD8225E00,	//0x1bc8		VoC_lw16_p(REG2,REG2,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xD805D884,	//0x1bca		VoC_lw16_p(REG5,REG0,DEFAULT)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0x5FC7DFC1,	//0x1bcc		VoC_push16(REG7,DEFAULT)	|	VoC_push16(REG1,DEFAULT)
0xF046DF42,	//0x1bce		VoC_lw16i_short(REG6,0x2,DEFAULT)	|	VoC_push32(REG45,IN_PARALLEL)
0x1BF035A6,	//0x1bd0		VoC_bne16_rr(IMDCT_L1,REG4,REG6)
0xE0047003,	//0x1bd2		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
		//0x1bd4		IMDCT_L2
0xE0177106,	//0x1bd4		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x8,DEFAULT)
0x1C1234B4,	//0x1bd6		VoC_bngt16_rr(IMDCT_L3,REG6,REG4)
0x413CDFC1,	//0x1bd8		VoC_add16_rr(REG4,REG4,REG7,DEFAULT)	|	VoC_push16(REG1,DEFAULT)
0x5F41F686,	//0x1bda		VoC_push32(REG23,DEFAULT)	|	VoC_movreg16(REG6,REG4,IN_PARALLEL)
0x5FC4F8C6,	//0x1bdc		VoC_push16(REG4,DEFAULT)	|	VoC_shr16_ri(REG6,0xfffffff8,IN_PARALLEL)
0x700BC071,	//0x1bde		VoC_bltz16_d(IMDCT_short_LS1,0x4002)(lo)	|	VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)
0x0A8C4002,	//0x1be0		VoC_lw16i(RL6_LO,0x2000)(lo)	|	VoC_bltz16_d(IMDCT_short_LS1,0x4002)(hi)
0x700D2000,	//0x1be2		VoC_lw16i_short(RL6_HI,0x0,DEFAULT)	|	VoC_lw16i(RL6_LO,0x2000)(hi)
0x2B80DF46,	//0x1be4		VoC_jal(vpp_AmjpAudioEqualizer)(lo)	|	VoC_push32(RL6,IN_PARALLEL)
0xFFC00157,	//0x1be6		VoC_NOP	|	VoC_jal(vpp_AmjpAudioEqualizer)(hi)
0xFFC0DF06,	//0x1be8		VoC_NAD	|	VoC_pop32(RL6,DEFAULT)
		//0x1bea		IMDCT_short_LS1
0x0FD12B80,	//0x1bea		VoC_jal(Coolsand_DCT4)
0x5F01DF84,	//0x1bec		VoC_pop32(REG23,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xE5E5DF81,	//0x1bee		VoC_jump(IMDCT_L2)	|	VoC_pop16(REG1,IN_PARALLEL)
		//0x1bf0		IMDCT_L1
0x40027009,	//0x1bf0		VoC_bltz16_d(IMDCT_LS1,0x4002)
0x700CF02D,	//0x1bf2		VoC_lw16i_short(RL6_LO,0x0,DEFAULT)	|	VoC_lw16i_short(RL6_HI,0x1,DEFAULT)
0x2B80DF46,	//0x1bf4		VoC_jal(vpp_AmjpAudioEqualizer)(lo)	|	VoC_push32(RL6,IN_PARALLEL)
0xFFC00157,	//0x1bf6		VoC_NOP	|	VoC_jal(vpp_AmjpAudioEqualizer)(hi)
0xDFC1DF06,	//0x1bf8		VoC_push16(REG1,DEFAULT)	|	VoC_pop32(RL6,DEFAULT)
		//0x1bf9		IMDCT_LS1
0x40501804,	//0x1bfa		VoC_lw16i_set_inc(REG0,0x4050,0x1)
0x14280A83,	//0x1bfc		VoC_lw16i(REG3,0x1428)
0x1C0E358B,	//0x1bfe		VoC_bne16_rr(IMDCT_LS3,REG1,REG3)
0x1C0C2C21,	//0x1c00		VoC_loop_i(0x1,0x10)
0xFF446C08,	//0x1c02		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_loop_i_short(0x20,DEFAULT)
0x3385D9CD,	//0x1c04		VoC_bltz32_r(IMDCT_LS4,ACC1)(lo)	|	VoC_lw32inc_p(ACC1,REG1,DEFAULT)
0xC92C1C09,	//0x1c06		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_bltz32_r(IMDCT_LS4,ACC1)(hi)
0xCB2CE5C2,	//0x1c08		VoC_sub32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_jump(IMDCT_LS5)
		//0x1c09		IMDCT_LS4
		//0x1c0a		IMDCT_LS5
		//0x1c0a		VoC_endloop0
0xFA1CFFC0,	//0x1c0a		VoC_shr32_ri(ACC0,0x3,DEFAULT)	|	VoC_NOP
		//0x1c0c		VoC_endloop1
0xFFC0FFC0,	//0x1c0c		VoC_NAD	|	VoC_NOP
		//0x1c0e		IMDCT_LS3
0xDF817023,	//0x1c0e		VoC_pop16(REG1,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x1,DEFAULT)
0x0FD12B80,	//0x1c10		VoC_jal(Coolsand_DCT4)
		//0x1c12		IMDCT_L3
0x5F80DF81,	//0x1c12		VoC_pop16(REG0,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x0A82DF02,	//0x1c14		VoC_lw16i(REG2,0x420)(lo)	|	VoC_pop32(REG45,IN_PARALLEL)
0x0A870420,	//0x1c16		VoC_lw16i(REG7,0x1420)(lo)	|	VoC_lw16i(REG2,0x420)(hi)
0x31811420,	//0x1c18		VoC_bez16_r(IMDCT_L4,REG1)(lo)	|	VoC_lw16i(REG7,0x1420)(hi)
0x0A821C1F,	//0x1c1a		VoC_lw16i(REG2,0xc20)(lo)	|	VoC_bez16_r(IMDCT_L4,REG1)(hi)
0x0A870C20,	//0x1c1c		VoC_lw16i(REG7,0x1421)(lo)	|	VoC_lw16i(REG2,0xc20)(hi)
0xDFC51421,	//0x1c1e		VoC_push16(REG5,DEFAULT)	|	VoC_lw16i(REG7,0x1421)(hi)
		//0x1c1f		IMDCT_L4
0x62F80A83,	//0x1c20		VoC_lw16i(REG3,0x62f8)
0x5877DFC7,	//0x1c22		VoC_lw16_p(REG7,REG7,DEFAULT)	|	VoC_push16(REG7,DEFAULT)
0x6044F681,	//0x1c24		VoC_movreg16(REG4,REG2,DEFAULT)	|	VoC_movreg16(REG1,REG4,IN_PARALLEL)
0xFFC0F662,	//0x1c26		VoC_NOP	|	VoC_movreg16(REG2,REG3,IN_PARALLEL)
0xDFC25F40,	//0x1c28		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xDFC75F42,	//0x1c2a		VoC_push16(REG7,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0x20B12B80,	//0x1c2c		VoC_jal(vpp_AmjpAacGenerateSinwKbdw)
0xDF875F02,	//0x1c2e		VoC_pop16(REG7,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xDF825F00,	//0x1c30		VoC_pop16(REG2,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0xF6A67063,	//0x1c32		VoC_movreg16(REG6,REG5,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x3,DEFAULT)
0x1C3A31C1,	//0x1c34		VoC_bnez16_r(IMDCT_L5,REG1)
0x18942B80,	//0x1c36		VoC_jal(Coolsand_DecWindowOverlap)
0xFFC0E5D2,	//0x1c38		VoC_NAD	|	VoC_jump(IMDCT_L8)
		//0x1c3a		IMDCT_L5
0x505A4431,	//0x1c3a		VoC_bne16_rd(IMDCT_L6,REG1,0x505a)
0x19322B80,	//0x1c3c		VoC_jal(Coolsand_DecWindowOverlapLongStart)
0xFFC0E5CC,	//0x1c3e		VoC_NAD	|	VoC_jump(IMDCT_L8)
		//0x1c40		IMDCT_L6
0x505C4431,	//0x1c40		VoC_bne16_rd(IMDCT_L7,REG1,0x505c)
0x1A502B80,	//0x1c42		VoC_jal(Coolsand_DecWindowOverlapShort)
0xFFC0E5C6,	//0x1c44		VoC_NAD	|	VoC_jump(IMDCT_L8)
		//0x1c46		IMDCT_L7
0x1C4A358B,	//0x1c46		VoC_bne16_rr(IMDCT_L8,REG1,REG3)
0x19C02B80,	//0x1c48		VoC_jal(Coolsand_DecWindowOverlapLongStop)
		//0x1c4a		IMDCT_L8
0xDF85DF87,	//0x1c4a		VoC_pop16(REG5,DEFAULT)	|	VoC_pop16(REG7,DEFAULT)
0xDC75DFA9,	//0x1c4c		VoC_sw16_p(REG5,REG7,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xE284E580,	//0x1c4e		VoC_rbinc_i(REG4,0x1,DEFAULT)	|	VoC_return
		//0x1c4f		Coolsand_DecodeICSInfo
0xE242E289,	//0x1c50		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG5,0x2,DEFAULT)
0xDC846286,	//0x1c52		VoC_sw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x1,DEFAULT)
0xE0215C85,	//0x1c54		VoC_lw16i_short(REG1,0x2,IN_PARALLEL)	|	VoC_sw16inc_p(REG5,REG0,DEFAULT)
0xE0165C86,	//0x1c56		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(REG6,REG0,DEFAULT)
0x505C45BD,	//0x1c58		VoC_bne16_rd(DecodeICSInfo_L0,REG5,0x505c)
0xE29DE290,	//0x1c5a		VoC_rbinc_i(REG5,0x7,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0x5C84E242,	//0x1c5c		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_lbinc_p(REG2)
0x5C05C008,	//0x1c5e		VoC_sw16_p(REG5,REG0,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)
0x6001F6AF,	//0x1c60		VoC_movreg16(REG1,REG0,DEFAULT)	|	VoC_movreg16(RL7_HI,REG5,IN_PARALLEL)
0x5C86E014,	//0x1c62		VoC_sw16inc_p(REG6,REG0,DEFAULT)	|	VoC_lw16i_short(REG4,0x1,IN_PARALLEL)
0xFFC0E407,	//0x1c64		VoC_NAD	|	VoC_lw16i_short(REG7,0x40,IN_PARALLEL)
0xDC0668EE,	//0x1c66		VoC_sw16_p(REG6,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x7,DEFAULT)
0xF7E543A3,	//0x1c68		VoC_movreg16(REG5,RL7_HI,IN_PARALLEL)	|	VoC_sub16_rr(REG3,REG6,REG4,DEFAULT)
0xC0C3643D,	//0x1c6a		VoC_add16_rr(REG3,REG3,REG0,IN_PARALLEL)	|	VoC_and16_rr(REG5,REG7,DEFAULT)
0x1C703185,	//0x1c6c		VoC_bez16_r(DecodeICSInfo_L1,REG5)
0xE5C5811D,	//0x1c6e		VoC_jump(DecodeICSInfo_L2)	|	VoC_add16_rp(REG5,REG4,REG3,DEFAULT)
		//0x1c70		DecodeICSInfo_L1
0x40E3C1A6,	//0x1c70		VoC_add16_rr(REG3,REG3,REG4,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG4,DEFAULT)
0xDC16F685,	//0x1c72		VoC_sw16_p(REG6,REG1,DEFAULT)	|	VoC_movreg16(REG5,REG4,IN_PARALLEL)
		//0x1c74		DecodeICSInfo_L2
		//0x1c74		VoC_endloop0
0xDC35780F,	//0x1c74		VoC_sw16_p(REG5,REG3,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x1,DEFAULT)
0xE298E5CB,	//0x1c76		VoC_rbinc_i(REG4,0x6,DEFAULT)	|	VoC_jump(DecodeICSInfo_End)
		//0x1c77		DecodeICSInfo_L0
0xE242E285,	//0x1c78		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0xC0415C84,	//0x1c7a		VoC_add16_rr(REG1,REG1,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0xC0715E00,	//0x1c7c		VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xDC85DC16,	//0x1c7e		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_sw16_p(REG6,REG1,DEFAULT)
0xE580DC16,	//0x1c80		VoC_return	|	VoC_sw16_p(REG6,REG1,DEFAULT)
		//0x1c81		DecodeICSInfo_End
		//0x1c82		Coolsand_DecodeSectionData
0xE0345E00,	//0x1c82		VoC_lw16i_short(REG4,0x3,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xE0235885,	//0x1c84		VoC_lw16i_short(REG3,0x2,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0xE0375E00,	//0x1c86		VoC_lw16i_short(REG7,0x3,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0x1C8C352B,	//0x1c88		VoC_be16_rr(DecodeSectionData_L0,REG5,REG3)
0xFFC0F0A7,	//0x1c8a		VoC_NAD	|	VoC_lw16i_short(REG7,0x5,DEFAULT)
		//0x1c8c		DecodeSectionData_L0
0xE0067023,	//0x1c8c		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x1,DEFAULT)
0xE01643BD,	//0x1c8e		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG7,DEFAULT)
0xD8057E2B,	//0x1c90		VoC_lw16_p(REG5,REG0,IN_PARALLEL)	|	VoC_shr16_rr(REG3,REG5,DEFAULT)
0xC02042F6,	//0x1c92		VoC_add16_rr(REG0,REG0,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG3,REG6,DEFAULT)
0x269D1807,	//0x1c94		VoC_lw16i_set_inc(REG3,0x269d,0x1)
0x1C9A31C1,	//0x1c96		VoC_bnez16_r(DecodeSectionData_L1,REG1)
0x26251807,	//0x1c98		VoC_lw16i_set_inc(REG3,0x2625,0x1)
		//0x1c9a		DecodeSectionData_L1
0x1505D800,	//0x1c9a		VoC_sw16_d(REG5,0x2776)(lo)	|	VoC_lw16_p(REG0,REG0,DEFAULT)
0x2E012776,	//0x1c9c		VoC_loop_r(1,REG0)(lo)	|	VoC_sw16_d(REG5,0x2776)(hi)
0xF0001CB0,	//0x1c9e		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_loop_r(1,REG0)(hi)
		//0x1ca0		DecodeSectionData_L2
0x27764CB8,	//0x1ca0		VoC_bnlt16_rd(DecodeSectionData_End,REG0,0x2776)
0xE0016290,	//0x1ca2		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
		//0x1ca4		DecodeSectionData_L3
0xE242E339,	//0x1ca4		VoC_lbinc_p(REG2)	|	VoC_rbinc_r(REG5,REG7,DEFAULT)
0x352EC069,	//0x1ca6		VoC_be16_rr(DecodeSectionData_L3,REG5,REG6)(lo)	|	VoC_add16_rr(REG1,REG1,REG5,DEFAULT)
0xC0081CA4,	//0x1ca8		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_be16_rr(DecodeSectionData_L3,REG5,REG6)(hi)
0x1CAE3181,	//0x1caa		VoC_bez16_r(DecodeSectionData_L4,REG1)
0xDCB4E641,	//0x1cac		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_loop_r_short(REG1,DEFAULT)
		//0x1cad		VoC_endloop0
		//0x1cae		DecodeSectionData_L4
0xFFC0E5F2,	//0x1cae		VoC_NOP	|	VoC_jump(DecodeSectionData_L2)
		//0x1caf		DecodeSectionData_End
		//0x1cb0		VoC_endloop1
0xE580E242,	//0x1cb0		VoC_return	|	VoC_lbinc_p(REG2)
		//0x1cb2		Coolsand_DecodeOneScaleFactor
0x5F42DFC3,	//0x1cb2		VoC_push32(REG45,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0x5F40DFC7,	//0x1cb4		VoC_push32(REG01,DEFAULT)	|	VoC_push16(REG7,IN_PARALLEL)
0x1804DFE9,	//0x1cb6		VoC_lw16i_set_inc(REG0,0x5014,0x1)(lo)	|	VoC_push16(RA,IN_PARALLEL)
0x18055014,	//0x1cb8		VoC_lw16i_set_inc(REG1,0x4f9a,0x1)(lo)	|	VoC_lw16i_set_inc(REG0,0x5014,0x1)(hi)
0xFFC04F9A,	//0x1cba		VoC_NAD	|	VoC_lw16i_set_inc(REG1,0x4f9a,0x1)(hi)
0x166F2B80,	//0x1cbc		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xDF005FA9,	//0x1cbe		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0xDF025F87,	//0x1cc0		VoC_pop32(REG45,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xE580DF83,	//0x1cc2		VoC_return	|	VoC_pop16(REG3,DEFAULT)
		//0x1cc4		Coolsand_DecodeScaleFactors
0x5E00DFE9,	//0x1cc4		VoC_inc_p(REG0,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x5805E034,	//0x1cc6		VoC_lw16_p(REG5,REG0,DEFAULT)	|	VoC_lw16i_short(REG4,0x3,IN_PARALLEL)
0x0A84C026,	//0x1cc8		VoC_lw16i(REG4,0x15a)(lo)	|	VoC_add16_rr(REG6,REG0,REG4,IN_PARALLEL)
0x6023015A,	//0x1cca		VoC_movreg16(REG3,REG1,DEFAULT)	|	VoC_lw16i(REG4,0x15a)(hi)
0x45AED866,	//0x1ccc		VoC_mult16_rr(REG6,REG6,REG5,DEFAULT)	|	VoC_lw16_p(REG6,REG6,IN_PARALLEL)
0x1804C3E5,	//0x1cce		VoC_lw16i_set_inc(REG0,0x269d,0x1)(lo)	|	VoC_sub16_rr(REG5,REG7,REG4,IN_PARALLEL)
0x1805269D,	//0x1cd0		VoC_lw16i_set_inc(REG1,0x25ad,0x1)(lo)	|	VoC_lw16i_set_inc(REG0,0x269d,0x1)(hi)
0x31C325AD,	//0x1cd2		VoC_bnez16_r(DecodeScaleFactors_L1,REG3)(lo)	|	VoC_lw16i_set_inc(REG1,0x25ad,0x1)(hi)
0x18041CDA,	//0x1cd4		VoC_lw16i_set_inc(REG0,0x2625,0x1)(lo)	|	VoC_bnez16_r(DecodeScaleFactors_L1,REG3)(hi)
0x18052625,	//0x1cd6		VoC_lw16i_set_inc(REG1,0x2535,0x1)(lo)	|	VoC_lw16i_set_inc(REG0,0x2625,0x1)(hi)
0xFFC02535,	//0x1cd8		VoC_NAD	|	VoC_lw16i_set_inc(REG1,0x2535,0x1)(hi)
		//0x1cda		DecodeScaleFactors_L1
0xE0037024,	//0x1cda		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x1D093146,	//0x1cdc		VoC_bngtz16_r(DecodeScaleFactors_End,REG6)
0xD886E7AA,	//0x1cde		VoC_lw16inc_p(REG6,REG0,DEFAULT)	|	VoC_loop_r_short(REG6,DEFAULT)
0x50674036,	//0x1ce0		VoC_be16_rd(DecodeScaleFactors_L2,REG6,0x5067)
0x50684026,	//0x1ce2		VoC_be16_rd(DecodeScaleFactors_L2,REG6,0x5068)
0xFFC0E5C8,	//0x1ce4		VoC_NAD	|	VoC_jump(DecodeScaleFactors_L3)
		//0x1ce6		DecodeScaleFactors_L2
0x1CB22B80,	//0x1ce6		VoC_jal(Coolsand_DecodeOneScaleFactor)
0xE242C19B,	//0x1ce8		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG3,REG6,REG3,DEFAULT)
0xE5DCDC93,	//0x1cea		VoC_jump(DecodeScaleFactors_L6)	|	VoC_sw16inc_p(REG3,REG1,DEFAULT)
		//0x1cec		DecodeScaleFactors_L3
0x506644B6,	//0x1cec		VoC_bne16_rd(DecodeScaleFactors_L4,REG6,0x5066)
0x1CF43184,	//0x1cee		VoC_bez16_r(DecodeScaleFactors_L4_sub1,REG4)
0xE00462A6,	//0x1cf0		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x9,DEFAULT)
0xFFC0E5C4,	//0x1cf2		VoC_NAD	|	VoC_jump(DecodeScaleFactors_L4_sub2)
		//0x1cf4		DecodeScaleFactors_L4_sub1
0x1CB22B80,	//0x1cf4		VoC_jal(Coolsand_DecodeOneScaleFactor)
		//0x1cf6		DecodeScaleFactors_L4_sub2
0xE242C1AD,	//0x1cf6		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG5,REG6,REG5,DEFAULT)
0xE5CEDC95,	//0x1cf8		VoC_jump(DecodeScaleFactors_L6)	|	VoC_sw16inc_p(REG5,REG1,DEFAULT)
		//0x1cfa		DecodeScaleFactors_L4
0x505A4896,	//0x1cfa		VoC_blt16_rd(DecodeScaleFactors_L5,REG6,0x505a)
0x50653886,	//0x1cfc		VoC_bgt16_rd(DecodeScaleFactors_L5,REG6,0x5065)
0x1CB22B80,	//0x1cfe		VoC_jal(Coolsand_DecodeOneScaleFactor)
0xE242C1F7,	//0x1d00		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG7,REG7,REG6,DEFAULT)
0xE5C4DC97,	//0x1d02		VoC_jump(DecodeScaleFactors_L6)	|	VoC_sw16inc_p(REG7,REG1,DEFAULT)
		//0x1d04		DecodeScaleFactors_L5
0xE242F006,	//0x1d04		VoC_lbinc_p(REG2)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0xFFC0DC96,	//0x1d06		VoC_NOP	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
		//0x1d07		DecodeScaleFactors_L6
		//0x1d08		VoC_endloop0
0xDFA9E242,	//0x1d08		VoC_pop16(RA,DEFAULT)	|	VoC_lbinc_p(REG2)
		//0x1d09		DecodeScaleFactors_End
0xE580E242,	//0x1d0a		VoC_return	|	VoC_lbinc_p(REG2)
		//0x1d0c		Coolsand_DecodePulseInfo
0xE299E288,	//0x1d0c		VoC_rbinc_i(REG5,0x6,DEFAULT)	|	VoC_rbinc_i(REG4,0x2,DEFAULT)
0x7020E242,	//0x1d0e		VoC_lw16i_short(REG0,0x1,DEFAULT)	|	VoC_lbinc_p(REG2)
0x4104E067,	//0x1d10		VoC_add16_rr(REG4,REG4,REG0,DEFAULT)	|	VoC_lw16i_short(REG7,0x6,IN_PARALLEL)
0x5CB4C0F8,	//0x1d12		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_add16_rr(REG0,REG3,REG7,IN_PARALLEL)
0xDCB5F004,	//0x1d14		VoC_sw16inc_p(REG5,REG3,DEFAULT)	|	VoC_lw16i_short(INC0,0x1,IN_PARALLEL)
0x3184E2D4,	//0x1d16		VoC_bez16_r(DecodePulseInfo_L0,REG4)(lo)	|	VoC_rb_i(REG4,0x5,DEFAULT)
0xE2941D1F,	//0x1d18		VoC_rbinc_i(REG4,0x5,DEFAULT)	|	VoC_bez16_r(DecodePulseInfo_L0,REG4)(hi)
0xDCB462D1,	//0x1d1a		VoC_sw16inc_p(REG4,REG3,IN_PARALLEL)	|	VoC_rb_i(REG5,0x4,DEFAULT)
0xDC85E291,	//0x1d1c		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_rbinc_i(REG5,0x4,DEFAULT)
0xE580E242,	//0x1d1e		VoC_return	|	VoC_lbinc_p(REG2)
		//0x1d1f		DecodePulseInfo_L0
		//0x1d20		Coolsand_DecodeTNSInfo
0xF6017106,	//0x1d20		VoC_movreg16(REG1,REG0,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x8,DEFAULT)
0xF0044071,	//0x1d22		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG6,DEFAULT)
0xF0054073,	//0x1d24		VoC_lw16i_short(INC1,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG1,REG6,DEFAULT)
0xF00740F4,	//0x1d26		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG3,REG6,DEFAULT)
0xF68B4135,	//0x1d28		VoC_movreg16(ACC1_HI,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG5,REG4,REG6,DEFAULT)
0xE0244176,	//0x1d2a		VoC_lw16i_short(REG4,0x2,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG5,REG6,DEFAULT)
0x1D6635BC,	//0x1d2c		VoC_bne16_rr(DecodeTNSInfo_L0,REG7,REG4)
0xFFC0E2C7,	//0x1d2e		VoC_NAD	|	VoC_rb_i(REG7,0x1,DEFAULT)
0x1D632C11,	//0x1d30		VoC_loop_i(0x1,0x8)
0xDC876287,	//0x1d32		VoC_sw16inc_p(REG7,REG0,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0x1D5F3187,	//0x1d34		VoC_bez16_r(DecodeTNSInfo_L1,REG7)
0xE0346287,	//0x1d36		VoC_lw16i_short(REG4,0x3,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xC1E76290,	//0x1d38		VoC_add16_rr(REG7,REG7,REG4,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0xFF046160,	//0x1d3a		VoC_movreg32(ACC0,REG01,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC1_HI,DEFAULT)
0xDC17628F,	//0x1d3c		VoC_sw16_p(REG7,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x3,DEFAULT)
0x5C87DCB4,	//0x1d3e		VoC_sw16inc_p(REG7,REG0,DEFAULT)	|	VoC_sw16inc_p(REG4,REG3,DEFAULT)
0x3187F60B,	//0x1d40		VoC_bez16_r(DecodeTNSInfo_L2,REG7)(lo)	|	VoC_movreg16(ACC1_HI,REG0,IN_PARALLEL)
0xE0C01D5E,	//0x1d42		VoC_movreg16(REG0,REG6,DEFAULT)	|	VoC_bez16_r(DecodeTNSInfo_L2,REG7)(hi)
0xDFC76284,	//0x1d44		VoC_push16(REG7,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xD8166287,	//0x1d46		VoC_lw16_p(REG6,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xF6A143BE,	//0x1d48		VoC_movreg16(REG1,REG5,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
0xE0257787,	//0x1d4a		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0xfffffffc,DEFAULT)
0xC3745C94,	//0x1d4c		VoC_sub16_rr(REG4,REG5,REG6,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
0xFE677E65,	//0x1d4e		VoC_shru16_rr(REG7,REG4,IN_PARALLEL)	|	VoC_shru16_rr(REG5,REG4,DEFAULT)
0x6709DF84,	//0x1d50		VoC_loop_r_short(REG4,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xE330F6AA,	//0x1d52		VoC_rbinc_r(REG4,REG6,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG5,IN_PARALLEL)
0x3185E425,	//0x1d54		VoC_bez16_r(DecodeTNSInfo_L3,REG5)(lo)	|	VoC_and16_rr(REG5,REG4,DEFAULT)
0xE47C1D58,	//0x1d56		VoC_or16_rr(REG4,REG7,DEFAULT)	|	VoC_bez16_r(DecodeTNSInfo_L3,REG5)(hi)
		//0x1d58		DecodeTNSInfo_L3
0xE242FFC0,	//0x1d58		VoC_lbinc_p(REG2)	|	VoC_NOP
		//0x1d5a		VoC_endloop0
0xF7455C84,	//0x1d5a		VoC_movreg16(REG5,ACC1_LO,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0xF6256006,	//0x1d5c		VoC_movreg16(REG5,REG1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG0,DEFAULT)
		//0x1d5e		DecodeTNSInfo_L2
0xFFC0FF20,	//0x1d5e		VoC_NOP	|	VoC_movreg32(REG01,ACC0,DEFAULT)
		//0x1d5f		DecodeTNSInfo_L1
0x62C7E242,	//0x1d60		VoC_rb_i(REG7,0x1,DEFAULT)	|	VoC_lbinc_p(REG2)
0xFF04DE08,	//0x1d62		VoC_movreg32(ACC0,REG01,DEFAULT)	|	VoC_inc_p(REG1,IN_PARALLEL)
		//0x1d63		VoC_endloop1
0x1D992B00,	//0x1d64		VoC_jump_lg(DecodeTNSInfo_End)
		//0x1d66		DecodeTNSInfo_L0
0xF764628B,	//0x1d66		VoC_movreg16(REG4,ACC1_HI,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x2,DEFAULT)
0xE0347F14,	//0x1d68		VoC_lw16i_short(REG4,0x3,IN_PARALLEL)	|	VoC_movreg32(ACC0,REG45,DEFAULT)
0xDC0762C5,	//0x1d6a		VoC_sw16_p(REG7,REG0,IN_PARALLEL)	|	VoC_rb_i(REG5,0x1,DEFAULT)
0x1D993187,	//0x1d6c		VoC_bez16_r(DecodeTNSInfo_End,REG7)
0xC1656284,	//0x1d6e		VoC_add16_rr(REG5,REG5,REG4,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0x5C15E0AB,	//0x1d70		VoC_sw16_p(REG5,REG1,DEFAULT)	|	VoC_movreg16(ACC1_HI,REG5,DEFAULT)
0x2E39FF20,	//0x1d72		VoC_loop_r(1,REG7)(lo)	|	VoC_movreg32(REG01,ACC0,IN_PARALLEL)
0xE29B1D98,	//0x1d74		VoC_rbinc_i(REG7,0x6,DEFAULT)	|	VoC_loop_r(1,REG7)(hi)
0xE242E294,	//0x1d76		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG4,0x5,DEFAULT)
0x5CB7DC84,	//0x1d78		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0x3184F608,	//0x1d7a		VoC_bez16_r(DecodeTNSInfo_L4,REG4)(lo)	|	VoC_movreg16(ACC0_LO,REG0,IN_PARALLEL)
0xE0C01D97,	//0x1d7c		VoC_movreg16(REG0,REG6,DEFAULT)	|	VoC_bez16_r(DecodeTNSInfo_L4,REG4)(hi)
0xDFC46284,	//0x1d7e		VoC_push16(REG4,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xF7666285,	//0x1d80		VoC_movreg16(REG6,ACC1_HI,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0xE02543AE,	//0x1d82		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)
0xDC944374,	//0x1d84		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG5,REG6,DEFAULT)
0xFE65F787,	//0x1d86		VoC_shru16_rr(REG5,REG4,DEFAULT)	|	VoC_lw16i_short(REG7,0xfffffffc,DEFAULT)
0xDF847E67,	//0x1d88		VoC_pop16(REG4,IN_PARALLEL)	|	VoC_shru16_rr(REG7,REG4,DEFAULT)
0xF6AA6709,	//0x1d8a		VoC_movreg16(ACC1_LO,REG5,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0xE425E330,	//0x1d8c		VoC_and16_rr(REG5,REG4,DEFAULT)	|	VoC_rbinc_r(REG4,REG6,DEFAULT)
0x1D913185,	//0x1d8e		VoC_bez16_r(DecodeTNSInfo_L5,REG5)
0xFFC0E47C,	//0x1d90		VoC_NOP	|	VoC_or16_rr(REG4,REG7,DEFAULT)
		//0x1d91		DecodeTNSInfo_L5
0x5C84E242,	//0x1d92		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_lbinc_p(REG2)
		//0x1d93		VoC_endloop0
0x6006F745,	//0x1d94		VoC_movreg16(REG6,REG0,DEFAULT)	|	VoC_movreg16(REG5,ACC1_LO,IN_PARALLEL)
0xFFC0F700,	//0x1d96		VoC_NOP	|	VoC_movreg16(REG0,ACC0_LO,IN_PARALLEL)
		//0x1d97		DecodeTNSInfo_L4
		//0x1d98		VoC_endloop1
0xE580E242,	//0x1d98		VoC_return	|	VoC_lbinc_p(REG2)
		//0x1d99		DecodeTNSInfo_End
		//0x1d9a		Coolsand_DecodeICS
0xFF0762A0,	//0x1d9a		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0xDFE9608B,	//0x1d9c		VoC_push16(RA,IN_PARALLEL)	|	VoC_movreg16(ACC1_HI,REG4,DEFAULT)
0x25346E08,	//0x1d9e		VoC_bnez16_d(DecodeICS_L0,0x2534)
0xDF475FCB,	//0x1da0		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(ACC1_HI,DEFAULT)
0x1C4F2B80,	//0x1da2		VoC_jal(Coolsand_DecodeICSInfo)
0xDF8B5F07,	//0x1da4		VoC_pop16(ACC1_HI,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
		//0x1da6		DecodeICS_L0
0xFF387030,	//0x1da6		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x1,DEFAULT)
0x1C822B80,	//0x1da8		VoC_jal(Coolsand_DecodeSectionData)
0xFF387070,	//0x1daa		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x3,DEFAULT)
0xDF476167,	//0x1dac		VoC_push32(RL7,IN_PARALLEL)	|	VoC_movreg16(REG7,ACC1_HI,DEFAULT)
0x1CC42B80,	//0x1dae		VoC_jal(Coolsand_DecodeScaleFactors)
0xDF036284,	//0x1db0		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0x245F1807,	//0x1db2		VoC_lw16i_set_inc(REG3,0x245f,0x1)
0x24CF0A80,	//0x1db4		VoC_lw16i(REG0,0x24cf)
0x1DBC31C7,	//0x1db6		VoC_bnez16_r(DecodeICS_L1,REG7)
0x24541807,	//0x1db8		VoC_lw16i_set_inc(REG3,0x2454,0x1)
0x246A0A80,	//0x1dba		VoC_lw16i(REG0,0x246a)
		//0x1dbc		DecodeICS_L1
0xFF075CB4,	//0x1dbc		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG3,DEFAULT)
0x1DC23184,	//0x1dbe		VoC_bez16_r(DecodeICS_L2,REG4)
0x1D0C2B80,	//0x1dc0		VoC_jal(Coolsand_DecodePulseInfo)
		//0x1dc2		DecodeICS_L2
0xE0156284,	//0x1dc2		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xFF3841AE,	//0x1dc4		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG5,DEFAULT)
0xD867E242,	//0x1dc6		VoC_lw16_p(REG7,REG6,DEFAULT)	|	VoC_lbinc_p(REG2)
0xF6EE5C84,	//0x1dc8		VoC_movreg16(RL7_LO,REG7,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0x1DCE3184,	//0x1dca		VoC_bez16_r(DecodeICS_L3,REG4)
0x1D202B80,	//0x1dcc		VoC_jal(Coolsand_DecodeTNSInfo)
		//0x1dce		DecodeICS_L3
0xDFA9E284,	//0x1dce		VoC_pop16(RA,DEFAULT)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xE580E242,	//0x1dd0		VoC_return	|	VoC_lbinc_p(REG2)
		//0x1dd2		Coolsand_DecodeNoiselessData
0x1DD831C4,	//0x1dd2		VoC_bnez16_r(AACDecode_DMA_L0,REG4)
0x2B80DFE9,	//0x1dd4		VoC_jal(vpp_AmjpAacGenerateHuffTabSpecInfo)(lo)	|	VoC_push16(RA,DEFAULT)
0xDFA9218A,	//0x1dd6		VoC_pop16(RA,DEFAULT)	|	VoC_jal(vpp_AmjpAacGenerateHuffTabSpecInfo)(hi)
		//0x1dd8		AACDecode_DMA_L0
0x1804F024,	//0x1dd8		VoC_lw16i_set_inc(REG0,0x2436,0x1)(lo)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x14032436,	//0x1dda		VoC_lw16_d(REG3,0x2534)(lo)	|	VoC_lw16i_set_inc(REG0,0x2436,0x1)(hi)
0x358C2534,	//0x1ddc		VoC_bne16_rr(DecodeNoiselessData_L0,REG1,REG4)(lo)	|	VoC_lw16_d(REG3,0x2534)(hi)
0x351C1DE3,	//0x1dde		VoC_be16_rr(DecodeNoiselessData_L0,REG3,REG4)(lo)	|	VoC_bne16_rr(DecodeNoiselessData_L0,REG1,REG4)(hi)
0x18041DE3,	//0x1de0		VoC_lw16i_set_inc(REG0,0x2445,0x1)(lo)	|	VoC_be16_rr(DecodeNoiselessData_L0,REG3,REG4)(hi)
0xDFE92445,	//0x1de2		VoC_push16(RA,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x2445,0x1)(hi)
		//0x1de3		DecodeNoiselessData_L0
0xF0065F40,	//0x1de4		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x1D9A2B80,	//0x1de6		VoC_jal(Coolsand_DecodeICS)
0xF0045F00,	//0x1de8		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x5E00F043,	//0x1dea		VoC_inc_p(REG0,DEFAULT)	|	VoC_lw16i_short(REG3,0x2,DEFAULT)
0xD804DFC1,	//0x1dec		VoC_lw16_p(REG4,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0x1DF435A3,	//0x1dee		VoC_bne16_rr(DecodeNoiselessData_L1,REG4,REG3)
0x18042B80,	//0x1df0		VoC_jal(Coolsand_DecodeSpectrumShort)
0xFFC0E5C4,	//0x1df2		VoC_NAD	|	VoC_jump(DecodeNoiselessData_L2)
		//0x1df4		DecodeNoiselessData_L1
0x17962B80,	//0x1df4		VoC_jal(Coolsand_DecodeSpectrumLong)
		//0x1df6		DecodeNoiselessData_L2
0xE0005F81,	//0x1df6		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0x1807DFA9,	//0x1df8		VoC_lw16i_set_inc(REG3,0x410,0x1)(lo)	|	VoC_pop16(RA,DEFAULT)
0x14040410,	//0x1dfa		VoC_lw16_d(REG4,0x246a)(lo)	|	VoC_lw16i_set_inc(REG3,0x410,0x1)(hi)
0x3181246A,	//0x1dfc		VoC_bez16_r(DecodeNoiselessData_L3,REG1)(lo)	|	VoC_lw16_d(REG4,0x246a)(hi)
0x28841E04,	//0x1dfe		VoC_or16_rd(REG4,0x24cf)(lo)	|	VoC_bez16_r(DecodeNoiselessData_L3,REG1)(hi)
0xDE1824CF,	//0x1e00		VoC_inc_p(REG3,DEFAULT)	|	VoC_or16_rd(REG4,0x24cf)(hi)
0xFFC0E5C4,	//0x1e02		VoC_NAD	|	VoC_jump(DecodeNoiselessData_L4)
		//0x1e04		DecodeNoiselessData_L3
0x246A2884,	//0x1e04		VoC_or16_rd(REG4,0x246a)
		//0x1e06		DecodeNoiselessData_L4
0x1504DC30,	//0x1e06		VoC_sw16_d(REG4,0x41d)(lo)	|	VoC_sw16_p(REG0,REG3,DEFAULT)
0xF000041D,	//0x1e08		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_sw16_d(REG4,0x41d)(hi)
0xFFC0E580,	//0x1e0a		VoC_NAD	|	VoC_return
		//0x1e0c		Coolsand_StereoProcessGroup
0xF4017F38,	//0x1e0c		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xFF445FE9,	//0x1e0e		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xFF455885,	//0x1e10		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0xF780600E,	//0x1e12		VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)	|	VoC_movreg16(RL7_LO,REG0,DEFAULT)
0x1E983144,	//0x1e14		VoC_bngtz16_r(StereoProcessGroup_L8,REG4)
0xF47A7E35,	//0x1e16		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_shr16_rr(REG5,REG6,DEFAULT)
0x1E962E20,	//0x1e18		VoC_loop_r(0,REG4)
0x3864D894,	//0x1e1a		VoC_sub16_pr(REG4,REG1,REG4,DEFAULT)	|	VoC_lw16inc_p(REG4,REG1,DEFAULT)
0x61A0D887,	//0x1e1c		VoC_movreg16(REG0,RL6_HI,DEFAULT)	|	VoC_lw16inc_p(REG7,REG0,IN_PARALLEL)
0xE02FF60C,	//0x1e1e		VoC_movreg16(RL7_HI,REG1,DEFAULT)	|	VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)
0xF60D5E00,	//0x1e20		VoC_movreg16(RL6_HI,REG0,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0x50674037,	//0x1e22		VoC_be16_rd(StereoProcessGroup_L0,REG7,0x5067)
0x50684027,	//0x1e24		VoC_be16_rd(StereoProcessGroup_L0,REG7,0x5068)
0x1E602B00,	//0x1e26		VoC_jump_lg(StereoProcessGroup_L1)
		//0x1e28		StereoProcessGroup_L0
0xDF447020,	//0x1e28		VoC_push32(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x1,DEFAULT)
0xE0116428,	//0x1e2a		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_and16_rr(REG0,REG5,DEFAULT)
0x27154431,	//0x1e2c		VoC_bne16_rd(StereoProcessGroup_IS_L0,REG1,0x2715)
0x1E323180,	//0x1e2e		VoC_bez16_r(StereoProcessGroup_IS_L0,REG0)
0xFFC0E48F,	//0x1e30		VoC_NAD	|	VoC_xor16_rr(REG7,REG1,DEFAULT)
		//0x1e32		StereoProcessGroup_IS_L0
0xF7A0640F,	//0x1e32		VoC_movreg16(REG0,RL6_HI,IN_PARALLEL)	|	VoC_and16_rr(REG7,REG1,DEFAULT)
0x0A81F8EF,	//0x1e34		VoC_lw16i(REG1,0x4d54)(lo)	|	VoC_shr16_ri(REG7,0xfffffffd,DEFAULT)
0x41CF4D54,	//0x1e36		VoC_add16_rr(REG7,REG7,REG1,DEFAULT)	|	VoC_lw16i(REG1,0x4d54)(hi)
0x0C00E031,	//0x1e38		VoC_sub16_dp(REG0,0x5058,REG0)(lo)	|	VoC_lw16i_short(REG1,0x3,IN_PARALLEL)
0x64015058,	//0x1e3a		VoC_and16_rr(REG1,REG0,DEFAULT)	|	VoC_sub16_dp(REG0,0x5058,REG0)(hi)
0xF8F9F810,	//0x1e3c		VoC_shr16_ri(REG1,0xffffffff,DEFAULT)	|	VoC_shr16_ri(REG0,0x2,IN_PARALLEL)
0x0707C1C9,	//0x1e3e		VoC_add16_rd(REG7,REG0,0x505c)(lo)	|	VoC_add16_rr(REG1,REG7,REG1,DEFAULT)
0x7420505C,	//0x1e40		VoC_lw16i_short(REG0,0xffffffe1,DEFAULT)	|	VoC_add16_rd(REG7,REG0,0x505c)(hi)
0x3407DF42,	//0x1e42		VoC_bgt16_rr(StereoProcessGroup_IS_L2,REG0,REG7)(lo)	|	VoC_push32(REG45,IN_PARALLEL)
0xE0071E46,	//0x1e44		VoC_movreg16(REG7,REG0,DEFAULT)	|	VoC_bgt16_rr(StereoProcessGroup_IS_L2,REG0,REG7)(hi)
		//0x1e46		StereoProcessGroup_IS_L2
0xF6865988,	//0x1e46		VoC_movreg16(REG6,REG4,IN_PARALLEL)	|	VoC_lw32_p(REG01,REG1,DEFAULT)
0xDFC67908,	//0x1e48		VoC_push16(REG6,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0x1,DEFAULT)
		//0x1e4a		StereoProcessGroup_IS_L3
0xCD4CD9D2,	//0x1e4a		VoC_multf32_rr(ACC0,REG5,REG1,DEFAULT)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xF90C4E45,	//0x1e4c		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG0,REG5,DEFAULT)
0x07B6CE4C,	//0x1e4e		VoC_sub16_rd(REG6,REG6,0x505a)(lo)	|	VoC_macX_rr(REG1,REG4,DEFAULT)
0xFEBC505A,	//0x1e50		VoC_shr32_rr(ACC0,REG7,DEFAULT)	|	VoC_sub16_rd(REG6,REG6,0x505a)(hi)
0x7AFCFF22,	//0x1e52		VoC_shr32_ri(ACC0,0x1f,DEFAULT)	|	VoC_movreg32(REG45,ACC0,DEFAULT)
0xE562DDDC,	//0x1e54		VoC_xor32_rr(REG45,ACC0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,IN_PARALLEL)
0xE515CAA2,	//0x1e56		VoC_or32_rr(ACC1,REG45,DEFAULT)	|	VoC_sub32_rr(REG45,REG45,ACC0,DEFAULT)
0x1E4A31C6,	//0x1e58		VoC_bnez16_r(StereoProcessGroup_IS_L3,REG6)
0x5F86DF02,	//0x1e5a		VoC_pop16(REG6,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0x2B00DF04,	//0x1e5c		VoC_jump_lg(StereoProcessGroup_LX)(lo)	|	VoC_pop32(ACC0,IN_PARALLEL)
0xFFC01E8B,	//0x1e5e		VoC_NAD	|	VoC_jump_lg(StereoProcessGroup_LX)(hi)
		//0x1e60		StereoProcessGroup_L1
0xE01171A0,	//0x1e60		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xd,DEFAULT)
0x1E883538,	//0x1e62		VoC_be16_rr(StereoProcessGroup_L2,REG7,REG0)
0x27151407,	//0x1e64		VoC_lw16_d(REG7,0x2715)
0x505C4097,	//0x1e66		VoC_be16_rd(StereoProcessGroup_L3,REG7,0x505c)
0x1E8835B9,	//0x1e68		VoC_bne16_rr(StereoProcessGroup_L2,REG7,REG1)
0x1607E0A7,	//0x1e6a		VoC_and16_ri(REG7,0x1)(lo)	|	VoC_movreg16(REG7,REG5,DEFAULT)
0x31870001,	//0x1e6c		VoC_bez16_r(StereoProcessGroup_L2,REG7)(lo)	|	VoC_and16_ri(REG7,0x1)(hi)
0xFFC01E88,	//0x1e6e		VoC_NAD	|	VoC_bez16_r(StereoProcessGroup_L2,REG7)(hi)
		//0x1e70		StereoProcessGroup_L3
0xDF475FC6,	//0x1e70		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
		//0x1e72		StereoProcessGroup_L4
0x901BD990,	//0x1e72		VoC_add32_rp(REG67,REG01,REG3,DEFAULT)	|	VoC_lw32_p(REG01,REG2,DEFAULT)
0xFF1F1418,	//0x1e74		VoC_movreg32(RL7,REG67,IN_PARALLEL)	|	VoC_sub32_rp(REG01,REG01,REG3,DEFAULT)
0xFAFF5DD3,	//0x1e76		VoC_shr32_ri(RL7,0x1f,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG2,DEFAULT)
0xDDD8657B,	//0x1e78		VoC_sw32inc_p(REG01,REG3,IN_PARALLEL)	|	VoC_xor32_rr(REG67,RL7,DEFAULT)
0xFF074AFB,	//0x1e7a		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sub32_rr(REG67,REG67,RL7,DEFAULT)
0xFAFF651C,	//0x1e7c		VoC_shr32_ri(RL7,0x1f,IN_PARALLEL)	|	VoC_or32_rr(ACC0,REG67,DEFAULT)
0xE0166578,	//0x1e7e		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_xor32_rr(REG01,RL7,DEFAULT)
0xC3344A38,	//0x1e80		VoC_sub16_rr(REG4,REG4,REG6,IN_PARALLEL)	|	VoC_sub32_rr(REG01,REG01,RL7,DEFAULT)
0x31C4E505,	//0x1e82		VoC_bnez16_r(StereoProcessGroup_L4,REG4)(lo)	|	VoC_or32_rr(ACC1,REG01,DEFAULT)
0x5F861E72,	//0x1e84		VoC_pop16(REG6,DEFAULT)	|	VoC_bnez16_r(StereoProcessGroup_L4,REG4)(hi)
0xE5C4DF07,	//0x1e86		VoC_jump(StereoProcessGroup_LX)	|	VoC_pop32(RL7,IN_PARALLEL)
		//0x1e88		StereoProcessGroup_L2
0x40A2F8FC,	//0x1e88		VoC_add16_rr(REG2,REG2,REG4,DEFAULT)	|	VoC_shr16_ri(REG4,0xffffffff,DEFAULT)
0xF021C0E3,	//0x1e8a		VoC_lw16i_short(REG1,0x1,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG4,IN_PARALLEL)
		//0x1e8b		StereoProcessGroup_LX
0xF90D418E,	//0x1e8c		VoC_shru16_ri(REG5,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG1,DEFAULT)
0xE10061C1,	//0x1e8e		VoC_lw16i_short(REG0,0x10,IN_PARALLEL)	|	VoC_movreg16(REG1,RL7_LO,DEFAULT)
0x1E9535B0,	//0x1e90		VoC_bne16_rr(StereoProcessGroup_L5,REG6,REG0)
0x7006D895,	//0x1e92		VoC_lw16i_short(REG6,0x0,DEFAULT)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
0xE1E1F62E,	//0x1e94		VoC_movreg16(REG1,RL7_HI,DEFAULT)	|	VoC_movreg16(RL7_LO,REG1,IN_PARALLEL)
		//0x1e95		StereoProcessGroup_L5
		//0x1e96		VoC_endloop0
0xFFC0E180,	//0x1e96		VoC_NAD	|	VoC_movreg16(REG0,RL6_LO,DEFAULT)
		//0x1e98		StereoProcessGroup_L8
0xE0117F26,	//0x1e98		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0x0E8C2B80,	//0x1e9a		VoC_jal(Coolsand_CLZ)
0x4C26C38E,	//0x1e9c		VoC_bnlt16_rd(StereoProcessGroup_L6,REG6,0x2774)(lo)	|	VoC_sub16_rr(REG6,REG6,REG1,DEFAULT)
0x15062774,	//0x1e9e		VoC_sw16_d(REG6,0x2774)(lo)	|	VoC_bnlt16_rd(StereoProcessGroup_L6,REG6,0x2774)(hi)
0xFF2E2774,	//0x1ea0		VoC_movreg32(RL6,ACC1,DEFAULT)	|	VoC_sw16_d(REG6,0x2774)(hi)
		//0x1ea1		StereoProcessGroup_L6
0x0E8C2B80,	//0x1ea2		VoC_jal(Coolsand_CLZ)
0xDFA9438E,	//0x1ea4		VoC_pop16(RA,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG1,DEFAULT)
0x27754C26,	//0x1ea6		VoC_bnlt16_rd(StereoProcessGroup_L7,REG6,0x2775)
0x27751506,	//0x1ea8		VoC_sw16_d(REG6,0x2775)
		//0x1eaa		StereoProcessGroup_L7
0xFFC0E580,	//0x1eaa		VoC_NAD	|	VoC_return
		//0x1eac		Coolsand_StereoProcess
0xE0007021,	//0x1eac		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x1,DEFAULT)
0x25341404,	//0x1eae		VoC_lw16_d(REG4,0x2534)
0x040E1405,	//0x1eb0		VoC_lw16_d(REG5,0x40e)
0x1F13358C,	//0x1eb2		VoC_bne16_rr(StereoProcess_End,REG1,REG4)
0x1F13358D,	//0x1eb4		VoC_bne16_rr(StereoProcess_End,REG1,REG5)
0x27156E06,	//0x1eb6		VoC_bnez16_d(StereoProcess_Begin,0x2715)
0x27236E04,	//0x1eb8		VoC_bnez16_d(StereoProcess_Begin,0x2723)
0x1F132B00,	//0x1eba		VoC_jump_lg(StereoProcess_End)
		//0x1ebc		StereoProcess_Begin
0x0A84F042,	//0x1ebc		VoC_lw16i(REG4,0x4e68)(lo)	|	VoC_lw16i_short(REG2,0x2,DEFAULT)
0x18054E68,	//0x1ebe		VoC_lw16i_set_inc(REG1,0x59f8,0x1)(lo)	|	VoC_lw16i(REG4,0x4e68)(hi)
0x0A8759F8,	//0x1ec0		VoC_lw16i(REG7,0x800)(lo)	|	VoC_lw16i_set_inc(REG1,0x59f8,0x1)(hi)
0x448A0800,	//0x1ec2		VoC_bne16_rd(StereoProcess_L0,REG2,0x2437)(lo)	|	VoC_lw16i(REG7,0x800)(hi)
0x0A842437,	//0x1ec4		VoC_lw16i(REG4,0x4f42)(lo)	|	VoC_bne16_rd(StereoProcess_L0,REG2,0x2437)(hi)
0x18054F42,	//0x1ec6		VoC_lw16i_set_inc(REG1,0x4f4e,0x1)(lo)	|	VoC_lw16i(REG4,0x4f42)(hi)
0x0A874F4E,	//0x1ec8		VoC_lw16i(REG7,0x100)(lo)	|	VoC_lw16i_set_inc(REG1,0x4f4e,0x1)(hi)
0xFFC00100,	//0x1eca		VoC_NAD	|	VoC_lw16i(REG7,0x100)(hi)
		//0x1ecc		StereoProcess_L0
0x040C0724,	//0x1ecc		VoC_add16_rd(REG4,REG4,0x40c)
0x243C1405,	//0x1ece		VoC_lw16_d(REG5,0x243c)
0xE0060061,	//0x1ed0		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_add16_rp(REG1,REG1,REG4,DEFAULT)
0x27161804,	//0x1ed2		VoC_lw16i_set_inc(REG0,0x2716,0x1)
0x1428180A,	//0x1ed4		VoC_lw16i_set_inc(REG2,0x1428,0x2)
0x1C28180B,	//0x1ed6		VoC_lw16i_set_inc(REG3,0x1c28,0x2)
0xDFE97F07,	//0x1ed8		VoC_push16(RA,IN_PARALLEL)	|	VoC_movreg32(RL7,REG01,DEFAULT)
0x24391404,	//0x1eda		VoC_lw16_d(REG4,0x2439)
0x269D1804,	//0x1edc		VoC_lw16i_set_inc(REG0,0x269d,0x1)
0x25AD1805,	//0x1ede		VoC_lw16i_set_inc(REG1,0x25ad,0x1)
0xE0007F06,	//0x1ee0		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x243D0A81,	//0x1ee2		VoC_lw16i(REG1,0x243d)
0x1F0F2E29,	//0x1ee4		VoC_loop_r(1,REG5)
0xFFC0D895,	//0x1ee6		VoC_NAD	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
		//0x1ee8		StereoProcess_L3
0x1F0234A8,	//0x1ee8		VoC_bngt16_rr(StereoProcess_L2,REG5,REG0)
0xDF465E00,	//0x1eea		VoC_push32(RL6,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xDF475FC4,	//0x1eec		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(REG4,DEFAULT)
0xDF405FC6,	//0x1eee		VoC_push32(REG01,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0x5FC7DFC5,	//0x1ef0		VoC_push16(REG7,DEFAULT)	|	VoC_push16(REG5,DEFAULT)
0xFFC0DF41,	//0x1ef2		VoC_NAD	|	VoC_push32(REG23,IN_PARALLEL)
0x1E0C2B80,	//0x1ef4		VoC_jal(Coolsand_StereoProcessGroup)
0xDF015F87,	//0x1ef6		VoC_pop32(REG23,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xDF005F85,	//0x1ef8		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
0xDF075F86,	//0x1efa		VoC_pop32(RL7,IN_PARALLEL)	|	VoC_pop16(REG6,DEFAULT)
0xDF065F84,	//0x1efc		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0xC0FB40BA,	//0x1efe		VoC_add16_rr(REG3,REG3,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG7,DEFAULT)
0xFFC0E5E8,	//0x1f00		VoC_NAD	|	VoC_jump(StereoProcess_L3)
		//0x1f02		StereoProcess_L2
0xFF305FC1,	//0x1f02		VoC_movreg32(REG01,RL6,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0xC1A54061,	//0x1f04		VoC_add16_rr(REG5,REG6,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0xF8254020,	//0x1f06		VoC_shr16_ri(REG5,0x4,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0xFF06E1C1,	//0x1f08		VoC_movreg32(RL6,REG01,DEFAULT)	|	VoC_movreg16(REG1,RL7_LO,DEFAULT)
0xC1A64069,	//0x1f0a		VoC_add16_rr(REG6,REG6,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG5,DEFAULT)
0xF62E7000,	//0x1f0c		VoC_movreg16(RL7_LO,REG1,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0x1606DF81,	//0x1f0e		VoC_and16_ri(REG6,0xf)(lo)	|	VoC_pop16(REG1,DEFAULT)
		//0x1f0f		VoC_endloop1
0xDFA9000F,	//0x1f10		VoC_pop16(RA,DEFAULT)	|	VoC_and16_ri(REG6,0xf)(hi)
0xE580F000,	//0x1f12		VoC_return	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
		//0x1f13		StereoProcess_End
		//0x1f14		Coolsand_DecodeLPCCoefs
0x180AF019,	//0x1f14		VoC_lw16i_set_inc(REG2,0x2724,0x2)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0x180B2724,	//0x1f16		VoC_lw16i_set_inc(REG3,0x274c,0x2)(lo)	|	VoC_lw16i_set_inc(REG2,0x2724,0x2)(hi)
0x61E1274C,	//0x1f18		VoC_movreg16(REG1,RL7_HI,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0x274c,0x2)(hi)
0x7064F606,	//0x1f1a		VoC_lw16i_short(REG4,0x3,DEFAULT)	|	VoC_movreg16(REG6,REG0,IN_PARALLEL)
0x35B4E045,	//0x1f1c		VoC_bne16_rr(DecodeLPCCoefs_L0,REG6,REG4)(lo)	|	VoC_lw16i_short(REG5,0x4,IN_PARALLEL)
0x1FB81F22,	//0x1f1e		VoC_lw16i_set_inc(REG0,0x4cfc,0xfffffffe)(lo)	|	VoC_bne16_rr(DecodeLPCCoefs_L0,REG6,REG4)(hi)
0xE5C54CFC,	//0x1f20		VoC_jump(DecodeLPCCoefs_L1)	|	VoC_lw16i_set_inc(REG0,0x4cfc,0xfffffffe)(hi)
		//0x1f22		DecodeLPCCoefs_L0
0x1F5935B5,	//0x1f22		VoC_bne16_rr(DecodeLPCCoefs_End,REG6,REG5)
0x4D1C1FB8,	//0x1f24		VoC_lw16i_set_inc(REG0,0x4d1c,0xfffffffe)
		//0x1f26		DecodeLPCCoefs_L1
0xFFC0F004,	//0x1f26		VoC_NAD	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
		//0x1f28		DecodeLPCCoefs_L2
0x277B1405,	//0x1f28		VoC_lw16_d(REG5,0x277b)
0x1F5934AC,	//0x1f2a		VoC_bngt16_rr(DecodeLPCCoefs_End,REG5,REG4)
0x1605D895,	//0x1f2c		VoC_and16_ri(REG5,0xf)(lo)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
0x78FD000F,	//0x1f2e		VoC_shr16_ri(REG5,0xffffffff,DEFAULT)	|	VoC_and16_ri(REG5,0xf)(hi)
0x4145FF07,	//0x1f30		VoC_add16_rr(REG5,REG5,REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x07A0FF0E,	//0x1f32		VoC_sub16_rd(REG0,REG4,0x505a)(lo)	|	VoC_movreg32(RL6,REG23,IN_PARALLEL)
0xF8F8505A,	//0x1f34		VoC_shr16_ri(REG0,0xffffffff,DEFAULT)	|	VoC_sub16_rd(REG0,REG4,0x505a)(hi)
0xF68159AD,	//0x1f36		VoC_movreg16(REG1,REG4,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG5,DEFAULT)
0xFF2B4010,	//0x1f38		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG2,DEFAULT)
0x1F4E3141,	//0x1f3a		VoC_bngtz16_r(DecodeLPCCoefs_L3,REG1)
0xD9C2664B,	//0x1f3c		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_loop_r_short(REG1,DEFAULT)
0xF90E4D7C,	//0x1f3e		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x1f40		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xD9C2CE7C,	//0x1f42		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xBEA4FBFC,	//0x1f44		VoC_sub32inc_pr(ACC0,REG2,ACC0,DEFAULT)	|	VoC_shr32_ri(ACC0,0xffffffff,DEFAULT)
0xDDDCFF2B,	//0x1f46		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_movreg32(REG67,ACC1,DEFAULT)
		//0x1f47		VoC_endloop0
0xE024FF31,	//0x1f48		VoC_movreg16(REG4,REG1,DEFAULT)	|	VoC_movreg32(REG23,RL6,DEFAULT)
0xD9DC6703,	//0x1f4a		VoC_lw32inc_p(ACC0,REG3,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0xDDD4D9DC,	//0x1f4c		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG3,DEFAULT)
		//0x1f4d		VoC_endloop0
		//0x1f4e		DecodeLPCCoefs_L3
0xFF316085,	//0x1f4e		VoC_movreg32(REG23,RL6,IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
0xE01678FD,	//0x1f50		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xffffffff,DEFAULT)
0xFA5D4155,	//0x1f52		VoC_shr32_ri(ACC1,0xb,IN_PARALLEL)	|	VoC_add16_rr(REG5,REG5,REG2,DEFAULT)
0xC1347F38,	//0x1f54		VoC_add16_rr(REG4,REG4,REG6,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0x2B00DDAD,	//0x1f56		VoC_jump_lg(DecodeLPCCoefs_L2)(lo)	|	VoC_sw32_p(ACC1,REG5,DEFAULT)
0xF0301F28,	//0x1f58		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_jump_lg(DecodeLPCCoefs_L2)(hi)
		//0x1f59		DecodeLPCCoefs_End
0xFFC0E580,	//0x1f5a		VoC_NAD	|	VoC_return
		//0x1f5c		Coolsand_FilterRegion
0xF6475FE9,	//0x1f5c		VoC_movreg16(REG7,REG2,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xFF4477D0,	//0x1f5e		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0xfffffffe,DEFAULT)
0x1F6431C3,	//0x1f60		VoC_bnez16_r(FilterRegion_L0,REG3)
0xFF447050,	//0x1f62		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
		//0x1f64		FilterRegion_L0
0x27241FBA,	//0x1f64		VoC_lw16i_set_inc(REG2,0x2724,0xfffffffe)
0x274C180B,	//0x1f66		VoC_lw16i_set_inc(REG3,0x274c,0x2)
0x277B1401,	//0x1f68		VoC_lw16_d(REG1,0x277b)
0xF6656642,	//0x1f6a		VoC_movreg16(REG5,REG3,IN_PARALLEL)	|	VoC_loop_r_short(REG1,DEFAULT)
		//0x1f6c		VoC_endloop0
0x60A3DDDC,	//0x1f6c		VoC_movreg16(REG3,REG5,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
0x77D3F680,	//0x1f6e		VoC_lw16i_short(INC3,0xfffffffe,DEFAULT)	|	VoC_movreg16(REG0,REG4,IN_PARALLEL)
0xDFC7E005,	//0x1f70		VoC_push16(REG7,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
		//0x1f71		FilterRegion_L3
0x7F25D984,	//0x1f72		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_lw32_p(ACC0,REG0,DEFAULT)
0xFA65FD64,	//0x1f74		VoC_shr32_ri(ACC1,0xc,DEFAULT)	|	VoC_shru32_ri(ACC0,0xffffffec,IN_PARALLEL)
0xE0145FC1,	//0x1f76		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0xDF414264,	//0x1f78		VoC_push32(REG23,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG1,REG4,DEFAULT)
0xF9FC6081,	//0x1f7a		VoC_shru16_ri(REG4,0xffffffff,IN_PARALLEL)	|	VoC_movreg16(REG1,REG4,DEFAULT)
0xC0E340A2,	//0x1f7c		VoC_add16_rr(REG3,REG3,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
0x3141DFC0,	//0x1f7e		VoC_bngtz16_r(FilterRegion_L1,REG1)(lo)	|	VoC_push16(REG0,DEFAULT)
0xE64C1F8E,	//0x1f80		VoC_loop_r_short(REG1,DEFAULT)	|	VoC_bngtz16_r(FilterRegion_L1,REG1)(hi)
0x59DBDFC3,	//0x1f82		VoC_lw32inc_p(REG67,REG3,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0x0A96F401,	//0x1f84		VoC_lw16i(STATUS,0x48)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xD9D00048,	//0x1f86		VoC_lw32inc_p(REG01,REG2,DEFAULT)	|	VoC_lw16i(STATUS,0x48)(hi)
0x0EB82B80,	//0x1f88		VoC_jal(Coolsand_MADD64)
0xD998DF84,	//0x1f8a		VoC_lw32_p(REG01,REG3,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xDDA0F116,	//0x1f8c		VoC_sw32_p(REG01,REG4,DEFAULT)	|	VoC_lw16i_short(STATUS,0x8,DEFAULT)
		//0x1f8d		VoC_endloop0
		//0x1f8e		FilterRegion_L1
0xF401599B,	//0x1f8e		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x0A96D990,	//0x1f90		VoC_lw16i(STATUS,0x48)(lo)	|	VoC_lw32_p(REG01,REG2,DEFAULT)
0xFFC00048,	//0x1f92		VoC_NAD	|	VoC_lw16i(STATUS,0x48)(hi)
0x0EB82B80,	//0x1f94		VoC_jal(Coolsand_MADD64)
0xF4017116,	//0x1f96		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x8,DEFAULT)
0xFBA55F80,	//0x1f98		VoC_shr32_ri(ACC1,0xfffffff4,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x50545835,	//0x1f9a		VoC_be32_rd(FilterRegion_L2,ACC1,0x5054)
0x50565825,	//0x1f9c		VoC_be32_rd(FilterRegion_L2,ACC1,0x5056)
0xE525FCA4,	//0x1f9e		VoC_or32_rr(ACC1,ACC0,DEFAULT)	|	VoC_shru32_ri(ACC0,0x14,DEFAULT)
		//0x1fa0		FilterRegion_L2
0xFF2C5F81,	//0x1fa0		VoC_movreg32(ACC0,ACC1,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xFAFC5D9D,	//0x1fa2		VoC_shr32_ri(ACC0,0x1f,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG3,DEFAULT)
0xDDC56565,	//0x1fa4		VoC_sw32inc_p(ACC1,REG0,IN_PARALLEL)	|	VoC_xor32_rr(ACC1,ACC0,DEFAULT)
0xDF874B65,	//0x1fa6		VoC_pop16(REG7,IN_PARALLEL)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x277C2A05,	//0x1fa8		VoC_or32_rd(ACC1,0x277c)
0x07BFDF01,	//0x1faa		VoC_sub16_rd(REG7,REG7,0x505a)(lo)	|	VoC_pop32(REG23,DEFAULT)
0x1585505A,	//0x1fac		VoC_sw32_d(ACC1,0x277c)(lo)	|	VoC_sub16_rd(REG7,REG7,0x505a)(hi)
0x3107277C,	//0x1fae		VoC_bgtz16_r(FilterRegion_L3,REG7)(lo)	|	VoC_sw32_d(ACC1,0x277c)(hi)
0xDFA91F71,	//0x1fb0		VoC_pop16(RA,DEFAULT)	|	VoC_bgtz16_r(FilterRegion_L3,REG7)(hi)
0xE580FFC0,	//0x1fb2		VoC_return	|	VoC_NOP
		//0x1fb4		Coolsand_TNSFilter
0x7030F022,	//0x1fb4		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_lw16i_short(REG2,0x1,DEFAULT)
0x1807F005,	//0x1fb6		VoC_lw16i_set_inc(REG3,0x2436,0x1)(lo)	|	VoC_lw16i_short(INC1,0x1,IN_PARALLEL)
0x14012436,	//0x1fb8		VoC_lw16_d(REG1,0x2534)(lo)	|	VoC_lw16i_set_inc(REG3,0x2436,0x1)(hi)
0x35A22534,	//0x1fba		VoC_bne16_rr(TNSFilter_L0,REG4,REG2)(lo)	|	VoC_lw16_d(REG1,0x2534)(hi)
0x350A1FC2,	//0x1fbc		VoC_be16_rr(TNSFilter_L0,REG1,REG2)(lo)	|	VoC_bne16_rr(TNSFilter_L0,REG4,REG2)(hi)
0x18071FC2,	//0x1fbe		VoC_lw16i_set_inc(REG3,0x2445,0x1)(lo)	|	VoC_be16_rr(TNSFilter_L0,REG1,REG2)(hi)
0xFFC02445,	//0x1fc0		VoC_NAD	|	VoC_lw16i_set_inc(REG3,0x2445,0x1)(hi)
		//0x1fc2		TNSFilter_L0
0x27740A87,	//0x1fc2		VoC_lw16i(REG7,0x2774)
0x246A1804,	//0x1fc4		VoC_lw16i_set_inc(REG0,0x246a,0x1)
0x14280A8D,	//0x1fc6		VoC_lw16i(RL6_HI,0x1428)
0x1FD035A2,	//0x1fc8		VoC_bne16_rr(TNSFilter_LX,REG4,REG2)
0x27750A87,	//0x1fca		VoC_lw16i(REG7,0x2775)
0x24CF1804,	//0x1fcc		VoC_lw16i_set_inc(REG0,0x24cf,0x1)
0x1C280A8D,	//0x1fce		VoC_lw16i(RL6_HI,0x1c28)
		//0x1fd0		TNSFilter_LX
0xDE185885,	//0x1fd0		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x20983185,	//0x1fd2		VoC_bez16_r(TNSFilter_End,REG5)
0x0A84DFE9,	//0x1fd4		VoC_lw16i(REG4,0x4d3c)(lo)	|	VoC_push16(RA,DEFAULT)
0x0A854D3C,	//0x1fd6		VoC_lw16i(REG5,0x4d48)(lo)	|	VoC_lw16i(REG4,0x4d3c)(hi)
0x07244D48,	//0x1fd8		VoC_add16_rd(REG4,REG4,0x40c)(lo)	|	VoC_lw16i(REG5,0x4d48)(hi)
0x072D040C,	//0x1fda		VoC_add16_rd(REG5,REG5,0x40c)(lo)	|	VoC_add16_rd(REG4,REG4,0x40c)(hi)
0xD846040C,	//0x1fdc		VoC_lw16_p(REG6,REG4,DEFAULT)	|	VoC_add16_rd(REG5,REG5,0x40c)(hi)
0xDFC7D857,	//0x1fde		VoC_push16(REG7,DEFAULT)	|	VoC_lw16_p(REG7,REG5,DEFAULT)
0x453CD8B4,	//0x1fe0		VoC_bne16_rd(TNSFilter_L1,REG4,0x505c)(lo)	|	VoC_lw16inc_p(REG4,REG3,DEFAULT)
0xF0E5505C,	//0x1fe2		VoC_lw16i_short(REG5,0x7,DEFAULT)	|	VoC_bne16_rd(TNSFilter_L1,REG4,0x505c)(hi)
0x00FF1606,	//0x1fe4		VoC_and16_ri(REG6,0xff)
0x27791505,	//0x1fe6		VoC_sw16_d(REG5,0x2779)
0x27781506,	//0x1fe8		VoC_sw16_d(REG6,0x2778)
0x1607F104,	//0x1fea		VoC_and16_ri(REG7,0xff)(lo)	|	VoC_lw16i_short(REG4,0x8,DEFAULT)
0x0A8500FF,	//0x1fec		VoC_lw16i(REG5,0x100)(lo)	|	VoC_and16_ri(REG7,0xff)(hi)
0x15040100,	//0x1fee		VoC_sw16_d(REG4,0x2776)(lo)	|	VoC_lw16i(REG5,0x100)(hi)
0x15052776,	//0x1ff0		VoC_sw16_d(REG5,0x2777)(lo)	|	VoC_sw16_d(REG4,0x2776)(hi)
0x0A842777,	//0x1ff2		VoC_lw16i(REG4,0x4f4e)(lo)	|	VoC_sw16_d(REG5,0x2777)(hi)
0x0A864F4E,	//0x1ff4		VoC_lw16i(REG6,0x4f42)(lo)	|	VoC_lw16i(REG4,0x4f4e)(hi)
0xE5D34F42,	//0x1ff6		VoC_jump(TNSFilter_L2)	|	VoC_lw16i(REG6,0x4f42)(hi)
		//0x1ff8		TNSFilter_L1
0xF9467185,	//0x1ff8		VoC_shru16_ri(REG6,0x8,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0xc,DEFAULT)
0x4E680A86,	//0x1ffa		VoC_lw16i(REG6,0x4e68)
0x27781506,	//0x1ffc		VoC_sw16_d(REG6,0x2778)
0x27791505,	//0x1ffe		VoC_sw16_d(REG5,0x2779)
0xF9477024,	//0x2000		VoC_shru16_ri(REG7,0x8,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x08000A85,	//0x2002		VoC_lw16i(REG5,0x800)
0x27761504,	//0x2004		VoC_sw16_d(REG4,0x2776)
0x27771505,	//0x2006		VoC_sw16_d(REG5,0x2777)
0x59F80A84,	//0x2008		VoC_lw16i(REG4,0x59f8)
		//0x200a		TNSFilter_L2
0x0736E0E5,	//0x200a		VoC_add16_rd(REG6,REG6,0x40c)(lo)	|	VoC_movreg16(REG5,REG7,DEFAULT)
0x7F45040C,	//0x200c		VoC_lw32z(ACC1,DEFAULT)	|	VoC_add16_rd(REG6,REG6,0x40c)(hi)
0x0136DE18,	//0x200e		VoC_add16_rp(REG6,REG4,REG6,DEFAULT)	|	VoC_inc_p(REG3,IN_PARALLEL)
0x5833F006,	//0x2010		VoC_lw16_p(REG3,REG3,DEFAULT)	|	VoC_lw16i_short(INC2,0x1,IN_PARALLEL)
0x1505E087,	//0x2012		VoC_sw16_d(REG5,0x277a)(lo)	|	VoC_lw16i_short(REG7,0x8,IN_PARALLEL)
0x34AB277A,	//0x2014		VoC_bngt16_rr(TNSFilter_L3,REG5,REG3)(lo)	|	VoC_sw16_d(REG5,0x277a)(hi)
0x1503201A,	//0x2016		VoC_sw16_d(REG3,0x277a)(lo)	|	VoC_bngt16_rr(TNSFilter_L3,REG5,REG3)(hi)
0xFFC0277A,	//0x2018		VoC_NAD	|	VoC_sw16_d(REG3,0x277a)(hi)
		//0x201a		TNSFilter_L3
0x277C1585,	//0x201a		VoC_sw32_d(ACC1,0x277c)
0x417AC03D,	//0x201c		VoC_add16_rr(REG2,REG5,REG7,DEFAULT)	|	VoC_add16_rr(REG5,REG0,REG7,DEFAULT)
0xC0BBF6AE,	//0x201e		VoC_add16_rr(REG3,REG2,REG7,DEFAULT)	|	VoC_movreg16(RL7_LO,REG5,IN_PARALLEL)
0xC07FC0F9,	//0x2020		VoC_add16_rr(REG7,REG1,REG7,DEFAULT)	|	VoC_add16_rr(REG1,REG3,REG7,DEFAULT)
0xF76460EF,	//0x2022		VoC_movreg16(REG4,ACC1_HI,IN_PARALLEL)	|	VoC_movreg16(RL7_HI,REG7,DEFAULT)
		//0x2024		TNSFilter_L4
0x27761405,	//0x2024		VoC_lw16_d(REG5,0x2776)
0x208C34AC,	//0x2026		VoC_bngt16_rr(TNSFilter_L14,REG5,REG4)
0xD884608B,	//0x2028		VoC_lw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_movreg16(ACC1_HI,REG4,DEFAULT)
0xE00A5FC0,	//0x202a		VoC_lw16i_short(ACC1_LO,0x0,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x27781405,	//0x202c		VoC_lw16_d(REG5,0x2778)
		//0x202e		TNSFilter_L6
0x34A7E147,	//0x202e		VoC_bngt16_rr(TNSFilter_L5,REG4,REG7)(lo)	|	VoC_movreg16(REG7,ACC1_LO,DEFAULT)
0x70242081,	//0x2030		VoC_lw16i_short(REG4,0x1,DEFAULT)	|	VoC_bngt16_rr(TNSFilter_L5,REG4,REG7)(hi)
0x60A4DFC4,	//0x2032		VoC_movreg16(REG4,REG5,DEFAULT)	|	VoC_push16(REG4,IN_PARALLEL)
0x0715C1E7,	//0x2034		VoC_sub16inc_rp(REG5,REG4,REG2,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG4,IN_PARALLEL)
0x3245F6EA,	//0x2036		VoC_bnltz16_r(TNSFilter_L7,REG5)(lo)	|	VoC_movreg16(ACC1_LO,REG7,IN_PARALLEL)
0xF005203A,	//0x2038		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_bnltz16_r(TNSFilter_L7,REG5)(hi)
		//0x203a		TNSFilter_L7
0x3C2FD8B7,	//0x203a		VoC_bngt16_rd(TNSFilter_L8,REG7,0x2779)(lo)	|	VoC_lw16inc_p(REG7,REG3,DEFAULT)
0x14072779,	//0x203c		VoC_lw16_d(REG7,0x2779)(lo)	|	VoC_bngt16_rd(TNSFilter_L8,REG7,0x2779)(hi)
0xFFC02779,	//0x203e		VoC_NAD	|	VoC_lw16_d(REG7,0x2779)(hi)
		//0x2040		TNSFilter_L8
0xF6A25F41,	//0x2040		VoC_movreg16(REG2,REG5,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0x277B1507,	//0x2042		VoC_sw16_d(REG7,0x277b)
0x207A3187,	//0x2044		VoC_bez16_r(TNSFilter_L9,REG7)
0x277A3C22,	//0x2046		VoC_bngt16_rd(TNSFilter_L10,REG2,0x277a)
0x277A1402,	//0x2048		VoC_lw16_d(REG2,0x277a)
		//0x204a		TNSFilter_L10
0x3C24C192,	//0x204a		VoC_bngt16_rd(TNSFilter_L11,REG4,0x277a)(lo)	|	VoC_add16_rr(REG2,REG6,REG2,DEFAULT)
0x1404277A,	//0x204c		VoC_lw16_d(REG4,0x277a)(lo)	|	VoC_bngt16_rd(TNSFilter_L11,REG4,0x277a)(hi)
0xC1A4277A,	//0x204e		VoC_add16_rr(REG4,REG6,REG4,DEFAULT)	|	VoC_lw16_d(REG4,0x277a)(hi)
		//0x204f		TNSFilter_L11
0xD844D827,	//0x2050		VoC_lw16_p(REG4,REG4,DEFAULT)	|	VoC_lw16_p(REG7,REG2,DEFAULT)
0x3142C33A,	//0x2052		VoC_bngtz16_r(TNSFilter_L12,REG2)(lo)	|	VoC_sub16_rr(REG2,REG4,REG7,DEFAULT)
0xD8932076,	//0x2054		VoC_lw16inc_p(REG3,REG1,DEFAULT)	|	VoC_bngtz16_r(TNSFilter_L12,REG2)(hi)
0x205A3183,	//0x2056		VoC_bez16_r(TNSFilter_L13,REG3)
0x505A07A7,	//0x2058		VoC_sub16_rd(REG7,REG4,0x505a)
		//0x205a		TNSFilter_L13
0x5F40F8FF,	//0x205a		VoC_push32(REG01,DEFAULT)	|	VoC_shr16_ri(REG7,0xffffffff,DEFAULT)
0xC1C4F7A0,	//0x205c		VoC_add16_rr(REG4,REG7,REG0,DEFAULT)	|	VoC_movreg16(REG0,RL6_HI,IN_PARALLEL)
0xF76161C0,	//0x205e		VoC_movreg16(REG1,ACC1_HI,IN_PARALLEL)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0xDFC54008,	//0x2060		VoC_push16(REG5,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
0xDF475FCD,	//0x2062		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(RL6_HI,DEFAULT)
0xDF455FC6,	//0x2064		VoC_push32(ACC1,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0xDF415FC4,	//0x2066		VoC_push32(REG23,IN_PARALLEL)	|	VoC_push16(REG4,DEFAULT)
0xFFC0D800,	//0x2068		VoC_NAD	|	VoC_lw16_p(REG0,REG0,DEFAULT)
0x1F142B80,	//0x206a		VoC_jal(Coolsand_DecodeLPCCoefs)
0xDF015F84,	//0x206c		VoC_pop32(REG23,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0x1F5C2B80,	//0x206e		VoC_jal(Coolsand_FilterRegion)
0xDF865F05,	//0x2070		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_pop32(ACC1,DEFAULT)
0xDF8D5F07,	//0x2072		VoC_pop16(RL6_HI,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0xDF005F85,	//0x2074		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
		//0x2076		TNSFilter_L12
0x0712E1E2,	//0x2076		VoC_add16_rd(REG2,REG2,0x277b)(lo)	|	VoC_movreg16(REG2,RL7_HI,DEFAULT)
0xE04F277B,	//0x2078		VoC_movreg16(RL7_HI,REG2,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0x277b)(hi)
		//0x207a		TNSFilter_L9
0x5F84F030,	//0x207a		VoC_pop16(REG4,DEFAULT)	|	VoC_lw16i_short(INC0,0x1,DEFAULT)
0x7032DF01,	//0x207c		VoC_lw16i_short(INC2,0x1,DEFAULT)	|	VoC_pop32(REG23,IN_PARALLEL)
0x2B00F007,	//0x207e		VoC_jump_lg(TNSFilter_L6)(lo)	|	VoC_lw16i_short(INC3,0x1,IN_PARALLEL)
0xE1A7202E,	//0x2080		VoC_movreg16(REG7,RL6_HI,DEFAULT)	|	VoC_jump_lg(TNSFilter_L6)(hi)
		//0x2081		TNSFilter_L5
0x2777073F,	//0x2082		VoC_add16_rd(REG7,REG7,0x2777)
0xDF8060ED,	//0x2084		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_movreg16(RL6_HI,REG7,DEFAULT)
0xE0156164,	//0x2086		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_movreg16(REG4,ACC1_HI,DEFAULT)
0x2B00C12C,	//0x2088		VoC_jump_lg(TNSFilter_L4)(lo)	|	VoC_add16_rr(REG4,REG4,REG5,DEFAULT)
0xFFC02024,	//0x208a		VoC_NAD	|	VoC_jump_lg(TNSFilter_L4)(hi)
		//0x208c		TNSFilter_L14
0xE0115F85,	//0x208c		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
0x277C1486,	//0x208e		VoC_lw32_d(RL6,0x277c)
0x0E8C2B80,	//0x2090		VoC_jal(Coolsand_CLZ)
0x5854DFA9,	//0x2092		VoC_lw16_p(REG4,REG5,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0x34A6C38E,	//0x2094		VoC_bngt16_rr(TNSFilter_End,REG4,REG6)(lo)	|	VoC_sub16_rr(REG6,REG6,REG1,IN_PARALLEL)
0xDC562098,	//0x2096		VoC_sw16_p(REG6,REG5,DEFAULT)	|	VoC_bngt16_rr(TNSFilter_End,REG4,REG6)(hi)
		//0x2098		TNSFilter_End
0xFFC0E580,	//0x2098		VoC_NAD	|	VoC_return
		//0x209a		Coolsand_AACFindSyncWord
0x14241401,	//0x209a		VoC_lw16_d(REG1,0x1424)
0x505A0788,	//0x209c		VoC_sub16_rd(REG0,REG1,0x505a)
0x00001807,	//0x209e		VoC_lw16i_set_inc(REG3,0x0,0x1)
		//0x20a0		AACFindSyncWord_loop
0x20A93483,	//0x20a0		VoC_bngt16_rr(AACFindSyncWord_loop_End,REG0,REG3)
0xE2F1E242,	//0x20a2		VoC_rb_i(REG5,0xc,DEFAULT)	|	VoC_lbinc_p(REG2)
0x506B4035,	//0x20a4		VoC_be16_rd(AACFindSyncWord_End,REG5,0x506b)
0xDE1862A2,	//0x20a6		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x8,DEFAULT)
0xF7E3E5F8,	//0x20a8		VoC_lw16i_short(REG3,0xffffffff,DEFAULT)	|	VoC_jump(AACFindSyncWord_loop)
		//0x20a9		AACFindSyncWord_loop_End
		//0x20aa		AACFindSyncWord_End
0x14221586,	//0x20aa		VoC_sw32_d(RL6,0x1422)
0x1427151B,	//0x20ac		VoC_sw16_d(BITCACHE,0x1427)
0x14261502,	//0x20ae		VoC_sw16_d(REG2,0x1426)
0xDFE9E580,	//0x20b0		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x20b1		vpp_AmjpAacGenerateSinwKbdw
0x50F81808,	//0x20b2		VoC_lw16i_set_inc(REG0,0x50f8,0x2)
0x47441805,	//0x20b4		VoC_lw16i_set_inc(REG1,0x4744,0x1)
0x00801FBE,	//0x20b6		VoC_lw16i_set_inc(REG2,0x80,0xffffffff)
0x00051FBF,	//0x20b8		VoC_lw16i_set_inc(REG3,0x5,0xffffffff)
0x00020A84,	//0x20ba		VoC_lw16i(REG4,0x2)
0x00400A85,	//0x20bc		VoC_lw16i(REG5,0x40)
0x01F42B80,	//0x20be		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0x51F81808,	//0x20c0		VoC_lw16i_set_inc(REG0,0x51f8,0x2)
0x477A1805,	//0x20c2		VoC_lw16i_set_inc(REG1,0x477a,0x1)
0x04001FBE,	//0x20c4		VoC_lw16i_set_inc(REG2,0x400,0xffffffff)
0x00041FBF,	//0x20c6		VoC_lw16i_set_inc(REG3,0x4,0xffffffff)
0x00020A84,	//0x20c8		VoC_lw16i(REG4,0x2)
0x02000A85,	//0x20ca		VoC_lw16i(REG5,0x200)
0x01F42B80,	//0x20cc		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0x59F81808,	//0x20ce		VoC_lw16i_set_inc(REG0,0x59f8,0x2)
0x48881805,	//0x20d0		VoC_lw16i_set_inc(REG1,0x4888,0x1)
0x00801FBE,	//0x20d2		VoC_lw16i_set_inc(REG2,0x80,0xffffffff)
0x00071FBF,	//0x20d4		VoC_lw16i_set_inc(REG3,0x7,0xffffffff)
0x00020A84,	//0x20d6		VoC_lw16i(REG4,0x2)
0x00400A85,	//0x20d8		VoC_lw16i(REG5,0x40)
0x01F42B80,	//0x20da		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0x5AF81808,	//0x20dc		VoC_lw16i_set_inc(REG0,0x5af8,0x2)
0x48E41805,	//0x20de		VoC_lw16i_set_inc(REG1,0x48e4,0x1)
0x04001FBE,	//0x20e0		VoC_lw16i_set_inc(REG2,0x400,0xffffffff)
0x00041FBF,	//0x20e2		VoC_lw16i_set_inc(REG3,0x4,0xffffffff)
0x00020A84,	//0x20e4		VoC_lw16i(REG4,0x2)
0x02000A85,	//0x20e6		VoC_lw16i(REG5,0x200)
0x01F42B80,	//0x20e8		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0xFFC0DFA9,	//0x20ea		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDFE9E580,	//0x20ec		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x20ed		vpp_AmjpAacGenerateCos4Sin4
0x50F81808,	//0x20ee		VoC_lw16i_set_inc(REG0,0x50f8,0x2)
0x45C41805,	//0x20f0		VoC_lw16i_set_inc(REG1,0x45c4,0x1)
0x00801FBE,	//0x20f2		VoC_lw16i_set_inc(REG2,0x80,0xffffffff)
0x00051FBF,	//0x20f4		VoC_lw16i_set_inc(REG3,0x5,0xffffffff)
0x00040A84,	//0x20f6		VoC_lw16i(REG4,0x4)
0x00200A85,	//0x20f8		VoC_lw16i(REG5,0x20)
0x01F42B80,	//0x20fa		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0x51F81808,	//0x20fc		VoC_lw16i_set_inc(REG0,0x51f8,0x2)
0x46261805,	//0x20fe		VoC_lw16i_set_inc(REG1,0x4626,0x1)
0x04001FBE,	//0x2100		VoC_lw16i_set_inc(REG2,0x400,0xffffffff)
0x00041FBF,	//0x2102		VoC_lw16i_set_inc(REG3,0x4,0xffffffff)
0x00040A84,	//0x2104		VoC_lw16i(REG4,0x4)
0x01000A85,	//0x2106		VoC_lw16i(REG5,0x100)
0x01F42B80,	//0x2108		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0xFFC0DFA9,	//0x210a		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDFE9E580,	//0x210c		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x210d		vpp_AmjpAacGenerateTwidOdd
0x5BD81808,	//0x210e		VoC_lw16i_set_inc(REG0,0x5bd8,0x2)
0x4A0C1805,	//0x2110		VoC_lw16i_set_inc(REG1,0x4a0c,0x1)
0x03001FBE,	//0x2112		VoC_lw16i_set_inc(REG2,0x300,0xffffffff)
0x00061FBF,	//0x2114		VoC_lw16i_set_inc(REG3,0x6,0xffffffff)
0x00060A84,	//0x2116		VoC_lw16i(REG4,0x6)
0x00800A85,	//0x2118		VoC_lw16i(REG5,0x80)
0x01F42B80,	//0x211a		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0x1808DFA9,	//0x211c		VoC_lw16i_set_inc(REG0,0x5bd8,0x2)(lo)	|	VoC_pop16(RA,DEFAULT)
0x18095BD8,	//0x211e		VoC_lw16i_set_inc(REG1,0x5a58,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x5bd8,0x2)(hi)
0x0A845A58,	//0x2120		VoC_lw16i(REG4,0x22)(lo)	|	VoC_lw16i_set_inc(REG1,0x5a58,0x2)(hi)
0xFFC00022,	//0x2122		VoC_NAD	|	VoC_lw16i(REG4,0x22)(hi)
0x212B2C41,	//0x2124		VoC_loop_i(0x1,0x20)
0xD9C468C3,	//0x2126		VoC_lw32inc_p(ACC0,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x6,DEFAULT)
0xDDCCD9C4,	//0x2128		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
		//0x2129		VoC_endloop0
0xFFC0C020,	//0x212a		VoC_NOP	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
		//0x212b		VoC_endloop1
0x5A581808,	//0x212c		VoC_lw16i_set_inc(REG0,0x5a58,0x2)
0x59F81809,	//0x212e		VoC_lw16i_set_inc(REG1,0x59f8,0x2)
0x21372C11,	//0x2130		VoC_loop_i(0x1,0x8)
0xD9C468C3,	//0x2132		VoC_lw32inc_p(ACC0,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x6,DEFAULT)
0xDDCCD9C4,	//0x2134		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
		//0x2135		VoC_endloop0
0xFFC0C020,	//0x2136		VoC_NOP	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
		//0x2137		VoC_endloop1
0xDFE9E580,	//0x2138		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x2139		vpp_AmjpAacGenerateTwidEven
0x5AE81808,	//0x213a		VoC_lw16i_set_inc(REG0,0x5ae8,0x2)
0x4B941805,	//0x213c		VoC_lw16i_set_inc(REG1,0x4b94,0x1)
0x01801FBE,	//0x213e		VoC_lw16i_set_inc(REG2,0x180,0xffffffff)
0x00071FBF,	//0x2140		VoC_lw16i_set_inc(REG3,0x7,0xffffffff)
0x00060A84,	//0x2142		VoC_lw16i(REG4,0x6)
0x00400A85,	//0x2144		VoC_lw16i(REG5,0x40)
0x01F42B80,	//0x2146		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0x1808DFA9,	//0x2148		VoC_lw16i_set_inc(REG0,0x5ae8,0x2)(lo)	|	VoC_pop16(RA,DEFAULT)
0x18095AE8,	//0x214a		VoC_lw16i_set_inc(REG1,0x5a28,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x5ae8,0x2)(hi)
0x0A845A28,	//0x214c		VoC_lw16i(REG4,0x22)(lo)	|	VoC_lw16i_set_inc(REG1,0x5a28,0x2)(hi)
0xFFC00022,	//0x214e		VoC_NAD	|	VoC_lw16i(REG4,0x22)(hi)
0x21572C21,	//0x2150		VoC_loop_i(0x1,0x10)
0xD9C468C3,	//0x2152		VoC_lw32inc_p(ACC0,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x6,DEFAULT)
0xDDCCD9C4,	//0x2154		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
		//0x2155		VoC_endloop0
0xFFC0C020,	//0x2156		VoC_NOP	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
		//0x2157		VoC_endloop1
0x5A281808,	//0x2158		VoC_lw16i_set_inc(REG0,0x5a28,0x2)
0x59F81809,	//0x215a		VoC_lw16i_set_inc(REG1,0x59f8,0x2)
0x21632C09,	//0x215c		VoC_loop_i(0x1,0x4)
0xD9C468C3,	//0x215e		VoC_lw32inc_p(ACC0,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x6,DEFAULT)
0xDDCCD9C4,	//0x2160		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
		//0x2161		VoC_endloop0
0xFFC0C020,	//0x2162		VoC_NOP	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
		//0x2163		VoC_endloop1
0xDFE9E580,	//0x2164		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x2165		vpp_AmjpAacGenerateCos1
0x59F81808,	//0x2166		VoC_lw16i_set_inc(REG0,0x59f8,0x2)
0x45381805,	//0x2168		VoC_lw16i_set_inc(REG1,0x4538,0x1)
0x02021FBE,	//0x216a		VoC_lw16i_set_inc(REG2,0x202,0xffffffff)
0x00041FBF,	//0x216c		VoC_lw16i_set_inc(REG3,0x4,0xffffffff)
0x00020A84,	//0x216e		VoC_lw16i(REG4,0x2)
0x01010A85,	//0x2170		VoC_lw16i(REG5,0x101)
0x01F42B80,	//0x2172		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0xFFC0DFA9,	//0x2174		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDF40E580,	//0x2176		VoC_push32(REG01,DEFAULT)	|	VoC_return
		//0x2177		vpp_AmjpAacGenerateBitRev
0x1804DF41,	//0x2178		VoC_lw16i_set_inc(REG0,0x4cb2,0x1)(lo)	|	VoC_push32(REG23,DEFAULT)
0x18094CB2,	//0x217a		VoC_lw16i_set_inc(REG1,0x59f8,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x4cb2,0x1)(hi)
0xFFC059F8,	//0x217c		VoC_NAD	|	VoC_lw16i_set_inc(REG1,0x59f8,0x2)(hi)
0x21862C94,	//0x217e		VoC_loop_i(0x0,0x4a)
0xD8035882,	//0x2180		VoC_lw16_p(REG3,REG0,IN_PARALLEL)	|	VoC_lw16inc_p(REG2,REG0,DEFAULT)
0x7942F9C2,	//0x2182		VoC_shru16_ri(REG2,0x8,DEFAULT)	|	VoC_shru16_ri(REG2,0xfffffff8,DEFAULT)
0xFFC0F943,	//0x2184		VoC_NOP	|	VoC_shru16_ri(REG3,0x8,IN_PARALLEL)
		//0x2186		VoC_endloop0
0xDF01DDC9,	//0x2186		VoC_pop32(REG23,DEFAULT)	|	VoC_sw32inc_p(REG23,REG1,DEFAULT)
0xE580DF00,	//0x2188		VoC_return	|	VoC_pop32(REG01,DEFAULT)
		//0x218a		vpp_AmjpAacGenerateHuffTabSpecInfo
0xDFDB5F46,	//0x218a		VoC_push16(BITCACHE,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0xF4035F40,	//0x218c		VoC_lw16i_short(BITCACHE,0x0,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xE0F55F42,	//0x218e		VoC_lw16i_short(REG5,0xf,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0x4EEA1805,	//0x2190		VoC_lw16i_set_inc(REG1,0x4eea,0x1)
0x50F81804,	//0x2192		VoC_lw16i_set_inc(REG0,0x50f8,0x1)
0x0A83E241,	//0x2194		VoC_lw16i(REG3,0xff)(lo)	|	VoC_lbinc_p(REG1)
0x2DE400FF,	//0x2196		VoC_loop_i(0x0,0xf2)(lo)	|	VoC_lw16i(REG3,0xff)(hi)
0xE24121A3,	//0x2198		VoC_lbinc_p(REG1)	|	VoC_loop_i(0x0,0xf2)(hi)
0x35A5E290,	//0x219a		VoC_bne16_rr(HuffTabSpecInfo_write_sample,REG4,REG5)(lo)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0xE2A021A3,	//0x219c		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_bne16_rr(HuffTabSpecInfo_write_sample,REG4,REG5)(hi)
0x21A335A3,	//0x219e		VoC_bne16_rr(HuffTabSpecInfo_write_sample,REG4,REG3)
0xE280E241,	//0x21a0		VoC_rbinc_i(REG4,0x10,DEFAULT)	|	VoC_lbinc_p(REG1)
0xDC84FFC0,	//0x21a2		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_NOP
		//0x21a3		HuffTabSpecInfo_write_sample
		//0x21a3		VoC_endloop0
0xDF00DF02,	//0x21a4		VoC_pop32(REG01,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0xDF9B5F06,	//0x21a6		VoC_pop16(BITCACHE,IN_PARALLEL)	|	VoC_pop32(RL6,DEFAULT)
0xDF40E580,	//0x21a8		VoC_push32(REG01,DEFAULT)	|	VoC_return
		//0x21a9		vpp_AmjpAacGenerateSfBandLong
0xDF42DF41,	//0x21aa		VoC_push32(REG45,DEFAULT)	|	VoC_push32(REG23,DEFAULT)
0xDFE95F43,	//0x21ac		VoC_push16(RA,IN_PARALLEL)	|	VoC_push32(REG67,DEFAULT)
0x59F81808,	//0x21ae		VoC_lw16i_set_inc(REG0,0x59f8,0x2)
0x4E741805,	//0x21b0		VoC_lw16i_set_inc(REG1,0x4e74,0x1)
0x01461FBE,	//0x21b2		VoC_lw16i_set_inc(REG2,0x146,0xffffffff)
0x00021FBF,	//0x21b4		VoC_lw16i_set_inc(REG3,0x2,0xffffffff)
0x00010A84,	//0x21b6		VoC_lw16i(REG4,0x1)
0x01460A85,	//0x21b8		VoC_lw16i(REG5,0x146)
0x01F42B80,	//0x21ba		VoC_jal(vpp_AmjpDecompressVssAdpcmTable)
0x59F81808,	//0x21bc		VoC_lw16i_set_inc(REG0,0x59f8,0x2)
0x59F81805,	//0x21be		VoC_lw16i_set_inc(REG1,0x59f8,0x1)
0x21C52D46,	//0x21c0		VoC_loop_i(0x0,0xa3)
0xD9C4D9C4,	//0x21c2		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xDC98DC98,	//0x21c4		VoC_sw16inc_p(ACC0_LO,REG1,DEFAULT)	|	VoC_sw16inc_p(ACC0_LO,REG1,DEFAULT)
		//0x21c5		VoC_endloop0
0xDFA95F03,	//0x21c6		VoC_pop16(RA,IN_PARALLEL)	|	VoC_pop32(REG67,DEFAULT)
0xDF01DF02,	//0x21c8		VoC_pop32(REG23,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0xE580DF00,	//0x21ca		VoC_return	|	VoC_pop32(REG01,DEFAULT)
