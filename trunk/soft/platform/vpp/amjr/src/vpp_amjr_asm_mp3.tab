		//0x1200		VoC_code_section_2
		//0x1200		vpp_AmjrMp3Encode
0x6C05DFE9,	//0x1200		VoC_bez16_d(LABLE_AFTER_MP3INIT,0x4001)(lo)	|	VoC_push16(RA,DEFAULT)
0xFFC04001,	//0x1202		VoC_NAD	|	VoC_bez16_d(LABLE_AFTER_MP3INIT,0x4001)(hi)
0x13582B80,	//0x1204		VoC_jal(MP3_reset)
		//0x1206		LABLE_AFTER_MP3INIT
0x5DB06C12,	//0x1206		VoC_bez16_d(L3_compress_L0,0x5db0)
0x00000AC7,	//0x1208		VoC_lw16i(REG7,0x8000)
0xE0157C83,	//0x120a		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0x5DB00B9B,	//0x120c		VoC_sub32_dr(REG67,0x5db0,REG67)
0x5DAE6433,	//0x120e		VoC_bnlt32_rd(L3_compress_L1,REG67,0x5dae)
0x5DB01483,	//0x1210		VoC_lw32_d(REG67,0x5db0)
0xFFC0F005,	//0x1212		VoC_NAD	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
		//0x1214		L3_compress_L1
0x5DAE0B9B,	//0x1214		VoC_sub32_dr(REG67,0x5dae,REG67)
0x5CD61505,	//0x1216		VoC_sw16_d(REG5,0x5cd6)
		//0x1218		L3_compress_L0
0x442AF042,	//0x1218		VoC_bne16_rd(LABLE_MP3_MONO,REG2,0x4009)(lo)	|	VoC_lw16i_short(REG2,0x2,DEFAULT)
0x2B004009,	//0x121a		VoC_jump_lg(LABLE_MP3_STERO)(lo)	|	VoC_bne16_rd(LABLE_MP3_MONO,REG2,0x4009)(hi)
0xFFC0124E,	//0x121c		VoC_NAD	|	VoC_jump_lg(LABLE_MP3_STERO)(hi)
		//0x121e		LABLE_MP3_MONO
0x40021485,	//0x121e		VoC_lw32_d(ACC1,0x4002)
0x01200A82,	//0x1220		VoC_lw16i(REG2,0x120)
0x09E80A83,	//0x1222		VoC_lw16i(REG3,0x9e8)
0x15C1FF46,	//0x1224		VoC_sw32_d(REG23,0xffc2)(lo)	|	VoC_lw32z(RL6,DEFAULT)
0x15C57FC2,	//0x1226		VoC_sw32_d(ACC1,0xffc4)(lo)	|	VoC_sw32_d(REG23,0xffc2)(hi)
0xDE807FC4,	//0x1228		VoC_cfg(0x0)	|	VoC_sw32_d(ACC1,0xffc4)(hi)
0x1794FFC0,	//0x122a		VoC_cfg_lg(0x8,)(lo)	|	VoC_NOP
0xC0D30008,	//0x122c		VoC_add16_rr(REG3,REG3,REG2,DEFAULT)	|	VoC_cfg_lg(0x8,)(hi)
0x04800A8C,	//0x122e		VoC_lw16i(RL6_LO,0x480)
0x7FC215C1,	//0x1230		VoC_sw32_d(REG23,0xffc2)
0x7FC415C5,	//0x1232		VoC_sw32_d(ACC1,0xffc4)
0xFFC0DE80,	//0x1234		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x1236		VoC_cfg_lg(0x8,)
0xC975C0D3,	//0x1238		VoC_add32_rr(ACC1,ACC1,RL6,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG2,DEFAULT)
0x7FC215C1,	//0x123a		VoC_sw32_d(REG23,0xffc2)
0x7FC415C5,	//0x123c		VoC_sw32_d(ACC1,0xffc4)
0xFFC0DE80,	//0x123e		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x1240		VoC_cfg_lg(0x8,)
0xFFC0C0D3,	//0x1242		VoC_NOP	|	VoC_add16_rr(REG3,REG3,REG2,DEFAULT)
0x7FC215C1,	//0x1244		VoC_sw32_d(REG23,0xffc2)
0x7FC415C5,	//0x1246		VoC_sw32_d(ACC1,0xffc4)
0xFFC0DE80,	//0x1248		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x124a		VoC_cfg_lg(0x8,)
0x12922B00,	//0x124c		VoC_jump_lg(LABLE_MP3_ENC_BEGIN)
		//0x124e		LABLE_MP3_STERO
0x40021485,	//0x124e		VoC_lw32_d(ACC1,0x4002)
0x02400A84,	//0x1250		VoC_lw16i(REG4,0x240)
0x31330A85,	//0x1252		VoC_lw16i(REG5,0x3133)
0x15C2FF46,	//0x1254		VoC_sw32_d(REG45,0xffc2)(lo)	|	VoC_lw32z(RL6,DEFAULT)
0x15C57FC2,	//0x1256		VoC_sw32_d(ACC1,0xffc4)(lo)	|	VoC_sw32_d(REG45,0xffc2)(hi)
0xDE807FC4,	//0x1258		VoC_cfg(0x0)	|	VoC_sw32_d(ACC1,0xffc4)(hi)
0x09000A8C,	//0x125a		VoC_lw16i(RL6_LO,0x900)
0x00081794,	//0x125c		VoC_cfg_lg(0x8,)
0x62661808,	//0x125e		VoC_lw16i_set_inc(REG0,0x6266,0x2)
0x13D01805,	//0x1260		VoC_lw16i_set_inc(REG1,0x13d0,0x1)
0xFF1759C2,	//0x1262		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x16101806,	//0x1264		VoC_lw16i_set_inc(REG2,0x1610,0x1)
0xFFC0C975,	//0x1266		VoC_NAD	|	VoC_add32_rr(ACC1,ACC1,RL6,DEFAULT)
0x12752D20,	//0x1268		VoC_loop_i(0x0,0x90)
0xDC9459C3,	//0x126a		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xD9C25CA5,	//0x126c		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG5,REG2,DEFAULT)
0xD9C35C96,	//0x126e		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
0x5C94DCA7,	//0x1270		VoC_sw16inc_p(REG4,REG1,DEFAULT)	|	VoC_sw16inc_p(REG7,REG2,DEFAULT)
0xDCA5D9C2,	//0x1272		VoC_sw16inc_p(REG5,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0xDCA7DC96,	//0x1274		VoC_sw16inc_p(REG7,REG2,DEFAULT)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
		//0x1275		VoC_endloop0
0x7FC215C7,	//0x1276		VoC_sw32_d(RL7,0xffc2)
0x7FC415C5,	//0x1278		VoC_sw32_d(ACC1,0xffc4)
0x1808DE80,	//0x127a		VoC_lw16i_set_inc(REG0,0x6266,0x2)(lo)	|	VoC_cfg(0x0)
0x17946266,	//0x127c		VoC_cfg_lg(0x8,)(lo)	|	VoC_lw16i_set_inc(REG0,0x6266,0x2)(hi)
0x18050008,	//0x127e		VoC_lw16i_set_inc(REG1,0x1850,0x1)(lo)	|	VoC_cfg_lg(0x8,)(hi)
0xD9C21850,	//0x1280		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x1850,0x1)(hi)
0x1A901806,	//0x1282		VoC_lw16i_set_inc(REG2,0x1a90,0x1)
0x12912D20,	//0x1284		VoC_loop_i(0x0,0x90)
0xDC9459C3,	//0x1286		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xD9C25CA5,	//0x1288		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG5,REG2,DEFAULT)
0xD9C35C96,	//0x128a		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
0x5C94DCA7,	//0x128c		VoC_sw16inc_p(REG4,REG1,DEFAULT)	|	VoC_sw16inc_p(REG7,REG2,DEFAULT)
0xDCA5D9C2,	//0x128e		VoC_sw16inc_p(REG5,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0xDCA7DC96,	//0x1290		VoC_sw16inc_p(REG7,REG2,DEFAULT)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
		//0x1291		VoC_endloop0
		//0x1292		LABLE_MP3_ENC_BEGIN
0x5DB21404,	//0x1292		VoC_lw16_d(REG4,0x5db2)
0x5CD60724,	//0x1294		VoC_add16_rd(REG4,REG4,0x5cd6)
0xE00078EC,	//0x1296		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0xfffffffd,DEFAULT)
0x01200A82,	//0x1298		VoC_lw16i(REG2,0x120)
0x780EC316,	//0x129a		VoC_shr16_ri(REG6,0x1,DEFAULT)	|	VoC_sub16_rr(REG6,REG4,REG2,DEFAULT)
0x1504E004,	//0x129c		VoC_sw16_d(REG4,0xf30)(lo)	|	VoC_lw16i_short(REG4,0x0,IN_PARALLEL)
0x15000F30,	//0x129e		VoC_sw16_d(REG0,0xf1c)(lo)	|	VoC_sw16_d(REG4,0xf30)(hi)
0x0A820F1C,	//0x12a0		VoC_lw16i(REG2,0x4f54)(lo)	|	VoC_sw16_d(REG0,0xf1c)(hi)
0x0A834F54,	//0x12a2		VoC_lw16i(REG3,0x5854)(lo)	|	VoC_lw16i(REG2,0x4f54)(hi)
0x0A875854,	//0x12a4		VoC_lw16i(REG7,0x1cd0)(lo)	|	VoC_lw16i(REG3,0x5854)(hi)
0x18041CD0,	//0x12a6		VoC_lw16i_set_inc(REG0,0x13d0,0x1)(lo)	|	VoC_lw16i(REG7,0x1cd0)(hi)
0x5FC713D0,	//0x12a8		VoC_push16(REG7,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x13d0,0x1)(hi)
0xDFC6E015,	//0x12aa		VoC_push16(REG6,DEFAULT)	|	VoC_lw16i_short(REG5,0x1,IN_PARALLEL)
0xDFC45F41,	//0x12ac		VoC_push16(REG4,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xDFC55F42,	//0x12ae		VoC_push16(REG5,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0x5FC4DFC3,	//0x12b0		VoC_push16(REG4,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0x5FC7DF41,	//0x12b2		VoC_push16(REG7,DEFAULT)	|	VoC_push32(REG23,IN_PARALLEL)
0x1808DF40,	//0x12b4		VoC_lw16i_set_inc(REG0,0x25e0,0x2)(lo)	|	VoC_push32(REG01,IN_PARALLEL)
0x180525E0,	//0x12b6		VoC_lw16i_set_inc(REG1,0x820,0x1)(lo)	|	VoC_lw16i_set_inc(REG0,0x25e0,0x2)(hi)
0x1FBE0820,	//0x12b8		VoC_lw16i_set_inc(REG2,0xfa,0xffffffff)(lo)	|	VoC_lw16i_set_inc(REG1,0x820,0x1)(hi)
0x1FBF00FA,	//0x12ba		VoC_lw16i_set_inc(REG3,0x3,0xffffffff)(lo)	|	VoC_lw16i_set_inc(REG2,0xfa,0xffffffff)(hi)
0x70240003,	//0x12bc		VoC_lw16i_short(REG4,0x1,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0x3,0xffffffff)(hi)
0xF026F645,	//0x12be		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG5,REG2,IN_PARALLEL)
0x00D62B80,	//0x12c0		VoC_jal(vpp_AmjrDecompressVssAdpcmTable)
0xDF005F87,	//0x12c2		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xDF015F84,	//0x12c4		VoC_pop32(REG23,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
		//0x12c6		LABEL_L3_compress_LOOP2
0xFF445FC0,	//0x12c6		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x0F441809,	//0x12c8		VoC_lw16i_set_inc(REG1,0xf44,0x2)
0x12CF2C05,	//0x12ca		VoC_loop_i(0x1,0x2)
0xDA6768E2,	//0x12cc		VoC_sw16_sd(REG7,0x5,IN_PARALLEL)	|	VoC_loop_i_short(0x7,DEFAULT)
		//0x12ce		VoC_endloop0
0x1FB9DDCC,	//0x12ce		VoC_lw16i_set_inc(REG1,0x1342,0xfffffffe)(lo)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
		//0x12cf		VoC_endloop1
0x56351342,	//0x12d0		VoC_lw16_sd(REG5,0x2,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x1342,0xfffffffe)(hi)
0x5A44DD11,	//0x12d2		VoC_sw16_sd(REG4,0x3,DEFAULT)	|	VoC_sw32_sd(REG23,0x1,IN_PARALLEL)
0xFFC0E004,	//0x12d4		VoC_NAD	|	VoC_lw16i_short(REG4,0x0,IN_PARALLEL)
		//0x12d6		LABEL_L3_compress_LOOP1
0xF0085A23,	//0x12d6		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_sw16_sd(REG3,0x1,DEFAULT)
0xDA105D0A,	//0x12d8		VoC_sw16_sd(REG0,0x0,IN_PARALLEL)	|	VoC_sw32_sd(REG45,0x0,DEFAULT)
0x142F2B80,	//0x12da		VoC_jal(L3_window_filter_subband)
0xD623590A,	//0x12dc		VoC_lw16_sd(REG3,0x1,IN_PARALLEL)	|	VoC_lw32_sd(REG45,0x0,DEFAULT)
0x0EB90724,	//0x12de		VoC_add16_rd(REG4,REG4,0xeb9)
0x0AE8071B,	//0x12e0		VoC_add16_rd(REG3,REG3,0xae8)
0x0700D610,	//0x12e2		VoC_add16_rd(REG0,REG0,0xec2)(lo)	|	VoC_lw16_sd(REG0,0x0,DEFAULT)
0x4B0C0EC2,	//0x12e4		VoC_blt16_rd(LABEL_L3_compress_LOOP1,REG4,0xec4)(lo)	|	VoC_add16_rd(REG0,REG0,0xec2)(hi)
0x07AD0EC4,	//0x12e6		VoC_sub16_rd(REG5,REG5,0xeb9)(lo)	|	VoC_blt16_rd(LABEL_L3_compress_LOOP1,REG4,0xec4)(hi)
0xD9110EB9,	//0x12e8		VoC_lw32_sd(REG23,0x1,DEFAULT)	|	VoC_sub16_rd(REG5,REG5,0xeb9)(hi)
0xF6437004,	//0x12ea		VoC_movreg16(REG3,REG2,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x12D63245,	//0x12ec		VoC_bnltz16_r(LABEL_L3_compress_LOOP1,REG5)
0xFFC0D911,	//0x12ee		VoC_NAD	|	VoC_lw32_sd(REG23,0x1,DEFAULT)
0x16462B80,	//0x12f0		VoC_jal(L3_mdct_sub)
0xE0065647,	//0x12f2		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG7,0x3,DEFAULT)
0x177E2B80,	//0x12f4		VoC_jal(L3_iteration_loop)
0xE0165647,	//0x12f6		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_lw16_sd(REG7,0x3,DEFAULT)
0x177E2B80,	//0x12f8		VoC_jal(L3_iteration_loop)
0xF0085660,	//0x12fa		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG0,0x5,DEFAULT)
0x0F060701,	//0x12fc		VoC_add16_rd(REG1,REG0,0xf06)
0x180AF053,	//0x12fe		VoC_lw16i_set_inc(REG2,0xf44,0x2)(lo)	|	VoC_lw16i_short(INC3,0x2,DEFAULT)
0x180B0F44,	//0x1300		VoC_lw16i_set_inc(REG3,0x5dda,0x2)(lo)	|	VoC_lw16i_set_inc(REG2,0xf44,0x2)(hi)
0xFFC05DDA,	//0x1302		VoC_NAD	|	VoC_lw16i_set_inc(REG3,0x5dda,0x2)(hi)
0x131D2C25,	//0x1304		VoC_loop_i(0x1,0x12)
0xFF026C16,	//0x1306		VoC_movreg32(REG45,REG01,IN_PARALLEL)	|	VoC_loop_i_short(0x20,DEFAULT)
0x59C5D9D4,	//0x1308		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
0xD9CFD9DE,	//0x130a		VoC_lw32inc_p(RL7,REG1,DEFAULT)	|	VoC_lw32inc_p(RL6,REG3,IN_PARALLEL)
0x131433C4,	//0x130c		VoC_bnltz32_r(LABEL_L3_compress_OPP,ACC0)
0x131432C5,	//0x130e		VoC_bngtz32_r(LABEL_L3_compress_OPP,ACC1)
0x0CC40BAD,	//0x1310		VoC_sub32_dr(ACC1,0xcc4,ACC1)
0xDDA5FFC0,	//0x1312		VoC_sw32_p(ACC1,REG4,DEFAULT)	|	VoC_NOP
		//0x1314		LABEL_L3_compress_OPP
0x131C33C6,	//0x1314		VoC_bnltz32_r(LABEL_L3_compress_OPP1,RL6)
0x131C32C7,	//0x1316		VoC_bngtz32_r(LABEL_L3_compress_OPP1,RL7)
0x0CC40BBF,	//0x1318		VoC_sub32_dr(RL7,0xcc4,RL7)
0xDDAFFFC0,	//0x131a		VoC_sw32_p(RL7,REG5,DEFAULT)	|	VoC_NOP
		//0x131c		LABEL_L3_compress_OPP1
		//0x131c		VoC_endloop0
0xF025FF02,	//0x131c		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_movreg32(REG45,REG01,DEFAULT)
		//0x131d		VoC_endloop1
0x18500A80,	//0x131e		VoC_lw16i(REG0,0x1850)
0x0A87D644,	//0x1320		VoC_lw16i(REG7,0x13d0)(lo)	|	VoC_lw16_sd(REG4,0x3,DEFAULT)
0x0A8213D0,	//0x1322		VoC_lw16i(REG2,0x4ad4)(lo)	|	VoC_lw16i(REG7,0x13d0)(hi)
0x0A834AD4,	//0x1324		VoC_lw16i(REG3,0x53d4)(lo)	|	VoC_lw16i(REG2,0x4ad4)(hi)
0x5F8553D4,	//0x1326		VoC_pop16(REG5,DEFAULT)	|	VoC_lw16i(REG3,0x53d4)(hi)
0x4C2CC12C,	//0x1328		VoC_bnlt16_rd(LABLE_COMPILE_10,REG4,0xebd)(lo)	|	VoC_add16_rr(REG4,REG4,REG5,IN_PARALLEL)
0x2B000EBD,	//0x132a		VoC_jump_lg(LABEL_L3_compress_LOOP2)(lo)	|	VoC_bnlt16_rd(LABLE_COMPILE_10,REG4,0xebd)(hi)
0xFFC012C6,	//0x132c		VoC_NAD	|	VoC_jump_lg(LABEL_L3_compress_LOOP2)(hi)
		//0x132e		LABLE_COMPILE_10
0xDF865F02,	//0x132e		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xDF865F01,	//0x1330		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDF86DF86,	//0x1332		VoC_pop16(REG6,DEFAULT)	|	VoC_pop16(REG6,DEFAULT)
0xFFC0DF87,	//0x1334		VoC_NAD	|	VoC_pop16(REG7,DEFAULT)
0x1B712B80,	//0x1336		VoC_jal(CS_L3_format_bitstream)
0x0F1C1406,	//0x1338		VoC_lw16_d(REG6,0xf1c)
0xE00378FE,	//0x133a		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
0x0EE20732,	//0x133c		VoC_add16_rd(REG2,REG6,0xee2)
0xF8F2F822,	//0x133e		VoC_shr16_ri(REG2,0xfffffffe,DEFAULT)	|	VoC_shr16_ri(REG2,0x4,DEFAULT)
0x1485F007,	//0x1340		VoC_lw32_d(ACC1,0x4004)(lo)	|	VoC_lw16i_short(REG7,0x0,DEFAULT)
0x15C14004,	//0x1342		VoC_sw32_d(REG23,0xffc2)(lo)	|	VoC_lw32_d(ACC1,0x4004)(hi)
0x15C57FC2,	//0x1344		VoC_sw32_d(ACC1,0xffc4)(lo)	|	VoC_sw32_d(REG23,0xffc2)(hi)
0xDE807FC4,	//0x1346		VoC_cfg(0x0)	|	VoC_sw32_d(ACC1,0xffc4)(hi)
0x09000A84,	//0x1348		VoC_lw16i(REG4,0x900)
0x00081794,	//0x134a		VoC_cfg_lg(0x8,)
0xE0055FA9,	//0x134c		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0x441AF042,	//0x134e		VoC_bne16_rd(LABLE_CONSUME_LEN,REG2,0x4009)(lo)	|	VoC_lw16i_short(REG2,0x2,DEFAULT)
0xFDFA4009,	//0x1350		VoC_shru32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_bne16_rd(LABLE_CONSUME_LEN,REG2,0x4009)(hi)
		//0x1352		LABLE_CONSUME_LEN
0x40201583,	//0x1352		VoC_sw32_d(REG67,0x4020)
0x40221582,	//0x1354		VoC_sw32_d(REG45,0x4022)
0xE580FFC0,	//0x1356		VoC_return	|	VoC_NOP
		//0x1358		MP3_reset
0xF01CF000,	//0x1358		VoC_lw16i_short(WRAP0,0x0,DEFAULT)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0xF01EF01D,	//0x135a		VoC_lw16i_short(WRAP2,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP1,0x0,DEFAULT)
0x1540F01F,	//0x135c		VoC_sw16_d(REG0,0xffc1)(lo)	|	VoC_lw16i_short(WRAP3,0x0,DEFAULT)
0x0A967FC1,	//0x135e		VoC_lw16i(STATUS,0x3f)(lo)	|	VoC_sw16_d(REG0,0xffc1)(hi)
0x0AC9003F,	//0x1360		VoC_lw16i(ACC0_HI,0xac44)(lo)	|	VoC_lw16i(STATUS,0x3f)(hi)
0x7C842C44,	//0x1362		VoC_shru32_ri(ACC0,0x10,DEFAULT)	|	VoC_lw16i(ACC0_HI,0xac44)(hi)
0xF01BE002,	//0x1364		VoC_lw16i_short(BITCACHE,0x0,DEFAULT)	|	VoC_lw16i_short(REG2,0x0,IN_PARALLEL)
0x5CD61502,	//0x1366		VoC_sw16_d(REG2,0x5cd6)
0x40065D34,	//0x1368		VoC_bne32_rd(MP3_reset_L0,ACC0,0x4006)
0x0A83F002,	//0x136a		VoC_lw16i(REG3,0x1a1)(lo)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x0A8701A1,	//0x136c		VoC_lw16i(REG7,0x7ac7)(lo)	|	VoC_lw16i(REG3,0x1a1)(hi)
0x0AC57AC7,	//0x136e		VoC_lw16i(REG5,0xffff8539)(lo)	|	VoC_lw16i(REG7,0x7ac7)(hi)
0x7C830539,	//0x1370		VoC_shru32_ri(REG67,0x10,DEFAULT)	|	VoC_lw16i(REG5,0xffff8539)(hi)
0x1502FA82,	//0x1372		VoC_sw16_d(REG2,0x5cd5)(lo)	|	VoC_shr32_ri(REG45,0x10,IN_PARALLEL)
0x15035CD5,	//0x1374		VoC_sw16_d(REG3,0x5db2)(lo)	|	VoC_sw16_d(REG2,0x5cd5)(hi)
0x15835DB2,	//0x1376		VoC_sw32_d(REG67,0x5db0)(lo)	|	VoC_sw16_d(REG3,0x5db2)(hi)
0x15825DB0,	//0x1378		VoC_sw32_d(REG45,0x5dae)(lo)	|	VoC_sw32_d(REG67,0x5db0)(hi)
0x2B005DAE,	//0x137a		VoC_jump_lg(MP3_reset_L2)(lo)	|	VoC_sw32_d(REG45,0x5dae)(hi)
0xFFC013A4,	//0x137c		VoC_NAD	|	VoC_jump_lg(MP3_reset_L2)(hi)
		//0x137e		MP3_reset_L0
0x7D000A89,	//0x137e		VoC_lw16i(ACC0_HI,0x7d00)
0x3B800ACB,	//0x1380		VoC_lw16i(ACC1_HI,0xbb80)
0xFC857C84,	//0x1382		VoC_shru32_ri(ACC1,0x10,IN_PARALLEL)	|	VoC_shru32_ri(ACC0,0x10,DEFAULT)
0x40065D05,	//0x1384		VoC_bne32_rd(MP3_reset_L1,ACC1,0x4006)
0x1406F021,	//0x1386		VoC_lw16_d(REG6,0x4008)(lo)	|	VoC_lw16i_short(REG1,0x1,DEFAULT)
0x781E4008,	//0x1388		VoC_shr16_ri(REG6,0x3,DEFAULT)	|	VoC_lw16_d(REG6,0x4008)(hi)
0x7F42E183,	//0x138a		VoC_lw32z(REG45,DEFAULT)	|	VoC_lw16i_short(REG3,0x18,IN_PARALLEL)
0x1501C4F3,	//0x138c		VoC_sw16_d(REG1,0x5cd5)(lo)	|	VoC_mult16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x15825CD5,	//0x138e		VoC_sw32_d(REG45,0x5db0)(lo)	|	VoC_sw16_d(REG1,0x5cd5)(hi)
0x15035DB0,	//0x1390		VoC_sw16_d(REG3,0x5db2)(lo)	|	VoC_sw32_d(REG45,0x5db0)(hi)
0xE5D15DB2,	//0x1392		VoC_jump(MP3_reset_L2)	|	VoC_sw16_d(REG3,0x5db2)(hi)
		//0x1394		MP3_reset_L1
0x40065D04,	//0x1394		VoC_bne32_rd(MP3_reset_L2,ACC0,0x4006)
0x1406F041,	//0x1396		VoC_lw16_d(REG6,0x4008)(lo)	|	VoC_lw16i_short(REG1,0x2,DEFAULT)
0x781E4008,	//0x1398		VoC_shr16_ri(REG6,0x3,DEFAULT)	|	VoC_lw16_d(REG6,0x4008)(hi)
0x7F42E243,	//0x139a		VoC_lw32z(REG45,DEFAULT)	|	VoC_lw16i_short(REG3,0x24,IN_PARALLEL)
0x1501C4F3,	//0x139c		VoC_sw16_d(REG1,0x5cd5)(lo)	|	VoC_mult16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x15825CD5,	//0x139e		VoC_sw32_d(REG45,0x5db0)(lo)	|	VoC_sw16_d(REG1,0x5cd5)(hi)
0x15035DB0,	//0x13a0		VoC_sw16_d(REG3,0x5db2)(lo)	|	VoC_sw32_d(REG45,0x5db0)(hi)
0xFFC05DB2,	//0x13a2		VoC_NAD	|	VoC_sw16_d(REG3,0x5db2)(hi)
		//0x13a4		MP3_reset_L2
0x25D01804,	//0x13a4		VoC_lw16i_set_inc(REG0,0x25d0,0x1)
0x00000A81,	//0x13a6		VoC_lw16i(REG1,0x0)
0x00200A82,	//0x13a8		VoC_lw16i(REG2,0x20)
0x00280A83,	//0x13aa		VoC_lw16i(REG3,0x28)
0x00300A84,	//0x13ac		VoC_lw16i(REG4,0x30)
0x00380A85,	//0x13ae		VoC_lw16i(REG5,0x38)
0x00400A86,	//0x13b0		VoC_lw16i(REG6,0x40)
0x00500A87,	//0x13b2		VoC_lw16i(REG7,0x50)
0xDC82DC81,	//0x13b4		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_sw16inc_p(REG1,REG0,DEFAULT)
0xDC84DC83,	//0x13b6		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0xDC86DC85,	//0x13b8		VoC_sw16inc_p(REG6,REG0,DEFAULT)	|	VoC_sw16inc_p(REG5,REG0,DEFAULT)
0x0A81DC87,	//0x13ba		VoC_lw16i(REG1,0x60)(lo)	|	VoC_sw16inc_p(REG7,REG0,DEFAULT)
0x0A820060,	//0x13bc		VoC_lw16i(REG2,0x70)(lo)	|	VoC_lw16i(REG1,0x60)(hi)
0x0A830070,	//0x13be		VoC_lw16i(REG3,0x80)(lo)	|	VoC_lw16i(REG2,0x70)(hi)
0x0A840080,	//0x13c0		VoC_lw16i(REG4,0xa0)(lo)	|	VoC_lw16i(REG3,0x80)(hi)
0x0A8500A0,	//0x13c2		VoC_lw16i(REG5,0xc0)(lo)	|	VoC_lw16i(REG4,0xa0)(hi)
0x0A8600C0,	//0x13c4		VoC_lw16i(REG6,0xe0)(lo)	|	VoC_lw16i(REG5,0xc0)(hi)
0x0A8700E0,	//0x13c6		VoC_lw16i(REG7,0x100)(lo)	|	VoC_lw16i(REG6,0xe0)(hi)
0x0A880100,	//0x13c8		VoC_lw16i(ACC0_LO,0x140)(lo)	|	VoC_lw16i(REG7,0x100)(hi)
0xDC810140,	//0x13ca		VoC_sw16inc_p(REG1,REG0,DEFAULT)	|	VoC_lw16i(ACC0_LO,0x140)(hi)
0xDC83DC82,	//0x13cc		VoC_sw16inc_p(REG3,REG0,DEFAULT)	|	VoC_sw16inc_p(REG2,REG0,DEFAULT)
0xDC85DC84,	//0x13ce		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0xDC87DC86,	//0x13d0		VoC_sw16inc_p(REG7,REG0,DEFAULT)	|	VoC_sw16inc_p(REG6,REG0,DEFAULT)
0x1804DC88,	//0x13d2		VoC_lw16i_set_inc(REG0,0x25d0,0x1)(lo)	|	VoC_sw16inc_p(ACC0_LO,REG0,DEFAULT)
0x140125D0,	//0x13d4		VoC_lw16_d(REG1,0x4008)(lo)	|	VoC_lw16i_set_inc(REG0,0x25d0,0x1)(hi)
0xE9E44008,	//0x13d6		VoC_loop_i_short(0xf,DEFAULT)	|	VoC_lw16_d(REG1,0x4008)(hi)
0x350AD882,	//0x13d8		VoC_be16_rr(MP3_reset_L3,REG1,REG2)(lo)	|	VoC_lw16inc_p(REG2,REG0,DEFAULT)
0xFFC013DC,	//0x13da		VoC_NAD	|	VoC_be16_rr(MP3_reset_L3,REG1,REG2)(hi)
		//0x13db		VoC_endloop0
		//0x13dc		MP3_reset_L3
0x25D00A82,	//0x13dc		VoC_lw16i(REG2,0x25d0)
0x0780C210,	//0x13de		VoC_sub16_rd(REG0,REG0,0xeb9)(lo)	|	VoC_sub16_rr(REG0,REG0,REG2,DEFAULT)
0xFFC00EB9,	//0x13e0		VoC_NOP	|	VoC_sub16_rd(REG0,REG0,0xeb9)(hi)
0x5CD41500,	//0x13e2		VoC_sw16_d(REG0,0x5cd4)
0x0F1A1808,	//0x13e4		VoC_lw16i_set_inc(REG0,0xf1a,0x2)
0xFF447004,	//0x13e6		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x7B800AC7,	//0x13e8		VoC_lw16i(REG7,0xfffffb80)
0xDDC4EAA1,	//0x13ea		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_loop_i_short(0x15,DEFAULT)
		//0x13eb		VoC_endloop0
0x0F2E1507,	//0x13ec		VoC_sw16_d(REG7,0xf2e)
0xE0237022,	//0x13ee		VoC_lw16i_short(REG3,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x1,DEFAULT)
0x40011504,	//0x13f0		VoC_sw16_d(REG4,0x4001)
0x5CDA1504,	//0x13f2		VoC_sw16_d(REG4,0x5cda)
0x5CD81504,	//0x13f4		VoC_sw16_d(REG4,0x5cd8)
0x5CDB1504,	//0x13f6		VoC_sw16_d(REG4,0x5cdb)
0x5CDD1504,	//0x13f8		VoC_sw16_d(REG4,0x5cdd)
0x5CD71502,	//0x13fa		VoC_sw16_d(REG2,0x5cd7)
0x5CD91502,	//0x13fc		VoC_sw16_d(REG2,0x5cd9)
0x5CDE1502,	//0x13fe		VoC_sw16_d(REG2,0x5cde)
0x5CDC1503,	//0x1400		VoC_sw16_d(REG3,0x5cdc)
0x0F2F1503,	//0x1402		VoC_sw16_d(REG3,0xf2f)
0x04001808,	//0x1404		VoC_lw16i_set_inc(REG0,0x400,0x2)
0x06001809,	//0x1406		VoC_lw16i_set_inc(REG1,0x600,0x2)
0x140E2C05,	//0x1408		VoC_loop_i(0x1,0x2)
0x140D2D00,	//0x140a		VoC_loop_i(0x0,0x80)
0xDDCCDDC4,	//0x140c		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x140d		VoC_endloop0
		//0x140e		VoC_endloop1
0x0F261584,	//0x140e		VoC_sw32_d(ACC0,0xf26)
0x5CE01808,	//0x1410		VoC_lw16i_set_inc(REG0,0x5ce0,0x2)
0x14142CCE,	//0x1412		VoC_loop_i(0x0,0x67)
		//0x1414		VoC_endloop0
0xF101DDC4,	//0x1414		VoC_lw16i_short(REG1,0x8,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x0F201584,	//0x1416		VoC_sw32_d(ACC0,0xf20)
0x0F221584,	//0x1418		VoC_sw32_d(ACC0,0xf22)
0x0F241584,	//0x141a		VoC_sw32_d(ACC0,0xf24)
0x0F1D1508,	//0x141c		VoC_sw16_d(ACC0_LO,0xf1d)
0x0F1B1501,	//0x141e		VoC_sw16_d(REG1,0xf1b)
0x0F1E1584,	//0x1420		VoC_sw32_d(ACC0,0xf1e)
0x4AD41808,	//0x1422		VoC_lw16i_set_inc(REG0,0x4ad4,0x2)
0x53D41809,	//0x1424		VoC_lw16i_set_inc(REG1,0x53d4,0x2)
0x142C2C09,	//0x1426		VoC_loop_i(0x1,0x4)
0x142B2D20,	//0x1428		VoC_loop_i(0x0,0x90)
0xDDCCDDC4,	//0x142a		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x142b		VoC_endloop0
		//0x142c		VoC_endloop1
0x0F2C1508,	//0x142c		VoC_sw16_d(ACC0_LO,0xf2c)
0xDFC3E580,	//0x142e		VoC_push16(REG3,DEFAULT)	|	VoC_return
		//0x142f		L3_window_filter_subband
0x0F260A84,	//0x1430		VoC_lw16i(REG4,0xf26)
0x1FB9C12C,	//0x1432		VoC_lw16i_set_inc(REG1,0x400,0xfffffffe)(lo)	|	VoC_add16_rr(REG4,REG4,REG5,DEFAULT)
0x78BD0400,	//0x1434		VoC_shr16_ri(REG5,0xfffffff7,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x400,0xfffffffe)(hi)
0x4069D847,	//0x1436		VoC_add16_rr(REG1,REG1,REG5,DEFAULT)	|	VoC_lw16_p(REG7,REG4,IN_PARALLEL)
0x073DDFC4,	//0x1438		VoC_add16_rd(REG5,REG7,0xee4)(lo)	|	VoC_push16(REG4,IN_PARALLEL)
0x41490EE4,	//0x143a		VoC_add16_rr(REG1,REG5,REG1,DEFAULT)	|	VoC_add16_rd(REG5,REG7,0xee4)(hi)
0x6909F622,	//0x143c		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_movreg16(REG2,REG1,IN_PARALLEL)
0xD9C2F5E1,	//0x143e		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0xfffffffc,IN_PARALLEL)
0x60A4D9C4,	//0x1440		VoC_movreg16(REG4,REG5,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0x6109F685,	//0x1442		VoC_movreg16(ACC0_HI,ACC0_LO,DEFAULT)	|	VoC_movreg16(REG5,REG4,IN_PARALLEL)
0xDDCAF728,	//0x1444		VoC_sw32inc_p(REG45,REG1,DEFAULT)	|	VoC_movreg16(ACC0_LO,ACC0_HI,IN_PARALLEL)
		//0x1446		VoC_endloop0
0x1808DDCC,	//0x1446		VoC_lw16i_set_inc(REG0,0xf44,0x2)(lo)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x07000F44,	//0x1448		VoC_add16_rd(REG0,REG0,0xed5)(lo)	|	VoC_lw16i_set_inc(REG0,0xf44,0x2)(hi)
0x18090ED5,	//0x144a		VoC_lw16i_set_inc(REG1,0x25e0,0x2)(lo)	|	VoC_add16_rd(REG0,REG0,0xed5)(hi)
0x703225E0,	//0x144c		VoC_lw16i_short(INC2,0x1,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x25e0,0x2)(hi)
0x0713F44E,	//0x144e		VoC_add16_rd(REG3,REG2,0xd57)(lo)	|	VoC_lw16i_short(WRAP2,0x9,IN_PARALLEL)
0x713F0D57,	//0x1450		VoC_lw16i_short(WRAP3,0x9,DEFAULT)	|	VoC_add16_rd(REG3,REG2,0xd57)(hi)
0x0A84F3FF,	//0x1452		VoC_lw16i(REG4,0x1f9)(lo)	|	VoC_lw16i_short(INC3,0xffffffff,IN_PARALLEL)
0x413B01F9,	//0x1454		VoC_add16_rr(REG3,REG4,REG7,DEFAULT)	|	VoC_lw16i(REG4,0x1f9)(hi)
0x1603FF46,	//0x1456		VoC_and16_ri(REG3,0x1ff)(lo)	|	VoC_lw32z(RL6,IN_PARALLEL)
0x40D301FF,	//0x1458		VoC_add16_rr(REG3,REG3,REG2,DEFAULT)	|	VoC_and16_ri(REG3,0x1ff)(hi)
0x0A84E395,	//0x145a		VoC_lw16i(REG4,0x3e4)(lo)	|	VoC_lw16i_short(REG5,0x39,IN_PARALLEL)
0x410603E4,	//0x145c		VoC_add16_rr(REG6,REG4,REG0,DEFAULT)	|	VoC_lw16i(REG4,0x3e4)(hi)
0x0712DFC7,	//0x145e		VoC_add16_rd(REG2,REG2,0xed4)(lo)	|	VoC_push16(REG7,IN_PARALLEL)
0x717A0ED4,	//0x1460		VoC_lw16i_short(FORMATX,0xb,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0xed4)(hi)
0xFFC0C0BA,	//0x1462		VoC_NAD	|	VoC_add16_rr(REG2,REG2,REG7,IN_PARALLEL)
0x14822C09,	//0x1464		VoC_loop_i(0x1,0x4)
0x14742E28,	//0x1466		VoC_loop_r(0,REG5)
0xD8A7D98A,	//0x1468		VoC_lw16inc_p(REG7,REG2,DEFAULT)	|	VoC_lw32_p(REG45,REG1,DEFAULT)
0xCDED790C,	//0x146a		VoC_multf32_rr(ACC1,REG7,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA758B7,	//0x146c		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG7,REG3,DEFAULT)
0x790C978A,	//0x146e		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_sub32inc_rp(REG45,RL6,REG1,DEFAULT)
0xCE67CDEC,	//0x1470		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG7,REG5,IN_PARALLEL)
0xF044DDC5,	//0x1472		VoC_lw16i_short(REG4,0x2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
		//0x1474		VoC_endloop0
0xC3A65DB4,	//0x1474		VoC_sub16_rr(REG6,REG6,REG4,IN_PARALLEL)	|	VoC_sw32_p(ACC0,REG6,DEFAULT)
0xD8A7D98A,	//0x1476		VoC_lw16inc_p(REG7,REG2,DEFAULT)	|	VoC_lw32_p(REG45,REG1,DEFAULT)
0xCDED790C,	//0x1478		VoC_multf32_rr(ACC1,REG7,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA758B7,	//0x147a		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG7,REG3,DEFAULT)
0xCDEC5E08,	//0x147c		VoC_multf32_rr(ACC0,REG7,REG5,IN_PARALLEL)	|	VoC_inc_p(REG1,DEFAULT)
0xDDC5CE67,	//0x147e		VoC_sw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xE3F57044,	//0x1480		VoC_lw16i_short(REG5,0x3f,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x2,DEFAULT)
		//0x1482		VoC_endloop1
0xC3A65DB4,	//0x1482		VoC_sub16_rr(REG6,REG6,REG4,IN_PARALLEL)	|	VoC_sw32_p(ACC0,REG6,DEFAULT)
0x01E00A84,	//0x1484		VoC_lw16i(REG4,0x1e0)
0xF4065F83,	//0x1486		VoC_lw16i_short(WRAP2,0x0,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDF86411C,	//0x1488		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG3,DEFAULT)
0x0D572804,	//0x148a		VoC_and16_rd(REG4,0xd57)
0x0F441A00,	//0x148c		VoC_lw16i_set_inc(REG0,0xf44,0x40)
0x13441809,	//0x148e		VoC_lw16i_set_inc(REG1,0x1344,0x2)
0xF6035C64,	//0x1490		VoC_movreg16(REG3,REG0,IN_PARALLEL)	|	VoC_sw16_p(REG4,REG6,DEFAULT)
0x0000180A,	//0x1492		VoC_lw16i_set_inc(REG2,0x0,0x2)
0x149C2C81,	//0x1494		VoC_loop_i(0x1,0x40)
0xFF446903,	//0x1496		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xDE009304,	//0x1498		VoC_inc_p(REG0,DEFAULT)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
		//0x1499		VoC_endloop0
0xF6605E10,	//0x149a		VoC_movreg16(REG0,REG3,IN_PARALLEL)	|	VoC_inc_p(REG2,DEFAULT)
		//0x149c		VoC_endloop1
0xC0105DCC,	//0x149c		VoC_add16_rr(REG0,REG0,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x08000A87,	//0x149e		VoC_lw16i(REG7,0x800)
0xF45A5F83,	//0x14a0		VoC_lw16i_short(FORMATX,0xb,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0x13441808,	//0x14a2		VoC_lw16i_set_inc(REG0,0x1344,0x2)
0x43921809,	//0x14a4		VoC_lw16i_set_inc(REG1,0x4392,0x2)
0x0AE80702,	//0x14a6		VoC_add16_rd(REG2,REG0,0xae8)
0x0EF6071C,	//0x14a8		VoC_add16_rd(REG4,REG3,0xef6)
0xF68C77D2,	//0x14aa		VoC_movreg16(RL6_LO,REG4,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0xfffffffe,DEFAULT)
0xF4075FC7,	//0x14ac		VoC_lw16i_short(WRAP3,0x0,IN_PARALLEL)	|	VoC_push16(REG7,DEFAULT)
0x14EA2C21,	//0x14ae		VoC_loop_i(0x1,0x10)
0xFF447F45,	//0x14b0		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw32z(ACC1,DEFAULT)
0xF5E159C3,	//0x14b2		VoC_lw16i_short(FORMAT32,0xfffffffc,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF00B6910,	//0x14b4		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xD9CA12D3,	//0x14b6		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,REG67,REG2,DEFAULT)
0xCE2F790C,	//0x14b8		VoC_mac32_rr(REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA7790E,	//0x14ba		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEAE59C3,	//0x14bc		VoC_macX_rr(REG5,REG6,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xD9CA12D3,	//0x14be		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,REG67,REG2,DEFAULT)
0xF90C4E2F,	//0x14c0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_mac32_rr(REG5,REG7,DEFAULT)
0xF90E4E67,	//0x14c2		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
		//0x14c4		VoC_endloop0
0xD9C34E6E,	//0x14c4		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x790ED615,	//0x14c6		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_lw16_sd(REG5,0x0,DEFAULT)
0x0700CE3D,	//0x14c8		VoC_add16_rd(REG0,REG0,0xec2)(lo)	|	VoC_mac32_rr(REG7,REG5,IN_PARALLEL)
0x07020EC2,	//0x14ca		VoC_add16_rd(REG2,REG0,0xef1)(lo)	|	VoC_add16_rd(REG0,REG0,0xec2)(hi)
0x69110EF1,	//0x14cc		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_add16_rd(REG2,REG0,0xef1)(hi)
0xD9C3CEB5,	//0x14ce		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_macX_rr(REG6,REG5,IN_PARALLEL)
0xD9CA16D3,	//0x14d0		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_sub32inc_rp(REG67,REG67,REG2,DEFAULT)
0xF90C4E2F,	//0x14d2		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_mac32_rr(REG5,REG7,DEFAULT)
0xF90E4E67,	//0x14d4		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x14d6		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xD9CA16D3,	//0x14d8		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_sub32inc_rp(REG67,REG67,REG2,DEFAULT)
0xCE2F790C,	//0x14da		VoC_mac32_rr(REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA7790E,	//0x14dc		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
		//0x14de		VoC_endloop0
0xCEAE7007,	//0x14de		VoC_macX_rr(REG5,REG6,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x0,DEFAULT)
0x13441808,	//0x14e0		VoC_lw16i_set_inc(REG0,0x1344,0x2)
0xCB654964,	//0x14e2		VoC_sub32_rr(ACC1,ACC1,ACC0,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC1,ACC0,DEFAULT)
0xF7827044,	//0x14e4		VoC_movreg16(REG2,RL6_LO,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x2,DEFAULT)
0xE4074261,	//0x14e6		VoC_lw16i_short(REG7,0x40,IN_PARALLEL)	|	VoC_sub16_rr(REG1,REG1,REG4,DEFAULT)
0xF64C5DD5,	//0x14e8		VoC_movreg16(RL6_LO,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
		//0x14ea		VoC_endloop1
0xDDDC403A,	//0x14ea		VoC_sw32inc_p(ACC0,REG3,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG0,REG7,DEFAULT)
0xE580DF87,	//0x14ec		VoC_return	|	VoC_pop16(REG7,DEFAULT)
		//0x14ee		cii_mdct18
0xFF445FC3,	//0x14ee		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(REG3,DEFAULT)
0x47720A80,	//0x14f0		VoC_lw16i(REG0,0x4772)
0x138C0A81,	//0x14f2		VoC_lw16i(REG1,0x138c)
0x47960A82,	//0x14f4		VoC_lw16i(REG2,0x4796)
0xF45A7799,	//0x14f6		VoC_lw16i_short(FORMATX,0xb,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xfffffffc,DEFAULT)
0x13C21584,	//0x14f8		VoC_sw32_d(ACC0,0x13c2)
0x5DC61584,	//0x14fa		VoC_sw32_d(ACC0,0x5dc6)
0x2C0AF003,	//0x14fc		VoC_loop_i(0x0,0x5)(lo)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0xC01C1558,	//0x14fe		VoC_add16_rr(REG4,REG0,REG3,DEFAULT)	|	VoC_loop_i(0x0,0x5)(hi)
0xD9A2C05E,	//0x1500		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_add16_rr(REG6,REG1,REG3,DEFAULT)
0xF90C59B3,	//0x1502		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x1504		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE2274E67,	//0x1506		VoC_lw16i_short(REG7,0x22,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xC3DC4E6E,	//0x1508		VoC_sub16_rr(REG4,REG7,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xC0664024,	//0x150a		VoC_add16_rr(REG6,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xD9A2FF26,	//0x150c		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0xF90C59B3,	//0x150e		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x1510		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xC09C4E67,	//0x1512		VoC_add16_rr(REG4,REG2,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9A2CE6E,	//0x1514		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xCBA349A6,	//0x1516		VoC_sub32_rr(REG67,RL6,ACC0,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,ACC0,DEFAULT)
0xF90C4D7C,	//0x1518		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90E4E67,	//0x151a		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x442BCE6E,	//0x151c		VoC_bne16_rd(LABLE_COMPILE_1,REG3,0xeba)(lo)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x2B000EBA,	//0x151e		VoC_jump_lg(LABEL_MDCT)(lo)	|	VoC_bne16_rd(LABLE_COMPILE_1,REG3,0xeba)(hi)
0xFFC0155A,	//0x1520		VoC_NAD	|	VoC_jump_lg(LABEL_MDCT)(hi)
		//0x1522		LABLE_COMPILE_1
0x0EBB0B1C,	//0x1522		VoC_sub16_dr(REG4,0xebb,REG3)
0xC0664024,	//0x1524		VoC_add16_rr(REG6,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xD9A2FF27,	//0x1526		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0xF90C59B3,	//0x1528		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x152a		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE1274E67,	//0x152c		VoC_lw16i_short(REG7,0x12,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xC0FC4E6E,	//0x152e		VoC_add16_rr(REG4,REG3,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xC0664024,	//0x1530		VoC_add16_rr(REG6,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xD9A2FF25,	//0x1532		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
0xF90C59B3,	//0x1534		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x1536		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE1074E67,	//0x1538		VoC_lw16i_short(REG7,0x10,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xC3DC4E6E,	//0x153a		VoC_sub16_rr(REG4,REG7,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x4965C0A4,	//0x153c		VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)	|	VoC_add16_rr(REG4,REG2,REG4,DEFAULT)
0x59A2CB63,	//0x153e		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_sub32_rr(REG67,ACC1,ACC0,IN_PARALLEL)
0x790CF90E,	//0x1540		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE67CD7C,	//0x1542		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x0A87CE6E,	//0x1544		VoC_lw16i(REG7,0x13b0)(lo)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x49AA13B0,	//0x1546		VoC_add32_rr(REG45,RL6,ACC1,DEFAULT)	|	VoC_lw16i(REG7,0x13b0)(hi)
0xF146C1DF,	//0x1548		VoC_lw16i_short(REG6,0xa,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG3,IN_PARALLEL)
0xC1F75DBA,	//0x154a		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_sw32_p(REG45,REG7,DEFAULT)
0x0A86CBAA,	//0x154c		VoC_lw16i(REG6,0x5db4)(lo)	|	VoC_sub32_rr(REG45,RL6,ACC1,DEFAULT)
0x5DBA5DB4,	//0x154e		VoC_sw32_p(REG45,REG7,DEFAULT)	|	VoC_lw16i(REG6,0x5db4)(hi)
0x49E2E0A7,	//0x1550		VoC_add32_rr(REG45,RL7,ACC0,DEFAULT)	|	VoC_lw16i_short(REG7,0xa,IN_PARALLEL)
0x4BE5C19E,	//0x1552		VoC_sub32_rr(ACC1,RL7,ACC0,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG3,IN_PARALLEL)
0xDDB2C1BF,	//0x1554		VoC_sw32_p(REG45,REG6,DEFAULT)	|	VoC_add16_rr(REG7,REG6,REG7,IN_PARALLEL)
0x0EBD071B,	//0x1556		VoC_add16_rd(REG3,REG3,0xebd)
		//0x1558		VoC_endloop0
0xFFC0DDBD,	//0x1558		VoC_NAD	|	VoC_sw32_p(ACC1,REG7,DEFAULT)
		//0x155a		LABEL_MDCT
0x13B01808,	//0x155a		VoC_lw16i_set_inc(REG0,0x13b0,0x2)
0x5DB41809,	//0x155c		VoC_lw16i_set_inc(REG1,0x5db4,0x2)
0xC05D401C,	//0x155e		VoC_add16_rr(REG5,REG1,REG3,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG3,DEFAULT)
0x0E64180A,	//0x1560		VoC_lw16i_set_inc(REG2,0xe64,0x2)
0xFF455DA6,	//0x1562		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_sw32_p(RL6,REG4,DEFAULT)
0xFF445DAC,	//0x1564		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_sw32_p(ACC0,REG5,DEFAULT)
0xF00B5F83,	//0x1566		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xE8A1FFC0,	//0x1568		VoC_loop_i_short(0x5,DEFAULT)	|	VoC_NAD
		//0x156a		VoC_endloop0
0x934D1304,	//0x156a		VoC_add32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0xE0847A0C,	//0x156c		VoC_lw16i_short(REG4,0x8,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x1,DEFAULT)
0xC0A27A0D,	//0x156e		VoC_add16_rr(REG2,REG2,REG4,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x1,DEFAULT)
0xDD9DDDDC,	//0x1570		VoC_sw32_p(ACC1,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
0x15942C05,	//0x1572		VoC_loop_i(0x1,0x2)
0xFF457F46,	//0x1574		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0xE88FFFC0,	//0x1576		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_NAD
0xD9CB59D2,	//0x1578		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xF90C4D7C,	//0x157a		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90E4E67,	//0x157c		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x157e		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x49A6F90E,	//0x1580		VoC_add32_rr(RL6,RL6,ACC0,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCE67CD7C,	//0x1582		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0xFFC0CE6E,	//0x1584		VoC_NOP	|	VoC_macX_rr(REG5,REG6,DEFAULT)
		//0x1586		VoC_endloop0
0x079CC965,	//0x1586		VoC_sub16_rd(REG4,REG3,0xebd)(lo)	|	VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)
0xD99C0EBD,	//0x1588		VoC_lw32_p(ACC0,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0xebd)(hi)
0x95244BA6,	//0x158a		VoC_sub32_rp(ACC0,ACC0,REG4,IN_PARALLEL)	|	VoC_sub32_rr(RL6,RL6,ACC0,DEFAULT)
0xDDDCCB65,	//0x158c		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x958E9545,	//0x158e		VoC_sub32_rp(RL6,RL6,REG1,DEFAULT)	|	VoC_sub32_rp(ACC1,ACC1,REG0,DEFAULT)
0xDD9EDDDD,	//0x1590		VoC_sw32_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0x13B00A80,	//0x1592		VoC_lw16i(REG0,0x13b0)
		//0x1594		VoC_endloop1
0x5DB40A81,	//0x1594		VoC_lw16i(REG1,0x5db4)
0x0EBF0700,	//0x1596		VoC_add16_rd(REG0,REG0,0xebf)
0x0EBF0709,	//0x1598		VoC_add16_rd(REG1,REG1,0xebf)
0x59C6D992,	//0x159a		VoC_lw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw32_p(REG45,REG2,DEFAULT)
0x5E00D9CF,	//0x159c		VoC_inc_p(REG0,DEFAULT)	|	VoC_lw32inc_p(RL7,REG1,IN_PARALLEL)
0x1786DE08,	//0x159e		VoC_sub32inc_rp(RL6,RL6,REG0,DEFAULT)	|	VoC_inc_p(REG1,IN_PARALLEL)
0x178397CF,	//0x15a0		VoC_sub32inc_rp(REG67,RL6,REG0,DEFAULT)	|	VoC_sub32inc_rp(RL7,RL7,REG1,IN_PARALLEL)
0x790C97CF,	//0x15a2		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_sub32inc_rp(RL7,RL7,REG1,IN_PARALLEL)
0x4E67CD7C,	//0x15a4		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EF90E,	//0x15a6		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90EFF3B,	//0x15a8		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0xCD7C7F26,	//0x15aa		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0xCE6ECE67,	//0x15ac		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x0EBD079C,	//0x15ae		VoC_sub16_rd(REG4,REG3,0xebd)
0xD99F951C,	//0x15b0		VoC_lw32_p(RL7,REG3,DEFAULT)	|	VoC_sub32_rp(ACC0,ACC0,REG3,DEFAULT)
0xCBBE95E7,	//0x15b2		VoC_sub32_rr(RL6,RL6,RL7,DEFAULT)	|	VoC_sub32_rp(RL7,RL7,REG4,DEFAULT)
0x0712DDDF,	//0x15b4		VoC_add16_rd(REG2,REG2,0xeba)(lo)	|	VoC_sw32inc_p(RL7,REG3,DEFAULT)
0xDDDE0EBA,	//0x15b6		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0xeba)(hi)
0x1808DD9C,	//0x15b8		VoC_lw16i_set_inc(REG0,0x13b0,0x2)(lo)	|	VoC_sw32_p(ACC0,REG3,DEFAULT)
0x180913B0,	//0x15ba		VoC_lw16i_set_inc(REG1,0x5db4,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x13b0,0x2)(hi)
0xFFC05DB4,	//0x15bc		VoC_NAD	|	VoC_lw16i_set_inc(REG1,0x5db4,0x2)(hi)
0x15DD2C05,	//0x15be		VoC_loop_i(0x1,0x2)
0xFF457F46,	//0x15c0		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0xE88FFFC0,	//0x15c2		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_NAD
0xD9CB59D2,	//0x15c4		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xCD7C790C,	//0x15c6		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xF90E4E67,	//0x15c8		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x15ca		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x4D7CF90E,	//0x15cc		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCE67C9A6,	//0x15ce		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_add32_rr(RL6,RL6,ACC0,IN_PARALLEL)
0xFFC0CE6E,	//0x15d0		VoC_NOP	|	VoC_macX_rr(REG5,REG6,DEFAULT)
		//0x15d2		VoC_endloop0
0x079CC965,	//0x15d2		VoC_sub16_rd(REG4,REG3,0xebd)(lo)	|	VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)
0xD99C0EBD,	//0x15d4		VoC_lw32_p(ACC0,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0xebd)(hi)
0x95244BA6,	//0x15d6		VoC_sub32_rp(ACC0,ACC0,REG4,IN_PARALLEL)	|	VoC_sub32_rr(RL6,RL6,ACC0,DEFAULT)
0xDDDCCB65,	//0x15d8		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x938E9345,	//0x15da		VoC_add32inc_rp(RL6,RL6,REG1,DEFAULT)	|	VoC_add32inc_rp(ACC1,ACC1,REG0,DEFAULT)
0xDD9EDDDD,	//0x15dc		VoC_sw32_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
		//0x15dd		VoC_endloop1
0x13B00A80,	//0x15de		VoC_lw16i(REG0,0x13b0)
0x5DB40A81,	//0x15e0		VoC_lw16i(REG1,0x5db4)
0xD9CDD9C4,	//0x15e2		VoC_lw32inc_p(ACC1,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xD9CB59C2,	//0x15e4		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x934D1304,	//0x15e6		VoC_add32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0x934D1304,	//0x15e8		VoC_add32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0xFA0CE102,	//0x15ea		VoC_shr32_ri(ACC0,0x1,DEFAULT)	|	VoC_movreg16(REG2,ACC0_LO,DEFAULT)
0x15F433C4,	//0x15ec		VoC_bnltz32_r(LABEL_ADD1,ACC0)
0x00011602,	//0x15ee		VoC_and16_ri(REG2,0x1)
0x15F43182,	//0x15f0		VoC_bez16_r(LABEL_ADD1,REG2)
0x0F080924,	//0x15f2		VoC_add32_rd(ACC0,ACC0,0xf08)
		//0x15f4		LABEL_ADD1
0xFA0DE142,	//0x15f4		VoC_shr32_ri(ACC1,0x1,DEFAULT)	|	VoC_movreg16(REG2,ACC1_LO,DEFAULT)
0x15FE33C5,	//0x15f6		VoC_bnltz32_r(LABEL_ADD2,ACC1)
0x00011602,	//0x15f8		VoC_and16_ri(REG2,0x1)
0x15FE3182,	//0x15fa		VoC_bez16_r(LABEL_ADD2,REG2)
0x0F08092D,	//0x15fc		VoC_add32_rd(ACC1,ACC1,0xf08)
		//0x15fe		LABEL_ADD2
0x974D1704,	//0x15fe		VoC_sub32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_sub32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0xCB5D4B14,	//0x1600		VoC_sub32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_sub32_rr(ACC0,ACC0,REG45,DEFAULT)
0x079C955D,	//0x1602		VoC_sub16_rd(REG4,REG3,0xebd)(lo)	|	VoC_sub32_rp(ACC1,ACC1,REG3,DEFAULT)
0xD99E0EBD,	//0x1604		VoC_lw32_p(RL6,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0xebd)(hi)
0xCB3495A6,	//0x1606		VoC_sub32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_sub32_rp(RL6,RL6,REG4,DEFAULT)
0xDDDCDDDE,	//0x1608		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
0x0A82DD9D,	//0x160a		VoC_lw16i(REG2,0xe64)(lo)	|	VoC_sw32_p(ACC1,REG3,DEFAULT)
0x07120E64,	//0x160c		VoC_add16_rd(REG2,REG2,0xedb)(lo)	|	VoC_lw16i(REG2,0xe64)(hi)
0xFFC00EDB,	//0x160e		VoC_NAD	|	VoC_add16_rd(REG2,REG2,0xedb)(hi)
0x16322C05,	//0x1610		VoC_loop_i(0x1,0x2)
0xFF457F46,	//0x1612		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0xE88FFFC0,	//0x1614		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_NAD
0xD9CB59D2,	//0x1616		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xCD7C790C,	//0x1618		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xF90E4E67,	//0x161a		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x161c		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x4D7CF90E,	//0x161e		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCE67C9A6,	//0x1620		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_add32_rr(RL6,RL6,ACC0,IN_PARALLEL)
0xFFC0CE6E,	//0x1622		VoC_NOP	|	VoC_macX_rr(REG5,REG6,DEFAULT)
		//0x1624		VoC_endloop0
0x079CC965,	//0x1624		VoC_sub16_rd(REG4,REG3,0xebd)(lo)	|	VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)
0xD99C0EBD,	//0x1626		VoC_lw32_p(ACC0,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0xebd)(hi)
0x95244BA6,	//0x1628		VoC_sub32_rp(ACC0,ACC0,REG4,IN_PARALLEL)	|	VoC_sub32_rr(RL6,RL6,ACC0,DEFAULT)
0xDDDCCB65,	//0x162a		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x938E9345,	//0x162c		VoC_add32inc_rp(RL6,RL6,REG1,DEFAULT)	|	VoC_add32inc_rp(ACC1,ACC1,REG0,DEFAULT)
0xDD9EDDDD,	//0x162e		VoC_sw32_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0x13B00A80,	//0x1630		VoC_lw16i(REG0,0x13b0)
		//0x1632		VoC_endloop1
0x5DB40A81,	//0x1632		VoC_lw16i(REG1,0x5db4)
0x7BE6CBAE,	//0x1634		VoC_shr32_ri(RL6,0xfffffffc,DEFAULT)	|	VoC_sub32_rr(RL6,RL6,ACC1,DEFAULT)
0xFFC0F3FB,	//0x1636		VoC_NOP	|	VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)
0xF6625DDE,	//0x1638		VoC_movreg16(REG2,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
0xD9DE6908,	//0x163a		VoC_lw32inc_p(RL6,REG3,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xD99F7BE6,	//0x163c		VoC_lw32_p(RL7,REG3,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0xfffffffc,DEFAULT)
0xDD96FBE7,	//0x163e		VoC_sw32_p(RL6,REG2,DEFAULT)	|	VoC_shr32_ri(RL7,0xfffffffc,DEFAULT)
0xF6625DDF,	//0x1640		VoC_movreg16(REG2,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(RL7,REG3,DEFAULT)
		//0x1642		VoC_endloop0
0xFBE6D9DE,	//0x1642		VoC_shr32_ri(RL6,0xfffffffc,DEFAULT)	|	VoC_lw32inc_p(RL6,REG3,DEFAULT)
0xFFC0E580,	//0x1644		VoC_NAD	|	VoC_return
		//0x1646		L3_mdct_sub
0xE0075FE9,	//0x1646		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x5DDA0A85,	//0x1648		VoC_lw16i(REG5,0x5dda)
0xE0145FC7,	//0x164a		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_push16(REG7,DEFAULT)
0xDF415FC7,	//0x164c		VoC_push32(REG23,IN_PARALLEL)	|	VoC_push16(REG7,DEFAULT)
0xDFC4DFC5,	//0x164e		VoC_push16(REG4,DEFAULT)	|	VoC_push16(REG5,DEFAULT)
		//0x1650		FOR_START1
0xF0135A25,	//0x1650		VoC_lw16i_short(INC3,0x4,IN_PARALLEL)	|	VoC_sw16_sd(REG5,0x1,DEFAULT)
0xDA14DA43,	//0x1652		VoC_sw16_sd(REG4,0x0,DEFAULT)	|	VoC_sw16_sd(REG3,0x3,DEFAULT)
0x0B04071B,	//0x1654		VoC_add16_rd(REG3,REG3,0xb04)
0xFF446062,	//0x1656		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_movreg16(REG2,REG3,DEFAULT)
0x16632C13,	//0x1658		VoC_loop_i(0x1,0x9)
0x971D6906,	//0x165a		VoC_sub32inc_rp(ACC1,ACC0,REG3,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xDD95951E,	//0x165c		VoC_sw32_p(ACC1,REG2,DEFAULT)	|	VoC_sub32_rp(RL6,ACC0,REG3,DEFAULT)
0xF6625DDE,	//0x165e		VoC_movreg16(REG2,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
		//0x1660		VoC_endloop0
0x0713971D,	//0x1660		VoC_add16_rd(REG3,REG2,0xae8)(lo)	|	VoC_sub32inc_rp(ACC1,ACC0,REG3,DEFAULT)
0xE0620AE8,	//0x1662		VoC_movreg16(REG2,REG3,DEFAULT)	|	VoC_add16_rd(REG3,REG2,0xae8)(hi)
		//0x1663		VoC_endloop1
		//0x1664		LABEL_BAND
0xF1015647,	//0x1664		VoC_lw16i_short(INC1,0x40,IN_PARALLEL)	|	VoC_lw16_sd(REG7,0x3,DEFAULT)
0x60E0F053,	//0x1666		VoC_movreg16(REG0,REG7,DEFAULT)	|	VoC_lw16i_short(INC3,0x2,DEFAULT)
0x0739F100,	//0x1668		VoC_add16_rd(REG1,REG7,0xf2e)(lo)	|	VoC_lw16i_short(INC0,0x40,IN_PARALLEL)
0x180A0F2E,	//0x166a		VoC_lw16i_set_inc(REG2,0x1344,0x2)(lo)	|	VoC_add16_rd(REG1,REG7,0xf2e)(hi)
0x07131344,	//0x166c		VoC_add16_rd(REG3,REG2,0xedf)(lo)	|	VoC_lw16i_set_inc(REG2,0x1344,0x2)(hi)
0x6A450EDF,	//0x166e		VoC_loop_i_short(0x12,DEFAULT)	|	VoC_add16_rd(REG3,REG2,0xedf)(hi)
0xD9CCFF0F,	//0x1670		VoC_lw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_movreg32(RL7,REG23,IN_PARALLEL)
0xDDD4D9C5,	//0x1672		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC1,REG0,DEFAULT)
		//0x1674		VoC_endloop0
0x073FDDDD,	//0x1674		VoC_add16_rd(REG7,REG7,0xebd)(lo)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0x18090EBD,	//0x1676		VoC_lw16i_set_inc(REG1,0x47a8,0x2)(lo)	|	VoC_add16_rd(REG7,REG7,0xebd)(hi)
0x5A4747A8,	//0x1678		VoC_sw16_sd(REG7,0x3,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x47a8,0x2)(hi)
0x7050FF39,	//0x167a		VoC_lw16i_short(INC0,0x2,DEFAULT)	|	VoC_movreg32(REG23,RL7,IN_PARALLEL)
0x717AE000,	//0x167c		VoC_lw16i_short(FORMATX,0xb,DEFAULT)	|	VoC_lw16i_short(REG0,0x0,IN_PARALLEL)
0xFFC0F5E1,	//0x167e		VoC_NAD	|	VoC_lw16i_short(FORMAT32,0xfffffffc,IN_PARALLEL)
0x16BD2C12,	//0x1680		VoC_loop_i(0x0,0x9)
0x0EEA0B04,	//0x1682		VoC_sub16_dr(REG4,0xeea,REG0)
0x0B06C064,	//0x1684		VoC_sub16_dr(REG6,0xebb,REG0)(lo)	|	VoC_add16_rr(REG4,REG1,REG4,DEFAULT)
0x40F60EBB,	//0x1686		VoC_add16_rr(REG6,REG3,REG6,DEFAULT)	|	VoC_sub16_dr(REG6,0xebb,REG0)(hi)
0xF90CD9A2,	//0x1688		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_lw32_p(REG45,REG4,IN_PARALLEL)
0x790ED9B3,	//0x168a		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0x4E67CD7C,	//0x168c		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EE367,	//0x168e		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_lw16i_short(REG7,0x36,IN_PARALLEL)
0x4064C03C,	//0x1690		VoC_add16_rr(REG4,REG1,REG4,DEFAULT)	|	VoC_add16_rr(REG4,REG0,REG7,IN_PARALLEL)
0x7F26E127,	//0x1692		VoC_movreg32(RL6,ACC0,DEFAULT)	|	VoC_lw16i_short(REG7,0x12,IN_PARALLEL)
0x40F6C03E,	//0x1694		VoC_add16_rr(REG6,REG3,REG6,DEFAULT)	|	VoC_add16_rr(REG6,REG0,REG7,IN_PARALLEL)
0xF90CD9A2,	//0x1696		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_lw32_p(REG45,REG4,IN_PARALLEL)
0x790ED9B3,	//0x1698		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0x4E67CD7C,	//0x169a		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EC044,	//0x169c		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_add16_rr(REG4,REG1,REG0,IN_PARALLEL)
0xD9A2C086,	//0x169e		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG0,IN_PARALLEL)
0x59B3FF27,	//0x16a0		VoC_lw32_p(REG67,REG6,DEFAULT)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0x790EF90C,	//0x16a2		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x4E67CD7C,	//0x16a4		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EE227,	//0x16a6		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_lw16i_short(REG7,0x22,IN_PARALLEL)
0x4064C3C4,	//0x16a8		VoC_add16_rr(REG4,REG1,REG4,DEFAULT)	|	VoC_sub16_rr(REG4,REG7,REG0,IN_PARALLEL)
0xFF25C0A6,	//0x16aa		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG4,IN_PARALLEL)
0x59B3D9A2,	//0x16ac		VoC_lw32_p(REG67,REG6,DEFAULT)	|	VoC_lw32_p(REG45,REG4,DEFAULT)
0x790EF90C,	//0x16ae		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xCE67CD7C,	//0x16b0		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0xE1274E6E,	//0x16b2		VoC_lw16i_short(REG7,0x12,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x138C0A84,	//0x16b4		VoC_lw16i(REG4,0x138c)
0xC10449BE,	//0x16b6		VoC_add16_rr(REG4,REG4,REG0,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,RL7,DEFAULT)
0xFA26492C,	//0x16b8		VoC_shr32_ri(RL6,0x4,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0xC13E7A24,	//0x16ba		VoC_add16_rr(REG6,REG4,REG7,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x4,DEFAULT)
0x5DB4DDA6,	//0x16bc		VoC_sw32_p(ACC0,REG6,DEFAULT)	|	VoC_sw32_p(RL6,REG4,DEFAULT)
		//0x16bd		VoC_endloop0
0xD623DE00,	//0x16be		VoC_lw16_sd(REG3,0x1,DEFAULT)	|	VoC_inc_p(REG0,IN_PARALLEL)
0x14EE2B80,	//0x16c0		VoC_jal(cii_mdct18)
0xD635DD96,	//0x16c2		VoC_lw16_sd(REG5,0x2,DEFAULT)	|	VoC_sw32_p(RL6,REG2,DEFAULT)
0x0EB9072D,	//0x16c4		VoC_add16_rd(REG5,REG5,0xeb9)
0x071BD623,	//0x16c6		VoC_add16_rd(REG3,REG3,0xedf)(lo)	|	VoC_lw16_sd(REG3,0x1,DEFAULT)
0xDA350EDF,	//0x16c8		VoC_sw16_sd(REG5,0x2,DEFAULT)	|	VoC_add16_rd(REG3,REG3,0xedf)(hi)
0x4C25DA23,	//0x16ca		VoC_bnlt16_rd(LABLE_COMPILE_2,REG5,0xec2)(lo)	|	VoC_sw16_sd(REG3,0x1,DEFAULT)
0x2B000EC2,	//0x16cc		VoC_jump_lg(LABEL_BAND)(lo)	|	VoC_bnlt16_rd(LABLE_COMPILE_2,REG5,0xec2)(hi)
0xF0071664,	//0x16ce		VoC_lw16i_short(REG7,0x0,DEFAULT)	|	VoC_jump_lg(LABEL_BAND)(hi)
		//0x16cf		LABLE_COMPILE_2
0x0F06079D,	//0x16d0		VoC_sub16_rd(REG5,REG3,0xf06)
0x08001808,	//0x16d2		VoC_lw16i_set_inc(REG0,0x800,0x2)
0x08101809,	//0x16d4		VoC_lw16i_set_inc(REG1,0x810,0x2)
0xF3FB5A37,	//0x16d6		VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)	|	VoC_sw16_sd(REG7,0x2,DEFAULT)
0x0EDF072A,	//0x16d8		VoC_add16_rd(REG2,REG5,0xedf)
0x0ECF072B,	//0x16da		VoC_add16_rd(REG3,REG5,0xecf)
0x17052C3F,	//0x16dc		VoC_loop_i(0x1,0x1f)
0x16FE2C10,	//0x16de		VoC_loop_i(0x0,0x8)
0xD99AD98B,	//0x16e0		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG1,DEFAULT)
0xF90C4D7C,	//0x16e2		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xCE6ECE67,	//0x16e4		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x5992D983,	//0x16e6		VoC_lw32_p(REG45,REG2,DEFAULT)	|	VoC_lw32_p(REG67,REG0,DEFAULT)
0x4D7CFF26,	//0x16e8		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_movreg32(RL6,ACC0,IN_PARALLEL)
0xCE67F90C,	//0x16ea		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xD9CBCE6E,	//0x16ec		VoC_lw32inc_p(REG67,REG1,DEFAULT)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xC9A65992,	//0x16ee		VoC_add32_rr(RL6,RL6,ACC0,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG2,DEFAULT)
0xF90C4D7C,	//0x16f0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xCE6ECE67,	//0x16f2		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x599AD9C3,	//0x16f4		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0x4D7CFF27,	//0x16f6		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_movreg32(RL7,ACC0,IN_PARALLEL)
0xCE67F90C,	//0x16f8		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xDDDECE6E,	//0x16fa		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xF799CBE7,	//0x16fc		VoC_lw16i_short(FORMAT32,0xfffffffc,DEFAULT)	|	VoC_sub32_rr(RL7,RL7,ACC0,DEFAULT)
		//0x16fe		VoC_endloop0
0x1808DDD7,	//0x16fe		VoC_lw16i_set_inc(REG0,0x800,0x2)(lo)	|	VoC_sw32inc_p(RL7,REG2,DEFAULT)
0x18090800,	//0x1700		VoC_lw16i_set_inc(REG1,0x810,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x800,0x2)(hi)
0x071B0810,	//0x1702		VoC_add16_rd(REG3,REG3,0xeea)(lo)	|	VoC_lw16i_set_inc(REG1,0x810,0x2)(hi)
0x07120EEA,	//0x1704		VoC_add16_rd(REG2,REG2,0xed1)(lo)	|	VoC_add16_rd(REG3,REG3,0xeea)(hi)
		//0x1705		VoC_endloop1
0xD9090ED1,	//0x1706		VoC_lw32_sd(REG23,0x0,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0xed1)(hi)
0xD6146043,	//0x1708		VoC_lw16_sd(REG4,0x0,IN_PARALLEL)	|	VoC_movreg16(REG3,REG2,DEFAULT)
0x0EB907A4,	//0x170a		VoC_sub16_rd(REG4,REG4,0xeb9)
0x0F440A85,	//0x170c		VoC_lw16i(REG5,0xf44)
0x17123204,	//0x170e		VoC_bltz16_r(LABLE_MP3_CHANNEL_CON,REG4)
0x16502B00,	//0x1710		VoC_jump_lg(FOR_START1)
		//0x1712		LABLE_MP3_CHANNEL_CON
0xE0075F84,	//0x1712		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0x07BFDF85,	//0x1714		VoC_sub16_rd(REG7,REG7,0xf2e)(lo)	|	VoC_pop16(REG5,DEFAULT)
0x5F840F2E,	//0x1716		VoC_pop16(REG4,DEFAULT)	|	VoC_sub16_rd(REG7,REG7,0xf2e)(hi)
0xDF82DF01,	//0x1718		VoC_pop16(REG2,DEFAULT)	|	VoC_pop32(REG23,IN_PARALLEL)
0x1507DFA9,	//0x171a		VoC_sw16_d(REG7,0xf2e)(lo)	|	VoC_pop16(RA,DEFAULT)
0xE5800F2E,	//0x171c		VoC_return	|	VoC_sw16_d(REG7,0xf2e)(hi)
		//0x171e		inner_loop
0x1404DFE9,	//0x171e		VoC_lw16_d(REG4,0x5dd8)(lo)	|	VoC_push16(RA,DEFAULT)
0x33C55DD8,	//0x1720		VoC_bnltz32_r(LABEL_inner_loop,ACC1)(lo)	|	VoC_lw16_d(REG4,0x5dd8)(hi)
0x07A41725,	//0x1722		VoC_sub16_rd(REG4,REG4,0xeb9)(lo)	|	VoC_bnltz32_r(LABEL_inner_loop,ACC1)(hi)
0xDFC40EB9,	//0x1724		VoC_push16(REG4,DEFAULT)	|	VoC_sub16_rd(REG4,REG4,0xeb9)(hi)
		//0x1725		LABEL_inner_loop
		//0x1726		LABEL_inner_loop_DO
0x0EB90724,	//0x1726		VoC_add16_rd(REG4,REG4,0xeb9)
0xD6535914,	//0x1728		VoC_lw16_sd(REG3,0x4,IN_PARALLEL)	|	VoC_lw32_sd(ACC0,0x1,DEFAULT)
0xF00B5A14,	//0x172a		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_sw16_sd(REG4,0x0,DEFAULT)
0x182F2B80,	//0x172c		VoC_jal(quantize)
0x0F165386,	//0x172e		VoC_bgt32_rd(LABEL_inner_loop_DO,RL6,0xf16)
0xF3FB5653,	//0x1730		VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x4,DEFAULT)
0x18F22B80,	//0x1732		VoC_jal(calc_runlen)
0xF00A5652,	//0x1734		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG2,0x4,DEFAULT)
0x19202B80,	//0x1736		VoC_jal(count1_bitcount)
0x2B80DF44,	//0x1738		VoC_jal(subdivide)(lo)	|	VoC_push32(ACC0,DEFAULT)
0xD650197A,	//0x173a		VoC_lw16_sd(REG0,0x4,DEFAULT)	|	VoC_jal(subdivide)(hi)
0x19C42B80,	//0x173c		VoC_jal(bigv_tab_select)
0x2B80D651,	//0x173e		VoC_jal(bigv_bitcount)(lo)	|	VoC_lw16_sd(REG1,0x4,DEFAULT)
0xD90D1ABA,	//0x1740		VoC_lw32_sd(ACC1,0x0,DEFAULT)	|	VoC_jal(bigv_bitcount)(hi)
0xDF05492C,	//0x1742		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0xD614590D,	//0x1744		VoC_lw16_sd(REG4,0x0,IN_PARALLEL)	|	VoC_lw32_sd(ACC1,0x0,DEFAULT)
0x17263625,	//0x1746		VoC_bgt32_rr(LABEL_inner_loop_DO,ACC0,ACC1)
0xEFF55F80,	//0x1748		VoC_lw16i_short(REG5,0xffffffff,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0xFF455FA9,	//0x174a		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0x5DD81582,	//0x174c		VoC_sw32_d(REG45,0x5dd8)
0xFFC0E580,	//0x174e		VoC_NAD	|	VoC_return
		//0x1750		outer_loop
0xDF445FE9,	//0x1750		VoC_push32(ACC0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xDFC05F45,	//0x1752		VoC_push16(REG0,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0x5DB41809,	//0x1754		VoC_lw16i_set_inc(REG1,0x5db4,0x2)
0xD9C66A43,	//0x1756		VoC_lw32inc_p(RL6,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x12,DEFAULT)
0x5DCED9C7,	//0x1758		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_lw32inc_p(RL7,REG0,DEFAULT)
		//0x1759		VoC_endloop0
0xDD8FFF3E,	//0x175a		VoC_sw32_p(RL7,REG1,DEFAULT)	|	VoC_movreg32(RL6,RL7,IN_PARALLEL)
0x1B1F2B80,	//0x175c		VoC_jal(bin_search_StepSize)
0xD90DD914,	//0x175e		VoC_lw32_sd(ACC1,0x0,DEFAULT)	|	VoC_lw32_sd(ACC0,0x1,DEFAULT)
0x171E2B80,	//0x1760		VoC_jal(inner_loop)
0xE00D7050,	//0x1762		VoC_lw16i_short(RL6_HI,0x0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0x5DB41809,	//0x1764		VoC_lw16i_set_inc(REG1,0x5db4,0x2)
0x5DB41584,	//0x1766		VoC_sw32_d(ACC0,0x5db4)
0x5DCE1585,	//0x1768		VoC_sw32_d(ACC1,0x5dce)
0x5DD81485,	//0x176a		VoC_lw32_d(ACC1,0x5dd8)
0x00D20A8C,	//0x176c		VoC_lw16i(RL6_LO,0xd2)
0xD610C975,	//0x176e		VoC_lw16_sd(REG0,0x0,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,RL6,DEFAULT)
0x5DBA1585,	//0x1770		VoC_sw32_d(ACC1,0x5dba)
0xD9CE6A43,	//0x1772		VoC_lw32inc_p(RL6,REG1,IN_PARALLEL)	|	VoC_loop_i_short(0x12,DEFAULT)
0x5DC6D9CF,	//0x1774		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw32inc_p(RL7,REG1,DEFAULT)
		//0x1775		VoC_endloop0
0xDD87FF3E,	//0x1776		VoC_sw32_p(RL7,REG0,DEFAULT)	|	VoC_movreg32(RL6,RL7,IN_PARALLEL)
0xDF805F05,	//0x1778		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_pop32(ACC1,DEFAULT)
0xDF05DFA9,	//0x177a		VoC_pop32(ACC1,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x177c		VoC_NAD	|	VoC_return
		//0x177e		L3_iteration_loop
0xDF435FE9,	//0x177e		VoC_push32(REG67,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xE0055FC6,	//0x1780		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0x0F286C06,	//0x1782		VoC_bez16_d(LABEL_L3_iteration_loop_FIRSTCALL,0xf28)
0x0F281505,	//0x1784		VoC_sw16_d(REG5,0xf28)
0x5CE01505,	//0x1786		VoC_sw16_d(REG5,0x5ce0)
		//0x1788		LABEL_L3_iteration_loop_FIRSTCALL
0x5CD71405,	//0x1788		VoC_lw16_d(REG5,0x5cd7)
0x0EBE082D,	//0x178a		VoC_mult16_rd(REG5,REG5,0xebe)
0x00250A83,	//0x178c		VoC_lw16i(REG3,0x25)
0x5CD5072D,	//0x178e		VoC_add16_rd(REG5,REG5,0x5cd5)
0x0A81C4EB,	//0x1790		VoC_lw16i(REG1,0xd6e)(lo)	|	VoC_mult16_rr(REG3,REG3,REG5,DEFAULT)
0xC0590D6E,	//0x1792		VoC_add16_rr(REG1,REG1,REG3,DEFAULT)	|	VoC_lw16i(REG1,0xd6e)(hi)
0x0F441808,	//0x1794		VoC_lw16i_set_inc(REG0,0xf44,0x2)
0x0F2D1501,	//0x1796		VoC_sw16_d(REG1,0xf2d)
0x17C831C6,	//0x1798		VoC_bnez16_r(INTERATION_LOOP_NOIF,REG6)
0x5DDA1809,	//0x179a		VoC_lw16i_set_inc(REG1,0x5dda,0x2)
0x1483DA10,	//0x179c		VoC_lw32_d(REG67,0xf0c)(lo)	|	VoC_sw16_sd(REG0,0x0,DEFAULT)
0x77790F0C,	//0x179e		VoC_lw16i_short(FORMAT32,0xfffffffb,DEFAULT)	|	VoC_lw32_d(REG67,0xf0c)(hi)
0xFF01F4CA,	//0x17a0		VoC_movreg32(REG23,REG01,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x19,IN_PARALLEL)
0x17BE2C09,	//0x17a2		VoC_loop_i(0x1,0x4)
0x17BD2CC8,	//0x17a4		VoC_loop_i(0x0,0x64)
0xD9CF59C2,	//0x17a6		VoC_lw32inc_p(RL7,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0xFA0F7A0A,	//0x17a8		VoC_shr32_ri(RL7,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG45,0x1,DEFAULT)
0xCBD748BA,	//0x17aa		VoC_sub32_rr(RL7,RL7,REG45,IN_PARALLEL)	|	VoC_add32_rr(REG45,REG45,RL7,DEFAULT)
0xCD7C790C,	//0x17ac		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xF4514E66,	//0x17ae		VoC_lw16i_short(FORMAT32,0xa,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG6,DEFAULT)
0x4E2ECE27,	//0x17b0		VoC_mac32_rr(REG5,REG6,DEFAULT)	|	VoC_mac32_rr(REG4,REG7,DEFAULT)
0xF779FF3A,	//0x17b2		VoC_lw16i_short(FORMAT32,0xfffffffb,DEFAULT)	|	VoC_movreg32(REG45,RL7,IN_PARALLEL)
0x4D7CF90C,	//0x17b4		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0x4E66DD94,	//0x17b6		VoC_macX_rr(REG4,REG6,DEFAULT)	|	VoC_sw32_p(ACC0,REG2,IN_PARALLEL)
0xCE27F451,	//0x17b8		VoC_mac32_rr(REG4,REG7,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0xa,IN_PARALLEL)
0xF779CE2E,	//0x17ba		VoC_lw16i_short(FORMAT32,0xfffffffb,DEFAULT)	|	VoC_mac32_rr(REG5,REG6,DEFAULT)
0xDD9CFF01,	//0x17bc		VoC_sw32_p(ACC0,REG3,DEFAULT)	|	VoC_movreg32(REG23,REG01,DEFAULT)
		//0x17bd		VoC_endloop0
		//0x17be		VoC_endloop1
0xFFC0FF44,	//0x17be		VoC_NAD	|	VoC_lw32z(ACC0,DEFAULT)
0x17C22D60,	//0x17c0		VoC_loop_i(0x0,0xb0)
		//0x17c2		VoC_endloop0
0xDDCC5DC4,	//0x17c2		VoC_sw32inc_p(ACC0,REG1,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x402FD610,	//0x17c4		VoC_be16_rd(INTERATION_LOOP_XR,REG7,0xf0d)(lo)	|	VoC_lw16_sd(REG0,0x0,DEFAULT)
0xFFC00F0D,	//0x17c6		VoC_NAD	|	VoC_be16_rd(INTERATION_LOOP_XR,REG7,0xf0d)(hi)
		//0x17c8		INTERATION_LOOP_NOIF
0x5DDA1808,	//0x17c8		VoC_lw16i_set_inc(REG0,0x5dda,0x2)
		//0x17ca		INTERATION_LOOP_XR
0x7F44DF81,	//0x17ca		VoC_lw32z(ACC0,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x1809FF45,	//0x17cc		VoC_lw16i_set_inc(REG1,0x6266,0x2)(lo)	|	VoC_lw32z(ACC1,IN_PARALLEL)
0xD9C66266,	//0x17ce		VoC_lw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x6266,0x2)(hi)
0x17DD2C09,	//0x17d0		VoC_loop_i(0x1,0x4)
0x17DC2D20,	//0x17d2		VoC_loop_i(0x0,0x90)
0x17D833C6,	//0x17d4		VoC_bnltz32_r(INTERATION_LOOP_ABS,RL6)
0xFFC0CB76,	//0x17d6		VoC_NAD	|	VoC_sub32_rr(RL6,ACC1,RL6,DEFAULT)
		//0x17d8		INTERATION_LOOP_ABS
0x17DB3626,	//0x17d8		VoC_bgt32_rr(INTERATION_LOOP_BIG,ACC0,RL6)
0xDDCEFF34,	//0x17da		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_movreg32(ACC0,RL6,DEFAULT)
		//0x17db		INTERATION_LOOP_BIG
		//0x17dc		VoC_endloop0
0xD90BD9C6,	//0x17dc		VoC_lw32_sd(REG67,0x0,DEFAULT)	|	VoC_lw32inc_p(RL6,REG0,DEFAULT)
		//0x17dd		VoC_endloop1
0x0F2A1584,	//0x17de		VoC_sw32_d(ACC0,0xf2a)
0x5CF61808,	//0x17e0		VoC_lw16i_set_inc(REG0,0x5cf6,0x2)
0x002E0A84,	//0x17e2		VoC_lw16i(REG4,0x2e)
0xF8FC45A1,	//0x17e4		VoC_shr16_ri(REG4,0xffffffff,IN_PARALLEL)	|	VoC_mult16_rr(REG1,REG6,REG4,DEFAULT)
0xC008C5E5,	//0x17e6		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_mult16_rr(REG5,REG7,REG4,DEFAULT)
0xDF03C028,	//0x17e8		VoC_pop32(REG67,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xDFC06862,	//0x17ea		VoC_push16(REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x3,DEFAULT)
		//0x17ec		VoC_endloop0
0xDE00DDC5,	//0x17ec		VoC_inc_p(REG0,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xE941DE00,	//0x17ee		VoC_loop_i_short(0xa,DEFAULT)	|	VoC_inc_p(REG0,DEFAULT)
		//0x17f0		VoC_endloop0
0xD680DDC5,	//0x17f0		VoC_lw16_sd(REG0,0x7,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0x0F060833,	//0x17f2		VoC_mult16_rd(REG3,REG6,0xf06)
0x0F2A1484,	//0x17f4		VoC_lw32_d(ACC0,0xf2a)
0xD674C018,	//0x17f6		VoC_lw16_sd(REG4,0x6,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,DEFAULT)
0xF80C5FC0,	//0x17f8		VoC_shr16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x081F3C24,	//0x17fa		VoC_bngt16_rd(RESVMAXBITS_4095,REG4,0x81f)
0x081F1404,	//0x17fc		VoC_lw16_d(REG4,0x81f)
		//0x17fe		RESVMAXBITS_4095
0xF68A700B,	//0x17fe		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_lw16i_short(ACC1_HI,0x0,DEFAULT)
0x18063304,	//0x1800		VoC_bez32_r(LABEL_L3_iteration_loop_XRMAX,ACC0)
0xFFC0D620,	//0x1802		VoC_NAD	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x17502B80,	//0x1804		VoC_jal(outer_loop)
		//0x1806		LABEL_L3_iteration_loop_XRMAX
0xD6846105,	//0x1806		VoC_lw16_sd(REG4,0x7,IN_PARALLEL)	|	VoC_movreg16(REG5,ACC0_LO,DEFAULT)
0x432EF80C,	//0x1808		VoC_sub16_rr(REG6,REG4,REG5,DEFAULT)	|	VoC_shr16_ri(REG4,0x1,DEFAULT)
0x1604D684,	//0x180a		VoC_and16_ri(REG4,0x1)(lo)	|	VoC_lw16_sd(REG4,0x7,IN_PARALLEL)
0x15060001,	//0x180c		VoC_sw16_d(REG6,0xf2c)(lo)	|	VoC_and16_ri(REG4,0x1)(hi)
0x41340F2C,	//0x180e		VoC_add16_rr(REG4,REG4,REG6,DEFAULT)	|	VoC_sw16_d(REG6,0xf2c)(hi)
0x1938E007,	//0x1810		VoC_lw16i_set_inc(REG0,0x5cf6,0x2e)(lo)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0x31845CF6,	//0x1812		VoC_bez16_r(RESVFRAMEEND_END,REG4)(lo)	|	VoC_lw16i_set_inc(REG0,0x5cf6,0x2e)(hi)
0x81021829,	//0x1814		VoC_add16_rp(REG2,REG4,REG0,DEFAULT)	|	VoC_bez16_r(RESVFRAMEEND_END,REG4)(hi)
0x081F4C22,	//0x1816		VoC_bnlt16_rd(RESVFRAMEEND_4095,REG2,0x81f)
0xE5D0DC02,	//0x1818		VoC_jump(RESVFRAMEEND_END)	|	VoC_sw16_p(REG2,REG0,DEFAULT)
		//0x181a		RESVFRAMEEND_4095
0xE003688C,	//0x181a		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_loop_i_short(0x4,DEFAULT)
0x18293184,	//0x181c		VoC_bez16_r(RESVFRAMEEND_END,REG4)
0x081F1402,	//0x181e		VoC_lw16_d(REG2,0x81f)
0x34228482,	//0x1820		VoC_bgt16_rr(RESVFRAMEEND_bitsThisGr,REG4,REG2)(lo)	|	VoC_sub16_rp(REG2,REG2,REG0,DEFAULT)
0xE0821824,	//0x1822		VoC_movreg16(REG2,REG4,DEFAULT)	|	VoC_bgt16_rr(RESVFRAMEEND_bitsThisGr,REG4,REG2)(hi)
		//0x1824		RESVFRAMEEND_bitsThisGr
0xC3149044,	//0x1824		VoC_sub16_rr(REG4,REG4,REG2,DEFAULT)	|	VoC_add32_rp(ACC0,REG23,REG0,DEFAULT)
		//0x1826		VoC_endloop0
0x1504DDC4,	//0x1826		VoC_sw16_d(REG4,0x5ce4)(lo)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xDF855CE4,	//0x1828		VoC_pop16(REG5,DEFAULT)	|	VoC_sw16_d(REG4,0x5ce4)(hi)
		//0x1829		RESVFRAMEEND_END
0xDFA9DF85,	//0x182a		VoC_pop16(RA,DEFAULT)	|	VoC_pop16(REG5,DEFAULT)
0x0F2C1507,	//0x182c		VoC_sw16_d(REG7,0xf2c)
0xDFE9E580,	//0x182e		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x182f		quantize
0x66E61808,	//0x1830		VoC_lw16i_set_inc(REG0,0x66e6,0x2)
0x66F61809,	//0x1832		VoC_lw16i_set_inc(REG1,0x66f6,0x2)
0x1E9C2B80,	//0x1834		VoC_jal(vpp_AmjrGenerateStepTabi)
0x0A80DFA9,	//0x1836		VoC_lw16i(REG0,0x66e6)(lo)	|	VoC_pop16(RA,DEFAULT)
0x0A8166E6,	//0x1838		VoC_lw16i(REG1,0xfe)(lo)	|	VoC_lw16i(REG0,0x66e6)(hi)
0x78FC00FE,	//0x183a		VoC_shr16_ri(REG4,0xffffffff,DEFAULT)	|	VoC_lw16i(REG1,0xfe)(hi)
0x4020C008,	//0x183c		VoC_add16_rr(REG0,REG0,REG4,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)
0x77F9FF23,	//0x183e		VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)	|	VoC_movreg32(REG67,ACC0,IN_PARALLEL)
0x5982F5FA,	//0x1840		VoC_lw32_p(REG45,REG0,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)
0x790CE00F,	//0x1842		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_lw16i_short(RL7_HI,0x0,IN_PARALLEL)
0x4D7CF90E,	//0x1844		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x71D9CD75,	//0x1846		VoC_lw16i_short(FORMAT32,0xe,DEFAULT)	|	VoC_multf32_rr(ACC1,REG5,REG6,IN_PARALLEL)
0x7F46CEA7,	//0x1848		VoC_lw32z(RL6,DEFAULT)	|	VoC_macX_rr(REG4,REG7,IN_PARALLEL)
0x0A8ECE26,	//0x184a		VoC_lw16i(RL7_LO,0x4000)(lo)	|	VoC_mac32_rr(REG4,REG6,IN_PARALLEL)
0x497D4000,	//0x184c		VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)	|	VoC_lw16i(RL7_LO,0x4000)(hi)
0xFA7DF004,	//0x184e		VoC_shr32_ri(ACC1,0xf,DEFAULT)	|	VoC_lw16i_short(INC0,0x1,IN_PARALLEL)
0x542CC92C,	//0x1850		VoC_bngt32_rd(LABEL_quantize_ELSE,ACC0,0xf0e)(lo)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0x0A8C0F0E,	//0x1852		VoC_lw16i(RL6_LO,0x4000)(lo)	|	VoC_bngt32_rd(LABEL_quantize_ELSE,ACC0,0xf0e)(hi)
0xE5804000,	//0x1854		VoC_return	|	VoC_lw16i(RL6_LO,0x4000)(hi)
		//0x1856		LABEL_quantize_ELSE
0xE0107F46,	//0x1856		VoC_lw16i_short(REG0,0x1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0x6266180A,	//0x1858		VoC_lw16i_set_inc(REG2,0x6266,0x2)
		//0x185a		LABEL_quantize_LOOP576
0xDF425FC0,	//0x185a		VoC_push32(REG45,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xF5F959D3,	//0x185c		VoC_lw16i_short(FORMAT32,0xffffffff,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG2,DEFAULT)
0xCD7C790E,	//0x185e		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE00F4D75,	//0x1860		VoC_lw16i_short(RL7_HI,0x0,IN_PARALLEL)	|	VoC_multf32_rr(ACC1,REG5,REG6,DEFAULT)
0xCEA771D9,	//0x1862		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xe,DEFAULT)
0x40000A8E,	//0x1864		VoC_lw16i(RL7_LO,0x4000)
0xCE26497D,	//0x1866		VoC_mac32_rr(REG4,REG6,IN_PARALLEL)	|	VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)
0x00C90A8E,	//0x1868		VoC_lw16i(RL7_LO,0xc9)
0xE0117A7D,	//0x186a		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xf,DEFAULT)
0xFF45492C,	//0x186c		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0x18743344,	//0x186e		VoC_bnez32_r(LABEL_quantize_ELSE_IF1,ACC0)
0x2B00FF44,	//0x1870		VoC_jump_lg(LABEL_quantize_ELSE_IX)(lo)	|	VoC_lw32z(ACC0,DEFAULT)
0xFFC018E3,	//0x1872		VoC_NAD	|	VoC_jump_lg(LABEL_quantize_ELSE_IX)(hi)
		//0x1874		LABEL_quantize_ELSE_IF1
0x0EB95C34,	//0x1874		VoC_bne32_rd(LABEL_quantize_ELSE_IF2,ACC0,0xeb9)
0x0F081484,	//0x1876		VoC_lw32_d(ACC0,0xf08)
0x18E32B00,	//0x1878		VoC_jump_lg(LABEL_quantize_ELSE_IX)
		//0x187a		LABEL_quantize_ELSE_IF2
0xF7056100,	//0x187a		VoC_movreg16(REG5,ACC0_LO,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC0_LO,DEFAULT)
0x189A3627,	//0x187c		VoC_bgt32_rr(LABEL_quantize_ELSE_IF3,ACC0,RL7)
0xF808640D,	//0x187e		VoC_shr16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_and16_rr(REG5,REG1,DEFAULT)
0x432D0A84,	//0x1880		VoC_lw16i(REG4,0x432d)
0x31C5C104,	//0x1882		VoC_bnez16_r(LABEL_quantize_HIGH,REG5)(lo)	|	VoC_add16_rr(REG4,REG4,REG0,DEFAULT)
0xD8401889,	//0x1884		VoC_lw16_p(REG0,REG4,DEFAULT)	|	VoC_bnez16_r(LABEL_quantize_HIGH,REG5)(hi)
0x00FF1600,	//0x1886		VoC_and16_ri(REG0,0xff)
0xD840E5C5,	//0x1888		VoC_lw16_p(REG0,REG4,DEFAULT)	|	VoC_jump(LABEL_quantize_rq_add)
		//0x1889		LABEL_quantize_HIGH
0x7F001640,	//0x188a		VoC_and16_ri(REG0,0xff00)
0xE008F940,	//0x188c		VoC_movreg16(ACC0_LO,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x8,DEFAULT)
		//0x188d		LABEL_quantize_rq_add
0x18E32B00,	//0x188e		VoC_jump_lg(LABEL_quantize_ELSE_IX)
0x189A3625,	//0x1890		VoC_bgt32_rr(LABEL_quantize_ELSE_IF3,ACC0,ACC1)
0x432C0A80,	//0x1892		VoC_lw16i(REG0,0x432c)
0xFFC0C008,	//0x1894		VoC_NOP	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
0x2B00D808,	//0x1896		VoC_jump_lg(LABEL_quantize_ELSE_IX)(lo)	|	VoC_lw16_p(ACC0_LO,REG0,DEFAULT)
0xFFC018E3,	//0x1898		VoC_NAD	|	VoC_jump_lg(LABEL_quantize_ELSE_IX)(hi)
		//0x189a		LABEL_quantize_ELSE_IF3
0x0F106024,	//0x189a		VoC_blt32_rd(LABLE_COMPILE_3,ACC0,0xf10)
0x18C82B00,	//0x189c		VoC_jump_lg(LABEL_quantize_ELSE_ELSE)
		//0x189e		LABLE_COMPILE_3
0xF46A77F9,	//0x189e		VoC_lw16i_short(FORMATX,0xd,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)
0x1485E101,	//0x18a0		VoC_lw32_d(ACC1,0xf18)(lo)	|	VoC_movreg16(REG1,ACC0_LO,DEFAULT)
0x7F430F18,	//0x18a2		VoC_lw32z(REG67,DEFAULT)	|	VoC_lw32_d(ACC1,0xf18)(hi)
0xFFC0E000,	//0x18a4		VoC_NAD	|	VoC_lw16i_short(REG0,0x0,IN_PARALLEL)
0x18C12C05,	//0x18a6		VoC_loop_i(0x1,0x2)
0xFF426BF0,	//0x18a8		VoC_lw32z(REG45,IN_PARALLEL)	|	VoC_loop_i_short(0x1f,DEFAULT)
0xE0CFE52B,	//0x18aa		VoC_movreg16(RL7_HI,REG6,DEFAULT)	|	VoC_or32_rr(REG67,ACC1,DEFAULT)
0xCDFC790E,	//0x18ac		VoC_multf32_rr(ACC0,REG7,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE1E6CE7E,	//0x18ae		VoC_movreg16(REG6,RL7_HI,DEFAULT)	|	VoC_macX_rr(REG7,REG6,DEFAULT)
0xFA0D7BFC,	//0x18b0		VoC_shr32_ri(ACC1,0x1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xffffffff,DEFAULT)
0x18B83620,	//0x18b2		VoC_bgt32_rr(COMPUTE_RQ_TEMP1,ACC0,REG01)
0x37A0FF1A,	//0x18b4		VoC_bne32_rr(COMPUTE_RQ_TEMP1,ACC0,REG01)(lo)	|	VoC_movreg32(REG45,REG67,DEFAULT)
0xE5C318B8,	//0x18b6		VoC_jump(COMPUTE_RQ_BREAK1)	|	VoC_bne32_rr(COMPUTE_RQ_TEMP1,ACC0,REG01)(hi)
		//0x18b8		COMPUTE_RQ_TEMP1
		//0x18b8		VoC_endloop0
0xFFC0FF13,	//0x18b8		VoC_NAD	|	VoC_movreg32(REG67,REG45,DEFAULT)
		//0x18ba		COMPUTE_RQ_BREAK1
0xFF1771DA,	//0x18ba		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw16i_short(FORMATX,0xe,DEFAULT)
0xCC6C790C,	//0x18bc		VoC_multf32_rr(ACC0,REG1,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0x1485CE61,	//0x18be		VoC_lw32_d(ACC1,0xf18)(lo)	|	VoC_macX_rr(REG4,REG1,DEFAULT)
0x7F200F18,	//0x18c0		VoC_movreg32(REG01,ACC0,DEFAULT)	|	VoC_lw32_d(ACC1,0xf18)(hi)
		//0x18c1		VoC_endloop1
0x093CF46A,	//0x18c2		VoC_add32_rd(ACC0,RL7,0xf12)(lo)	|	VoC_lw16i_short(FORMATX,0xd,IN_PARALLEL)
0xFA9C0F12,	//0x18c4		VoC_shr32_ri(ACC0,0x13,DEFAULT)	|	VoC_add32_rd(ACC0,RL7,0xf12)(hi)
0xFFC0E5DD,	//0x18c6		VoC_NAD	|	VoC_jump(LABEL_quantize_ELSE_IX)
		//0x18c8		LABEL_quantize_ELSE_ELSE
0xF00477E0,	//0x18c8		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xffffffff,DEFAULT)
0xFFC0FF25,	//0x18ca		VoC_NAD	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
		//0x18cc		LABLE_LOG2
0xDE007F2C,	//0x18cc		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_movreg32(ACC0,ACC1,DEFAULT)
0xE0D17E84,	//0x18ce		VoC_lw16i_short(REG1,0xd,IN_PARALLEL)	|	VoC_shr32_rr(ACC0,REG0,DEFAULT)
0x0F0853A4,	//0x18d0		VoC_bgt32_rd(LABLE_LOG2,ACC0,0xf08)
0xC20C6019,	//0x18d2		VoC_sub16_rr(REG4,REG0,REG1,IN_PARALLEL)	|	VoC_movreg16(FORMAT32,REG0,DEFAULT)
0x47F01808,	//0x18d4		VoC_lw16i_set_inc(REG0,0x47f0,0x2)
0xE02578F4,	//0x18d6		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0xfffffffe,DEFAULT)
0xE0644020,	//0x18d8		VoC_lw16i_short(REG4,0x6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0x9543C029,	//0x18da		VoC_sub32_rp(REG67,ACC1,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG0,REG5,DEFAULT)
0xD98FC027,	//0x18dc		VoC_lw32_p(RL7,REG1,DEFAULT)	|	VoC_add16_rr(REG7,REG0,REG4,DEFAULT)
0xCD34BDFA,	//0x18de		VoC_multf32_rr(ACC0,REG4,REG6,DEFAULT)	|	VoC_sub32_pr(REG45,REG7,RL7,DEFAULT)
0x9104FFC0,	//0x18e0		VoC_add32_rp(ACC0,ACC0,REG0,DEFAULT)	|	VoC_NOP
0xDDDCFFC0,	//0x18e2		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_NOP
		//0x18e3		LABEL_quantize_ELSE_IX
0x18E736A6,	//0x18e4		VoC_bngt32_rr(LABEL_quantize_ELSE_END_IF,ACC0,RL6)
0xDF80FF26,	//0x18e6		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
		//0x18e7		LABEL_quantize_ELSE_END_IF
0x5E00DF02,	//0x18e8		VoC_inc_p(REG0,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0x3820F5FA,	//0x18ea		VoC_bgt16_rd(LABLE_COMPILE_4,REG0,0xd84)(lo)	|	VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)
0x2B000D84,	//0x18ec		VoC_jump_lg(LABEL_quantize_LOOP576)(lo)	|	VoC_bgt16_rd(LABLE_COMPILE_4,REG0,0xd84)(hi)
0xFFC0185A,	//0x18ee		VoC_NOP	|	VoC_jump_lg(LABEL_quantize_LOOP576)(hi)
		//0x18ef		LABLE_COMPILE_4
0xFFC0E580,	//0x18f0		VoC_NAD	|	VoC_return
		//0x18f2		calc_runlen
0x047E0A84,	//0x18f2		VoC_lw16i(REG4,0x47e)
0xC0E3780C,	//0x18f4		VoC_add16_rr(REG3,REG3,REG4,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x1,DEFAULT)
0x19012C21,	//0x18f6		VoC_loop_i(0x1,0x10)
0xE0226A48,	//0x18f8		VoC_lw16i_short(REG2,0x2,IN_PARALLEL)	|	VoC_loop_i_short(0x12,DEFAULT)
0xD9DCD9DB,	//0x18fa		VoC_lw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_lw32inc_p(REG67,REG3,DEFAULT)
0x19043343,	//0x18fc		VoC_bnez32_r(LABLE_calc_runlen_i,REG67)
0x19043344,	//0x18fe		VoC_bnez32_r(LABLE_calc_runlen_i,ACC0)
		//0x1900		VoC_endloop0
0x7085C314,	//0x1900		VoC_lw16i_short(REG5,0x4,DEFAULT)	|	VoC_sub16_rr(REG4,REG4,REG2,DEFAULT)
		//0x1901		VoC_endloop1
0xFFC0E001,	//0x1902		VoC_NAD	|	VoC_lw16i_short(REG1,0x0,IN_PARALLEL)
		//0x1904		LABLE_calc_runlen_i
0xE01040EB,	//0x1904		VoC_lw16i_short(REG0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG5,DEFAULT)
0x191834A2,	//0x1906		VoC_bngt16_rr(LABLE_calc_runlen_end,REG4,REG2)
		//0x1908		LABLE_calc_runlen_count
0x50BBD9DB,	//0x1908		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0xeb9)(lo)	|	VoC_lw32inc_p(REG67,REG3,DEFAULT)
0xD9DB0EB9,	//0x190a		VoC_lw32inc_p(REG67,REG3,DEFAULT)	|	VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0xeb9)(hi)
0x0EB950A3,	//0x190c		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0xeb9)
0x508BD9DB,	//0x190e		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0xeb9)(lo)	|	VoC_lw32inc_p(REG67,REG3,DEFAULT)
0xD9DB0EB9,	//0x1910		VoC_lw32inc_p(REG67,REG3,DEFAULT)	|	VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0xeb9)(hi)
0x0EB95033,	//0x1912		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0xeb9)
0xC32C4041,	//0x1914		VoC_sub16_rr(REG4,REG4,REG5,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG0,DEFAULT)
0x0EBD3B14,	//0x1916		VoC_bgt16_rd(LABLE_calc_runlen_count,REG4,0xebd)
		//0x1918		LABLE_calc_runlen_end
0xF80CC104,	//0x1918		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG0,DEFAULT)
0x5DB81501,	//0x191a		VoC_sw16_d(REG1,0x5db8)
0x5DB61504,	//0x191c		VoC_sw16_d(REG4,0x5db6)
0xFFC0E580,	//0x191e		VoC_NAD	|	VoC_return
		//0x1920		count1_bitcount
0x5DB61403,	//0x1920		VoC_lw16_d(REG3,0x5db6)
0x5DB81406,	//0x1922		VoC_lw16_d(REG6,0x5db8)
0xFF457F44,	//0x1924		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xE00078F3,	//0x1926		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG3,0xfffffffe,DEFAULT)
0x196E3186,	//0x1928		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_0,REG6)
0x0CC40A81,	//0x192a		VoC_lw16i(REG1,0xcc4)
0x0AFB070C,	//0x192c		VoC_add16_rd(REG4,REG1,0xafb)
0x0EC70727,	//0x192e		VoC_add16_rd(REG7,REG4,0xec7)
0xF004409A,	//0x1930		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG3,DEFAULT)
0xD877D841,	//0x1932		VoC_lw16_p(REG7,REG7,DEFAULT)	|	VoC_lw16_p(REG1,REG4,DEFAULT)
0x2E30E0EE,	//0x1934		VoC_loop_r(0,REG6)(lo)	|	VoC_movreg16(RL7_LO,REG7,DEFAULT)
0xD8A4196B,	//0x1936		VoC_lw16inc_p(REG4,REG2,DEFAULT)	|	VoC_loop_r(0,REG6)(hi)
0x58A6D8A5,	//0x1938		VoC_lw16inc_p(REG6,REG2,DEFAULT)	|	VoC_lw16inc_p(REG5,REG2,DEFAULT)
0x58A7F8FD,	//0x193a		VoC_lw16inc_p(REG7,REG2,DEFAULT)	|	VoC_shr16_ri(REG5,0xffffffff,IN_PARALLEL)
0x78EFF8F6,	//0x193c		VoC_shr16_ri(REG7,0xfffffffd,DEFAULT)	|	VoC_shr16_ri(REG6,0xfffffffe,IN_PARALLEL)
0xC0F3C12B,	//0x193e		VoC_add16_rr(REG3,REG3,REG6,DEFAULT)	|	VoC_add16_rr(REG3,REG4,REG5,IN_PARALLEL)
0x3184C0FB,	//0x1940		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN1,REG4)(lo)	|	VoC_add16_rr(REG3,REG3,REG7,DEFAULT)
0xDE001944,	//0x1942		VoC_inc_p(REG0,DEFAULT)	|	VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN1,REG4)(hi)
		//0x1944		LABEL_COUNT1_BITCOUNT_SIGN1
0x19483185,	//0x1944		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN2,REG5)
0xFFC0DE00,	//0x1946		VoC_NAD	|	VoC_inc_p(REG0,DEFAULT)
		//0x1948		LABEL_COUNT1_BITCOUNT_SIGN2
0x194C3186,	//0x1948		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN3,REG6)
0xFFC0DE00,	//0x194a		VoC_NAD	|	VoC_inc_p(REG0,DEFAULT)
		//0x194c		LABEL_COUNT1_BITCOUNT_SIGN3
0x19503187,	//0x194c		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN4,REG7)
0xFFC0DE00,	//0x194e		VoC_NAD	|	VoC_inc_p(REG0,DEFAULT)
		//0x1950		LABEL_COUNT1_BITCOUNT_SIGN4
0xF80B6067,	//0x1950		VoC_shr16_ri(REG3,0x1,IN_PARALLEL)	|	VoC_movreg16(REG7,REG3,DEFAULT)
0xF7C640CD,	//0x1952		VoC_movreg16(REG6,RL7_LO,IN_PARALLEL)	|	VoC_add16_rr(REG5,REG3,REG1,DEFAULT)
0xF704419E,	//0x1954		VoC_movreg16(REG4,ACC0_LO,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG3,DEFAULT)
0xD866D855,	//0x1956		VoC_lw16_p(REG6,REG6,DEFAULT)	|	VoC_lw16_p(REG5,REG5,DEFAULT)
0x00011607,	//0x1958		VoC_and16_ri(REG7,0x1)
0x196231C7,	//0x195a		VoC_bnez16_r(LABEL_HIGH,REG7)
0x00FF1605,	//0x195c		VoC_and16_ri(REG5,0xff)
0x00FF1606,	//0x195e		VoC_and16_ri(REG6,0xff)
0xFFC0E5C8,	//0x1960		VoC_NAD	|	VoC_jump(LABEL_ADD_HT)
		//0x1962		LABEL_HIGH
0x7F001645,	//0x1962		VoC_and16_ri(REG5,0xff00)
0x7F001646,	//0x1964		VoC_and16_ri(REG6,0xff00)
0xF9467945,	//0x1966		VoC_shru16_ri(REG6,0x8,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0x8,DEFAULT)
		//0x1968		LABEL_ADD_HT
0xC12C6147,	//0x1968		VoC_add16_rr(REG4,REG4,REG5,IN_PARALLEL)	|	VoC_movreg16(REG7,ACC1_LO,DEFAULT)
0x60EAC1F7,	//0x196a		VoC_movreg16(ACC1_LO,REG7,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG6,DEFAULT)
		//0x196b		VoC_endloop0
0xFFC0F688,	//0x196c		VoC_NAD	|	VoC_movreg16(ACC0_LO,REG4,IN_PARALLEL)
		//0x196e		LABEL_COUNT1_BITCOUNT_0
0xE0157001,	//0x196e		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0x1976362C,	//0x1970		VoC_bgt32_rr(LABEL_COUNT1_BITCOUNT_SUM0,ACC1,ACC0)
0x1505C944,	//0x1972		VoC_sw16_d(REG5,0x5dcc)(lo)	|	VoC_add32_rr(ACC0,ACC1,REG01,DEFAULT)
0xE5805DCC,	//0x1974		VoC_return	|	VoC_sw16_d(REG5,0x5dcc)(hi)
		//0x1976		LABEL_COUNT1_BITCOUNT_SUM0
0x1501C904,	//0x1976		VoC_sw16_d(REG1,0x5dcc)(lo)	|	VoC_add32_rr(ACC0,ACC0,REG01,DEFAULT)
0xE5805DCC,	//0x1978		VoC_return	|	VoC_sw16_d(REG1,0x5dcc)(hi)
		//0x197a		subdivide
0x1404FF44,	//0x197a		VoC_lw16_d(REG4,0x5db6)(lo)	|	VoC_lw32z(ACC0,DEFAULT)
0x31C45DB6,	//0x197c		VoC_bnez16_r(LABEL_SUBDIV_ELSE,REG4)(lo)	|	VoC_lw16_d(REG4,0x5db6)(hi)
0x15841984,	//0x197e		VoC_sw32_d(ACC0,0x5dc4)(lo)	|	VoC_bnez16_r(LABEL_SUBDIV_ELSE,REG4)(hi)
0x15845DC4,	//0x1980		VoC_sw32_d(ACC0,0x5dc6)(lo)	|	VoC_sw32_d(ACC0,0x5dc4)(hi)
0xE5805DC6,	//0x1982		VoC_return	|	VoC_sw32_d(ACC0,0x5dc6)(hi)
		//0x1984		LABEL_SUBDIV_ELSE
0x0E4C0A80,	//0x1984		VoC_lw16i(REG0,0xe4c)
0x0F2D2005,	//0x1986		VoC_lw16d_set_inc(REG1,0xf2d,0x1)
0xEFF678FC,	//0x1988		VoC_lw16i_short(REG6,0xffffffff,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0xffffffff,DEFAULT)
0xF6237027,	//0x198a		VoC_movreg16(REG3,REG1,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
		//0x198c		LABEL_SUBDIV_WHILE1
0xC1F65895,	//0x198c		VoC_add16_rr(REG6,REG7,REG6,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
0x198C3425,	//0x198e		VoC_bgt16_rr(LABEL_SUBDIV_WHILE1,REG4,REG5)
0xC0306061,	//0x1990		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_movreg16(REG1,REG3,DEFAULT)
0xD805C07B,	//0x1992		VoC_lw16_p(REG5,REG0,DEFAULT)	|	VoC_add16_rr(REG3,REG1,REG7,DEFAULT)
0x00FF1605,	//0x1994		VoC_and16_ri(REG5,0xff)
0xFFC0C0EB,	//0x1996		VoC_NAD	|	VoC_add16_rr(REG3,REG3,REG5,DEFAULT)
		//0x1998		LABEL_SUBDIV_WHILE2
0x19A03185,	//0x1998		VoC_bez16_r(LABEL_SUBDIV_NEXT,REG5)
0x349CD833,	//0x199a		VoC_bngt16_rr(LABEL_SUBDIV_NEXT,REG3,REG4)(lo)	|	VoC_lw16_p(REG3,REG3,DEFAULT)
0xC37D19A0,	//0x199c		VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)	|	VoC_bngt16_rr(LABEL_SUBDIV_NEXT,REG3,REG4)(hi)
0xFFC0E5FA,	//0x199e		VoC_NAD	|	VoC_jump(LABEL_SUBDIV_WHILE2)
		//0x19a0		LABEL_SUBDIV_NEXT
0x5DC41505,	//0x19a0		VoC_sw16_d(REG5,0x5dc4)
0xF6A05805,	//0x19a2		VoC_movreg16(REG0,REG5,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG0,DEFAULT)
0x7F001645,	//0x19a4		VoC_and16_ri(REG5,0xff00)
0xC142F945,	//0x19a6		VoC_add16_rr(REG2,REG5,REG0,DEFAULT)	|	VoC_shru16_ri(REG5,0x8,DEFAULT)
0x0EBD0712,	//0x19a8		VoC_add16_rd(REG2,REG2,0xebd)
0xFFC0C053,	//0x19aa		VoC_NAD	|	VoC_add16_rr(REG3,REG1,REG2,DEFAULT)
		//0x19ac		LABEL_SUBDIV_WHILE3
0x19B43185,	//0x19ac		VoC_bez16_r(LABEL_SUBDIV_NEXT1,REG5)
0x349CD833,	//0x19ae		VoC_bngt16_rr(LABEL_SUBDIV_NEXT1,REG3,REG4)(lo)	|	VoC_lw16_p(REG3,REG3,DEFAULT)
0x437D19B4,	//0x19b0		VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)	|	VoC_bngt16_rr(LABEL_SUBDIV_NEXT1,REG3,REG4)(hi)
0xE5F9C2BA,	//0x19b2		VoC_jump(LABEL_SUBDIV_WHILE3)	|	VoC_sub16_rr(REG2,REG2,REG7,IN_PARALLEL)
		//0x19b4		LABEL_SUBDIV_NEXT1
0x5DC61505,	//0x19b4		VoC_sw16_d(REG5,0x5dc6)
0xC17D403A,	//0x19b6		VoC_add16_rr(REG5,REG5,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG0,REG7,DEFAULT)
0x1504C056,	//0x19b8		VoC_sw16_d(REG4,0x5dd6)(lo)	|	VoC_add16_rr(REG6,REG1,REG2,DEFAULT)
0xC1A95DD6,	//0x19ba		VoC_add16_rr(REG1,REG6,REG5,DEFAULT)	|	VoC_sw16_d(REG4,0x5dd6)(hi)
0xD811D867,	//0x19bc		VoC_lw16_p(REG1,REG1,DEFAULT)	|	VoC_lw16_p(REG7,REG6,DEFAULT)
0x5DD21507,	//0x19be		VoC_sw16_d(REG7,0x5dd2)
0x5DD41501,	//0x19c0		VoC_sw16_d(REG1,0x5dd4)
0xFFC0E580,	//0x19c2		VoC_NAD	|	VoC_return
		//0x19c4		bigv_tab_select
0xE0055FC0,	//0x19c4		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x1406DFE9,	//0x19c6		VoC_lw16_d(REG6,0x5dd2)(lo)	|	VoC_push16(RA,DEFAULT)
0x15055DD2,	//0x19c8		VoC_sw16_d(REG5,0x5dbe)(lo)	|	VoC_lw16_d(REG6,0x5dd2)(hi)
0x15055DBE,	//0x19ca		VoC_sw16_d(REG5,0x5dc0)(lo)	|	VoC_sw16_d(REG5,0x5dbe)(hi)
0x15055DC0,	//0x19cc		VoC_sw16_d(REG5,0x5dc2)(lo)	|	VoC_sw16_d(REG5,0x5dc0)(hi)
0x31465DC2,	//0x19ce		VoC_bngtz16_r(LABLE_bigv_tab_select_IF1,REG6)(lo)	|	VoC_sw16_d(REG5,0x5dc2)(hi)
0xFFC019D6,	//0x19d0		VoC_NAD	|	VoC_bngtz16_r(LABLE_bigv_tab_select_IF1,REG6)(hi)
0x19F22B80,	//0x19d2		VoC_jal(new_choose_table)
0x5DBE1500,	//0x19d4		VoC_sw16_d(REG0,0x5dbe)
		//0x19d6		LABLE_bigv_tab_select_IF1
0x5DD21405,	//0x19d6		VoC_lw16_d(REG5,0x5dd2)
0x5DD41406,	//0x19d8		VoC_lw16_d(REG6,0x5dd4)
0x19E234B5,	//0x19da		VoC_bngt16_rr(LABLE_bigv_tab_select_IF2,REG6,REG5)
0xFFC0D620,	//0x19dc		VoC_NAD	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x19F22B80,	//0x19de		VoC_jal(new_choose_table)
0x5DC01500,	//0x19e0		VoC_sw16_d(REG0,0x5dc0)
		//0x19e2		LABLE_bigv_tab_select_IF2
0x5DD41405,	//0x19e2		VoC_lw16_d(REG5,0x5dd4)
0x5DB61406,	//0x19e4		VoC_lw16_d(REG6,0x5db6)
0xD62078FE,	//0x19e6		VoC_lw16_sd(REG0,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
0x19EE34B5,	//0x19e8		VoC_bngt16_rr(LABLE_bigv_tab_select_END,REG6,REG5)
0x19F22B80,	//0x19ea		VoC_jal(new_choose_table)
0x5DC21500,	//0x19ec		VoC_sw16_d(REG0,0x5dc2)
		//0x19ee		LABLE_bigv_tab_select_END
0xDF80DFA9,	//0x19ee		VoC_pop16(REG0,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x19f0		VoC_NAD	|	VoC_return
		//0x19f2		new_choose_table
0xF6A75FC0,	//0x19f2		VoC_movreg16(REG7,REG5,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xDFE978FD,	//0x19f4		VoC_push16(RA,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xffffffff,DEFAULT)
0xC0287050,	//0x19f6		VoC_add16_rr(REG0,REG0,REG5,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0xFF4443BC,	//0x19f8		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG6,REG7,DEFAULT)
0xF80C59C5,	//0x19fa		VoC_shr16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(ACC1,REG0,DEFAULT)
0x1A052E20,	//0x19fc		VoC_loop_r(0,REG4)
0x1A0136AC,	//0x19fe		VoC_bngt32_rr(LABEL_IMAX1,ACC1,ACC0)
0xD9C5FF2C,	//0x1a00		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_movreg32(ACC0,ACC1,DEFAULT)
		//0x1a01		LABEL_IMAX1
0x1A0536AC,	//0x1a02		VoC_bngt32_rr(LABEL_IMAX2,ACC1,ACC0)
0xD9C5FF2C,	//0x1a04		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_movreg32(ACC0,ACC1,DEFAULT)
		//0x1a05		LABEL_IMAX2
		//0x1a05		VoC_endloop0
0x3304FF40,	//0x1a06		VoC_bez32_r(LABEL_new_choose_table_ENDALL,ACC0)(lo)	|	VoC_lw32z(REG01,DEFAULT)
0x5F431AB6,	//0x1a08		VoC_push32(REG67,DEFAULT)	|	VoC_bez32_r(LABEL_new_choose_table_ENDALL,ACC0)(hi)
0x1817F704,	//0x1a0a		VoC_lw16i_set_inc(REG3,0xcc4,0x5)(lo)	|	VoC_movreg16(REG4,ACC0_LO,IN_PARALLEL)
0x482C0CC4,	//0x1a0c		VoC_blt16_rd(LABLE_COMPILE_6,REG4,0xee2)(lo)	|	VoC_lw16i_set_inc(REG3,0xcc4,0x5)(hi)
0x2B000EE2,	//0x1a0e		VoC_jump_lg(LABEL_new_choose_table_ELSE)(lo)	|	VoC_blt16_rd(LABLE_COMPILE_6,REG4,0xee2)(hi)
0xFFC01A85,	//0x1a10		VoC_NAD	|	VoC_jump_lg(LABEL_new_choose_table_ELSE)(hi)
		//0x1a12		LABLE_COMPILE_6
0x00FF1809,	//0x1a12		VoC_lw16i_set_inc(REG1,0xff,0x2)
0xE40AD8B2,	//0x1a14		VoC_and16_rr(REG2,REG1,DEFAULT)	|	VoC_lw16inc_p(REG2,REG3,DEFAULT)
0xE01569C6,	//0x1a16		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_loop_i_short(0xe,DEFAULT)
0x1A1B3494,	//0x1a18		VoC_bngt16_rr(LABEL_new_choose_table_COM1,REG2,REG4)
0xD8B2E5C4,	//0x1a1a		VoC_lw16inc_p(REG2,REG3,DEFAULT)	|	VoC_jump(LABEL_new_choose_table_BREAK1)
		//0x1a1b		LABEL_new_choose_table_COM1
		//0x1a1c		VoC_endloop0
0xC028640A,	//0x1a1c		VoC_add16_rr(REG0,REG0,REG5,IN_PARALLEL)	|	VoC_and16_rr(REG2,REG1,DEFAULT)
		//0x1a1e		LABEL_new_choose_table_BREAK1
0xDFC06004,	//0x1a1e		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg16(REG4,REG0,DEFAULT)
0x2B80D631,	//0x1a20		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x2,DEFAULT)
0xDFC21ADE,	//0x1a22		VoC_push16(REG2,DEFAULT)	|	VoC_jal(count_bit)(hi)
0xD90B5620,	//0x1a24		VoC_lw32_sd(REG67,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x44A8E0E5,	//0x1a26		VoC_bne16_rd(LABEL_new_choose_table_SWITCH5,REG0,0xebd)(lo)	|	VoC_movreg16(REG5,REG7,DEFAULT)
0x70640EBD,	//0x1a28		VoC_lw16i_short(REG4,0x3,DEFAULT)	|	VoC_bne16_rd(LABEL_new_choose_table_SWITCH5,REG0,0xebd)(hi)
0x2B80D641,	//0x1a2a		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x3,IN_PARALLEL)
0xD6201ADE,	//0x1a2c		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3413D613,	//0x1a2e		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0xF0601A81,	//0x1a30		VoC_lw16i_short(REG0,0x3,DEFAULT)	|	VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(hi)
0x1A812B00,	//0x1a32		VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)
		//0x1a34		LABEL_new_choose_table_SWITCH5
0x0EC744B0,	//0x1a34		VoC_bne16_rd(LABEL_new_choose_table_SWITCH7,REG0,0xec7)
0xD641F0C4,	//0x1a36		VoC_lw16_sd(REG1,0x3,DEFAULT)	|	VoC_lw16i_short(REG4,0x6,DEFAULT)
0x1ADE2B80,	//0x1a38		VoC_jal(count_bit)
0xD613D620,	//0x1a3a		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x1A813413,	//0x1a3c		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)
0x2B00F0C0,	//0x1a3e		VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)(lo)	|	VoC_lw16i_short(REG0,0x6,DEFAULT)
0xFFC01A81,	//0x1a40		VoC_NAD	|	VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)(hi)
		//0x1a42		LABEL_new_choose_table_SWITCH7
0x0ED44590,	//0x1a42		VoC_bne16_rd(LABEL_new_choose_table_SWITCH10,REG0,0xed4)
0xD6417104,	//0x1a44		VoC_lw16_sd(REG1,0x3,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x8,DEFAULT)
0x1ADE2B80,	//0x1a46		VoC_jal(count_bit)
0xD613D620,	//0x1a48		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x1A503413,	//0x1a4a		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH7_IF1,REG2,REG3)
0xDA12F100,	//0x1a4c		VoC_sw16_sd(REG2,0x0,DEFAULT)	|	VoC_lw16i_short(REG0,0x8,DEFAULT)
0xFFC0DA20,	//0x1a4e		VoC_NAD	|	VoC_sw16_sd(REG0,0x1,DEFAULT)
		//0x1a50		LABEL_new_choose_table_SWITCH7_IF1
0xE094590B,	//0x1a50		VoC_lw16i_short(REG4,0x9,IN_PARALLEL)	|	VoC_lw32_sd(REG67,0x0,DEFAULT)
0x2B80D641,	//0x1a52		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x3,DEFAULT)
0xD6201ADE,	//0x1a54		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3413D613,	//0x1a56		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0xF1201A81,	//0x1a58		VoC_lw16i_short(REG0,0x9,DEFAULT)	|	VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(hi)
0x1A812B00,	//0x1a5a		VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)
		//0x1a5c		LABEL_new_choose_table_SWITCH10
0x0EBF4590,	//0x1a5c		VoC_bne16_rd(LABEL_new_choose_table_SWITCH13,REG0,0xebf)
0xD6417164,	//0x1a5e		VoC_lw16_sd(REG1,0x3,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0xb,DEFAULT)
0x1ADE2B80,	//0x1a60		VoC_jal(count_bit)
0xD613D620,	//0x1a62		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x1A6A3413,	//0x1a64		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH10_IF1,REG2,REG3)
0xDA12F160,	//0x1a66		VoC_sw16_sd(REG2,0x0,DEFAULT)	|	VoC_lw16i_short(REG0,0xb,DEFAULT)
0xFFC0DA20,	//0x1a68		VoC_NAD	|	VoC_sw16_sd(REG0,0x1,DEFAULT)
		//0x1a6a		LABEL_new_choose_table_SWITCH10_IF1
0xE0C4590B,	//0x1a6a		VoC_lw16i_short(REG4,0xc,IN_PARALLEL)	|	VoC_lw32_sd(REG67,0x0,DEFAULT)
0x2B80D641,	//0x1a6c		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x3,DEFAULT)
0xD6201ADE,	//0x1a6e		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3413D613,	//0x1a70		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0xF1801A81,	//0x1a72		VoC_lw16i_short(REG0,0xc,DEFAULT)	|	VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(hi)
0xFFC0E5CD,	//0x1a74		VoC_NAD	|	VoC_jump(LABEL_new_choose_table_SWITCH_END)
		//0x1a76		LABEL_new_choose_table_SWITCH13
0x0ED24498,	//0x1a76		VoC_bne16_rd(LABEL_new_choose_table_SWITCH_END,REG0,0xed2)
0xD64171E4,	//0x1a78		VoC_lw16_sd(REG1,0x3,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0xf,DEFAULT)
0x1ADE2B80,	//0x1a7a		VoC_jal(count_bit)
0xD613D620,	//0x1a7c		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x1A813413,	//0x1a7e		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)
0xDF82F1E0,	//0x1a80		VoC_pop16(REG2,DEFAULT)	|	VoC_lw16i_short(REG0,0xf,DEFAULT)
		//0x1a81		LABEL_new_choose_table_SWITCH_END
0x2B00DF82,	//0x1a82		VoC_jump_lg(LABEL_new_choose_table_END)(lo)	|	VoC_pop16(REG2,DEFAULT)
0xF1E01AB5,	//0x1a84		VoC_lw16i_short(REG0,0xf,DEFAULT)	|	VoC_jump_lg(LABEL_new_choose_table_END)(hi)
		//0x1a85		LABEL_new_choose_table_ELSE
0xE4D67027,	//0x1a86		VoC_lw16i_short(REG6,0x4d,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
0xC304C0F3,	//0x1a88		VoC_sub16_rr(REG4,REG4,REG0,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG6,DEFAULT)
0xD8B26926,	//0x1a8a		VoC_lw16inc_p(REG2,REG3,IN_PARALLEL)	|	VoC_loop_i_short(0x9,DEFAULT)
0x1A903422,	//0x1a8c		VoC_bgt16_rr(LABEL_new_choose_table_ELSE_FOR1_IF,REG4,REG2)
0xFFC0E5C4,	//0x1a8e		VoC_NAD	|	VoC_jump(LABEL_new_choose_table_ELSE_FOR2)
		//0x1a90		LABEL_new_choose_table_ELSE_FOR1_IF
		//0x1a90		VoC_endloop0
0xC03858B2,	//0x1a90		VoC_add16_rr(REG0,REG0,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG2,REG3,DEFAULT)
		//0x1a92		LABEL_new_choose_table_ELSE_FOR2
0x0CC41816,	//0x1a92		VoC_lw16i_set_inc(REG2,0xcc4,0x5)
0x0BCA0712,	//0x1a94		VoC_add16_rd(REG2,REG2,0xbca)
0xFFC0F301,	//0x1a96		VoC_NAD	|	VoC_lw16i_short(REG1,0x18,DEFAULT)
0xD8A36906,	//0x1a98		VoC_lw16inc_p(REG3,REG2,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0x1A9E3423,	//0x1a9a		VoC_bgt16_rr(LABEL_new_choose_table_ELSE_FOR2_IF,REG4,REG3)
0xFFC0E5C4,	//0x1a9c		VoC_NAD	|	VoC_jump(LABEL_new_choose_table_ELSE_FOR3)
		//0x1a9e		LABEL_new_choose_table_ELSE_FOR2_IF
		//0x1a9e		VoC_endloop0
0xC07958A3,	//0x1a9e		VoC_add16_rr(REG1,REG1,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG3,REG2,DEFAULT)
		//0x1aa0		LABEL_new_choose_table_ELSE_FOR3
0xF6245FC0,	//0x1aa0		VoC_movreg16(REG4,REG1,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xD90B5631,	//0x1aa2		VoC_lw32_sd(REG67,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG1,0x2,DEFAULT)
0x2B80DFC4,	//0x1aa4		VoC_jal(count_bit)(lo)	|	VoC_push16(REG4,DEFAULT)
0xDFC21ADE,	//0x1aa6		VoC_push16(REG2,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x590BD634,	//0x1aa8		VoC_lw32_sd(REG67,0x0,DEFAULT)	|	VoC_lw16_sd(REG4,0x2,DEFAULT)
0x2B80D651,	//0x1aaa		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x4,IN_PARALLEL)
0xD6131ADE,	//0x1aac		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3493D630,	//0x1aae		VoC_bngt16_rr(LABEL_new_choose_table_ELSE_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG0,0x2,DEFAULT)
0xD6201AB2,	//0x1ab0		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_bngt16_rr(LABEL_new_choose_table_ELSE_END,REG2,REG3)(hi)
		//0x1ab2		LABEL_new_choose_table_ELSE_END
0xDF84DF83,	//0x1ab2		VoC_pop16(REG4,DEFAULT)	|	VoC_pop16(REG3,DEFAULT)
0xDF03DF84,	//0x1ab4		VoC_pop32(REG67,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
		//0x1ab5		LABEL_new_choose_table_END
		//0x1ab6		LABEL_new_choose_table_ENDALL
0xDF81DFA9,	//0x1ab6		VoC_pop16(REG1,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1ab8		VoC_NAD	|	VoC_return
		//0x1aba		bigv_bitcount
0xFF445FE9,	//0x1aba		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x5DBE1808,	//0x1abc		VoC_lw16i_set_inc(REG0,0x5dbe,0x2)
0x5DD0180A,	//0x1abe		VoC_lw16i_set_inc(REG2,0x5dd0,0x2)
0xD8847F45,	//0x1ac0		VoC_lw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_lw32z(ACC1,DEFAULT)
0xE03A600C,	//0x1ac2		VoC_lw16i_short(ACC1_LO,0x3,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0xFFC0E02F,	//0x1ac4		VoC_NAD	|	VoC_movreg16(RL7_HI,REG1,DEFAULT)
		//0x1ac6		LABEL_bigv_bitcount_FOR
0x1AD23184,	//0x1ac6		VoC_bez16_r(LABEL_bigv_bitcount_IF,REG4)
0xD826D8A7,	//0x1ac8		VoC_lw16_p(REG6,REG2,DEFAULT)	|	VoC_lw16inc_p(REG7,REG2,DEFAULT)
0xFFC0E1E1,	//0x1aca		VoC_NAD	|	VoC_movreg16(REG1,RL7_HI,DEFAULT)
0x1ADE2B80,	//0x1acc		VoC_jal(count_bit)
0xF0087003,	//0x1ace		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0xF00A490C,	//0x1ad0		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG23,DEFAULT)
		//0x1ad2		LABEL_bigv_bitcount_IF
0x09ADE180,	//0x1ad2		VoC_sub32_rd(ACC1,ACC1,0xeb9)(lo)	|	VoC_movreg16(REG0,RL6_LO,DEFAULT)
0x07020EB9,	//0x1ad4		VoC_add16_rd(REG2,REG0,0xec4)(lo)	|	VoC_sub32_rd(ACC1,ACC1,0xeb9)(hi)
0x58840EC4,	//0x1ad6		VoC_lw16inc_p(REG4,REG0,DEFAULT)	|	VoC_add16_rd(REG2,REG0,0xec4)(hi)
0x3345F60C,	//0x1ad8		VoC_bnez32_r(LABEL_bigv_bitcount_FOR,ACC1)(lo)	|	VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)
0xDFA91AC6,	//0x1ada		VoC_pop16(RA,DEFAULT)	|	VoC_bnez32_r(LABEL_bigv_bitcount_FOR,ACC1)(hi)
0xE580FFC0,	//0x1adc		VoC_return	|	VoC_NOP
		//0x1ade		count_bit
0xE0557002,	//0x1ade		VoC_lw16i_short(REG5,0x5,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x1B1E3184,	//0x1ae0		VoC_bez16_r(LABEL_COUNT_BIT_END,REG4)
0xC3BE452C,	//0x1ae2		VoC_sub16_rr(REG6,REG6,REG7,IN_PARALLEL)	|	VoC_mult16_rr(REG4,REG4,REG5,DEFAULT)
0x0CC41804,	//0x1ae4		VoC_lw16i_set_inc(REG0,0xcc4,0x1)
0xF80E4020,	//0x1ae6		VoC_shr16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0x7F000AC3,	//0x1ae8		VoC_lw16i(REG3,0xff00)
0xDE005804,	//0x1aea		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_lw16_p(REG4,REG0,DEFAULT)
0xF8FF641C,	//0x1aec		VoC_shr16_ri(REG7,0xffffffff,IN_PARALLEL)	|	VoC_and16_rr(REG4,REG3,DEFAULT)
0xF9445803,	//0x1aee		VoC_shru16_ri(REG4,0x8,IN_PARALLEL)	|	VoC_lw16_p(REG3,REG0,DEFAULT)
0x0EBE0700,	//0x1af0		VoC_add16_rd(REG0,REG0,0xebe)
0xF0064079,	//0x1af2		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG7,DEFAULT)
0xF0095800,	//0x1af4		VoC_lw16i_short(INC1,0x2,IN_PARALLEL)	|	VoC_lw16_p(REG0,REG0,DEFAULT)
0xFFC0E00E,	//0x1af6		VoC_NAD	|	VoC_movreg16(RL7_LO,REG0,DEFAULT)
0x1B1D2E31,	//0x1af8		VoC_loop_r(1,REG6)
0xE0056852,	//0x1afa		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_loop_i_short(0x2,DEFAULT)
0x3186D896,	//0x1afc		VoC_bez16_r(LABEL_COUNT_BIT_IF1,REG6)(lo)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0xDE101B00,	//0x1afe		VoC_inc_p(REG2,DEFAULT)	|	VoC_bez16_r(LABEL_COUNT_BIT_IF1,REG6)(hi)
		//0x1b00		LABEL_COUNT_BIT_IF1
0x0ED53C36,	//0x1b00		VoC_bngt16_rd(LABEL_COUNT_BIT_IF2,REG6,0xed5)
0x0EE23C24,	//0x1b02		VoC_bngt16_rd(LABEL_COUNT_BIT_IF2,REG4,0xee2)
0xE0F6409A,	//0x1b04		VoC_lw16i_short(REG6,0xf,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG3,DEFAULT)
		//0x1b06		LABEL_COUNT_BIT_IF2
0x1B0A31C5,	//0x1b06		VoC_bnez16_r(LABEL_COUNT_BIT_IF3,REG5)
0xE5C3C5A0,	//0x1b08		VoC_jump(LABEL_COUNT_BIT_IF31)	|	VoC_mult16_rr(REG0,REG6,REG4,DEFAULT)
		//0x1b0a		LABEL_COUNT_BIT_IF3
0xFFC0C030,	//0x1b0a		VoC_NAD	|	VoC_add16_rr(REG0,REG0,REG6,DEFAULT)
		//0x1b0c		LABEL_COUNT_BIT_IF31
		//0x1b0c		VoC_endloop0
0xE0177025,	//0x1b0c		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF8086006,	//0x1b0e		VoC_shr16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xF7C56437,	//0x1b10		VoC_movreg16(REG5,RL7_LO,IN_PARALLEL)	|	VoC_and16_rr(REG7,REG6,DEFAULT)
0x3187C146,	//0x1b12		VoC_bez16_r(LABEL_ADD_HT1,REG7)(lo)	|	VoC_add16_rr(REG6,REG5,REG0,DEFAULT)
0xD8661B1A,	//0x1b14		VoC_lw16_p(REG6,REG6,DEFAULT)	|	VoC_bez16_r(LABEL_ADD_HT1,REG7)(hi)
0x7F001646,	//0x1b16		VoC_and16_ri(REG6,0xff00)
0xE5C4F946,	//0x1b18		VoC_jump(LABEL_HIGHI11)	|	VoC_shru16_ri(REG6,0x8,DEFAULT)
		//0x1b1a		LABEL_ADD_HT1
0x1606D866,	//0x1b1a		VoC_and16_ri(REG6,0xff)(lo)	|	VoC_lw16_p(REG6,REG6,DEFAULT)
0xC0B200FF,	//0x1b1c		VoC_add16_rr(REG2,REG2,REG6,DEFAULT)	|	VoC_and16_ri(REG6,0xff)(hi)
		//0x1b1d		LABEL_HIGHI11
		//0x1b1d		VoC_endloop1
		//0x1b1e		LABEL_COUNT_BIT_END
0xDFE9E580,	//0x1b1e		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x1b1f		bin_search_StepSize
0xE8807001,	//0x1b20		VoC_lw16i_short(REG0,0xffffff88,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xE0046003,	//0x1b22		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_movreg16(REG3,REG0,DEFAULT)
0x5FC3DFC2,	//0x1b24		VoC_push16(REG3,DEFAULT)	|	VoC_push16(REG2,DEFAULT)
0x5FC4DF45,	//0x1b26		VoC_push16(REG4,DEFAULT)	|	VoC_push32(ACC1,IN_PARALLEL)
0xDD08DF40,	//0x1b28		VoC_sw32_sd(REG01,0x0,DEFAULT)	|	VoC_push32(REG01,IN_PARALLEL)
		//0x1b29		LABEL_bin_search_StepSize_DO
0xC00B5A33,	//0x1b2a		VoC_add16_rr(REG3,REG0,REG1,IN_PARALLEL)	|	VoC_sw16_sd(REG3,0x2,DEFAULT)
0xD924F80B,	//0x1b2c		VoC_lw32_sd(ACC0,0x3,DEFAULT)	|	VoC_shr16_ri(REG3,0x1,DEFAULT)
0xDA236064,	//0x1b2e		VoC_sw16_sd(REG3,0x1,IN_PARALLEL)	|	VoC_movreg16(REG4,REG3,DEFAULT)
0xF00B5673,	//0x1b30		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x6,DEFAULT)
0x182F2B80,	//0x1b32		VoC_jal(quantize)
0x0F165136,	//0x1b34		VoC_bgt32_rd(LABEL_bin_search_StepSize_ELSE,RL6,0xf16)
0xF3FB5673,	//0x1b36		VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x6,DEFAULT)
0x18F22B80,	//0x1b38		VoC_jal(calc_runlen)
0xF00A5672,	//0x1b3a		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG2,0x6,DEFAULT)
0x19202B80,	//0x1b3c		VoC_jal(count1_bitcount)
0x2B80DF44,	//0x1b3e		VoC_jal(subdivide)(lo)	|	VoC_push32(ACC0,DEFAULT)
0xD670197A,	//0x1b40		VoC_lw16_sd(REG0,0x6,DEFAULT)	|	VoC_jal(subdivide)(hi)
0x19C42B80,	//0x1b42		VoC_jal(bigv_tab_select)
0x2B80D671,	//0x1b44		VoC_jal(bigv_bitcount)(lo)	|	VoC_lw16_sd(REG1,0x6,DEFAULT)
0xDF051ABA,	//0x1b46		VoC_pop32(ACC1,DEFAULT)	|	VoC_jal(bigv_bitcount)(hi)
0xE5C3C92C,	//0x1b48		VoC_jump(LABEL_bin_search_StepSize_IFEND)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
		//0x1b4a		LABEL_bin_search_StepSize_ELSE
0x0F141484,	//0x1b4a		VoC_lw32_d(ACC0,0xf14)
		//0x1b4c		LABEL_bin_search_StepSize_IFEND
0xD908D915,	//0x1b4c		VoC_lw32_sd(REG01,0x0,DEFAULT)	|	VoC_lw32_sd(ACC1,0x1,DEFAULT)
0x1B5236A5,	//0x1b4e		VoC_bngt32_rr(LABEL_bin_search_StepSize_IFEND11,ACC0,ACC1)
0xE5C2D620,	//0x1b50		VoC_jump(LABEL_bin_search_StepSize_IFEND11_NEXT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
		//0x1b52		LABEL_bin_search_StepSize_IFEND11
0xD614D621,	//0x1b52		VoC_lw16_sd(REG4,0x0,DEFAULT)	|	VoC_lw16_sd(REG1,0x1,DEFAULT)
		//0x1b53		LABEL_bin_search_StepSize_IFEND11_NEXT
0x0EB90724,	//0x1b54		VoC_add16_rd(REG4,REG4,0xeb9)
0x0EBA3C1C,	//0x1b56		VoC_bngt16_rd(LABEL_bin_search_StepSize_IFEND2,REG4,0xeba)
0xDA14E5D0,	//0x1b58		VoC_sw16_sd(REG4,0x0,DEFAULT)	|	VoC_jump(LABEL_bin_search_StepSize_BREAK)
		//0x1b59		LABEL_bin_search_StepSize_IFEND2
0x372CD623,	//0x1b5a		VoC_be32_rr(LABEL_bin_search_StepSize_BREAK,ACC1,ACC0)(lo)	|	VoC_lw16_sd(REG3,0x1,DEFAULT)
0xD6321B68,	//0x1b5c		VoC_lw16_sd(REG2,0x2,DEFAULT)	|	VoC_be32_rr(LABEL_bin_search_StepSize_BREAK,ACC1,ACC0)(hi)
0x3C2DC29D,	//0x1b5e		VoC_bngt16_rd(LABLE_COMPILE_8,REG5,0xeb9)(lo)	|	VoC_sub16_rr(REG5,REG2,REG3,DEFAULT)
0x2B000EB9,	//0x1b60		VoC_jump_lg(LABEL_bin_search_StepSize_DO)(lo)	|	VoC_bngt16_rd(LABLE_COMPILE_8,REG5,0xeb9)(hi)
0xFFC01B29,	//0x1b62		VoC_NAD	|	VoC_jump_lg(LABEL_bin_search_StepSize_DO)(hi)
		//0x1b64		LABLE_COMPILE_8
0x0F0A4C25,	//0x1b64		VoC_bnlt16_rd(LABEL_bin_search_StepSize_BREAK,REG5,0xf0a)
0x1B292B00,	//0x1b66		VoC_jump_lg(LABEL_bin_search_StepSize_DO)
		//0x1b68		LABEL_bin_search_StepSize_BREAK
0xDF005F84,	//0x1b68		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0xDF055F83,	//0x1b6a		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDFA9DF82,	//0x1b6c		VoC_pop16(RA,DEFAULT)	|	VoC_pop16(REG2,DEFAULT)
0x5DD81503,	//0x1b6e		VoC_sw16_d(REG3,0x5dd8)
0xDFE9E580,	//0x1b70		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x1b71		CS_L3_format_bitstream
0x0F1A6E24,	//0x1b72		VoC_bnez16_d(L3_format_bitstream_Initial_done,0xf1a)
0x0F341808,	//0x1b74		VoC_lw16i_set_inc(REG0,0xf34,0x2)
0xE901FF44,	//0x1b76		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_lw32z(ACC0,DEFAULT)
		//0x1b78		VoC_endloop0
0x1808DDC4,	//0x1b78		VoC_lw16i_set_inc(REG0,0xf35,0x2)(lo)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x0A820F35,	//0x1b7a		VoC_lw16i(REG2,0x5dda)(lo)	|	VoC_lw16i_set_inc(REG0,0xf35,0x2)(hi)
0x0A835DDA,	//0x1b7c		VoC_lw16i(REG3,0x5df8)(lo)	|	VoC_lw16i(REG2,0x5dda)(hi)
0xDC825DF8,	//0x1b7e		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x5df8)(hi)
0x0A82DC83,	//0x1b80		VoC_lw16i(REG2,0x5dfe)(lo)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0x0A835DFE,	//0x1b82		VoC_lw16i(REG3,0x5e06)(lo)	|	VoC_lw16i(REG2,0x5dfe)(hi)
0xDC825E06,	//0x1b84		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x5e06)(hi)
0x0A82DC83,	//0x1b86		VoC_lw16i(REG2,0x5e0e)(lo)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0x0A835E0E,	//0x1b88		VoC_lw16i(REG3,0x5e28)(lo)	|	VoC_lw16i(REG2,0x5e0e)(hi)
0xDC825E28,	//0x1b8a		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x5e28)(hi)
0x0A82DC83,	//0x1b8c		VoC_lw16i(REG2,0x5e42)(lo)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0x0A835E42,	//0x1b8e		VoC_lw16i(REG3,0x5e5c)(lo)	|	VoC_lw16i(REG2,0x5e42)(hi)
0xDC825E5C,	//0x1b90		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x5e5c)(hi)
0xDC83F022,	//0x1b92		VoC_sw16inc_p(REG3,REG0,DEFAULT)	|	VoC_lw16i_short(REG2,0x1,DEFAULT)
0x0F1A1502,	//0x1b94		VoC_sw16_d(REG2,0xf1a)
		//0x1b96		L3_format_bitstream_Initial_done
0x1BCA2B80,	//0x1b96		VoC_jal(CS_encodeSideInfo)
0x1B9E2B80,	//0x1b98		VoC_jal(CS_encodeMainData)
0xFFC0DFA9,	//0x1b9a		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1b9c		VoC_NAD	|	VoC_return
		//0x1b9e		CS_encodeMainData
0xE0065FE9,	//0x1b9e		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x1CD0180A,	//0x1ba0		VoC_lw16i_set_inc(REG2,0x1cd0,0x2)
0x5CF61809,	//0x1ba2		VoC_lw16i_set_inc(REG1,0x5cf6,0x2)
		//0x1ba4		encodeMainData_gr_loop_begin
0xDFC6F006,	//0x1ba4		VoC_push16(REG6,DEFAULT)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
		//0x1ba6		encodeMainData_ch_loop_begin
0xDFC2DFC6,	//0x1ba6		VoC_push16(REG2,DEFAULT)	|	VoC_push16(REG6,DEFAULT)
0xF00B5FC1,	//0x1ba8		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0x5E7A1808,	//0x1baa		VoC_lw16i_set_inc(REG0,0x5e7a,0x2)
0x1C562B80,	//0x1bac		VoC_jal(CS_Huffmancodebits)
0x180BE062,	//0x1bae		VoC_lw16i_set_inc(REG3,0x5e7a,0x2)(lo)	|	VoC_movreg16(REG2,REG3,DEFAULT)
0xF0535E7A,	//0x1bb0		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0x5e7a,0x2)(hi)
0x1DFD2B80,	//0x1bb2		VoC_jal(CS_BF_BitstreamFrame)
0xDF82DF81,	//0x1bb4		VoC_pop16(REG2,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x0F060712,	//0x1bb6		VoC_add16_rd(REG2,REG2,0xf06)
0x0EEF0709,	//0x1bb8		VoC_add16_rd(REG1,REG1,0xeef)
0x0736DF86,	//0x1bba		VoC_add16_rd(REG6,REG6,0xeb9)(lo)	|	VoC_pop16(REG6,DEFAULT)
0x4A8E0EB9,	//0x1bbc		VoC_blt16_rd(encodeMainData_ch_loop_begin,REG6,0xebd)(lo)	|	VoC_add16_rd(REG6,REG6,0xeb9)(hi)
0xDF860EBD,	//0x1bbe		VoC_pop16(REG6,DEFAULT)	|	VoC_blt16_rd(encodeMainData_ch_loop_begin,REG6,0xebd)(hi)
0x0EB90736,	//0x1bc0		VoC_add16_rd(REG6,REG6,0xeb9)
0x13D0180A,	//0x1bc2		VoC_lw16i_set_inc(REG2,0x13d0,0x2)
0x0EBD4A06,	//0x1bc4		VoC_blt16_rd(encodeMainData_gr_loop_begin,REG6,0xebd)
0xFFC0DFA9,	//0x1bc6		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1bc8		VoC_NAD	|	VoC_return
		//0x1bca		CS_encodeSideInfo
0x0F341480,	//0x1bca		VoC_lw32_d(REG01,0xf34)
0xF0097000,	//0x1bcc		VoC_lw16i_short(INC1,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0x0FFF0A86,	//0x1bce		VoC_lw16i(REG6,0xfff)
0xFF07F187,	//0x1bd0		VoC_movreg32(RL7,REG01,DEFAULT)	|	VoC_lw16i_short(REG7,0xc,DEFAULT)
0x1406DDCB,	//0x1bd2		VoC_lw16_d(REG6,0x5cd7)(lo)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xF0275CD7,	//0x1bd4		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_lw16_d(REG6,0x5cd7)(hi)
0xE0257024,	//0x1bd6		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x1406DDCB,	//0x1bd8		VoC_lw16_d(REG6,0x5cd8)(lo)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xDDCA5CD8,	//0x1bda		VoC_sw32inc_p(REG45,REG1,DEFAULT)	|	VoC_lw16_d(REG6,0x5cd8)(hi)
0xF027E386,	//0x1bdc		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_not16_r(REG6,DEFAULT)
0x5CD41404,	//0x1bde		VoC_lw16_d(REG4,0x5cd4)
0xE0455DCB,	//0x1be0		VoC_lw16i_short(REG5,0x4,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x5CD51406,	//0x1be2		VoC_lw16_d(REG6,0x5cd5)
0xE0275DCA,	//0x1be4		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x5CD61404,	//0x1be6		VoC_lw16_d(REG4,0x5cd6)
0xE0155DCB,	//0x1be8		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x5CDB1406,	//0x1bea		VoC_lw16_d(REG6,0x5cdb)
0xE0175DCA,	//0x1bec		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x5CD91404,	//0x1bee		VoC_lw16_d(REG4,0x5cd9)
0xE0255DCB,	//0x1bf0		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x5CDC1406,	//0x1bf2		VoC_lw16_d(REG6,0x5cdc)
0xE0275DCA,	//0x1bf4		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x5CDD1404,	//0x1bf6		VoC_lw16_d(REG4,0x5cdd)
0xE0155DCB,	//0x1bf8		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x5CDE1406,	//0x1bfa		VoC_lw16_d(REG6,0x5cde)
0xE0175DCA,	//0x1bfc		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x5CDA1404,	//0x1bfe		VoC_lw16_d(REG4,0x5cda)
0xE0255DCB,	//0x1c00		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xDDCAF1AE,	//0x1c02		VoC_sw32inc_p(REG45,REG1,DEFAULT)	|	VoC_lw16i_short(RL7_LO,0xd,DEFAULT)
0x0F341587,	//0x1c04		VoC_sw32_d(RL7,0xf34)
0x1808F001,	//0x1c06		VoC_lw16i_set_inc(REG0,0xf36,0x2)(lo)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xE8E10F36,	//0x1c08		VoC_loop_i_short(0x7,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0xf36,0x2)(hi)
		//0x1c0a		VoC_endloop0
0x180ADC81,	//0x1c0a		VoC_lw16i_set_inc(REG2,0x5ce0,0x2)(lo)	|	VoC_sw16inc_p(REG1,REG0,DEFAULT)
0x14805CE0,	//0x1c0c		VoC_lw32_d(REG01,0xf36)(lo)	|	VoC_lw16i_set_inc(REG2,0x5ce0,0x2)(hi)
0xD9D30F36,	//0x1c0e		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32_d(REG01,0xf36)(hi)
0xF045F127,	//0x1c10		VoC_lw16i_short(REG5,0x2,DEFAULT)	|	VoC_lw16i_short(REG7,0x9,DEFAULT)
0xD9D3DDCB,	//0x1c12		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xF044F067,	//0x1c14		VoC_lw16i_short(REG4,0x2,DEFAULT)	|	VoC_lw16i_short(REG7,0x3,DEFAULT)
0x1504DDCB,	//0x1c16		VoC_sw16_d(REG4,0xf36)(lo)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x18080F36,	//0x1c18		VoC_lw16i_set_inc(REG0,0xf38,0x2)(lo)	|	VoC_sw16_d(REG4,0xf36)(hi)
0x59D30F38,	//0x1c1a		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0xf38,0x2)(hi)
0xD986E003,	//0x1c1c		VoC_lw32_p(RL6,REG0,DEFAULT)	|	VoC_lw16i_short(REG3,0x0,IN_PARALLEL)
0x2E29E1A1,	//0x1c1e		VoC_loop_r(1,REG5)(lo)	|	VoC_movreg16(REG1,RL6_HI,DEFAULT)
0xE8841C29,	//0x1c20		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_loop_r(1,REG5)(hi)
0xE01758A6,	//0x1c22		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBC0FB,	//0x1c24		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG7,DEFAULT)
		//0x1c25		VoC_endloop0
0x5986DC83,	//0x1c26		VoC_lw32_p(RL6,REG0,DEFAULT)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0xE1A1E003,	//0x1c28		VoC_movreg16(REG1,RL6_HI,DEFAULT)	|	VoC_lw16i_short(REG3,0x0,IN_PARALLEL)
		//0x1c29		VoC_endloop1
0x0F3C1808,	//0x1c2a		VoC_lw16i_set_inc(REG0,0xf3c,0x2)
0xFFC0F044,	//0x1c2c		VoC_NAD	|	VoC_lw16i_short(REG4,0x2,DEFAULT)
		//0x1c2e		encodeSideInfo_gr_loop
0x1C4D2E29,	//0x1c2e		VoC_loop_r(1,REG5)
0x1807D987,	//0x1c30		VoC_lw16i_set_inc(REG3,0xeac,0x1)(lo)	|	VoC_lw32_p(RL7,REG0,DEFAULT)
0xFFC00EAC,	//0x1c32		VoC_NAD	|	VoC_lw16i_set_inc(REG3,0xeac,0x1)(hi)
0xF7E16845,	//0x1c34		VoC_movreg16(REG1,RL7_HI,IN_PARALLEL)	|	VoC_loop_i_short(0x2,DEFAULT)
0xD8B758A6,	//0x1c36		VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBFFC0,	//0x1c38		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
		//0x1c39		VoC_endloop0
0xE844D9D3,	//0x1c3a		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_lw32inc_p(REG67,REG2,DEFAULT)
0xD8B758A6,	//0x1c3c		VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBFFC0,	//0x1c3e		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
		//0x1c3f		VoC_endloop0
0xE0177006,	//0x1c40		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0xDDCBFFC0,	//0x1c42		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
0xE904FFC0,	//0x1c44		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_NAD
0xD8B758A6,	//0x1c46		VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBFFC0,	//0x1c48		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
		//0x1c49		VoC_endloop0
0x0712F1A7,	//0x1c4a		VoC_add16_rd(REG2,REG2,0xed1)(lo)	|	VoC_lw16i_short(REG7,0xd,DEFAULT)
0xDC870ED1,	//0x1c4c		VoC_sw16inc_p(REG7,REG0,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0xed1)(hi)
		//0x1c4d		VoC_endloop1
0x5D52180A,	//0x1c4e		VoC_lw16i_set_inc(REG2,0x5d52,0x2)
0x0EB907A4,	//0x1c50		VoC_sub16_rd(REG4,REG4,0xeb9)
0x1C2E31C4,	//0x1c52		VoC_bnez16_r(encodeSideInfo_gr_loop,REG4)
0xFFC0E580,	//0x1c54		VoC_NAD	|	VoC_return
		//0x1c56		CS_Huffmancodebits
0xFF455FE9,	//0x1c56		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x5CD71406,	//0x1c58		VoC_lw16_d(REG6,0x5cd7)
0x0EBE0836,	//0x1c5a		VoC_mult16_rd(REG6,REG6,0xebe)
0x0EBB070B,	//0x1c5c		VoC_add16_rd(REG3,REG1,0xebb)
0x5CD50736,	//0x1c5e		VoC_add16_rd(REG6,REG6,0x5cd5)
0x0EE50836,	//0x1c60		VoC_mult16_rd(REG6,REG6,0xee5)
0x0D6E0A84,	//0x1c62		VoC_lw16i(REG4,0xd6e)
0xD9DAC1A6,	//0x1c64		VoC_lw32inc_p(REG45,REG3,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG4,DEFAULT)
0x0EB90727,	//0x1c66		VoC_add16_rd(REG7,REG4,0xeb9)
0x0724D9DA,	//0x1c68		VoC_add16_rd(REG4,REG4,0xeb9)(lo)	|	VoC_lw32inc_p(REG45,REG3,DEFAULT)
0xC13C0EB9,	//0x1c6a		VoC_add16_rr(REG4,REG4,REG7,DEFAULT)	|	VoC_add16_rd(REG4,REG4,0xeb9)(hi)
0xC1A5C1BF,	//0x1c6c		VoC_add16_rr(REG5,REG6,REG4,DEFAULT)	|	VoC_add16_rr(REG7,REG6,REG7,DEFAULT)
0x070FD874,	//0x1c6e		VoC_add16_rd(REG7,REG1,0xebd)(lo)	|	VoC_lw16_p(REG4,REG7,DEFAULT)
0xD8550EBD,	//0x1c70		VoC_lw16_p(REG5,REG5,DEFAULT)	|	VoC_add16_rd(REG7,REG1,0xebd)(hi)
0xF9FFD877,	//0x1c72		VoC_shru16_ri(REG7,0xffffffff,DEFAULT)	|	VoC_lw16_p(REG7,REG7,DEFAULT)
0xFF457006,	//0x1c74		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0x1CAA3187,	//0x1c76		VoC_bez16_r(Huffmancodebits_part2,REG7)
		//0x1c78		Huffmancodebits_bigvalues_loop_start
0x0EBF070B,	//0x1c78		VoC_add16_rd(REG3,REG1,0xebf)
0x3426DF43,	//0x1c7a		VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG4,REG6)(lo)	|	VoC_push32(REG67,DEFAULT)
0x070B1C83,	//0x1c7c		VoC_add16_rd(REG3,REG1,0xec8)(lo)	|	VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG4,REG6)(hi)
0x342E0EC8,	//0x1c7e		VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG5,REG6)(lo)	|	VoC_add16_rd(REG3,REG1,0xec8)(hi)
0x070B1C83,	//0x1c80		VoC_add16_rd(REG3,REG1,0xed5)(lo)	|	VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG5,REG6)(hi)
0xD9D60ED5,	//0x1c82		VoC_lw32inc_p(RL6,REG2,DEFAULT)	|	VoC_add16_rd(REG3,REG1,0xed5)(hi)
		//0x1c83		Huffmancodebits_bigvalues_loop_100
0xD833D9D7,	//0x1c84		VoC_lw16_p(REG3,REG3,DEFAULT)	|	VoC_lw32inc_p(RL7,REG2,DEFAULT)
0xDFC25F42,	//0x1c86		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0x1CA23183,	//0x1c88		VoC_bez16_r(Huffmancodebits_bigvalues_loop_200,REG3)
0xDF45DF40,	//0x1c8a		VoC_push32(ACC1,DEFAULT)	|	VoC_push32(REG01,DEFAULT)
0x1D3E2B80,	//0x1c8c		VoC_jal(CS_HuffmanCode)
0xF6286006,	//0x1c8e		VoC_movreg16(ACC0_LO,REG1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xE0075F02,	//0x1c90		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xC15D5F00,	//0x1c92		VoC_add16_rr(REG5,REG5,REG3,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x0EB90724,	//0x1c94		VoC_add16_rd(REG4,REG4,0xeb9)
0x5DC3F009,	//0x1c96		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw16i_short(ACC0_HI,0x0,DEFAULT)
0x5DC4F646,	//0x1c98		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_movreg16(REG6,REG2,IN_PARALLEL)
0x3303F00A,	//0x1c9a		VoC_bez32_r(Huffmancodebits_1010,REG67)(lo)	|	VoC_lw16i_short(INC2,0x2,IN_PARALLEL)
0xDDC61CA1,	//0x1c9c		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_bez32_r(Huffmancodebits_1010,REG67)(hi)
0x0724DDC3,	//0x1c9e		VoC_add16_rd(REG4,REG4,0xeb9)(lo)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
0xFF150EB9,	//0x1ca0		VoC_movreg32(ACC1,REG45,DEFAULT)	|	VoC_add16_rd(REG4,REG4,0xeb9)(hi)
		//0x1ca1		Huffmancodebits_1010
		//0x1ca2		Huffmancodebits_bigvalues_loop_200
0xDF825F02,	//0x1ca2		VoC_pop16(REG2,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0x0736DF03,	//0x1ca4		VoC_add16_rd(REG6,REG6,0xebd)(lo)	|	VoC_pop32(REG67,DEFAULT)
0x343E0EBD,	//0x1ca6		VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_start,REG7,REG6)(lo)	|	VoC_add16_rd(REG6,REG6,0xebd)(hi)
0xFFC01C78,	//0x1ca8		VoC_NAD	|	VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_start,REG7,REG6)(hi)
		//0x1caa		Huffmancodebits_part2
0x0EC6070C,	//0x1caa		VoC_add16_rd(REG4,REG1,0xec6)
0x0EC1070D,	//0x1cac		VoC_add16_rd(REG5,REG1,0xec1)
0xD855D844,	//0x1cae		VoC_lw16_p(REG5,REG5,DEFAULT)	|	VoC_lw16_p(REG4,REG4,DEFAULT)
0x0EC2072D,	//0x1cb0		VoC_add16_rd(REG5,REG5,0xec2)
0x0EC7082D,	//0x1cb2		VoC_mult16_rd(REG5,REG5,0xec7)
0x0CC41807,	//0x1cb4		VoC_lw16i_set_inc(REG3,0xcc4,0x1)
0xDFC140EB,	//0x1cb6		VoC_push16(REG1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG5,DEFAULT)
0x0EBE071B,	//0x1cb8		VoC_add16_rd(REG3,REG3,0xebe)
0x1CC63184,	//0x1cba		VoC_bez16_r(Huffmancodebits_101010,REG4)
0xD9D26709,	//0x1cbc		VoC_lw32inc_p(REG45,REG2,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0x59D3D9D6,	//0x1cbe		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32inc_p(RL6,REG2,DEFAULT)
0xD9D6F785,	//0x1cc0		VoC_lw32inc_p(RL6,REG2,DEFAULT)	|	VoC_movreg16(REG5,RL6_LO,IN_PARALLEL)
0x2B80E187,	//0x1cc2		VoC_jal(CS_L3_huffman_coder_count1)(lo)	|	VoC_movreg16(REG7,RL6_LO,DEFAULT)
0xD9D21CE8,	//0x1cc4		VoC_lw32inc_p(REG45,REG2,DEFAULT)	|	VoC_jal(CS_L3_huffman_coder_count1)(hi)
		//0x1cc5		VoC_endloop0
		//0x1cc6		Huffmancodebits_101010
0x070BDF81,	//0x1cc6		VoC_add16_rd(REG3,REG1,0xeca)(lo)	|	VoC_pop16(REG1,DEFAULT)
0x58140ECA,	//0x1cc8		VoC_lw16_p(REG4,REG1,DEFAULT)	|	VoC_add16_rd(REG3,REG1,0xeca)(hi)
0x851CF765,	//0x1cca		VoC_sub16_rp(REG4,REG4,REG3,DEFAULT)	|	VoC_movreg16(REG5,ACC1_HI,IN_PARALLEL)
0xF743432C,	//0x1ccc		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG4,REG5,DEFAULT)
0x1CE43184,	//0x1cce		VoC_bez16_r(Huffmancodebits_end,REG4)
0xF92C6085,	//0x1cd0		VoC_shru16_ri(REG4,0x5,IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
0x001F1605,	//0x1cd2		VoC_and16_ri(REG5,0x1f)
0xEFF677E7,	//0x1cd4		VoC_lw16i_short(REG6,0xffffffff,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0xffffffff,DEFAULT)
0x1CDE3184,	//0x1cd6		VoC_bez16_r(Huffmancodebits_300,REG4)
0xE2086703,	//0x1cd8		VoC_lw16i_short(ACC0_LO,0x20,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0x5DC4DDC3,	//0x1cda		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
		//0x1cdb		VoC_endloop0
0xFFC0DE18,	//0x1cdc		VoC_NAD	|	VoC_inc_p(REG3,IN_PARALLEL)
		//0x1cde		Huffmancodebits_300
0x1CE43185,	//0x1cde		VoC_bez16_r(Huffmancodebits_end,REG5)
0xDDC3E0A8,	//0x1ce0		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_movreg16(ACC0_LO,REG5,DEFAULT)
0xDE185DC4,	//0x1ce2		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x1ce4		Huffmancodebits_end
0xFFC0DFA9,	//0x1ce4		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1ce6		VoC_NAD	|	VoC_return
		//0x1ce8		CS_L3_huffman_coder_count1
0xDF417001,	//0x1ce8		VoC_push32(REG23,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xFF477F46,	//0x1cea		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0x1CF03104,	//0x1cec		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_v,REG4)
0xE01C4264,	//0x1cee		VoC_lw16i_short(RL6_LO,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG1,REG4,DEFAULT)
		//0x1cf0		L3_huffman_coder_count1_abs_and_sign_v
0x1CF43105,	//0x1cf0		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_w,REG5)
0xE01D426D,	//0x1cf2		VoC_lw16i_short(RL6_HI,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG1,REG5,DEFAULT)
		//0x1cf4		L3_huffman_coder_count1_abs_and_sign_w
0x1CF83106,	//0x1cf4		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_x,REG6)
0xE01E4276,	//0x1cf6		VoC_lw16i_short(RL7_LO,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG1,REG6,DEFAULT)
		//0x1cf8		L3_huffman_coder_count1_abs_and_sign_x
0x1CFC3107,	//0x1cf8		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_y,REG7)
0xE01F427F,	//0x1cfa		VoC_lw16i_short(RL7_HI,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG7,REG1,REG7,DEFAULT)
		//0x1cfc		L3_huffman_coder_count1_abs_and_sign_y
0x78EFD8B2,	//0x1cfc		VoC_shr16_ri(REG7,0xfffffffd,DEFAULT)	|	VoC_lw16inc_p(REG2,REG3,DEFAULT)
0x78FDDF43,	//0x1cfe		VoC_shr16_ri(REG5,0xffffffff,DEFAULT)	|	VoC_push32(REG67,IN_PARALLEL)
0x78F6DF42,	//0x1d00		VoC_shr16_ri(REG6,0xfffffffe,DEFAULT)	|	VoC_push32(REG45,IN_PARALLEL)
0xC1F7C1E7,	//0x1d02		VoC_add16_rr(REG7,REG7,REG6,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG4,IN_PARALLEL)
0xD8B341EF,	//0x1d04		VoC_lw16inc_p(REG3,REG3,IN_PARALLEL)	|	VoC_add16_rr(REG7,REG7,REG5,DEFAULT)
0xF80F60E6,	//0x1d06		VoC_shr16_ri(REG7,0x1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG7,DEFAULT)
0xC0FB40BA,	//0x1d08		VoC_add16_rr(REG3,REG3,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG7,DEFAULT)
0x00011606,	//0x1d0a		VoC_and16_ri(REG6,0x1)
0xFF445822,	//0x1d0c		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16_p(REG2,REG2,DEFAULT)
0x3186D833,	//0x1d0e		VoC_bez16_r(L3_huffman_coder_count1_even,REG6)(lo)	|	VoC_lw16_p(REG3,REG3,DEFAULT)
0x79421D14,	//0x1d10		VoC_shru16_ri(REG2,0x8,DEFAULT)	|	VoC_bez16_r(L3_huffman_coder_count1_even,REG6)(hi)
0xE5C5F943,	//0x1d12		VoC_jump(L3_huffman_coder_count1_even_end)	|	VoC_shru16_ri(REG3,0x8,IN_PARALLEL)
		//0x1d14		L3_huffman_coder_count1_even
0x00FF1602,	//0x1d14		VoC_and16_ri(REG2,0xff)
0x00FF1603,	//0x1d16		VoC_and16_ri(REG3,0xff)
		//0x1d18		L3_huffman_coder_count1_even_end
0xE0126048,	//0x1d18		VoC_lw16i_short(REG2,0x1,IN_PARALLEL)	|	VoC_movreg16(ACC0_LO,REG2,DEFAULT)
0xFF435F02,	//0x1d1a		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xF6685DC4,	//0x1d1c		VoC_movreg16(ACC0_LO,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xF7867028,	//0x1d1e		VoC_movreg16(REG6,RL6_LO,IN_PARALLEL)	|	VoC_lw16i_short(ACC0_LO,0x1,DEFAULT)
0xC94D5DC4,	//0x1d20		VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x3184F023,	//0x1d22		VoC_bez16_r(L3_huffman_coder_count1_v,REG4)(lo)	|	VoC_lw16i_short(REG3,0x1,DEFAULT)
0xDDC31D28,	//0x1d24		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_bez16_r(L3_huffman_coder_count1_v,REG4)(hi)
0xC94D5DC4,	//0x1d26		VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x1d28		L3_huffman_coder_count1_v
0x3185E1A6,	//0x1d28		VoC_bez16_r(L3_huffman_coder_count1_w,REG5)(lo)	|	VoC_movreg16(REG6,RL6_HI,DEFAULT)
0xDDC31D2E,	//0x1d2a		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_bez16_r(L3_huffman_coder_count1_w,REG5)(hi)
0xC94D5DC4,	//0x1d2c		VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x1d2e		L3_huffman_coder_count1_w
0xDF0261C6,	//0x1d2e		VoC_pop32(REG45,IN_PARALLEL)	|	VoC_movreg16(REG6,RL7_LO,DEFAULT)
0x1D353184,	//0x1d30		VoC_bez16_r(L3_huffman_coder_count1_x,REG4)
0x5DC4DDC3,	//0x1d32		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
0xE1E6C94D,	//0x1d34		VoC_movreg16(REG6,RL7_HI,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)
		//0x1d35		L3_huffman_coder_count1_x
0x1D3B3185,	//0x1d36		VoC_bez16_r(L3_huffman_coder_count1_y,REG5)
0x5DC4DDC3,	//0x1d38		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
0xDF01C94D,	//0x1d3a		VoC_pop32(REG23,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)
		//0x1d3b		L3_huffman_coder_count1_y
0xFFC0E580,	//0x1d3c		VoC_NAD	|	VoC_return
		//0x1d3e		CS_HuffmanCode
0x1D4631C3,	//0x1d3e		VoC_bnez16_r(HuffmanCode_go,REG3)
0xFF417F40,	//0x1d40		VoC_lw32z(REG23,IN_PARALLEL)	|	VoC_lw32z(REG01,DEFAULT)
0x2B00FF46,	//0x1d42		VoC_jump_lg(HuffmanCode_end)(lo)	|	VoC_lw32z(RL6,DEFAULT)
0xFFC01DD5,	//0x1d44		VoC_NAD	|	VoC_jump_lg(HuffmanCode_end)(hi)
		//0x1d46		HuffmanCode_go
0x0EC7081C,	//0x1d46		VoC_mult16_rd(REG4,REG3,0xec7)
0x0CC41806,	//0x1d48		VoC_lw16i_set_inc(REG2,0xcc4,0x1)
0x7F45C0A2,	//0x1d4a		VoC_lw32z(ACC1,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
0x3286FF44,	//0x1d4c		VoC_bgtz32_r(HuffmanCode_abs_and_sign_100,RL6)(lo)	|	VoC_lw32z(ACC0,IN_PARALLEL)
0x702A1D52,	//0x1d4e		VoC_lw16i_short(ACC1_LO,0x1,DEFAULT)	|	VoC_bgtz32_r(HuffmanCode_abs_and_sign_100,RL6)(hi)
0xFFC0CB36,	//0x1d50		VoC_NAD	|	VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)
		//0x1d52		HuffmanCode_abs_and_sign_100
0x1D563287,	//0x1d52		VoC_bgtz32_r(HuffmanCode_abs_and_sign_200,RL7)
0xCB3F702B,	//0x1d54		VoC_sub32_rr(RL7,ACC0,RL7,IN_PARALLEL)	|	VoC_lw16i_short(ACC1_HI,0x1,DEFAULT)
		//0x1d56		HuffmanCode_abs_and_sign_200
0xF78658A4,	//0x1d56		VoC_movreg16(REG6,RL6_LO,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG2,DEFAULT)
0xF7C758A5,	//0x1d58		VoC_movreg16(REG7,RL7_LO,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG2,DEFAULT)
0xF9445E10,	//0x1d5a		VoC_shru16_ri(REG4,0x8,IN_PARALLEL)	|	VoC_inc_p(REG2,DEFAULT)
0x0EE23823,	//0x1d5c		VoC_bgt16_rd(LBALE_COMPILE_9,REG3,0xee2)
0x1DAE2B00,	//0x1d5e		VoC_jump_lg(HuffmanCode_table_select_lt15)
		//0x1d60		LBALE_COMPILE_9
0xE00171E0,	//0x1d60		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xf,DEFAULT)
0xFF445F45,	//0x1d62		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0x3606FF45,	//0x1d64		VoC_bgt32_rr(HuffmanCode_table_select_xgt14,REG01,RL6)(lo)	|	VoC_lw32z(ACC1,DEFAULT)
0x4B841D6A,	//0x1d66		VoC_sub32_rr(ACC0,RL6,REG01,DEFAULT)	|	VoC_bgt32_rr(HuffmanCode_table_select_xgt14,REG01,RL6)(hi)
0xFFC0E0F6,	//0x1d68		VoC_NAD	|	VoC_lw16i_short(REG6,0xf,IN_PARALLEL)
		//0x1d6a		HuffmanCode_table_select_xgt14
0x1D6E3607,	//0x1d6a		VoC_bgt32_rr(HuffmanCode_table_select_ygt14,REG01,RL7)
0xE0F74BC5,	//0x1d6c		VoC_lw16i_short(REG7,0xf,IN_PARALLEL)	|	VoC_sub32_rr(ACC1,RL7,REG01,DEFAULT)
		//0x1d6e		HuffmanCode_table_select_ygt14
0xD8A1C534,	//0x1d6e		VoC_lw16inc_p(REG1,REG2,DEFAULT)	|	VoC_mult16_rr(REG4,REG4,REG6,DEFAULT)
0xE080C13C,	//0x1d70		VoC_movreg16(REG0,REG4,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG7,DEFAULT)
0xD8A27808,	//0x1d72		VoC_lw16inc_p(REG2,REG2,IN_PARALLEL)	|	VoC_shr16_ri(REG0,0x1,DEFAULT)
0xC0404082,	//0x1d74		VoC_add16_rr(REG0,REG1,REG0,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG0,DEFAULT)
0x0EED3823,	//0x1d76		VoC_bgt16_rd(HuffmanCode_table_select_32,REG3,0xeed)
0xFFC0C060,	//0x1d78		VoC_NAD	|	VoC_add16_rr(REG0,REG1,REG4,DEFAULT)
		//0x1d7a		HuffmanCode_table_select_32
0x00011604,	//0x1d7a		VoC_and16_ri(REG4,0x1)
0xD800D821,	//0x1d7c		VoC_lw16_p(REG0,REG0,DEFAULT)	|	VoC_lw16_p(REG1,REG2,DEFAULT)
0x3184E002,	//0x1d7e		VoC_bez16_r(HuffmanCode_table_select_odd,REG4)(lo)	|	VoC_movreg16(REG2,REG0,DEFAULT)
0x78401D84,	//0x1d80		VoC_shr16_ri(REG0,0x8,DEFAULT)	|	VoC_bez16_r(HuffmanCode_table_select_odd,REG4)(hi)
0xE5C5F841,	//0x1d82		VoC_jump(HuffmanCode_table_select_odd_end)	|	VoC_shr16_ri(REG1,0x8,IN_PARALLEL)
		//0x1d84		HuffmanCode_table_select_odd
0x00FF1600,	//0x1d84		VoC_and16_ri(REG0,0xff)
0x00FF1601,	//0x1d86		VoC_and16_ri(REG1,0xff)
		//0x1d88		HuffmanCode_table_select_odd_end
0x0EED3823,	//0x1d88		VoC_bgt16_rd(HuffmanCode_table_select_32_2,REG3,0xeed)
0xFFC0E040,	//0x1d8a		VoC_NAD	|	VoC_movreg16(REG0,REG2,DEFAULT)
		//0x1d8c		HuffmanCode_table_select_32_2
0xFF465F07,	//0x1d8c		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0x3C2EF002,	//0x1d8e		VoC_bngt16_rd(HuffmanCode_100,REG6,0xed5)(lo)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x65260ED5,	//0x1d90		VoC_or32_rr(RL6,ACC0,DEFAULT)	|	VoC_bngt16_rd(HuffmanCode_100,REG6,0xed5)(hi)
0xFFC0C0AA,	//0x1d92		VoC_NAD	|	VoC_add16_rr(REG2,REG2,REG5,IN_PARALLEL)
		//0x1d94		HuffmanCode_100
0x1D9C3186,	//0x1d94		VoC_bez16_r(HuffmanCode_101,REG6)
0xFF447DFE,	//0x1d96		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shru32_ri(RL6,0xffffffff,DEFAULT)
0xE526E1C8,	//0x1d98		VoC_or32_rr(RL6,ACC0,DEFAULT)	|	VoC_movreg16(ACC0_LO,RL7_LO,DEFAULT)
0x0EB90712,	//0x1d9a		VoC_add16_rd(REG2,REG2,0xeb9)
		//0x1d9c		HuffmanCode_101
0x0ED53C87,	//0x1d9c		VoC_bngt16_rd(HuffmanCode_200,REG7,0xed5)
0x0CC40B2E,	//0x1d9e		VoC_sub16_dr(REG6,0xcc4,REG5)
0x652EFEF6,	//0x1da0		VoC_or32_rr(RL6,ACC1,DEFAULT)	|	VoC_shru32_rr(RL6,REG6,DEFAULT)
0xFFC0C0AA,	//0x1da2		VoC_NAD	|	VoC_add16_rr(REG2,REG2,REG5,IN_PARALLEL)
		//0x1da4		HuffmanCode_200
0x1DAC3187,	//0x1da4		VoC_bez16_r(HuffmanCode_201,REG7)
0xFF447DFE,	//0x1da6		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shru32_ri(RL6,0xffffffff,DEFAULT)
0xE526E1E8,	//0x1da8		VoC_or32_rr(RL6,ACC0,DEFAULT)	|	VoC_movreg16(ACC0_LO,RL7_HI,DEFAULT)
0x0EB90712,	//0x1daa		VoC_add16_rd(REG2,REG2,0xeb9)
		//0x1dac		HuffmanCode_201
0x1DD52B00,	//0x1dac		VoC_jump_lg(HuffmanCode_end)
		//0x1dae		HuffmanCode_table_select_lt15
0xD8A1C534,	//0x1dae		VoC_lw16inc_p(REG1,REG2,DEFAULT)	|	VoC_mult16_rr(REG4,REG4,REG6,DEFAULT)
0x6080C13C,	//0x1db0		VoC_movreg16(REG0,REG4,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG7,DEFAULT)
0xF808D8A2,	//0x1db2		VoC_shr16_ri(REG0,0x1,DEFAULT)	|	VoC_lw16inc_p(REG2,REG2,IN_PARALLEL)
0xC0404082,	//0x1db4		VoC_add16_rr(REG0,REG1,REG0,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG0,DEFAULT)
0x00011604,	//0x1db6		VoC_and16_ri(REG4,0x1)
0x5800D821,	//0x1db8		VoC_lw16_p(REG0,REG0,DEFAULT)	|	VoC_lw16_p(REG1,REG2,DEFAULT)
0xF002FF46,	//0x1dba		VoC_lw16i_short(REG2,0x0,DEFAULT)	|	VoC_lw32z(RL6,IN_PARALLEL)
0x1DC23184,	//0x1dbc		VoC_bez16_r(HuffmanCode_table_select_odd_2,REG4)
0xF8417840,	//0x1dbe		VoC_shr16_ri(REG1,0x8,IN_PARALLEL)	|	VoC_shr16_ri(REG0,0x8,DEFAULT)
0xFFC0E5C6,	//0x1dc0		VoC_NAD	|	VoC_jump(HuffmanCode_table_select_odd_2_end)
		//0x1dc2		HuffmanCode_table_select_odd_2
0x00FF1600,	//0x1dc2		VoC_and16_ri(REG0,0xff)
0x00FF1601,	//0x1dc4		VoC_and16_ri(REG1,0xff)
		//0x1dc6		HuffmanCode_table_select_odd_2_end
0x1DCE3186,	//0x1dc6		VoC_bez16_r(HuffmanCode_t100x,REG6)
0xF74679F8,	//0x1dc8		VoC_movreg16(REG6,ACC1_LO,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0xffffffff,DEFAULT)
0x0709E470,	//0x1dca		VoC_add16_rd(REG1,REG1,0xeb9)(lo)	|	VoC_or16_rr(REG0,REG6,DEFAULT)
0xFFC00EB9,	//0x1dcc		VoC_NAD	|	VoC_add16_rd(REG1,REG1,0xeb9)(hi)
		//0x1dce		HuffmanCode_t100x
0x1DD53187,	//0x1dce		VoC_bez16_r(HuffmanCode_end,REG7)
0xF76679F8,	//0x1dd0		VoC_movreg16(REG6,ACC1_HI,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0xffffffff,DEFAULT)
0x0709E470,	//0x1dd2		VoC_add16_rd(REG1,REG1,0xeb9)(lo)	|	VoC_or16_rr(REG0,REG6,DEFAULT)
0xC0530EB9,	//0x1dd4		VoC_add16_rr(REG3,REG1,REG2,DEFAULT)	|	VoC_add16_rd(REG1,REG1,0xeb9)(hi)
		//0x1dd5		HuffmanCode_end
0xFFC0E580,	//0x1dd6		VoC_NAD	|	VoC_return
		//0x1dd8		CS_putbits
0xFF475F41,	//0x1dd8		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
		//0x1dda		CS_putbits_start
0x1DFA3144,	//0x1dda		VoC_bngtz16_r(CS_putbits_exit,REG4)
0x48081806,	//0x1ddc		VoC_lw16i_set_inc(REG2,0x4808,0x1)
0xFF256085,	//0x1dde		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
0x1DE4343C,	//0x1de0		VoC_bgt16_rr(CS_putbits_min,REG7,REG4)
0xFFC0E0E5,	//0x1de2		VoC_NAD	|	VoC_movreg16(REG5,REG7,DEFAULT)
		//0x1de4		CS_putbits_min
0xC0AA432B,	//0x1de4		VoC_add16_rr(REG2,REG2,REG5,IN_PARALLEL)	|	VoC_sub16_rr(REG3,REG4,REG5,DEFAULT)
0xC37B7EDD,	//0x1de6		VoC_sub16_rr(REG3,REG5,REG7,IN_PARALLEL)	|	VoC_shru32_rr(ACC1,REG3,DEFAULT)
0xE4FDD82E,	//0x1de8		VoC_and32_rr(ACC1,RL7,DEFAULT)	|	VoC_lw16_p(RL7_LO,REG2,DEFAULT)
0xFEF5FEDD,	//0x1dea		VoC_shru32_rr(ACC1,REG6,DEFAULT)	|	VoC_shru32_rr(ACC1,REG3,DEFAULT)
0xC3EF652E,	//0x1dec		VoC_sub16_rr(REG7,REG7,REG5,IN_PARALLEL)	|	VoC_or32_rr(RL6,ACC1,DEFAULT)
0x1DF731C7,	//0x1dee		VoC_bnez16_r(CS_putbits_100,REG7)
0xC3BEF107,	//0x1df0		VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_lw16i_short(REG7,0x8,DEFAULT)
0x0F0B382E,	//0x1df2		VoC_bgt16_rd(CS_putbits_100,REG6,0xf0b)
0xFF465DC6,	//0x1df4		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC32CF006,	//0x1df6		VoC_sub16_rr(REG4,REG4,REG5,DEFAULT)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
		//0x1df7		CS_putbits_100
0xFFC0E5E2,	//0x1df8		VoC_NAD	|	VoC_jump(CS_putbits_start)
		//0x1dfa		CS_putbits_exit
0xF00A5F01,	//0x1dfa		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDFE9E580,	//0x1dfc		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x1dfd		CS_BF_BitstreamFrame
0x0F1C2008,	//0x1dfe		VoC_lw16d_set_inc(REG0,0xf1c,0x2)
0x0F1E1486,	//0x1e00		VoC_lw32_d(RL6,0xf1e)
0x0F1B1407,	//0x1e02		VoC_lw16_d(REG7,0xf1b)
0x0F1D1406,	//0x1e04		VoC_lw16_d(REG6,0xf1d)
0x1E122B80,	//0x1e06		VoC_jal(CS_writePartMainData)
0x0F1E1586,	//0x1e08		VoC_sw32_d(RL6,0xf1e)
0x0F1B1507,	//0x1e0a		VoC_sw16_d(REG7,0xf1b)
0x0F1D1506,	//0x1e0c		VoC_sw16_d(REG6,0xf1d)
0x1500DFA9,	//0x1e0e		VoC_sw16_d(REG0,0xf1c)(lo)	|	VoC_pop16(RA,DEFAULT)
0xE5800F1C,	//0x1e10		VoC_return	|	VoC_sw16_d(REG0,0xf1c)(hi)
		//0x1e12		CS_writePartMainData
0xFFC0DFE9,	//0x1e12		VoC_NAD	|	VoC_push16(RA,DEFAULT)
		//0x1e14		writePartMainData_nrEntries_loop
0x1E1D3182,	//0x1e14		VoC_bez16_r(writePartMainData_nrEntries_loop_end,REG2)
0x2B80DFC2,	//0x1e16		VoC_jal(CS_WriteMainDataBits)(lo)	|	VoC_push16(REG2,DEFAULT)
0xDF821E36,	//0x1e18		VoC_pop16(REG2,DEFAULT)	|	VoC_jal(CS_WriteMainDataBits)(hi)
0x0EB90792,	//0x1e1a		VoC_sub16_rd(REG2,REG2,0xeb9)
0xDFA9E5F8,	//0x1e1c		VoC_pop16(RA,DEFAULT)	|	VoC_jump(writePartMainData_nrEntries_loop)
		//0x1e1d		writePartMainData_nrEntries_loop_end
0xE580FFC0,	//0x1e1e		VoC_return	|	VoC_NOP
		//0x1e20		CS_writePartSideInfo
0xDFC27F44,	//0x1e20		VoC_push16(REG2,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xF0075991,	//0x1e22		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG23,REG2,DEFAULT)
0xFF455FE9,	//0x1e24		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
		//0x1e26		CS_writePartSideInfo_nrEntries_loop
0x1E323182,	//0x1e26		VoC_bez16_r(CS_writePartSideInfo_nrEntries_loop_end,REG2)
0xD8B4D8B8,	//0x1e28		VoC_lw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw16inc_p(ACC0_LO,REG3,DEFAULT)
0xFFC0C061,	//0x1e2a		VoC_NAD	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0x1DD82B80,	//0x1e2c		VoC_jal(CS_putbits)
0x0EB90792,	//0x1e2e		VoC_sub16_rd(REG2,REG2,0xeb9)
0x1E263102,	//0x1e30		VoC_bgtz16_r(CS_writePartSideInfo_nrEntries_loop,REG2)
		//0x1e32		CS_writePartSideInfo_nrEntries_loop_end
0xDF82DFA9,	//0x1e32		VoC_pop16(REG2,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1e34		VoC_NAD	|	VoC_return
		//0x1e36		CS_WriteMainDataBits
0xF00B5FE9,	//0x1e36		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x0F201487,	//0x1e38		VoC_lw32_d(RL7,0xf20)
0x0F225D07,	//0x1e3a		VoC_bne32_rd(CS_WriteMainDataBits_100,RL7,0xf22)
0xFFC0DFC3,	//0x1e3c		VoC_NAD	|	VoC_push16(REG3,DEFAULT)
0x1E742B80,	//0x1e3e		VoC_jal(CS_write_side_info)
0xFF475F83,	//0x1e40		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xF00B602E,	//0x1e42		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_movreg16(RL7_LO,REG1,DEFAULT)
0x0F220BBC,	//0x1e44		VoC_sub32_dr(ACC0,0xf22,RL7)
0x0F201587,	//0x1e46		VoC_sw32_d(RL7,0xf20)
0x0F241584,	//0x1e48		VoC_sw32_d(ACC0,0xf24)
		//0x1e4a		CS_WriteMainDataBits_100
0xD9DAD9DC,	//0x1e4a		VoC_lw32inc_p(REG45,REG3,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG3,DEFAULT)
0x3184F005,	//0x1e4c		VoC_bez16_r(CS_WriteMainDataBits_exit,REG4)(lo)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x553A1E70,	//0x1e4e		VoC_bngt32_rd(CS_WriteMainDataBits_200,REG45,0xf24)(lo)	|	VoC_bez16_r(CS_WriteMainDataBits_exit,REG4)(hi)
0x09920F24,	//0x1e50		VoC_sub32_rd(REG45,REG45,0xf24)(lo)	|	VoC_bngt32_rd(CS_WriteMainDataBits_200,REG45,0xf24)(hi)
0x7EE40F24,	//0x1e52		VoC_shru32_rr(ACC0,REG4,DEFAULT)	|	VoC_sub32_rd(REG45,REG45,0xf24)(hi)
0xDF42DF44,	//0x1e54		VoC_push32(REG45,DEFAULT)	|	VoC_push32(ACC0,IN_PARALLEL)
0x0F241404,	//0x1e56		VoC_lw16_d(REG4,0xf24)
0x1DD82B80,	//0x1e58		VoC_jal(CS_putbits)
0x1E742B80,	//0x1e5a		VoC_jal(CS_write_side_info)
0xE02EFF47,	//0x1e5c		VoC_movreg16(RL7_LO,REG1,DEFAULT)	|	VoC_lw32z(RL7,DEFAULT)
0x0F220BBC,	//0x1e5e		VoC_sub32_dr(ACC0,0xf22,RL7)
0x0F201587,	//0x1e60		VoC_sw32_d(RL7,0xf20)
0x0F241584,	//0x1e62		VoC_sw32_d(ACC0,0xf24)
0xDF04DF02,	//0x1e64		VoC_pop32(ACC0,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
		//0x1e66		CS_WriteMainDataBits_200
0x0F200915,	//0x1e66		VoC_add32_rd(ACC1,REG45,0xf20)
0x0F240B97,	//0x1e68		VoC_sub32_dr(RL7,0xf24,REG45)
0x0F201585,	//0x1e6a		VoC_sw32_d(ACC1,0xf20)
0x0F241587,	//0x1e6c		VoC_sw32_d(RL7,0xf24)
0x1DD82B80,	//0x1e6e		VoC_jal(CS_putbits)
		//0x1e70		CS_WriteMainDataBits_exit
0xFFC0DFA9,	//0x1e70		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1e72		VoC_NAD	|	VoC_return
		//0x1e74		CS_write_side_info
0x0F301484,	//0x1e74		VoC_lw32_d(ACC0,0xf30)
0xE0015FE9,	//0x1e76		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x0F221584,	//0x1e78		VoC_sw32_d(ACC0,0xf22)
0x0F34180A,	//0x1e7a		VoC_lw16i_set_inc(REG2,0xf34,0x2)
0x1E202B80,	//0x1e7c		VoC_jal(CS_writePartSideInfo)
0x0F36180A,	//0x1e7e		VoC_lw16i_set_inc(REG2,0xf36,0x2)
0x1E202B80,	//0x1e80		VoC_jal(CS_writePartSideInfo)
0x0F38180A,	//0x1e82		VoC_lw16i_set_inc(REG2,0xf38,0x2)
0xE843FFC0,	//0x1e84		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_NAD
0x1E202B80,	//0x1e86		VoC_jal(CS_writePartSideInfo)
		//0x1e88		VoC_endloop0
0x0F3A180A,	//0x1e88		VoC_lw16i_set_inc(REG2,0xf3a,0x2)
0x0F2F1404,	//0x1e8a		VoC_lw16_d(REG4,0xf2f)
0x0F3C180A,	//0x1e8c		VoC_lw16i_set_inc(REG2,0xf3c,0x2)
0x1E962E21,	//0x1e8e		VoC_loop_r(1,REG4)
0xE843FFC0,	//0x1e90		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_NAD
0x1E202B80,	//0x1e92		VoC_jal(CS_writePartSideInfo)
		//0x1e94		VoC_endloop0
0x0EBD0712,	//0x1e94		VoC_add16_rd(REG2,REG2,0xebd)
		//0x1e96		VoC_endloop1
0x0F40180A,	//0x1e96		VoC_lw16i_set_inc(REG2,0xf40,0x2)
0xFFC0DFA9,	//0x1e98		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x1e9a		VoC_NAD	|	VoC_return
		//0x1e9c		vpp_AmjrGenerateStepTabi
0x7FFF0A8D,	//0x1e9c		VoC_lw16i(RL6_HI,0x7fff)
0xDFC077EC,	//0x1e9e		VoC_push16(REG0,IN_PARALLEL)	|	VoC_lw16i_short(RL6_LO,0xffffffff,DEFAULT)
0xDDC6E901,	//0x1ea0		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_loop_i_short(0x8,DEFAULT)
		//0x1ea1		VoC_endloop0
0x6BA20A8D,	//0x1ea2		VoC_lw16i(RL6_HI,0x6ba2)
0x7E650A8C,	//0x1ea4		VoC_lw16i(RL6_LO,0x7e65)
0x5A820A8D,	//0x1ea6		VoC_lw16i(RL6_HI,0x5a82)
0x0A8CDDC6,	//0x1ea8		VoC_lw16i(RL6_LO,0x799a)(lo)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0x0A8D799A,	//0x1eaa		VoC_lw16i(RL6_HI,0x4c1b)(lo)	|	VoC_lw16i(RL6_LO,0x799a)(hi)
0xDDC64C1B,	//0x1eac		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw16i(RL6_HI,0x4c1b)(hi)
0x78290ACC,	//0x1eae		VoC_lw16i(RL6_LO,0xf829)
0x40000A8D,	//0x1eb0		VoC_lw16i(RL6_HI,0x4000)
0xE00C5DC6,	//0x1eb2		VoC_lw16i_short(RL6_LO,0x0,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0x35D10A8D,	//0x1eb4		VoC_lw16i(RL6_HI,0x35d1)
0x0A8CDDC6,	//0x1eb6		VoC_lw16i(RL6_LO,0x3f33)(lo)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0x0A8D3F33,	//0x1eb8		VoC_lw16i(RL6_HI,0x2d41)(lo)	|	VoC_lw16i(RL6_LO,0x3f33)(hi)
0xDDC62D41,	//0x1eba		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw16i(RL6_HI,0x2d41)(hi)
0x3CCD0A8C,	//0x1ebc		VoC_lw16i(RL6_LO,0x3ccd)
0x260D0A8D,	//0x1ebe		VoC_lw16i(RL6_HI,0x260d)
0x0ACCDDC6,	//0x1ec0		VoC_lw16i(RL6_LO,0xfc14)(lo)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0x0A8D7C14,	//0x1ec2		VoC_lw16i(RL6_HI,0x2000)(lo)	|	VoC_lw16i(RL6_LO,0xfc14)(hi)
0x5DC62000,	//0x1ec4		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw16i(RL6_HI,0x2000)(hi)
0x700FE00C,	//0x1ec6		VoC_lw16i_short(RL7_HI,0x0,DEFAULT)	|	VoC_lw16i_short(RL6_LO,0x0,IN_PARALLEL)
0xDDC6E02E,	//0x1ec8		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw16i_short(RL7_LO,0x2,IN_PARALLEL)
0xE904DFC1,	//0x1eca		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_push16(REG1,DEFAULT)
0xFA1693CE,	//0x1ecc		VoC_shr32_ri(RL6,0x2,DEFAULT)	|	VoC_add32inc_rp(RL6,RL7,REG1,DEFAULT)
0xDDC6FFC0,	//0x1ece		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_NOP
		//0x1ecf		VoC_endloop0
0x700FDF81,	//0x1ed0		VoC_lw16i_short(RL7_HI,0x0,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x2CD0E08E,	//0x1ed2		VoC_loop_i(0x0,0x68)(lo)	|	VoC_lw16i_short(RL7_LO,0x8,IN_PARALLEL)
0x93CE1ED8,	//0x1ed4		VoC_add32inc_rp(RL6,RL7,REG1,DEFAULT)	|	VoC_loop_i(0x0,0x68)(hi)
0xFFC0FA26,	//0x1ed6		VoC_NOP	|	VoC_shr32_ri(RL6,0x4,DEFAULT)
		//0x1ed8		VoC_endloop0
0x5F80DDC6,	//0x1ed8		VoC_pop16(REG0,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC008E221,	//0x1eda		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i_short(REG1,0x22,IN_PARALLEL)
0xE01E700F,	//0x1edc		VoC_lw16i_short(RL7_LO,0x1,IN_PARALLEL)	|	VoC_lw16i_short(RL7_HI,0x0,DEFAULT)
0xE6E13C3E,	//0x1ede		VoC_lw16i_short(REG1,0x6e,IN_PARALLEL)	|	VoC_sub32_pr(RL6,REG0,RL7,DEFAULT)
0xDD86C008,	//0x1ee0		VoC_sw32_p(RL6,REG0,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
0xFFC0BC3E,	//0x1ee2		VoC_NOP	|	VoC_sub32_pr(RL6,REG0,RL7,DEFAULT)
0x3C3EDDC6,	//0x1ee4		VoC_sub32_pr(RL6,REG0,RL7,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC008E1A1,	//0x1ee6		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i_short(REG1,0x1a,IN_PARALLEL)
0xBC3EDD86,	//0x1ee8		VoC_sub32_pr(RL6,REG0,RL7,DEFAULT)	|	VoC_sw32_p(RL6,REG0,DEFAULT)
0xDD86FFC0,	//0x1eea		VoC_sw32_p(RL6,REG0,DEFAULT)	|	VoC_NOP
0xFFC0E580,	//0x1eec		VoC_NAD	|	VoC_return
