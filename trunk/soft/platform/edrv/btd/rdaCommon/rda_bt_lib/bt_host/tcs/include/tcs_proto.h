#ifndef _TCS_PROTO_H_
#define _TCS_PROTO_H_

#include "host_config.h"

#if (PRH_TCS_TERMINAL | PRH_TCS_GATEWAY)

/* This file is automatically generated with "make proto". DO NOT EDIT */


/*The following definitions come from  tcs_cc_callbacks.c  */

t_api prh_tcs_cc_callback_TL_L2Data(struct prh_st_tcs_l2conn *device_info, struct host_buf *h_buff);
void prh_tcs_cc_core_TLconnectIndCallback(struct prh_st_tcs_l2conn * l2conn);
void prh_tcs_cc_core_TLdisconnectIndCallback(struct prh_st_tcs_l2conn *l2conn);
t_api prh_tcs_cc_callback_GW_L2Data(struct prh_st_tcs_l2conn *device_info, struct host_buf *h_buff);
void prh_tcs_cc_callback_broadcastSETUP_timeout(void *callbackParam);
void prh_tcs_cc_callback_unparkAllACLs(t_api status);
void prh_tcs_cc_core_GWconnectIndCallback(struct prh_st_tcs_l2conn * l2conn);
void prh_tcs_cc_core_GWdisconnectIndCallback(struct prh_st_tcs_l2conn *l2conn);
t_api prh_tcs_cc_callback_L2ConnComplete(t_api status, struct prh_st_tcs_l2conn *l2_conn);
void prh_tcs_cc_callback_timeout(void *callbackParam);
t_api prh_tcs_cc_callback_TLorGW_L2Data(struct prh_st_tcs_l2conn *device_info, struct host_buf *p_buf);

/*The following definitions come from  tcs_cc_core.c  */

struct st_t_TCS_callInstance *prh_tcs_cc_core_TLgetNewCallInstance(u_int16 cid, u_int8 callType);
void prh_tcs_cc_core_TLfreeCallInstance(struct st_t_TCS_callInstance *callInstance);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLgetCallInstanceByBearerHandle(u_int16 bearerHandle);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLgetCallInstanceByBearerRef(u_int16 *bearerRef);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLgetCallInstanceByHandle(u_int16 callHandle);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLgetCallInstanceByCID(u_int16 cid);
u_int8 prh_tcs_cc_core_TL_L2ReleaseRequired(struct st_t_TCS_callInstance *callInstance);
struct st_t_TCS_callInstance *prh_tcs_cc_core_GWaddBCastCallInstance(struct st_t_TCS_TLPeer *TLPeer, u_int16 cid);
struct st_t_TCS_callInstance *prh_tcs_cc_core_GWgetNewCallInstance(struct st_t_TCS_TLPeer *TLPeer, u_int16 cid, u_int16 callType);
struct st_t_TCS_callInstance *prh_tcs_cc_core_GWgetCallInstanceByHandle(u_int16 callHandle);
struct st_t_TCS_callInstance *prh_tcs_cc_core_GWgetCallInstanceByCID(u_int16 cid);
void prh_tcs_cc_core_GWfreeCallInstance(struct st_t_TCS_callInstance *callInstance);
struct st_t_TCS_callInstance *prh_tcs_cc_core_GWgetCallInstanceByBearerHandle(u_int16 bearerHandle);
struct st_t_TCS_callInstance *prh_tcs_cc_core_GWgetCallInstanceByBearerRef(u_int16 *bearerRef);
struct st_t_TCS_TLPeer *prh_tcs_cc_core_getNewTLPeer(t_bdaddr address, /*u_int8 initState,*/ u_int16 cid);
struct st_t_TCS_TLPeer *prh_tcs_cc_core_getTLPeerByCallInstance(struct st_t_TCS_callInstance *callInstance);
struct st_t_TCS_TLPeer *prh_tcs_cc_core_getTLPeerByBdAddress(t_bdaddr address);
t_api prh_tcs_cc_core_broadcastIncomingSETUP(struct st_t_TCS_callParams *callParams);
u_int8 prh_tcs_cc_core_GW_L2ReleaseRequired(struct st_t_TCS_callInstance *callInstance);
u_int16 prh_tcs_cc_core_GWgetFreeCallHandle(void);
void prh_tcs_cc_core_GWfreeCallHandle(u_int16 callHandle);
t_api prh_tcs_cc_core_GW_releaseNonSelectedBCastCalls(void);
struct st_t_TCS_TLPeer *prh_tcs_cc_core_GWgetNumConnectedTLPeers(u_int8 *numTLPeers);
t_api prh_tcs_cc_core_setupDefaultOutCallParams(struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_cc_core_storeCallParams(struct st_t_TCS_callParams **destRef, struct st_t_TCS_callParams *src);
void prh_tcs_cc_core_initCallInstance(struct st_t_TCS_callInstance *callInstance);
void prh_tcs_cc_core_freeCallInstanceMembers(struct st_t_TCS_callInstance *callInstance);
void prh_tcs_cc_core_initCallParams(struct st_t_TCS_callParams *callParams);
void prh_tcs_cc_core_freeCallParams(struct st_t_TCS_callParams *callParams);
void prh_tcs_cc_core_freeCallParamMembers(struct st_t_TCS_callParams *callParams);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLorGWgetCallInstanceByHandle(u_int16 callHandle);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLorGWgetCallInstanceByCID(u_int16 cid);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLorGWgetCallInstanceByBearerHandle(u_int16 bearerHandle);
struct st_t_TCS_callInstance *prh_tcs_cc_core_TLorGWgetCallInstanceByBearerRef(u_int16 *bearerRef);
void prh_tcs_cc_core_TLorGWfreeCallInstance(struct st_t_TCS_callInstance *callInstance);
u_int8 prh_tcs_cc_core_TLorGW_L2ReleaseRequired(struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_cc_core_TLorGW_defaultSETUPHandler(struct st_t_TCS_callInstance *callInstance, t_bdaddr bdAddress);
t_api prh_tcs_cc_core_TLorGW_defaultCONNECTHandler(struct st_t_TCS_callInstance *callInstance, t_bdaddr bdAddress);

/*The following definitions come from  tcs_cc_dec.c  */

t_api prh_tcs_cc_decodeMsg(struct host_buf* h_buff, struct st_t_TCS_callParams *callParams);
t_api decode_infoElementBearerCapability(u_int8* pdu, u_int8 numBytesLeft, struct st_t_TCS_callParams *callParams, u_int8 *size);
t_api store_partyNumber(u_int8* pdu, u_int8 numNewDigits, u_int8 **number_ref);

/*The following definitions come from  tcs_cc_enc.c  */

t_api prh_tcs_cc_encodeMsg(u_int8 tcsMsg, struct st_t_TCS_callParams *callParams, u_int16 cid);
t_api enode_information_elements(u_int16 bitMask, struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_callClass(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_sendingComplete(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_bearerCapability(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_cause(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_progressIndicator(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_signal(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_keypadFacility(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_callingPartyNumber(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_calledPartyNumber(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_audioControl(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_scoHandle(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_destCID(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
void encode_infoElement_companySpecific(struct st_t_TCS_callParams *callParams, u_int8 **pdu_ref);
t_api calculate_tcs_msg_buffer_size(struct st_t_TCS_callParams *callParams, u_int16 bitMask, u_int8 *size);
struct host_buf *get_tcs_msg_buffer(u_int16 msgSize, u_int8 msgType);

/*The following definitions come from  tcs_cc_gateway.c  */


/*The following definitions come from  tcs_cc_peer.c  */

t_api prh_tcs_peer_processEvent(u_int8 tcsMsg, t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_SETUP(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_SETUPACKNOWLEDGE(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_ALERTING(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_CALLPROCEEDING(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_CONNECT(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_CONNECTACKNOWLEDGE(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_INFORMATION(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_DISCONNECT(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_RELEASE(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_RELEASECOMPLETE(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_STARTDTMF(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_STARTDTMFACKNOWLEDGE(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_STARTDTMFREJECT(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_STOPDTMF(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_STOPDTMFACKNOWLEDGE(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_PROGRESS(t_bdaddr address, struct st_t_TCS_callInstance *callInstance);
t_api prh_tcs_peer_prepareDefaultOutCallParams(struct st_t_TCS_callInstance *callInstance);

/*The following definitions come from  tcs_cc_terminal.c  */

t_api prh_tcs_cc_terminal_getFreeSigChan(struct st_t_TCS_callInstance *callInstance, u_int8 pendingState, struct st_t_TCS_callParams *callParams);

/*The following definitions come from  tcs_cc_upper.c  */


/*The following definitions come from  tcs_gm_api.c  */


/*The following definitions come from  tcs_gm_clock.c  */

void prh_tcs_timer_t406_expired(void *dummy);
void prh_tcs_wug_retreiveClockOffset(u_int16 aclHandle, u_int16 clockOffset, t_api status);

/*The following definitions come from  tcs_gm_decode.c  */

int prh_tcs_gm_process_event(struct prh_st_tcs_l2conn *device_info, struct host_buf *p_buf);

/*The following definitions come from  tcs_gm_encode.c  */

int prh_tcs_gm_encode_info_accept(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_listen_suggest(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_access_rights_req(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_access_rights_accept(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_access_rights_reject(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_listen_request(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_listen_accept(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_listen_reject(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);
int prh_tcs_gm_encode_info_suggest(struct prh_st_tcs_gm_encode_info *info, struct prh_st_tcs_l2conn *l2_conn);

/*The following definitions come from  tcs_gm_keydb.c  */

u_int8 *prh_tcs_wug_keydb_lookup_link_key(void);
int prh_tcs_wug_keydb_generate_linkkey(u_int8 *link_key);
int prh_tcs_wug_keydb_trav_helper(void *data, void *input);
t_api prh_tcs_wug_keydb_generate_link_keys(struct prh_st_tcs_wug_member *wug_mem);
int prh_tcs_wug_keydb_add_key(struct prh_st_tcs_wug_member *wug_mem, struct prh_st_tcs_wug_member_link_key *key);
int prh_tcs_wug_keydb_lookup_key_by_bd_addr(struct prh_st_tcs_wug_member *wug_mem, t_bdaddr addr, struct prh_st_tcs_wug_member_link_key **key);
int prh_tcs_wug_keydb_remove_key_by_bd_addr(struct prh_st_tcs_wug_member *wug_mem, t_bdaddr addr, struct prh_st_tcs_wug_member_link_key **key);
int prh_tcs_wug_keydb_remove_all_keys(struct prh_st_tcs_wug_member *wug_mem);

/*The following definitions come from  tcs_gm_wug.c  */

void prh_tcs_timer_t401_expired(void *tim);
void prh_tcs_timer_t404_expired(void *tim);
void prh_tcs_timer_t403_expired(void *tim);
void prh_tcs_timer_t405_expired(void *tim);
int prh_tcs_wug_handle_access_rights_request(struct prh_st_tcs_l2conn *device_info);
int prh_tcs_wug_handle_access_rights_accept(struct prh_st_tcs_l2conn *device_info);
int prh_tcs_wug_handle_access_rights_reject(struct prh_st_tcs_l2conn *device_info);
int prh_tcs_wug_handle_info_accept(struct prh_st_tcs_l2conn *device_info);
int prh_tcs_wug_handle_listen_request(struct prh_st_tcs_l2conn *device_info, struct prh_st_tcs_gm_called_party_number *cpn_num);
int prh_tcs_wug_handle_listen_suggest(struct prh_st_tcs_l2conn *device_info);
int prh_tcs_wug_handle_listen_reject(struct prh_st_tcs_l2conn *device_info, u_int8 cause);
int prh_tcs_wug_handle_listen_accept(struct prh_st_tcs_l2conn *device_info);
int prh_tcs_gm_reset(int flags);

/*The following definitions come from  tcs_gm_wugdb.c  */

int prh_tcs_wug_add_member(struct prh_st_tcs_wug_member *new_ent);
int prh_tcs_wug_remove_member(t_bdaddr addr);
int prh_tcs_wug_clear_db(void);
int prh_tcs_lookup_wug_member_by_bd_addr(t_bdaddr addr, struct prh_st_tcs_wug_member **member);
int prh_tcs_lookup_wug_member_by_internal_num(u_int8 *internal_num, struct prh_st_tcs_wug_member **member);
int prh_tcs_remove_wug_member_by_bd_addr(t_bdaddr addr, struct prh_st_tcs_wug_member **member);
int prh_tcs_wug_traverse_helper(void *data, void *input);
int prh_tcs_wug_info_trav_helper(void *data, void *input);
int prh_tcs_wug_distrib_helper(void *data, void *input);
int prh_tcs_wug_distribute_config_to_wug(void);
int prh_tcs_wug_put_info_into_db(struct prh_st_tcs_gm_config_data *config_array, int num_entries);
t_api prh_tcs_wug_reset_internal_numbers(void);
t_api prh_tcs_wug_assign_internal_number(u_int8 *internal_num);
t_api prh_tcs_wug_release_internal_number(u_int8 *internal_num);

/*The following definitions come from  tcs_gm_wuglisten.c  */

int prh_tcs_wug_listen_add(struct prh_st_tcs_wug_listen_info *new_ent);
int prh_tcs_wug_listen_lookup_by_terminator_addr(t_bdaddr addr, struct prh_st_tcs_wug_listen_info **listen_info);
int prh_tcs_wug_listen_remove_by_terminator_addr(t_bdaddr addr, struct prh_st_tcs_wug_listen_info **listen_info);
int prh_tcs_wug_listen_removeall(void);

/*The following definitions come from  tcs_l2cap.c  */

void prh_tcs_l2cap_data_ind_cb(u_int16 cid, struct host_buf *p_buf);
void prh_tcs_l2cap_data_ind_cb(u_int16 cid, struct host_buf *p_buf);
void prh_tcs_l2cap_config_ind_cb(u_int8 eventType, t_L2_ControlCallbackArgs *args);
void prh_tcs_l2cap_config_cfm_cb(u_int8 eventType, t_L2_ControlCallbackArgs *args);
void prh_tcs_l2cap_flow_ind_cb(u_int8 eventType, t_L2_ControlCallbackArgs *args);
void prh_tcs_l2cap_disc_ind_cb(u_int8 eventType, t_L2_ControlCallbackArgs *args);
void prh_tcs_l2cap_disc_cfm_cb(u_int8 eventType, t_L2_ControlCallbackArgs *args);
void prh_tcs_l2cap_connect_cfm_cb(u_int8 eventType, t_L2_ControlCallbackArgs *args);
void prh_tcs_l2cap_connect_ind_cb(u_int8 eventType, t_L2_ControlCallbackArgs *args);
int prh_tcs_register_connectionCallbacks( void (*connectIndCallback)(struct prh_st_tcs_l2conn * l2conn), void (*disconnectIndCallback)(struct prh_st_tcs_l2conn * l2conn));
int prh_tcs_init(int flags);
int prh_tcs_connect_device_control(t_bdaddr bd_addr, u_int16 psm, struct st_t_TCS_callInstance *call, t_api(*callback_func_ptr)(t_api status, struct prh_st_tcs_l2conn *l2_conn));
int prh_tcs_connect_device_acl_bearer(void);
int prh_tcs_add_l2cap_inst(struct prh_st_tcs_l2conn *new_ent);
int prh_tcs_l2cap_cid_cmp(void *cmpin, void *compwith);
int prh_tcs_lookup_l2cap_inst_by_cid(u_int16 cid, struct prh_st_tcs_l2conn **l2cap_inst_ptr);
int prh_tcs_remove_l2cap_inst_by_cid(u_int16 cid, struct prh_st_tcs_l2conn **l2cap_inst_ptr);
int prh_tcs_l2cap_bdaddr_cmp(void *cmpin, void *compwith);
int prh_tcs_lookup_l2cap_inst_by_bd_addr(t_bdaddr bd_addr, struct prh_st_tcs_l2conn **l2cap_inst_ptr);
int prh_tcs_lookup_pending_l2cap_inst_by_bd_addr(t_bdaddr bd_addr, struct prh_st_tcs_l2conn **l2cap_inst_ptr);
int prh_tcs_pending_l2cap_bdaddr_cmp(void *cmpin, void *compwith);
int prh_tcs_free_tcsbin_l2cap_bdaddr_cmp(void *cmpin, void *compwith);
int prh_tcs_free_tcscordless_l2cap_bdaddr_cmp(void *cmpin, void *compwith);
int prh_tcs_lookup_free_l2cap_inst(t_bdaddr bd_addr, u_int16 psm, struct prh_st_tcs_l2conn **l2cap_inst_ptr);
int prh_tcs_l2cap_state_cmp(void *cmpin, void *compwith);

/*The following definitions come from  tcs_park.c  */

int prh_tcs_park_isDeviceParked(t_bdaddr addr);

#endif /*(PRH_TCS_TERMINAL | PRH_TCS_GATEWAY)*/


#endif /* _PROTO_H_ */
