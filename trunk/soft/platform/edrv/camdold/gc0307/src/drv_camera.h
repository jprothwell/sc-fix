// Here is where all the model specific defines should be


#include "hal_i2c.h"
#include "hal_camera.h"
#include "camera_m.h"

//#define  DRV_CAM_FRAME_6    1
#define  DRV_CAM_FRAME_10    1
//#define  DRV_CAM_FRAME_12    1
typedef struct
{
    UINT8 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT8 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;

// On FPGA platform, Pixel Clock must not be too fast or xfer screws up
#define CAM_CLK_CFG 0x81

// use this for 320x240 (VGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQvga[] = 
{
    //========= close output
    {0x43,0x00,1},
    {0x44,0xa2,1}, 
    //========= close some functions
    // open them after configure their parmameters
    {0x40,0x10,1}, 
    {0x41,0x00,1},
    {0x42,0x10,1},
    {0x47,0x00,1}, //mode1,				  	
    //{0x48,0xc3,1}, //mode2, 	
    {0x48,0xcb,1}, //mode2, 	
    {0x49,0x00,1}, //dither_mode 		
    {0x4a,0x00,1}, //clock_gating_en
    {0x4b,0x00,1}, //mode_reg3
    {0x4E,0x23,1}, //sync mode
    {0x4F,0x01,1}, //AWB, AEC, every N frame	
    //========= frame timing
    {0x01,0x6a,1}, //HB
    {0x02,0x0c,1}, //VB
    {0x1C,0x00,1}, //Vs_st
    {0x1D,0x00,1}, //Vs_et
    {0x10,0x00,1}, //high 4 bits of VB, HB
    {0x11,0x05,1}, //row_tail,  AD_pipe_number
    //========= windowing
    {0x05,0x00,1}, //row_start
    {0x06,0x00,1},
    {0x07,0x00,1},//col start
    {0x08,0x00,1}, 
    {0x09,0x01,1}, //win height
    {0x0A,0xE8,1},
    //{0x0A,0xE0,1},
    {0x0B,0x02,1},//win width, pixel array only 640
    {0x0C,0x80,1},
    //========= analog
    {0x0D,0x22,1}, //rsh_width
    {0x0E,0x02,1}, //CISCTL mode2,  
    {0x12,0x70,1}, //7 hrst, 6_4 darsg,
    {0x13,0x00,1}, //7 CISCTL_restart, 0 apwd
    {0x14,0x00,1}, //NA
    {0x15,0xba,1}, //7_4 vref
    {0x16,0x13,1}, //5to4 _coln_r,  __1to0__da18
    {0x17,0x52,1}, //opa_r, ref_r, sRef_r
    //{	0x18  ,0xc0,1} //analog_mode, best case for left band.
    {0x1E,0x0d,1},//tsp_width 		   
    {0x1F,0x32,1}, //sh_delay
    //========= offset
    {0x47,0x00,1}, //7__test_image, __6__fixed_pga, __5__auto_DN, __4__CbCr_fix, 
    //__3to2__dark_sequence, __1__allow_pclk_vcync, __0__LSC_test_image
    {0x19,0x06,1},  //pga_o			 
    {0x1a,0x06,1},  //pga_e			 
    {0x31,0x00,1},  //4	//pga_oFFset ,	 high 8bits of 11bits
    {0x3B,0x00,1},  //global_oFFset, low 8bits of 11bits
    {0x59,0x0f,1},  //offset_mode 	
    {0x58,0x88,1},  //DARK_VALUE_RATIO_G,  DARK_VALUE_RATIO_RB
    {0x57,0x08,1},  //DARK_CURRENT_RATE
    {0x56,0x77,1},  //PGA_OFFSET_EVEN_RATIO, PGA_OFFSET_ODD_RATIO
    //========= blk
    {0x35,0xd8,1},  //blk_mode
    {0x36,0x40,1}, 
    {0x3C,0x00,1}, 
    {0x3D,0x00,1},
    {0x3E,0x00,1},
    {0x3F,0x00,1},
    {0xb5,0x70,1},
    {0xb6,0x40,1},
    {0xb7,0x00,1},
    {0xb8,0x38,1},
    {0xb9,0xc3,1},		  
    {0xba,0x0f,1},
    {0x7e,0x35,1},
    {0x7f,0x86,1},
    {0x5c,0x68,1},//78
    {0x5d,0x78,1},//88
    //========= manual_gain 
    {0x61,0x80,1}, //manual_gain_g1	
    {0x63,0x80,1}, //manual_gain_r
    {0x65,0x98,1}, //manual_gai_b, 0xa0=1.25, 0x98=1.1875
    {0x67,0x80,1}, //manual_gain_g2
    {0x68,0x18,1}, //global_manual_gain	 2.4bits
    //=========CC _R
    {0x69,0x58,1},  //54
    {0x6A,0xf6,1},  //ff
    {0x6B,0xfb,1},  //fe
    {0x6C,0xf4,1},  //ff
    {0x6D,0x5a,1},  //5f
    {0x6E,0xe6,1},  //e1
    {0x6f,0x00,1},	
    //=========lsc							  
    {0x70,0x14,1},
    {0x71,0x1c,1},
    {0x72,0x20,1},
    {0x73,0x10,1},	
    {0x74,0x3c,1},
    {0x75,0x52,1},
    //=========dn
    {0x7d,0x2f,1},  //dn_mode   	
    {0x80,0x0c,1}, //when auto_dn, check 7e,7f
    {0x81,0x0c,1},
    {0x82,0x44,1},
    //dd																		   
    {0x83,0x18,1},  //DD_TH1 					  
    {0x84,0x18,1},  //DD_TH2 					  
    {0x85,0x04,1},  //DD_TH3
    {0x87,0x34,1}, //32 b DNDD_low_range X16,  DNDD_low_range_C_weight_center
    //=========intp-ee
    {0x88,0x04,1},
    {0x89,0x01,1},  										  
    {0x8a,0x50,1},//60  										   
    {0x8b,0x50,1},//60  										   
    {0x8c,0x07,1},
    {0x50,0x0c,1},
    {0x5f,0x3c,1},
    {0x8e,0x02,1},
    {0x86,0x02,1},
    {0x51,0x20,1},
    {0x52,0x08,1},
    {0x53,0x00,1},
    //========= YCP 
    //contrast_center
    {0x77,0x80,1}, //contrast_center
    {0x78,0x00,1}, //fixed_Cb
    {0x79,0x00,1}, //fixed_Cr
    {0x7a,0x00,1}, //luma_offset
    {0x7b,0x40,1}, //hue_cos 
    {0x7c,0x00,1}, //hue_sin
    //saturation	
    {0xa0,0x40,1}, //global_saturation
    {0xa1,0x40,1}, //luma_contrast
    {0xa2,0x34,1}, //saturation_Cb
    {0xa3,0x34,1}, //saturation_Cr
    {0xa4,0xc8,1},
    {0xa5,0x02,1},
    {0xa6,0x28,1},
    {0xa7,0x02,1},
    //skin
    {0xa8,0xee,1},
    {0xa9,0x12,1},
    {0xaa,0x01,1},
    {0xab,0x20,1},
    {0xac,0xf0,1},
    {0xad,0x10,1},
    //========= ABS
    {0xae,0x18,1},
    {0xaf,0x74,1},
    {0xb0,0xe0,1},
    {0xb1,0x20,1},
    {0xb2,0x6c,1},
    {0xb3,0x40,1},
    {0xb4,0x04,1},
    //========= AWB 
    {0xbb,0x42,1},
    {0xbc,0x60,1},
    {0xbd,0x50,1},
    {0xbe,0x50,1},
    {0xbf,0x0c,1},
    {0xc0,0x06,1},
    {0xc1,0x60,1},
    {0xc2,0xf1,1}, //f1
    {0xc3,0x40,1},
    {0xc4,0x1c,1}, //18//20
    {0xc5,0x56,1},  //33
    {0xc6,0x1d,1},
    {0xca,0x70,1},
    {0xcb,0x70,1},
    {0xcc,0x78,1},
    {0xcd,0x80,1}, //R_ratio 									 
    {0xce,0x80,1}, //G_ratio  , cold_white white 								   
    {0xcf,0x80,1}, //B_ratio  	
    //=========  aecT  
    {0x20,0x06,1},//0x02 
    {0x21,0xc0,1},
    {0x22,0x60,1},   
    {0x23,0x88,1},
    {0x24,0x96,1},
    {0x25,0x30,1},
    {0x26,0xd0,1},
    {0x27,0x00,1},
    {0x28,0x01,1}, //AEC_exp_level_1bit11to8   
    {0x29,0xf4,1}, //AEC_exp_level_1bit7to0	  
    {0x2a,0x02,1}, //AEC_exp_level_2bit11to8   
    {0x2b,0xbc,1}, //AEC_exp_level_2bit7to0			 
    {0x2c,0x03,1}, //AEC_exp_level_3bit11to8   659 - 8FPS,  8ca - 6FPS  //	 
    {0x2d,0xe8,1}, //AEC_exp_level_3bit7to0			 
    {0x2e,0x09,1}, //AEC_exp_level_4bit11to8   4FPS 
    {0x2f,0xc4,1}, //AEC_exp_level_4bit7to0	 
    {0x30,0x20,1},
    {0x31,0x00,1},
    {0x32,0x1c,1},
    {0x33,0x90,1},
    {0x34,0x10,1},
    {0xd0,0x34,1},
    {0xd1,0x50,1},//AEC_target_Y						   
    {0xd2,0x61,1},//0xf2 	  
    {0xd4,0x96,1}, 
    {0xd5,0x01,1}, // william 0318
    {0xd6,0x96,1}, //antiflicker_step 					   
    {0xd7,0x03,1}, //AEC_exp_time_min ,william 20090312			   
    {0xd8,0x02,1}, 
    {0xdd,0x02,1},
    //========= measure window										
    {0xe0,0x03,1},
    {0xe1,0x02,1},							 
    {0xe2,0x27,1},
    {0xe3,0x1e,1}, 				 
    {0xe8,0x3b,1}, 					 
    {0xe9,0x6e,1}, 						 
    {0xea,0x2c,1},					 
    {0xeb,0x50,1}, 					 
    {0xec,0x73,1}, 		 
    //========= close_frame													
    {0xed,0x00,1}, //close_frame_num1 ,can be use to reduce FPS				 
    {0xee,0x00,1}, //close_frame_num2  
    {0xef,0x00,1}, //close_frame_num
    // page1
    {0xf0,0x01,1}, //select page1 
    {0x00,0x20,1},
    {0x01,0x20,1},							  
    {0x02,0x20,1},
    {0x03,0x20,1},
    {0x04,0x78,1},
    {0x05,0x78,1},
    {0x06,0x78,1},
    {0x07,0x78,1},
    {0x10,0x04,1},
    {0x11,0x04,1},						  
    {0x12,0x04,1},						  
    {0x13,0x04,1},							  
    {0x14,0x01,1}, 							  
    {0x15,0x01,1}, 							  
    {0x16,0x01,1}, 						 
    {0x17,0x01,1}, 						 
    {0x20,0x00,1}, 					  
    {0x21,0x00,1}, 					  
    {0x22,0x00,1}, 						  
    {0x23,0x00,1}, 						  
    {0x24,0x00,1}, 					  
    {0x25,0x00,1}, 						  
    {0x26,0x00,1}, 					  
    {0x27,0x00,1},  						  
    {0x40,0x11,1}, 
    //=============================lscP 
    {0x45,0x06,1},
    {0x46,0x06,1},			 
    {0x47,0x05,1},
    {0x48,0x04,1},	
    {0x49,0x03,1},		 
    {0x4a,0x03,1},
    {0x62,0xd8,1},
    {0x63,0x24,1},
    {0x64,0x24,1},
    {0x65,0x24,1},
    {0x66,0xd8,1},
    {0x67,0x24,1},
    {0x5a,0x00,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    //============================= ccP 
    {0x69,0x03,1}, //cc_mode
    //CC_G
    {0x70,0x5d,1},
    {0x71,0xed,1},
    {0x72,0xff,1},
    {0x73,0xe5,1},
    {0x74,0x5f,1},
    {0x75,0xe6,1},
    //CC_B
    {0x76,0x41,1},
    {0x77,0xef,1},
    {0x78,0xff,1},
    {0x79,0xff,1},
    {0x7a,0x5f,1},
    {0x7b,0xfa,1},
    //============================= AGP
    {0x7e,0x00,1},
    {0x7f,0x00,1},
    {0x80,0xc8,1},
    {0x81,0x06,1},
    {0x82,0x08,1},
    {0x83,0x23,1},
    {0x84,0x38,1},
    {0x85,0x4F,1},
    {0x86,0x61,1},  
    {0x87,0x72,1},
    {0x88,0x80,1},
    {0x89,0x8D,1},
    {0x8a,0xA2,1},
    {0x8b,0xB2,1},
    {0x8c,0xC0,1},
    {0x8d,0xCA,1},
    {0x8e,0xD3,1},
    {0x8f,0xDB,1},
    {0x90,0xE2,1},
    {0x91,0xED,1},
    {0x92,0xF6,1},
    {0x93,0xFD,1},
    //about gamma1 is hex r oct
    {0x94,0x04,1},
    {0x95,0x0E,1},
    {0x96,0x1B,1},
    {0x97,0x28,1},
    {0x98,0x35,1},
    {0x99,0x41,1},
    {0x9a,0x4E,1},
    {0x9b,0x67,1},
    {0x9c,0x7E,1},
    {0x9d,0x94,1},
    {0x9e,0xA7,1},
    {0x9f,0xBA,1},
    {0xa0,0xC8,1},
    {0xa1,0xD4,1},
    {0xa2,0xE7,1},
    {0xa3,0xF4,1},
    {0xa4,0xFA,1},
    //========= open functions	
    {0xf0,0x00,10}, //set back to page0	
    {0x40,0x7e,1}, 
    {0x41,0x2F,1},

    /////  请注意，调整GC0307的镜像和翻转，需要同时修改三个寄存器，如下:
    #if 0
    {0x0f,0x82,1},  
    {0x45,0x28,1},  
    {0x47,0x20,100}, 
    #endif
    //for u03
    {0x0f,0xb2,1},  
    {0x45,0x2b,1},  
    {0x47,0x2c,100}, 
     

    /////  四种不同的翻转和镜像设定，客户可直接复制!!!!!!
#if 0
    //  IMAGE_NORMAL:
    {0x0f, 0xb2,1},
    {0x45, 0x27,1},
    {0x47, 0x2c,1},

    // IMAGE_H_MIRROR:
    {0x0f, 0xa2,1},
    {0x45, 0x26,1},
    {0x47, 0x28,1},

    // IMAGE_V_MIRROR:			
    {0x0f, 0x92,1},
    {0x45, 0x25,1},
    {0x47, 0x24,1},

    // IMAGE_HV_MIRROR:	   // 180
    {0x0f, 0x82,1},
    {0x45, 0x24,1},
    {0x47, 0x20,1},
#endif

    //==========page select 0
    {0xf0,0x00,1},
    {0x0e,0x0a,1}, //row even skip
    {0x43,0xc0,1}, //more boundary mode opclk output enable
    //{0x44,0xe6,1}, // RGB
    {0x44,0xe2,20}, // YUV
    //{0x45,0x28,1}, //col subsample     //0x2b
    //{0x4e,0x32,1}, //opclk gate in subsample // mtk is 33
    {0x4e,0x33,1}, //opclk gate in subsample // mtk is 33

    //==============flicker step
    {0x01,0xd1,1},
    {0x02,0x82,1},
    {0x10,0x00,1},
    {0xd6,0xce,1},

    {0x28,0x02,1}, //AEC_exp_level_1bit11to8 // 33.3fps
    {0x29,0x2E,1}, //AEC_exp_level_1bit7to0 
    {0x2a,0x04,1}, //AEC_exp_level_2bit11to8 // 20fps
    {0x2b,0x06,1}, //AEC_exp_level_2bit7to0 
    {0x2c,0x06,1}, //AEC_exp_level_3bit11to8 // 12.5fps
    {0x2d,0x70,1}, //AEC_exp_level_3bit7to0 
    {0x2e,0x0c,1}, //AEC_exp_level_4bit11to8 // 6.25fps
    {0x2f,0xe0,1}, //AEC_exp_level_4bit7to0 

    //========= measure window 
    {0xe1,0x01,1}, //big_win_y0 
    {0xe3,0x0f,1}, //432, big_win_y1 , height 
    {0xea,0x16,1}, //small_win_height1 
    {0xeb,0x28,1}, //small_win_height2 
    {0xec,0x39,1}, //small_win_heigh3 //only for AWB 

    //abs
    {0xae,0x0c,1}, //black pixel target number

    //awb
    {0xc3,0x20,1}, //number limit

    //lsc
    {0x74,0x1e,1}, //lsc_row_center , 0x3c
    {0x75,0x52,1}, //lsc_col_center , 0x52

    {0x48,0xcb,1}, //mode2, 

};


// use this for 640x480 (VGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnVga[] = 
{
    //========= close output
    {0x43,0x00,1},
    {0x44,0xa2,1}, 
    //========= close some functions
    // open them after configure their parmameters
    {0x40,0x10,1}, 
    {0x41,0x00,1},
    {0x42,0x10,1},
    {0x47,0x00,1}, //mode1,				  	
    {0x48,0xc3,1}, //mode2, 	
    //{0x48,0xcb,1}, //mode2, 	
    {0x49,0x00,1}, //dither_mode 		
    {0x4a,0x00,1}, //clock_gating_en
    {0x4b,0x00,1}, //mode_reg3
    {0x4E,0x23,1}, //sync mode
    {0x4F,0x01,1}, //AWB, AEC, every N frame	
    //========= frame timing
    {0x01,0x6a,1}, //HB
    {0x02,0x0c,1}, //VB
    {0x1C,0x00,1}, //Vs_st
    {0x1D,0x00,1}, //Vs_et
    {0x10,0x00,1}, //high 4 bits of VB, HB
    {0x11,0x05,1}, //row_tail,  AD_pipe_number
    //========= windowing
    {0x05,0x00,1}, //row_start
    {0x06,0x00,1},
    {0x07,0x00,1},//col start
    {0x08,0x00,1}, 
    {0x09,0x01,1}, //win height
    {0x0A,0xE8,1},
    //{0x0A,0xE0,1},
    {0x0B,0x02,1},//win width, pixel array only 640
    {0x0C,0x80,1},
    //========= analog
    {0x0D,0x22,1}, //rsh_width
    {0x0E,0x02,1}, //CISCTL mode2,  
    {0x12,0x70,1}, //7 hrst, 6_4 darsg,
    {0x13,0x00,1}, //7 CISCTL_restart, 0 apwd
    {0x14,0x00,1}, //NA
    {0x15,0xba,1}, //7_4 vref
    {0x16,0x13,1}, //5to4 _coln_r,  __1to0__da18
    {0x17,0x52,1}, //opa_r, ref_r, sRef_r
    //{	0x18  ,0xc0,1} //analog_mode, best case for left band.
    {0x1E,0x0d,1},//tsp_width 		   
    {0x1F,0x32,1}, //sh_delay
    //========= offset
    {0x47,0x00,1}, //7__test_image, __6__fixed_pga, __5__auto_DN, __4__CbCr_fix, 
    //__3to2__dark_sequence, __1__allow_pclk_vcync, __0__LSC_test_image
    {0x19,0x06,1},  //pga_o			 
    {0x1a,0x06,1},  //pga_e			 
    {0x31,0x00,1},  //4	//pga_oFFset ,	 high 8bits of 11bits
    {0x3B,0x00,1},  //global_oFFset, low 8bits of 11bits
    {0x59,0x0f,1},  //offset_mode 	
    {0x58,0x88,1},  //DARK_VALUE_RATIO_G,  DARK_VALUE_RATIO_RB
    {0x57,0x08,1},  //DARK_CURRENT_RATE
    {0x56,0x77,1},  //PGA_OFFSET_EVEN_RATIO, PGA_OFFSET_ODD_RATIO
    //========= blk
    {0x35,0xd8,1},  //blk_mode
    {0x36,0x40,1}, 
    {0x3C,0x00,1}, 
    {0x3D,0x00,1},
    {0x3E,0x00,1},
    {0x3F,0x00,1},
    {0xb5,0x70,1},
    {0xb6,0x40,1},
    {0xb7,0x00,1},
    {0xb8,0x38,1},
    {0xb9,0xc3,1},		  
    {0xba,0x0f,1},
    {0x7e,0x35,1},
    {0x7f,0x86,1},
    {0x5c,0x68,1},//78
    {0x5d,0x78,1},//88
    //========= manual_gain 
    {0x61,0x80,1}, //manual_gain_g1	
    {0x63,0x80,1}, //manual_gain_r
    {0x65,0x98,1}, //manual_gai_b, 0xa0=1.25, 0x98=1.1875
    {0x67,0x80,1}, //manual_gain_g2
    {0x68,0x18,1}, //global_manual_gain	 2.4bits
    //=========CC _R
    {0x69,0x58,1},  //54
    {0x6A,0xf6,1},  //ff
    {0x6B,0xfb,1},  //fe
    {0x6C,0xf4,1},  //ff
    {0x6D,0x5a,1},  //5f
    {0x6E,0xe6,1},  //e1
    {0x6f,0x00,1},	
    //=========lsc							  
    {0x70,0x14,1},
    {0x71,0x1c,1},
    {0x72,0x20,1},
    {0x73,0x10,1},	
    {0x74,0x3c,1},
    {0x75,0x52,1},
    //=========dn
    {0x7d,0x2f,1},  //dn_mode   	
    {0x80,0x0c,1}, //when auto_dn, check 7e,7f
    {0x81,0x0c,1},
    {0x82,0x44,1},
    //dd																		   
    {0x83,0x18,1},  //DD_TH1 					  
    {0x84,0x18,1},  //DD_TH2 					  
    {0x85,0x04,1},  //DD_TH3
    {0x87,0x34,1}, //32 b DNDD_low_range X16,  DNDD_low_range_C_weight_center
    //=========intp-ee
    {0x88,0x04,1},
    {0x89,0x01,1},  										  
    {0x8a,0x50,1},//60  										   
    {0x8b,0x50,1},//60  										   
    {0x8c,0x07,1},
    {0x50,0x0c,1},
    {0x5f,0x3c,1},
    {0x8e,0x02,1},
    {0x86,0x02,1},
    {0x51,0x20,1},
    {0x52,0x08,1},
    {0x53,0x00,1},
    //========= YCP 
    //contrast_center
    {0x77,0x80,1}, //contrast_center
    {0x78,0x00,1}, //fixed_Cb
    {0x79,0x00,1}, //fixed_Cr
    {0x7a,0x00,1}, //luma_offset
    {0x7b,0x40,1}, //hue_cos 
    {0x7c,0x00,1}, //hue_sin
    //saturation	
    {0xa0,0x40,1}, //global_saturation
    {0xa1,0x40,1}, //luma_contrast
    {0xa2,0x34,1}, //saturation_Cb
    {0xa3,0x34,1}, //saturation_Cr
    {0xa4,0xc8,1},
    {0xa5,0x02,1},
    {0xa6,0x28,1},
    {0xa7,0x02,1},
    //skin
    {0xa8,0xee,1},
    {0xa9,0x12,1},
    {0xaa,0x01,1},
    {0xab,0x20,1},
    {0xac,0xf0,1},
    {0xad,0x10,1},
    //========= ABS
    {0xae,0x18,1},
    {0xaf,0x74,1},
    {0xb0,0xe0,1},
    {0xb1,0x20,1},
    {0xb2,0x6c,1},
    {0xb3,0x40,1},
    {0xb4,0x04,1},
    //========= AWB 
    {0xbb,0x42,1},
    {0xbc,0x60,1},
    {0xbd,0x50,1},
    {0xbe,0x50,1},
    {0xbf,0x0c,1},
    {0xc0,0x06,1},
    {0xc1,0x60,1},
    {0xc2,0xf1,1}, //f1
    {0xc3,0x40,1},
    {0xc4,0x1c,1}, //18//20
    {0xc5,0x56,1},  //33
    {0xc6,0x1d,1},
    {0xca,0x70,1},
    {0xcb,0x70,1},
    {0xcc,0x78,1},
    {0xcd,0x80,1}, //R_ratio 									 
    {0xce,0x80,1}, //G_ratio  , cold_white white 								   
    {0xcf,0x80,1}, //B_ratio  	
    //=========  aecT  
    {0x20,0x02,1},//0x02 
    {0x21,0xc0,1},
    {0x22,0x60,1},   
    {0x23,0x88,1},
    {0x24,0x96,1},
    {0x25,0x30,1},
    {0x26,0xd0,1},
    {0x27,0x00,1},
    {0x28,0x01,1}, //AEC_exp_level_1bit11to8   
    {0x29,0xf4,1}, //AEC_exp_level_1bit7to0	  
    {0x2a,0x02,1}, //AEC_exp_level_2bit11to8   
    {0x2b,0x8A,1},	//AEC_exp_level_2bit7to0	
    {0x2c,0x03,1}, //AEC_exp_level_3bit11to8   659 - 8FPS,  8ca - 6FPS  //	 
    {0x2d,0xe8,1}, //AEC_exp_level_3bit7to0			 
    {0x2e,0x09,1}, //AEC_exp_level_4bit11to8   4FPS 
    {0x2f,0xc4,1}, //AEC_exp_level_4bit7to0	 
    {0x30,0x20,1},
    {0x31,0x00,1},
    {0x32,0x1c,1},
    {0x33,0x90,1},
    {0x34,0x10,1},
    {0xd0,0x34,1},
    {0xd1,0x50,1},//AEC_target_Y						   
    {0xd2,0x61,1},//0xf2 	  
    {0xd4,0x96,1}, 
    {0xd5,0x01,1}, // william 0318
    {0xd6,0x96,1}, //antiflicker_step 					   
    {0xd7,0x03,1}, //AEC_exp_time_min ,william 20090312			   
    {0xd8,0x02,1}, 
    {0xdd, 0x12,1},
    //========= measure window										
    {0xe0,0x03,1},
    {0xe1,0x02,1},							 
    {0xe2,0x27,1},
    {0xe3,0x1e,1}, 				 
    {0xe8,0x3b,1}, 					 
    {0xe9,0x6e,1}, 						 
    {0xea,0x2c,1},					 
    {0xeb,0x50,1}, 					 
    {0xec,0x73,1}, 		 
    //========= close_frame													
    {0xed,0x00,1}, //close_frame_num1 ,can be use to reduce FPS				 
    {0xee,0x00,1}, //close_frame_num2  
    {0xef,0x00,1}, //close_frame_num
    // page1
    {0xf0,0x01,1}, //select page1 
    {0x00,0x20,1},
    {0x01,0x20,1},							  
    {0x02,0x20,1},
    {0x03,0x20,1},
    {0x04,0x78,1},
    {0x05,0x78,1},
    {0x06,0x78,1},
    {0x07,0x78,1},
    {0x10,0x04,1},
    {0x11,0x04,1},						  
    {0x12,0x04,1},						  
    {0x13,0x04,1},							  
    {0x14,0x01,1}, 							  
    {0x15,0x01,1}, 							  
    {0x16,0x01,1}, 						 
    {0x17,0x01,1}, 						 
    {0x20,0x00,1}, 					  
    {0x21,0x00,1}, 					  
    {0x22,0x00,1}, 						  
    {0x23,0x00,1}, 						  
    {0x24,0x00,1}, 					  
    {0x25,0x00,1}, 						  
    {0x26,0x00,1}, 					  
    {0x27,0x00,1},  						  
    {0x40,0x11,1}, 
    //=============================lscP 
    {0x45,0x06,1},
    {0x46,0x06,1},			 
    {0x47,0x05,1},
    {0x48,0x04,1},	
    {0x49,0x03,1},		 
    {0x4a,0x03,1},
    {0x62,0xd8,1},
    {0x63,0x24,1},
    {0x64,0x24,1},
    {0x65,0x24,1},
    {0x66,0xd8,1},
    {0x67,0x24,1},
    {0x5a,0x00,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    //============================= ccP 
    {0x69,0x03,1}, //cc_mode
    //CC_G
    {0x70,0x5d,1},
    {0x71,0xed,1},
    {0x72,0xff,1},
    {0x73,0xe5,1},
    {0x74,0x5f,1},
    {0x75,0xe6,1},
    //CC_B
    {0x76,0x41,1},
    {0x77,0xef,1},
    {0x78,0xff,1},
    {0x79,0xff,1},
    {0x7a,0x5f,1},
    {0x7b,0xfa,1},
    //============================= AGP
    {0x7e,0x00,1},
    {0x7f,0x00,1},
    {0x80,0xc8,1},
    {0x81,0x06,1},
    {0x82,0x08,1},
    {0x83,0x23,1},
    {0x84,0x38,1},
    {0x85,0x4F,1},
    {0x86,0x61,1},  
    {0x87,0x72,1},
    {0x88,0x80,1},
    {0x89,0x8D,1},
    {0x8a,0xA2,1},
    {0x8b,0xB2,1},
    {0x8c,0xC0,1},
    {0x8d,0xCA,1},
    {0x8e,0xD3,1},
    {0x8f,0xDB,1},
    {0x90,0xE2,1},
    {0x91,0xED,1},
    {0x92,0xF6,1},
    {0x93,0xFD,1},
    //about gamma1 is hex r oct
    {0x94,0x04,1},
    {0x95,0x0E,1},
    {0x96,0x1B,1},
    {0x97,0x28,1},
    {0x98,0x35,1},
    {0x99,0x41,1},
    {0x9a,0x4E,1},
    {0x9b,0x67,1},
    {0x9c,0x7E,1},
    {0x9d,0x94,1},
    {0x9e,0xA7,1},
    {0x9f,0xBA,1},
    {0xa0,0xC8,1},
    {0xa1,0xD4,1},
    {0xa2,0xE7,1},
    {0xa3,0xF4,1},
    {0xa4,0xFA,1},
    //========= open functions	
    {0xf0,0x00,10}, //set back to page0	
    {0x40,0x7e,1}, 
    {0x41,0x2F,1},

    /////  请注意，调整GC0307的镜像和翻转，需要同时修改三个寄存器，如下:
    //  IMAGE_NORMAL:
    {0x0f, 0xb2,1},
    {0x45, 0x27,1},
    {0x47, 0x2c,1},

    /////  四种不同的翻转和镜像设定，客户可直接复制!!!!!!
#if 0
    //  IMAGE_NORMAL:
    {0x0f, 0xb2,1},
    {0x45, 0x27,1},
    {0x47, 0x2c,1},

    // IMAGE_H_MIRROR:
    {0x0f, 0xa2,1},
    {0x45, 0x26,1},
    {0x47, 0x28,1},

    // IMAGE_V_MIRROR:			
    {0x0f, 0x92,1},
    {0x45, 0x25,1},
    {0x47, 0x24,1},

    // IMAGE_HV_MIRROR:	   // 180
    {0x0f, 0x82,1},
    {0x45, 0x24,1},
    {0x47, 0x20,1},
#endif
    //=========open output
    {0x43,0x40,1},
    //{0x44,0xE6,20}, //RGB
    {0x44,0xE2,20}, //YUV
};

#if 1
// use this for 160*120 (QQVGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQqvga[] = 
{
    //========= close output
    {0x43,0x00,1},
    {0x44,0xa2,1}, 
    //========= close some functions
    // open them after configure their parmameters
    {0x40,0x10,1}, 
    {0x41,0x00,1},
    {0x42,0x10,1},
    {0x47,0x00,1}, //mode1,
#if 1					  	
    {0x48,0xc3,1}, //mode2, 	
#else	
    {0x48,0xcb,1}, //mode2, 	
#endif
    {0x49,0x00,1}, //dither_mode 		
    {0x4a,0x00,1}, //clock_gating_en
    {0x4b,0x00,1}, //mode_reg3
#if 1	
    {0x4E,0x13,1}, //sync mode
#else
	{0x4E,0x23,1}, //sync mode
#endif	
    {0x4F,0x01,1}, //AWB, AEC, every N frame	
    //========= frame timing
    {0x01,0x6a,1}, //HB
    {0x02,0x0c,1}, //VB
    {0x1C,0x00,1}, //Vs_st
    {0x1D,0x00,1}, //Vs_et
    {0x10,0x00,1}, //high 4 bits of VB, HB
    {0x11,0x05,1}, //row_tail,  AD_pipe_number
    //========= windowing
    {0x05,0x00,1}, //row_start
    {0x06,0x00,1},
    {0x07,0x00,1},//col start
    {0x08,0x00,1}, 
    {0x09,0x01,1}, //win height
    {0x0A,0xE8,1},
    //{0x0A,0xE0,1},
    {0x0B,0x02,1},//win width, pixel array only 640
    {0x0C,0x80,1},
    //========= analog
    {0x0D,0x22,1}, //rsh_width
    {0x0E,0x02,1}, //CISCTL mode2,  
    {0x12,0x70,1}, //7 hrst, 6_4 darsg,
    {0x13,0x00,1}, //7 CISCTL_restart, 0 apwd
    {0x14,0x00,1}, //NA
    {0x15,0xba,1}, //7_4 vref
    {0x16,0x13,1}, //5to4 _coln_r,  __1to0__da18
    {0x17,0x52,1}, //opa_r, ref_r, sRef_r
    //{	0x18  ,0xc0,1} //analog_mode, best case for left band.
    {0x1E,0x0d,1},//tsp_width 		   
    {0x1F,0x32,1}, //sh_delay
    //========= offset
    {0x47,0x00,1}, //7__test_image, __6__fixed_pga, __5__auto_DN, __4__CbCr_fix, 
    //__3to2__dark_sequence, __1__allow_pclk_vcync, __0__LSC_test_image
    {0x19,0x06,1},  //pga_o			 
    {0x1a,0x06,1},  //pga_e			 
    {0x31,0x00,1},  //4	//pga_oFFset ,	 high 8bits of 11bits
    {0x3B,0x00,1},  //global_oFFset, low 8bits of 11bits
    {0x59,0x0f,1},  //offset_mode 	
    {0x58,0x88,1},  //DARK_VALUE_RATIO_G,  DARK_VALUE_RATIO_RB
    {0x57,0x08,1},  //DARK_CURRENT_RATE
    {0x56,0x77,1},  //PGA_OFFSET_EVEN_RATIO, PGA_OFFSET_ODD_RATIO
    //========= blk
    {0x35,0xd8,1},  //blk_mode
    {0x36,0x40,1}, 
    {0x3C,0x00,1}, 
    {0x3D,0x00,1},
    {0x3E,0x00,1},
    {0x3F,0x00,1},
    {0xb5,0x70,1},
    {0xb6,0x40,1},
    {0xb7,0x00,1},
    {0xb8,0x38,1},
    {0xb9,0xc3,1},		  
    {0xba,0x0f,1},
    {0x7e,0x35,1},
    {0x7f,0x86,1},
    {0x5c,0x68,1},//78
    {0x5d,0x78,1},//88
    //========= manual_gain 
    {0x61,0x80,1}, //manual_gain_g1	
    {0x63,0x80,1}, //manual_gain_r
    {0x65,0x98,1}, //manual_gai_b, 0xa0=1.25, 0x98=1.1875
    {0x67,0x80,1}, //manual_gain_g2
    {0x68,0x18,1}, //global_manual_gain	 2.4bits
    //=========CC _R
    {0x69,0x58,1},  //54
    {0x6A,0xf6,1},  //ff
    {0x6B,0xfb,1},  //fe
    {0x6C,0xf4,1},  //ff
    {0x6D,0x5a,1},  //5f
    {0x6E,0xe6,1},  //e1
    {0x6f,0x00,1},	
    //=========lsc							  
    {0x70,0x14,1},
    {0x71,0x1c,1},
    {0x72,0x20,1},
    {0x73,0x10,1},	
    {0x74,0x3c,1},
    {0x75,0x52,1},
    //=========dn
    {0x7d,0x2f,1},  //dn_mode   	
    {0x80,0x0c,1}, //when auto_dn, check 7e,7f
    {0x81,0x0c,1},
    {0x82,0x44,1},
    //dd																		   
    {0x83,0x18,1},  //DD_TH1 					  
    {0x84,0x18,1},  //DD_TH2 					  
    {0x85,0x04,1},  //DD_TH3
    {0x87,0x34,1}, //32 b DNDD_low_range X16,  DNDD_low_range_C_weight_center
    //=========intp-ee
    {0x88,0x04,1},
    {0x89,0x01,1},  										  
    {0x8a,0x50,1},//60  										   
    {0x8b,0x50,1},//60  										   
    {0x8c,0x07,1},
    {0x50,0x0c,1},
    {0x5f,0x3c,1},
    {0x8e,0x02,1},
    {0x86,0x02,1},
    {0x51,0x20,1},
    {0x52,0x08,1},
    {0x53,0x00,1},
    //========= YCP 
    //contrast_center
    {0x77,0x80,1}, //contrast_center
    {0x78,0x00,1}, //fixed_Cb
    {0x79,0x00,1}, //fixed_Cr
    {0x7a,0x00,1}, //luma_offset
    {0x7b,0x40,1}, //hue_cos 
    {0x7c,0x00,1}, //hue_sin
    //saturation	
    {0xa0,0x40,1}, //global_saturation
    {0xa1,0x40,1}, //luma_contrast
    {0xa2,0x34,1}, //saturation_Cb
    {0xa3,0x34,1}, //saturation_Cr
    {0xa4,0xc8,1},
    {0xa5,0x02,1},
    {0xa6,0x28,1},
    {0xa7,0x02,1},
    //skin
    {0xa8,0xee,1},
    {0xa9,0x12,1},
    {0xaa,0x01,1},
    {0xab,0x20,1},
    {0xac,0xf0,1},
    {0xad,0x10,1},
    //========= ABS
    {0xae,0x18,1},
    {0xaf,0x74,1},
    {0xb0,0xe0,1},
    {0xb1,0x20,1},
    {0xb2,0x6c,1},
    {0xb3,0x40,1},
    {0xb4,0x04,1},
    //========= AWB 
    {0xbb,0x42,1},
    {0xbc,0x60,1},
    {0xbd,0x50,1},
    {0xbe,0x50,1},
    {0xbf,0x0c,1},
    {0xc0,0x06,1},
    {0xc1,0x60,1},
    {0xc2,0xf1,1}, //f1
    {0xc3,0x40,1},
    {0xc4,0x1c,1}, //18//20
    {0xc5,0x56,1},  //33
    {0xc6,0x1d,1},
    {0xca,0x70,1},
    {0xcb,0x70,1},
    {0xcc,0x78,1},
    {0xcd,0x80,1}, //R_ratio 									 
    {0xce,0x80,1}, //G_ratio  , cold_white white 								   
    {0xcf,0x80,1}, //B_ratio  	
    //=========  aecT
#if 1
	{0x20,0x02,1},//0x02 
#else	  
    {0x20,0x06,1},//0x02 
#endif	
    {0x21,0xc0,1},
    {0x22,0x60,1},   
    {0x23,0x88,1},
    {0x24,0x96,1},
    {0x25,0x30,1},
    {0x26,0xd0,1},
    {0x27,0x00,1},
#if 0
    {0x28,0x01,1}, //AEC_exp_level_1bit11to8   
    {0x29,0xf4,1}, //AEC_exp_level_1bit7to0	  
    {0x2a,0x02,1}, //AEC_exp_level_2bit11to8   
    {0x2b,0xbc,1},	//AEC_exp_level_2bit7to0	
    {0x2c,0x03,1}, //AEC_exp_level_3bit11to8   659 - 8FPS,  8ca - 6FPS  //	 
    {0x2d,0xe8,1}, //AEC_exp_level_3bit7to0			 
    {0x2e,0x09,1}, //AEC_exp_level_4bit11to8   4FPS 
    {0x2f,0xc4,1}, //AEC_exp_level_4bit7to0	 
#else
    {0x28,0x02,1}, 
    {0x29,0x58,1}, 
    {0x2a,0x03,1}, 
    {0x2b,0x84,1},	
    {0x2c,0x07,1}, 
    {0x2d,0x08,1}, 
    {0x2e,0x0d,1}, 
    {0x2f,0x7a,1}, 
#endif
    {0x30,0x20,1},
    {0x31,0x00,1},
    {0x32,0x1c,1},
    {0x33,0x90,1},
    {0x34,0x10,1},
    {0xd0,0x34,1},
    {0xd1,0x50,1},//AEC_target_Y						   
    {0xd2,0x61,1},//0xf2 	  
    {0xd4,0x96,1}, 
    {0xd5,0x01,1}, // william 0318
    {0xd6,0x96,1}, //antiflicker_step 					   
    {0xd7,0x03,1}, //AEC_exp_time_min ,william 20090312			   
    {0xd8,0x02,1}, 
#if 1	
    {0xdd, 0x12,1},
#else
	{0xdd, 0x22,1},
#endif	
    //========= measure window										
    {0xe0,0x03,1},
    {0xe1,0x02,1},							 
    {0xe2,0x27,1},
    {0xe3,0x1e,1}, 				 
    {0xe8,0x3b,1}, 					 
    {0xe9,0x6e,1}, 						 
    {0xea,0x2c,1},					 
    {0xeb,0x50,1}, 					 
    {0xec,0x73,1}, 		 
    //========= close_frame													
    {0xed,0x00,1}, //close_frame_num1 ,can be use to reduce FPS				 
    {0xee,0x00,1}, //close_frame_num2  
    {0xef,0x00,1}, //close_frame_num
    // page1
    {0xf0,0x01,1}, //select page1 
    {0x00,0x20,1},
    {0x01,0x20,1},							  
    {0x02,0x20,1},
    {0x03,0x20,1},
    {0x04,0x78,1},
    {0x05,0x78,1},
    {0x06,0x78,1},
    {0x07,0x78,1},
    {0x10,0x04,1},
    {0x11,0x04,1},						  
    {0x12,0x04,1},						  
    {0x13,0x04,1},							  
    {0x14,0x01,1}, 							  
    {0x15,0x01,1}, 							  
    {0x16,0x01,1}, 						 
    {0x17,0x01,1}, 						 
    {0x20,0x00,1}, 					  
    {0x21,0x00,1}, 					  
    {0x22,0x00,1}, 						  
    {0x23,0x00,1}, 						  
    {0x24,0x00,1}, 					  
    {0x25,0x00,1}, 						  
    {0x26,0x00,1}, 					  
    {0x27,0x00,1},  						  
    {0x40,0x11,1}, 
    //=============================lscP 
    {0x45,0x06,1},
    {0x46,0x06,1},			 
    {0x47,0x05,1},
#if 1	
    {0x48,0x84,1},
#else
	{0x48,0x04,1},	
#endif	
    {0x49,0x03,1},		 
    {0x4a,0x03,1},
    {0x62,0xd8,1},
    {0x63,0x24,1},
    {0x64,0x24,1},
    {0x65,0x24,1},
    {0x66,0xd8,1},
    {0x67,0x24,1},
    {0x5a,0x00,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    //============================= ccP 
    {0x69,0x03,1}, //cc_mode
    //CC_G
    {0x70,0x5d,1},
    {0x71,0xed,1},
    {0x72,0xff,1},
    {0x73,0xe5,1},
    {0x74,0x5f,1},
    {0x75,0xe6,1},
    //CC_B
    {0x76,0x41,1},
    {0x77,0xef,1},
    {0x78,0xff,1},
    {0x79,0xff,1},
    {0x7a,0x5f,1},
    {0x7b,0xfa,1},
    //============================= AGP
    {0x7e,0x00,1},
    {0x7f,0x00,1},
    {0x80,0xc8,1},
    {0x81,0x06,1},
    {0x82,0x08,1},
    {0x83,0x23,1},
    {0x84,0x38,1},
    {0x85,0x4F,1},
    {0x86,0x61,1},  
    {0x87,0x72,1},
    {0x88,0x80,1},
    {0x89,0x8D,1},
    {0x8a,0xA2,1},
    {0x8b,0xB2,1},
    {0x8c,0xC0,1},
    {0x8d,0xCA,1},
    {0x8e,0xD3,1},
    {0x8f,0xDB,1},
    {0x90,0xE2,1},
    {0x91,0xED,1},
    {0x92,0xF6,1},
    {0x93,0xFD,1},
    //about gamma1 is hex r oct
    {0x94,0x04,1},
    {0x95,0x0E,1},
    {0x96,0x1B,1},
    {0x97,0x28,1},
    {0x98,0x35,1},
    {0x99,0x41,1},
    {0x9a,0x4E,1},
    {0x9b,0x67,1},
    {0x9c,0x7E,1},
    {0x9d,0x94,1},
    {0x9e,0xA7,1},
    {0x9f,0xBA,1},
    {0xa0,0xC8,1},
    {0xa1,0xD4,1},
    {0xa2,0xE7,1},
    {0xa3,0xF4,1},
    {0xa4,0xFA,1},
    //========= open functions	
    {0xf0,0x00,10}, //set back to page0	
    {0x40,0x7e,1}, 
    {0x41,0x2F,1},

    /////  请注意，调整GC0307的镜像和翻转，需要同时修改三个寄存器，如下:
    //  IMAGE_NORMAL:
    {0x0f, 0xb2,1},
    //{0x45, 0x27,1},
    {0x45, 0x93,1},
    {0x47, 0x2c,1},

    /////  四种不同的翻转和镜像设定，客户可直接复制!!!!!!
#if 0
    //  IMAGE_NORMAL:
    {0x0f, 0xb2,1},
    {0x45, 0x27,1},
    {0x47, 0x2c,1},

    // IMAGE_H_MIRROR:
    {0x0f, 0xa2,1},
    {0x45, 0x26,1},
    {0x47, 0x28,1},

    // IMAGE_V_MIRROR:			
    {0x0f, 0x92,1},
    {0x45, 0x25,1},
    {0x47, 0x24,1},

    // IMAGE_HV_MIRROR:	   // 180
    {0x0f, 0x82,1},
    {0x45, 0x24,1},
    {0x47, 0x20,1},
#endif
    //=========open output
    {0x43,0x40,1},
    //{0x44,0xE6,20}, //RGB
    {0x44,0xE2,20}, //YUV
};
#else
// use this for 160*120 (QQVGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQqvga[] = 
{
    //========= close output
    {0x43,0x00,1},
    {0x44,0xa2,1}, 
    //========= close some functions
    // open them after configure their parmameters
    {0x40,0x10,1}, 
    {0x41,0x00,1},
    {0x42,0x10,1},
    {0x47,0x00,1}, //mode1,				  	
    //{0x48,0xc3,1}, //mode2, 	
    {0x48,0xcb,1}, //mode2, 	
    {0x49,0x00,1}, //dither_mode 		
    {0x4a,0x00,1}, //clock_gating_en
    {0x4b,0x00,1}, //mode_reg3
#if 0    
    {0x4E,0x23,1}, //sync mode
#else
    {0x4E,0x13,1}, //sync mode
#endif
    {0x4F,0x01,1}, //AWB, AEC, every N frame	
    //========= frame timing
    {0x01,0x6a,1}, //HB
    {0x02,0x0c,1}, //VB
    {0x1C,0x00,1}, //Vs_st
    {0x1D,0x00,1}, //Vs_et
    {0x10,0x00,1}, //high 4 bits of VB, HB
    {0x11,0x05,1}, //row_tail,  AD_pipe_number
    //========= windowing
    {0x05,0x00,1}, //row_start
    {0x06,0x00,1},
    {0x07,0x00,1},//col start
    {0x08,0x00,1}, 
    {0x09,0x01,1}, //win height
    {0x0A,0xE8,1},
    //{0x0A,0xE0,1},
    {0x0B,0x02,1},//win width, pixel array only 640
    {0x0C,0x80,1},
    //========= analog
    {0x0D,0x22,1}, //rsh_width
    {0x0E,0x02,1}, //CISCTL mode2,  
    {0x12,0x70,1}, //7 hrst, 6_4 darsg,
    {0x13,0x00,1}, //7 CISCTL_restart, 0 apwd
    {0x14,0x00,1}, //NA
    {0x15,0xba,1}, //7_4 vref
    {0x16,0x13,1}, //5to4 _coln_r,  __1to0__da18
    {0x17,0x52,1}, //opa_r, ref_r, sRef_r
    //{	0x18  ,0xc0,1} //analog_mode, best case for left band.
    {0x1E,0x0d,1},//tsp_width 		   
    {0x1F,0x32,1}, //sh_delay
    //========= offset
    {0x47,0x00,1}, //7__test_image, __6__fixed_pga, __5__auto_DN, __4__CbCr_fix, 
    //__3to2__dark_sequence, __1__allow_pclk_vcync, __0__LSC_test_image
    {0x19,0x06,1},  //pga_o			 
    {0x1a,0x06,1},  //pga_e			 
    {0x31,0x00,1},  //4	//pga_oFFset ,	 high 8bits of 11bits
    {0x3B,0x00,1},  //global_oFFset, low 8bits of 11bits
    {0x59,0x0f,1},  //offset_mode 	
    {0x58,0x88,1},  //DARK_VALUE_RATIO_G,  DARK_VALUE_RATIO_RB
    {0x57,0x08,1},  //DARK_CURRENT_RATE
    {0x56,0x77,1},  //PGA_OFFSET_EVEN_RATIO, PGA_OFFSET_ODD_RATIO
    //========= blk
    {0x35,0xd8,1},  //blk_mode
    {0x36,0x40,1}, 
    {0x3C,0x00,1}, 
    {0x3D,0x00,1},
    {0x3E,0x00,1},
    {0x3F,0x00,1},
    {0xb5,0x70,1},
    {0xb6,0x40,1},
    {0xb7,0x00,1},
    {0xb8,0x38,1},
    {0xb9,0xc3,1},		  
    {0xba,0x0f,1},
    {0x7e,0x35,1},
    {0x7f,0x86,1},
    {0x5c,0x68,1},//78
    {0x5d,0x78,1},//88
    //========= manual_gain 
    {0x61,0x80,1}, //manual_gain_g1	
    {0x63,0x80,1}, //manual_gain_r
    {0x65,0x98,1}, //manual_gai_b, 0xa0=1.25, 0x98=1.1875
    {0x67,0x80,1}, //manual_gain_g2
    {0x68,0x18,1}, //global_manual_gain	 2.4bits
    //=========CC _R
    {0x69,0x58,1},  //54
    {0x6A,0xf6,1},  //ff
    {0x6B,0xfb,1},  //fe
    {0x6C,0xf4,1},  //ff
    {0x6D,0x5a,1},  //5f
    {0x6E,0xe6,1},  //e1
    {0x6f,0x00,1},	
    //=========lsc							  
    {0x70,0x14,1},
    {0x71,0x1c,1},
    {0x72,0x20,1},
    {0x73,0x10,1},	
    {0x74,0x3c,1},
    {0x75,0x52,1},
    //=========dn
    {0x7d,0x2f,1},  //dn_mode   	
    {0x80,0x0c,1}, //when auto_dn, check 7e,7f
    {0x81,0x0c,1},
    {0x82,0x44,1},
    //dd																		   
    {0x83,0x18,1},  //DD_TH1 					  
    {0x84,0x18,1},  //DD_TH2 					  
    {0x85,0x04,1},  //DD_TH3
    {0x87,0x34,1}, //32 b DNDD_low_range X16,  DNDD_low_range_C_weight_center
    //=========intp-ee
    {0x88,0x04,1},
    {0x89,0x01,1},  										  
    {0x8a,0x50,1},//60  										   
    {0x8b,0x50,1},//60  										   
    {0x8c,0x07,1},
    {0x50,0x0c,1},
    {0x5f,0x3c,1},
    {0x8e,0x02,1},
    {0x86,0x02,1},
    {0x51,0x20,1},
    {0x52,0x08,1},
    {0x53,0x00,1},
    //========= YCP 
    //contrast_center
    {0x77,0x80,1}, //contrast_center
    {0x78,0x00,1}, //fixed_Cb
    {0x79,0x00,1}, //fixed_Cr
    {0x7a,0x00,1}, //luma_offset
    {0x7b,0x40,1}, //hue_cos 
    {0x7c,0x00,1}, //hue_sin
    //saturation	
    {0xa0,0x40,1}, //global_saturation
    {0xa1,0x40,1}, //luma_contrast
    {0xa2,0x34,1}, //saturation_Cb
    {0xa3,0x34,1}, //saturation_Cr
    {0xa4,0xc8,1},
    {0xa5,0x02,1},
    {0xa6,0x28,1},
    {0xa7,0x02,1},
    //skin
    {0xa8,0xee,1},
    {0xa9,0x12,1},
    {0xaa,0x01,1},
    {0xab,0x20,1},
    {0xac,0xf0,1},
    {0xad,0x10,1},
    //========= ABS
    {0xae,0x18,1},
    {0xaf,0x74,1},
    {0xb0,0xe0,1},
    {0xb1,0x20,1},
    {0xb2,0x6c,1},
    {0xb3,0x40,1},
    {0xb4,0x04,1},
    //========= AWB 
    {0xbb,0x42,1},
    {0xbc,0x60,1},
    {0xbd,0x50,1},
    {0xbe,0x50,1},
    {0xbf,0x0c,1},
    {0xc0,0x06,1},
    {0xc1,0x60,1},
    {0xc2,0xf1,1}, //f1
    {0xc3,0x40,1},
    {0xc4,0x1c,1}, //18//20
    {0xc5,0x56,1},  //33
    {0xc6,0x1d,1},
    {0xca,0x70,1},
    {0xcb,0x70,1},
    {0xcc,0x78,1},
    {0xcd,0x80,1}, //R_ratio 									 
    {0xce,0x80,1}, //G_ratio  , cold_white white 								   
    {0xcf,0x80,1}, //B_ratio  	
    //=========  aecT  
#if 0    
    {0x20,0x06,1},//0x02 
#else
    {0x20,0x02,1},//0x02 
#endif
    {0x21,0xc0,1},
    {0x22,0x60,1},   
    {0x23,0x88,1},
    {0x24,0x96,1},
    {0x25,0x30,1},
    {0x26,0xd0,1},
    {0x27,0x00,1},
    {0x28,0x01,1}, //AEC_exp_level_1bit11to8   
    {0x29,0xf4,1}, //AEC_exp_level_1bit7to0	  
    {0x2a,0x02,1}, //AEC_exp_level_2bit11to8   
    {0x2b,0xbc,1}, //AEC_exp_level_2bit7to0			 
    {0x2c,0x03,1}, //AEC_exp_level_3bit11to8   659 - 8FPS,  8ca - 6FPS  //	 
    {0x2d,0xe8,1}, //AEC_exp_level_3bit7to0			 
    {0x2e,0x09,1}, //AEC_exp_level_4bit11to8   4FPS 
    {0x2f,0xc4,1}, //AEC_exp_level_4bit7to0	 
    {0x30,0x20,1},
    {0x31,0x00,1},
    {0x32,0x1c,1},
    {0x33,0x90,1},
    {0x34,0x10,1},
    {0xd0,0x34,1},
    {0xd1,0x50,1},//AEC_target_Y						   
    {0xd2,0x61,1},//0xf2 	  
    {0xd4,0x96,1}, 
    {0xd5,0x01,1}, // william 0318
    {0xd6,0x96,1}, //antiflicker_step 					   
    {0xd7,0x03,1}, //AEC_exp_time_min ,william 20090312			   
    {0xd8,0x02,1}, 
#if 0    
    {0xdd,0x22,1},//0x12 
#else
    {0xdd,0x12,1},//0x12 
#endif
    //========= measure window										
    {0xe0,0x03,1},
    {0xe1,0x02,1},							 
    {0xe2,0x27,1},
    {0xe3,0x1e,1}, 				 
    {0xe8,0x3b,1}, 					 
    {0xe9,0x6e,1}, 						 
    {0xea,0x2c,1},					 
    {0xeb,0x50,1}, 					 
    {0xec,0x73,1}, 		 
    //========= close_frame													
    {0xed,0x00,1}, //close_frame_num1 ,can be use to reduce FPS				 
    {0xee,0x00,1}, //close_frame_num2  
    {0xef,0x00,1}, //close_frame_num
    // page1
    {0xf0,0x01,1}, //select page1 
    {0x00,0x20,1},
    {0x01,0x20,1},							  
    {0x02,0x20,1},
    {0x03,0x20,1},
    {0x04,0x78,1},
    {0x05,0x78,1},
    {0x06,0x78,1},
    {0x07,0x78,1},
    {0x10,0x04,1},
    {0x11,0x04,1},						  
    {0x12,0x04,1},						  
    {0x13,0x04,1},							  
    {0x14,0x01,1}, 							  
    {0x15,0x01,1}, 							  
    {0x16,0x01,1}, 						 
    {0x17,0x01,1}, 						 
    {0x20,0x00,1}, 					  
    {0x21,0x00,1}, 					  
    {0x22,0x00,1}, 						  
    {0x23,0x00,1}, 						  
    {0x24,0x00,1}, 					  
    {0x25,0x00,1}, 						  
    {0x26,0x00,1}, 					  
    {0x27,0x00,1},  						  
    {0x40,0x11,1}, 
    //=============================lscP 
    {0x45,0x06,1},
    {0x46,0x06,1},			 
    {0x47,0x05,1},
    {0x48,0x04,1},	
    {0x49,0x03,1},		 
    {0x4a,0x03,1},
    {0x62,0xd8,1},
    {0x63,0x24,1},
    {0x64,0x24,1},
    {0x65,0x24,1},
    {0x66,0xd8,1},
    {0x67,0x24,1},
    {0x5a,0x00,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    //============================= ccP 
    {0x69,0x03,1}, //cc_mode
    //CC_G
    {0x70,0x5d,1},
    {0x71,0xed,1},
    {0x72,0xff,1},
    {0x73,0xe5,1},
    {0x74,0x5f,1},
    {0x75,0xe6,1},
    //CC_B
    {0x76,0x41,1},
    {0x77,0xef,1},
    {0x78,0xff,1},
    {0x79,0xff,1},
    {0x7a,0x5f,1},
    {0x7b,0xfa,1},
    //============================= AGP
    {0x7e,0x00,1},
    {0x7f,0x00,1},
    {0x80,0xc8,1},
    {0x81,0x06,1},
    {0x82,0x08,1},
    {0x83,0x23,1},
    {0x84,0x38,1},
    {0x85,0x4F,1},
    {0x86,0x61,1},  
    {0x87,0x72,1},
    {0x88,0x80,1},
    {0x89,0x8D,1},
    {0x8a,0xA2,1},
    {0x8b,0xB2,1},
    {0x8c,0xC0,1},
    {0x8d,0xCA,1},
    {0x8e,0xD3,1},
    {0x8f,0xDB,1},
    {0x90,0xE2,1},
    {0x91,0xED,1},
    {0x92,0xF6,1},
    {0x93,0xFD,1},
    //about gamma1 is hex r oct
    {0x94,0x04,1},
    {0x95,0x0E,1},
    {0x96,0x1B,1},
    {0x97,0x28,1},
    {0x98,0x35,1},
    {0x99,0x41,1},
    {0x9a,0x4E,1},
    {0x9b,0x67,1},
    {0x9c,0x7E,1},
    {0x9d,0x94,1},
    {0x9e,0xA7,1},
    {0x9f,0xBA,1},
    {0xa0,0xC8,1},
    {0xa1,0xD4,1},
    {0xa2,0xE7,1},
    {0xa3,0xF4,1},
    {0xa4,0xFA,1},
    //========= open functions	
    {0xf0,0x00,10}, //set back to page0	
    {0x40,0x7e,1}, 
    {0x41,0x2F,1},

    /////  请注意，调整GC0307的镜像和翻转，需要同时修改三个寄存器，如下:
#if 0
    {0x0f, 0x82,1},
    {0x45, 0x24,1},
    {0x47, 0x20,100},
#endif 

    //for u03
    {0x0f,0xb2,1},  
    {0x45,0x27,1},  
    {0x47,0x2c,100}, 

    /////  四种不同的翻转和镜像设定，客户可直接复制!!!!!!
#if 0
    //  IMAGE_NORMAL:
    {0x0f, 0xb2,1},
    {0x45, 0x27,1},
    {0x47, 0x2c,1},

    // IMAGE_H_MIRROR:
    {0x0f, 0xa2,1},
    {0x45, 0x26,1},
    {0x47, 0x28,1},

    // IMAGE_V_MIRROR:			
    {0x0f, 0x92,1},
    {0x45, 0x25,1},
    {0x47, 0x24,1},

    // IMAGE_HV_MIRROR:	   // 180
    {0x0f, 0x82,1},
    {0x45, 0x24,1},
    {0x47, 0x20,1},
#endif
    //=========open output
    {0x43,0x40,1},
    //{0x44,0xE6,20}, //RGB
    {0x44,0xE2,20}, //YUV

    {0x45,0x90,1},  //0x93
    {0x4e,0x12,1},
    {0x48,0xcb,1}, 
};
#endif
PRIVATE const CAM_REG_T RG_VidFormatVga[] = 
{
};

PRIVATE const CAM_REG_T RG_VidFormatQvga[] = 
{
};

PRIVATE const CAM_REG_T RG_VidFormatQqvga[] = 
{
};

typedef struct
{
    // Camera information structure
    char                desc[40];	

    UINT8               snrtype;            //sensor type(RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz				
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure(SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity (TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable

    CAM_MODE_T          cammode;


    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;

    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast

    CAM_FORMAT_T        format;
    UINT32              npixels;
    CAM_IMAGE_T         vidbuffer;

    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure

    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence(Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence(Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
    //    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information

    // This 'callback' mechanism is not necessary because the encapsulation is taken
    // care of by the environment
    //    PSensorSetReg       snrSetRegCall;      //set reg callback
    //    PSensorGetReg       snrGetRegCall;
    //    PSnrIdChk           snrIdChkCall;
    //    PSnrMirrorFlip      snrMirrorFlipCall;
    //    PSnrContrast        snrContrastCall;
    //    PSnrBrightness      snrBrightnessCall;
    //    PSnrMode            snrModeCall;
    //    PSnrGetEt           snrGetEt;
    //    PSnrSetEt           snrSetEt;
    //    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;

PRIVATE volatile CAM_INFO_T gSensorInfo =
{
    "BG0313",      // char desc[40];	

    0,                      // UINT8 snrtype; (rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x21,                   // UINT8 i2caddress; this is the _REAL_ slave address.  
    //  The value written in phase 1 of a write cycle will be 0x42
    //  while the value just before the read will be 0x43
    0x21,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;

    CAM_MODE_IDLE,          // cammode

    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer

    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_VGA,           // npixels(VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer

    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
    //    {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;

    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};

// ############
// Private
// ############

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

PRIVATE VOID camerap_WriteOneReg( UINT8 Addr, UINT8 Data);
PRIVATE VOID camerap_Delay(UINT16 Wait_mS);
PRIVATE VOID camerap_WriteReg(CAM_REG_T RegWrite);
PRIVATE UINT8 camerap_ReadReg(UINT8 Addr);
PRIVATE VOID camerap_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
PRIVATE VOID camerap_InteruptHandler(HAL_CAMERA_IRQ_CAUSE_T cause);
PRIVATE UINT8 camerap_GetId(VOID);

