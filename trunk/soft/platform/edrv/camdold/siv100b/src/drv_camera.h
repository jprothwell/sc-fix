// Here is where all the model specific defines should be


#include "hal_i2c.h"
#include "camera_m.h"

typedef struct
{
    UINT32 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT16 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;

// On FPGA platform, Pixel Clock must not be too fast or xfer screws up
#define CAM_CLK_CFG 0x81

const CAM_REG_T RG_InitPowerOnQvga[] = 
{
   // {0x03,0x00,1},  //reset

   // {0x40,0x00,3},
   // {0x60,0x00,3},
    {0x04,0x00,3},   // setup clock divider and HV-mirror ;Mclk /4
    {0x05,0x05,3},   // setup  output mode 240*320
    /*  Reserved   */
    {0x11,0x04,3},  
    {0x12,0x0A,3},
    {0x13,0x1F,3},
    {0x16,0x89,3},
    {0x1B,0x90,3},
    {0x1F,0x52,3},
    
    /* SIV100B  60Hz -  24MHz */
    #if 0 //for 20fs
     {0x20,0x00,3},
     {0x21,0x90,1},
     {0x22,0x57,1},   
     {0x34,0x76,1},     
    #endif  
      //for 25fs
      #if 1
     {0x20,0x00,3},
     {0x21,0xc7,1},
     {0x22,0x13,1},   
     {0x34,0x82,1}, 
     #endif 
    /* SIV100B  50Hz - 24MHz */
	
     {0x23,0x00,1},  
     {0x24,0x73,1},
     {0x25,0x17,1},
     {0x35,0x83,1},

     {0x33,0x04,1},   // for 25fs
     //{0x33,0x05,1},   // for 20fs
    
     /* AE */
    {0x40,0x80,3},  //sel 50 or 60hz   
    {0x41,0x8A,3},
    {0x42,0x7F,3},
    {0x43,0xC0,3},
    {0x44,0x48,3},
    {0x45,0x28,3},
    {0x46,0x08,3},
    {0x47,0x15,3},
    {0x48,0x1E,3},
    {0x49,0x13,3},
    {0x4A,0x63,3},
    {0x4B,0xC4,3},
    {0x4C,0x3C,3},
    {0x4E,0x17,3},
    {0x4F,0x8A,3},
    {0x50,0x94,3},
    {0x5A,0x00,3},
    
    /* Auto White Balance  0105 */
    {0x60,0xC8,3},
    {0x61,0x88,3},
    {0x62,0x01,3},
    {0x63,0x80,3},
    {0x64,0x80,3},
    {0x65,0xD0,3},
    {0x66,0x8C,3},
    {0x67,0xC8,3},
    {0x68,0x8B,3},
    {0x69,0x8A,3},
    {0x6A,0x73,3},
    {0x6B,0x95,3},
    {0x6C,0x70,3},
    {0x6D,0x88,3},
    {0x6E,0x77,3},
    {0x6F,0x46,3},
    {0x70,0xEA,3},
    {0x71,0x60,3},
    {0x72,0x05,3},
    {0x73,0x02,3},
    {0x74,0x0C,3},
    {0x75,0x0F,3},
    {0x76,0x20,3},
    {0x77,0xB7,3},
    {0x78,0x97,3},
    
    /* IDP */
    {0x80,0xAF,3},
    {0x81,0x1D,3},  //signal out
    {0x82,0xFD,3},  //yuv 
    {0x83,0x00,3},
    {0x86,0xA1,3},
    {0x87,0x04,3},
    {0x88,0x28,3},
    {0x89,0x0F,3},
    {0x92,0x44,3},
    {0x93,0x10,3},
    {0x94,0x20,3},
    {0x95,0x40,3},
    {0x96,0x10,3},
    {0x97,0x20,3},
    {0x98,0x30,3},
    {0x99,0x29,3},
    {0x9A,0x50,3},
    
    /* Shading  0106 */
    {0xA4,0xFF,3},
    {0xA5,0xFF,3},
    {0xA6,0xFF,3},
    {0xA7,0xED,3},
    {0xA8,0xCB,3},
    {0xA9,0x55,3},
    {0xAA,0x55,3},
    {0xAB,0x55,3},
    {0xAC,0x55,3},
    {0xAE,0x55,3},
    {0xAD,0x55,3},
    {0xAF,0x98,3},
    {0xB0,0x90,3},
    
    /* Gamma  0126 */
    {0xB1,0x00,3},
    {0xB2,0x08,3},
    {0xB3,0x10,3},
    {0xB4,0x23,3},
    {0xB5,0x45,3},
    {0xB6,0x62,3},
    {0xB7,0x78,3},
    {0xB8,0x8A,3},
    {0xB9,0x9B,3},
    {0xBA,0xAA,3},
    {0xBB,0xB8,3},
    {0xBC,0xCE,3},
    {0xBD,0xE2,3},
    {0xBE,0xF3,3},
    {0xBF,0xFB,3},
    {0xC0,0xFF,3},
    
    /* Color Matrix */
    {0xC1,0x3D,3},
    {0xC2,0xC6,3},
    {0xC3,0xFD,3},
    {0xC4,0x10,3},
    {0xC5,0x21,3},
    {0xC6,0x10,3},
    {0xC7,0xF3,3},
    {0xC8,0xBD,3},
    {0xC9,0x50,3},
    
    /* Edge */
    {0xCA,0x90,3},
    {0xCB,0x18,3},
    {0xCC,0x20,3},
    {0xCD,0x06,3},
    {0xCE,0x06,3},
    {0xCF,0x10,3},
    {0xD0,0x20,3},
    {0xD1,0x2A,3},
    {0xD2,0x86,3},
    {0xD3,0x00,3},
    
    /* Contrast */
    {0xD4,0x10,3},
    {0xD5,0x14,3},
    {0xD6,0x14,3},
    {0xD7,0x00,3},
    {0xD8,0x00,3},
    {0xD9,0x00,3},
    {0xDA,0x00,3},
    {0xDB,0xFF,3},
    {0xDC,0x0A,3},
    {0xDD,0xFF,3},
    {0xDE,0x00,3},
    {0xDF,0xFF,3},
    {0xE0,0x00,3},
    
    /* Saturation */
    {0xE1,0x29,3},
    {0xE2,0x58,3},
   

    /* Windowing */

    {0xF0, 0x10,3},
    {0xF1, 0x00,3},
    {0xF2, 0x40,3},
    {0xF3, 0x00,3},
    {0xF4, 0xF0,3},

    {0x03,0xc5,3},  //out drive capability
	
    {0x7A,0x90,3},
    {0x7B,0xB0,3},
    {0x7C,0x80,3}
   
	 
};


// use this for 640x480 (VGA) capture
const CAM_REG_T RG_InitPowerOnVga[] = 
{

	//{0x03,0x00,1},
	//{0x40,0x00,1},
	//{0x60,0x00,1},


	{0x04, 0x00,3}, // setup clock divider and HV-mirror ;Mclk /4
	{0x05, 0x07,3},

     
	{0x11, 0x04,3},
	{0x12, 0x0A,3},
	{0x13, 0x1F,3},
	{0x16, 0x89,3},
	{0x1B, 0x90,3},
	{0x1F, 0x52,3},


	{0x20, 0x00,3},
	{0x21, 0x0C,3},
	{0x22, 0x72,3},
	{0x34, 0x7B,3},

	{0x23, 0x00,3},
	{0x24, 0x73,3},
	{0x25, 0x17,3},
	{0x35, 0x83,3},
	    
	{0x33, 0x10,3},


	{0x40, 0x80,3},
	{0x41, 0x8A,3},
	{0x42, 0x7F,3},
	{0x43, 0xC0,3},
	{0x44, 0x48,3},
	{0x45, 0x28,3},
	{0x46, 0x08,3},
	{0x47, 0x15,3},
	{0x48, 0x1E,3},
	{0x49, 0x13,3},
	{0x4A, 0x63,3},
	{0x4B, 0xC4,3},
	{0x4C, 0x3C,3},
	{0x4E, 0x17,3},
	{0x4F, 0x8A,3},
	{0x50, 0x94,3},
	          
	{0x5A, 0x00,3},

	{0x60, 0xC8,3},
	{0x61, 0x88,3},
	{0x62, 0x01,3},
	{0x63, 0x80,3}, //
	{0x64, 0x80,3},  //


	{0x65, 0xD0,3},
	{0x66, 0x8C,3},
	{0x67, 0xC8,3},
	{0x68, 0x8B,3},
	{0x69, 0x8A,3},
	{0x6A, 0x73,3},
	{0x6B, 0x95,3},
	{0x6C, 0x70,3},
	{0x6D, 0x88,3},
	{0x6E, 0x77,3},
	{0x6F, 0x46,3},
	{0x70, 0xEA,3},
	{0x71, 0x60,3},
	{0x72, 0x05,3},
	{0x73, 0x02,3},
	{0x74, 0x0C,3},
	{0x75, 0x0F,3},
	{0x76, 0x20,3},
	{0x77, 0xB7,3},
	{0x78, 0x97,3},

	{0x80, 0xAF,3},

	{0x81,0x1D,3},  //signal out
	{0x82,0xeD,3},  //yuv 
	    
	{0x83, 0x00,3},
	{0x86, 0xA1,3},
	{0x87, 0x04,3},
	{0x88, 0x28,3},
	{0x89, 0x0F,3},

	{0x92, 0x44,3},
	{0x93, 0x10,3},
	{0x94, 0x20,3},
	{0x95, 0x40,3},
	{0x96, 0x10,3},
	{0x97, 0x20,3},
	{0x98, 0x30,3},
	{0x99, 0x29,3},
	{0x9A, 0x50,3},

	{0xA4, 0xFF,3},
	{0xA5, 0xFF,3},
	{0xA6, 0xFF,3},
	{0xA7, 0xED,3},
	{0xA8, 0xCB,3},
	{0xA9, 0x55,3},
	{0xAA, 0x55,3},
	{0xAB, 0x55,3},
	{0xAC, 0x55,3},
	{0xAE, 0x55,3},
	{0xAD, 0x55,3},
	{0xAF, 0x98,3},
	{0xB0, 0x90,3},

	{0xB1, 0x00,3},
	{0xB2, 0x08,3},
	{0xB3, 0x10,3},
	{0xB4, 0x23,3},
	{0xB5, 0x45,3},
	{0xB6, 0x62,3},
	{0xB7, 0x78,3},
	{0xB8, 0x8A,3},
	{0xB9, 0x9B,3},
	{0xBA, 0xAA,3},
	{0xBB, 0xB8,3},
	{0xBC, 0xCE,3},
	{0xBD, 0xE2,3},
	{0xBE, 0xF3,3},
	{0xBF, 0xFB,3},
	{0xC0, 0xFF,3},

	{0xC1, 0x3D,3},
	{0xC2, 0xC6,3},
	{0xC3, 0xFD,3},
	{0xC4, 0x10,3},
	{0xC5, 0x21,3},
	{0xC6, 0x10,3},
	{0xC7, 0xF3,3},
	{0xC8, 0xBD,3},
	{0xC9, 0x50,3},

	{0xCA, 0x90,3},
	{0xCB, 0x18,3},
	{0xCC, 0x20,3},
	{0xCD, 0x06,3},
	{0xCE, 0x06,3},
	{0xCF, 0x10,3},
	{0xD0, 0x20,3},
	{0xD1, 0x2A,3},
	{0xD2, 0x86,3},
	{0xD3, 0x00,3},

	{0xD4, 0x10,3},
	{0xD5, 0x14,3},
	{0xD6, 0x14,3},
	{0xD7, 0x00,3},
	{0xD8, 0x00,3},
	{0xD9, 0x00,3},
	{0xDA, 0x00,3},
	{0xDB, 0xFF,3},
	{0xDC, 0x0A,3},
	{0xDD, 0xFF,3},
	{0xDE, 0x00,3},
	{0xDF, 0xFF,3},
	{0xE0, 0x00,3},

	{0xE1, 0x29,3},
	{0xE2, 0x58,3},

	{0xF0, 0x24,3},
	{0xF1, 0x00,3},
	{0xF2, 0x80,3},
	{0xF3, 0x00,3},
	{0xF4, 0xE0,3},

	{0x03, 0xe5,3},

	{0x7A, 0x90,3},
	{0x7B, 0xB0,3},
	{0x7C, 0x80,3}
};



// use this for 160x120 (QQVGA) capture
const CAM_REG_T RG_InitPowerOnQqvga[] = 
{ 
    
  //  {0x03,0x00,1},  //reset
  //  {0x40,0x00,3},
  //  {0x60,0x00,3},
    {0x04,0x00,3},
    {0x05,0x04,3}, //160*120
    
    /*  Reserved   */
    {0x11,0x04,3},
    {0x12,0x0A,3},
    {0x13,0x1F,3},
    {0x16,0x89,3},
    {0x1B,0x90,3},
    {0x1F,0x52,3},
    
    /* SIV100B  60Hz -  24MHz */
    
     {0x20,0x00,3},
     {0x21,0x90,1},
     {0x22,0x57,1},   
     {0x34,0x76,1},     
     
    /* SIV100B  50Hz - 24MHz */
	
     {0x23,0x00,1},  
     {0x24,0x73,1},
     {0x25,0x17,1},
     {0x35,0x83,1},
  
     {0x33,0x05,1},   // Min. 12.5fps, 100/8=12.5
    /* AE */
    {0x40,0x80,3},
    {0x41,0x8A,3},
    {0x42,0x7F,3},
    {0x43,0xC0,3},
    {0x44,0x48,3},
    {0x45,0x28,3},
    {0x46,0x08,3},
    {0x47,0x15,3},
    {0x48,0x1E,3},
    {0x49,0x13,3},
    {0x4A,0x63,3},
    {0x4B,0xC4,3},
    {0x4C,0x3C,3},
    {0x4E,0x17,3},
    {0x4F,0x8A,3},
    {0x50,0x94,3},
    {0x5A,0x00,3},
    /* Auto White Balance  0105 */
    {0x60,0xC8,3},
    {0x61,0x88,3},
    {0x62,0x01,3},
    {0x63,0x80,3},
    {0x64,0x80,3},
    {0x65,0xD0,3},
    {0x66,0x8C,3},
    {0x67,0xC8,3},
    {0x68,0x8B,3},
    {0x69,0x8A,3},
    {0x6A,0x73,3},
    {0x6B,0x95,3},
    {0x6C,0x70,3},
    {0x6D,0x88,3},
    {0x6E,0x77,3},
    {0x6F,0x46,3},
    {0x70,0xEA,3},
    {0x71,0x60,3},
    {0x72,0x05,3},
    {0x73,0x02,3},
    {0x74,0x0C,3},
    {0x75,0x0F,3},
    {0x76,0x20,3},
    {0x77,0xB7,3},
    {0x78,0x97,3},
     /* IDP */
    {0x80,0xAF,3},
    {0x81,0x1D,3},
    {0x82,0xfD,3}, //yuv and windows
    {0x83,0x00,3},
    {0x86,0xA1,3},
    {0x87,0x04,3},
    {0x88,0x28,3},
    {0x89,0x0F,3},
    {0x92,0x44,3},
    {0x93,0x10,3},
    {0x94,0x20,3},
    {0x95,0x40,3},
    {0x96,0x10,3},
    {0x97,0x20,3},
    {0x98,0x30,3},
    {0x99,0x29,3},
    {0x9A,0x50,3},
      /* Shading  0106 */
    {0xA4,0xFF,3},
    {0xA5,0xFF,3},
    {0xA6,0xFF,3},
    {0xA7,0xED,3},
    {0xA8,0xCB,3},
    {0xA9,0x55,3},
    {0xAA,0x55,3},
    {0xAB,0x55,3},
    {0xAC,0x55,3},
    {0xAE,0x55,3},
    {0xAD,0x55,3},
    {0xAF,0x98,3},
    {0xB0,0x90,3},
    /* Gamma  0126 */
    {0xB1,0x00,3},
    {0xB2,0x08,3},
    {0xB3,0x10,3},
    {0xB4,0x23,3},
    {0xB5,0x45,3},
    {0xB6,0x62,3},
    {0xB7,0x78,3},
    {0xB8,0x8A,3},
    {0xB9,0x9B,3},
    {0xBA,0xAA,3},
    {0xBB,0xB8,3},
    {0xBC,0xCE,3},
    {0xBD,0xE2,3},
    {0xBE,0xF3,3},
    {0xBF,0xFB,3},
    {0xC0,0xFF,3},
     /* Color Matrix */
    {0xC1,0x3D,3},
    {0xC2,0xC6,3},
    {0xC3,0xFD,3},
    {0xC4,0x10,3},
    {0xC5,0x21,3},
    {0xC6,0x10,3},
    {0xC7,0xF3,3},
    {0xC8,0xBD,3},
    {0xC9,0x50,3},
     /* Edge */
    {0xCA,0x90,3},
    {0xCB,0x18,3},
    {0xCC,0x20,3},
    {0xCD,0x06,3},
    {0xCE,0x06,3},
    {0xCF,0x10,3},
    {0xD0,0x20,3},
    {0xD1,0x2A,3},
    {0xD2,0x86,3},
    {0xD3,0x00,3},
    /* Contrast */
    {0xD4,0x10,3},
    {0xD5,0x14,3},
    {0xD6,0x14,3},
    {0xD7,0x00,3},
    {0xD8,0x00,3},
    {0xD9,0x00,3},
    {0xDA,0x00,3},
    {0xDB,0xFF,3},
    {0xDC,0x0A,3},
    {0xDD,0xFF,3},
    {0xDE,0x00,3},
    {0xDF,0xFF,3},
    {0xE0,0x00,3},
    /* Saturation */
    {0xE1,0x29,3},
    {0xE2,0x58,3},
    /* Windowing */   
    {0xF0, 0x00,3},
    {0xF1, 0x00,3},
    {0xF2, 0xA0,3},
    {0xF3, 0x00,3},
    {0xF4, 0x78,3},
    
    {0x03,0xC5,3},
    
    {0x7A,0x90,3},
    {0x7B,0xB0,3},
    {0x7C,0x80,3}
   
};

const CAM_REG_T RG_VidFormatVga[] = 
{
     {0x04, 0x00,3}, // setup clock divider and HV-mirror ;Mclk /4
     {0x05, 0x07,3}
};

const CAM_REG_T RG_VidFormatQvga[] = 
{
     {0x04,0x00,3},   // setup clock divider and HV-mirror ;Mclk /4
     {0x05,0x05,3}    // setup  output mode 240*320
};

const CAM_REG_T RG_VidFormatQqvga[] = 
{
     {0x04, 0x00,3}, // setup clock divider and HV-mirror ;Mclk /4
     {0x05, 0x04,3}
};

typedef struct
{
// Camera information structure
    char                desc[40];	

    UINT8               snrtype;            //sensor type(RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz				
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure(SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity (TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable

    CAM_MODE_T          cammode;


    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;

    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast

    CAM_FORMAT_T        format;
    CAM_SIZE_T          npixels;
    CAM_IMAGE_T         vidbuffer;

    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure

    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence(Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence(Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
//    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information

// This 'callback' mechanism is not necessary because the encapsulation is taken
// care of by the environment
//    PSensorSetReg       snrSetRegCall;      //set reg callback
//    PSensorGetReg       snrGetRegCall;
//    PSnrIdChk           snrIdChkCall;
//    PSnrMirrorFlip      snrMirrorFlipCall;
//    PSnrContrast        snrContrastCall;
//    PSnrBrightness      snrBrightnessCall;
//    PSnrMode            snrModeCall;
//    PSnrGetEt           snrGetEt;
//    PSnrSetEt           snrSetEt;
//    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;

volatile CAM_INFO_T gSensorInfo =
{
    "SIV100B RGB Mode",      // char desc[40];	

    0,                      // UINT8 snrtype; (rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x33,                   // UINT8 i2caddress; this is the _REAL_ slave address.  
                            //  The value written in phase 1 of a write cycle will be 0x42
                            //  while the value just before the read will be 0x43
    0x33,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;

    CAM_MODE_IDLE,          // cammode

    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer

    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_VGA,           // npixels(VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer

    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
//    {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;

    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};

// ############
// Private
// ############

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

VOID  camera_WriteOneReg( UINT8 Addr, UINT8 Data);
VOID camera_Delay(UINT16 Wait_mS);
VOID camera_WriteReg(CAM_REG_T RegWrite);
UINT8 camera_ReadReg(UINT8 Addr);
VOID camera_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
VOID camera_InteruptHandler();
