// Here is where all the model specific defines should be


#include "hal_i2c.h"
#include "camera_m.h"

//#define  DRV_CAM_FRAME_6    1
 #define  DRV_CAM_FRAME_10    1
//#define  DRV_CAM_FRAME_12    1
typedef struct
{
    UINT32 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT16 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;

// On FPGA platform, Pixel Clock must not be too fast or xfer screws up
#define CAM_CLK_CFG 0x81

// use this for 320x240 (VGA) capture
const CAM_REG_T RG_InitPowerOnQvga[] = 
{   
	  {0x13,0x00,0x20},//
    {0xf1,0x00,0x20},//
    {0x00,0x11,0x20}, //    //hex!
    {0x01,0x4c,0x20}, //  48
    {0x02,0x22,0x20}, //
    {0x03,0x01,0x20}, //  3
    {0x04,0x0e,0x20}, //  ae
    {0x05,0x00,0x20}, //
    {0x06,0x00,0x20}, //
    {0x07,0x00,0x20}, //
    {0x08,0x00,0x20}, //
    {0x09,0x01,0x20}, //01 
    {0x0a,0xfc,0x20}, //e8
    {0x0b,0x02,0x20}, //02
    {0x0c,0x90,0x20}, //88
    {0x0d,0x22,0x20}, //00
    {0x0e,0x20,0x20}, //a0
    {0x0f,0x30,0x20}, //00
    {0x10,0x24,0x20}, //25
    {0x11,0x10,0x20}, //1c
    {0x12,0x12,0x20}, //4
    {0x13,0x00,0x20}, //
    {0x14,0x00,0x20}, //
    {0x15,0x08,0x20}, //
    {0x16,0x04,0x20}, //
    {0x17,0x00,0x20}, //
    {0x18,0x19,0x20}, //
    {0x19,0x00,0x20}, //
    {0x1a,0x00,0x20}, //
    {0x1b,0x00,0x20}, //
    {0x1c,0x02,0x20}, //
    {0x1d,0x02,0x20}, //
    {0x1e,0x00,0x20}, //
    {0x40,0x7c,0x20}, //
    {0x41,0x3d,0x20}, // //0x3F
    {0x42,0x30,0x20}, //
    {0x43,0x60,0x20}, //
    {0x44,0xe2,0x20}, //
    {0x45,0x49,0x20}, //
    {0x46,0x20,0x20}, //
    {0x47,0x00,0x20}, //
    {0x48,0x00,0x20}, //
    {0x49,0x00,0x20}, //
    {0x4a,0x00,0x20}, //
    {0x4b,0x00,0x20}, //
    {0x4c,0x00,0x20}, //
    {0x4d,0x00,0x20}, //
    {0x4e,0x33,0x20}, // //0x23 ,0x06
    {0x4f,0x1a,0x20}, //
    {0x50,0x00,0x20}, //
    {0x51,0x20,0x20}, //
    {0x52,0x40,0x20}, //
    {0x53,0x60,0x20}, //
    {0x54,0x80,0x20}, //
    {0x55,0xa0,0x20}, //
    {0x56,0xc0,0x20}, //
    {0x57,0xe0,0x20}, //   //  0x58,0xff,  //2??¨¹D¡ä¡ê?  
    {0x59,0xf0,0x20}, //  //offset grG
    {0x5a,0xf0,0x20}, //  //offset R
    {0x5b,0xf0,0x20}, //  //offset B
    {0x5c,0xf0,0x20}, //  //offset bgG
    {0x61,0x40,0x20}, //  //manual gain grG
    {0x63,0x4a,0x20}, //  //manual gain R
    {0x65,0x40,0x20}, //  //manual gain B
    {0x67,0x40,0x20}, //  //manual gain bgG
    {0x68,0x20,0x20}, // 
    {0x6a,0xf8,0x20}, //
    {0x6b,0xf4,0x20}, //
    {0x6c,0xfc,0x20}, //
    {0x6d,0x53,0x20}, //
    {0x6e,0xe7,0x20}, //
    {0x70,0x00,0x20}, //
    {0x71,0x10,0x20}, //
    {0x72,0x00,0x20}, //
    {0x73,0x14,0x20}, //
    {0x74,0x00,0x20}, //
    {0x75,0x10,0x20}, //
    {0x76,0x28,0x20}, //
    {0x77,0x3c,0x20}, //
    {0x78,0x50,0x20}, //
    {0x80,0x10,0x20}, //
    {0x81,0x10,0x20}, //
    {0x82,0x34,0x20}, //
    {0x83,0x14,0x20}, //
    {0x84,0x40,0x20}, //
    {0x85,0x04,0x20}, //
    {0x86,0x00,0x20}, //
    {0x87,0x93,0x20}, //
    {0x88,0x0a,0x20}, //
    {0x89,0x04,0x20}, //
    {0x8a,0x18,0x20}, // //NA
    {0x8b,0x0a,0x20}, //
    {0x8c,0x12,0x20}, //
    {0x8d,0x80,0x20}, // //black_level
    {0x8e,0x00,0x20}, //
    {0x8f,0x00,0x20}, //
    {0x90,0x23,0x20}, //
    {0x91,0x3c,0x20}, //
    {0x92,0x52,0x20}, //
    {0x93,0x74,0x20}, //
    {0x94,0x8e,0x20}, //
    {0x95,0xa2,0x20}, //
    {0x96,0xb2,0x20}, //
    {0x97,0xbf,0x20}, //
    {0x98,0xd2,0x20}, //
    {0x99,0xe2,0x20}, //
    {0x9a,0xee,0x20}, //
    {0x9b,0xf6,0x20}, //
    {0x9c,0xfe,0x20}, //
    {0x9d,0x80,0x20},//
    {0x9e,0x40,0x20},//
    {0xa0,0x50,0x20}, //  //0xa0,0x40,	
    {0xa1,0x40,0x20}, //
    {0xa2,0x30,0x20}, // Cb saturation
    {0xa3,0x30,0x20}, //
    {0xa4,0xc0,0x20}, //
    {0xa5,0x02,0x20}, //
    {0xa6,0x60,0x20}, //
    {0xa7,0x04,0x20}, //
    {0xa8,0xf4,0x20}, //
    {0xa9,0x0c,0x20}, //
    {0xaa,0x01,0x20}, //
    {0xab,0x00,0x20}, //
    {0xac,0xf8,0x20}, //
    {0xad,0x10,0x20}, //
    {0xae,0x80,0x20}, //
    {0xaf,0x80,0x20}, //
    {0xb0,0x10,0x20},//
    {0xb1,0xff,0x20},//
    {0xbf,0x18,0x20},//
    {0xc0,0x20,0x20}, //
    {0xc1,0xf0,0x20}, //
    {0xc2,0x07,0x20}, //
    {0xc3,0x80,0x20}, //
    {0xc4,0x01,0x20}, //
    {0xc5,0x21,0x20}, //
    {0xc6,0x70,0x20}, //
    {0xc7,0x00,0x20}, //
    {0xc8,0x00,0x20}, //
    {0xc9,0x00,0x20}, //
    {0xca,0x40,0x20}, //
    {0xcb,0x40,0x20}, //
    {0xcc,0x40,0x20}, //
    {0xcd,0x40,0x20}, //
    {0xce,0x40,0x20}, //
    {0xcf,0x40,0x20}, //
    {0xd0,0x00,0x20}, //
    {0xd1,0x60,0x20}, //
    {0xd2,0xf4,0x20}, //
    {0xd3,0x00,0x20}, //
    {0xd4,0x30,0x20}, //
    {0xd5,0xc0,0x20}, //
    {0xd6,0x8e,0x20}, //
    {0xd7,0x02,0x20}, //
    {0xd8,0x07,0x20}, //
    {0xd9,0x30,0x20}, //
    {0xda,0x30,0x20}, //
    {0xdb,0x00,0x20}, //
    {0xdc,0x00,0x20}, //
    {0xdd,0x40,0x20}, //
    {0xdf,0x90,0x20},//
    {0xe0,0x05,0x20}, //
    {0xe1,0x05,0x20}, //
    {0xe2,0x34,0x20}, //
    {0xe3,0x24,0x20}, //
    {0xe4,0x14,0x20}, //
    {0xe5,0x11,0x20}, //
    {0xe6,0x24,0x20}, //
    {0xe7,0x18,0x20}, //
    {0xff,0xff,0xff}

};

// use this for 640x480 (VGA) capture
const CAM_REG_T RG_InitPowerOnVga[] = 
{
    {0x13,0x00,0x20},//																		
    {0xf1,0x00,0x20},//																		
    {0x00,0x11,0x20}, //    //hex!																		
    {0x01,0x4c,0x20}, //  48																		
    {0x02,0x22,0x20}, //																		
    {0x03,0x01,0x20}, //  3																		
    {0x04,0x0e,0x20}, //  ae																		
    {0x05,0x00,0x20}, //																		
    {0x06,0x00,0x20}, //																		
    {0x07,0x00,0x20}, //																		
    {0x08,0x00,0x20}, //																		
    {0x09,0x01,0x20}, //01 																		
    {0x0a,0xfc,0x20}, //e8																		
    {0x0b,0x02,0x20}, //02																		
    {0x0c,0x90,0x20}, //88																		
    {0x0d,0x22,0x20}, //00																		
    {0x0e,0x20,0x20}, //a0																		
    {0x0f,0x30,0x20}, //00																		
    {0x10,0x24,0x20}, //25																		
    {0x11,0x10,0x20}, //1c																		
    {0x12,0x12,0x20}, //4																		
    {0x13,0x00,0x20}, //																		
    {0x14,0x00,0x20}, //																		
    {0x15,0x08,0x20}, //																		
    {0x16,0x04,0x20}, //																		
    {0x17,0x00,0x20}, //																		
    {0x18,0x19,0x20}, //																		
    {0x19,0x00,0x20}, //																		
    {0x1a,0x00,0x20}, //																		
    {0x1b,0x00,0x20}, //																		
    {0x1c,0x02,0x20}, //																		
    {0x1d,0x02,0x20}, //																		
    {0x1e,0x00,0x20}, //																		
    {0x40,0x7c,0x20}, //																		
    {0x41,0x3d,0x20}, // //0x3F																		
    {0x42,0x30,0x20}, //																		
    {0x43,0x60,0x20}, //																		
    {0x44,0xe2,0x20}, //																		
    {0x45,0x25,0x20}, //																		
    {0x46,0x20,0x20}, //																		
    {0x47,0x00,0x20}, //																		
    {0x48,0x00,0x20}, //																		
    {0x49,0x00,0x20}, //																		
    {0x4a,0x00,0x20}, //																		
    {0x4b,0x00,0x20}, //																		
    {0x4c,0x00,0x20}, //																		
    {0x4d,0x00,0x20}, //																		
    {0x4e,0x23,0x20}, // //0x23 ,0x06																		
    {0x4f,0x1a,0x20}, //																		
    {0x50,0x00,0x20}, //																		
    {0x51,0x20,0x20}, //																		
    {0x52,0x40,0x20}, //																		
    {0x53,0x60,0x20}, //																		
    {0x54,0x80,0x20}, //																		
    {0x55,0xa0,0x20}, //																		
    {0x56,0xc0,0x20}, //																		
    {0x57,0xe0,0x20}, //   //  0x58,0xff,  //2??¨¹D¡ä¡ê?  
    {0x59,0xf0,0x20}, //  //offset grG																		
    {0x5a,0xf0,0x20}, //  //offset R																		
    {0x5b,0xf0,0x20}, //  //offset B																		
    {0x5c,0xf0,0x20}, //  //offset bgG																		
    {0x61,0x40,0x20}, //  //manual gain																		 grG
    {0x63,0x4a,0x20}, //  //manual gain																		 R
    {0x65,0x40,0x20}, //  //manual gain																		 B
    {0x67,0x40,0x20}, //  //manual gain																		 bgG
    {0x68,0x20,0x20}, // 																		
    {0x6a,0xf8,0x20}, //																		
    {0x6b,0xf4,0x20}, //																		
    {0x6c,0xfc,0x20}, //																		
    {0x6d,0x53,0x20}, //																		
    {0x6e,0xe7,0x20}, //																		
    {0x70,0x00,0x20}, //																		
    {0x71,0x10,0x20}, //																		
    {0x72,0x00,0x20}, //																		
    {0x73,0x14,0x20}, //																		
    {0x74,0x00,0x20}, //																		
    {0x75,0x10,0x20}, //																		
    {0x76,0x28,0x20}, //																		
    {0x77,0x3c,0x20}, //																		
    {0x78,0x50,0x20}, //																		
    {0x80,0x10,0x20}, //																		
    {0x81,0x10,0x20}, //																		
    {0x82,0x34,0x20}, //																		
    {0x83,0x14,0x20}, //																		
    {0x84,0x40,0x20}, //																		
    {0x85,0x04,0x20}, //																		
    {0x86,0x00,0x20}, //																		
    {0x87,0x93,0x20}, //																		
    {0x88,0x0a,0x20}, //																		
    {0x89,0x04,0x20}, //																		
    {0x8a,0x18,0x20}, // //NA																		
    {0x8b,0x0a,0x20}, //																		
    {0x8c,0x12,0x20}, //																		
    {0x8d,0x80,0x20}, // //black_level																		
    {0x8e,0x00,0x20}, //																		
    {0x8f,0x00,0x20}, //																		
    {0x90,0x23,0x20}, //																		
    {0x91,0x3c,0x20}, //																		
    {0x92,0x52,0x20}, //																		
    {0x93,0x74,0x20}, //																		
    {0x94,0x8e,0x20}, //																		
    {0x95,0xa2,0x20}, //																		
    {0x96,0xb2,0x20}, //																		
    {0x97,0xbf,0x20}, //																		
    {0x98,0xd2,0x20}, //																		
    {0x99,0xe2,0x20}, //																		
    {0x9a,0xee,0x20}, //																		
    {0x9b,0xf6,0x20}, //																		
    {0x9c,0xfe,0x20}, //																		
    {0x9d,0x80,0x20},//																		
    {0x9e,0x40,0x20},//																		
    {0xa0,0x50,0x20}, //  //0xa0,0x40,																			
    {0xa1,0x40,0x20}, //																		
    {0xa2,0x30,0x20}, // Cb saturation																		
    {0xa3,0x30,0x20}, //																		
    {0xa4,0xc0,0x20}, //																		
    {0xa5,0x02,0x20}, //																		
    {0xa6,0x60,0x20}, //																		
    {0xa7,0x04,0x20}, //																		
    {0xa8,0xf4,0x20}, //																		
    {0xa9,0x0c,0x20}, //																		
    {0xaa,0x01,0x20}, //																		
    {0xab,0x00,0x20}, //																		
    {0xac,0xf8,0x20}, //																		
    {0xad,0x10,0x20}, //																		
    {0xae,0x80,0x20}, //																		
    {0xaf,0x80,0x20}, //																		
    {0xb0,0x10,0x20},//																		
    {0xb1,0xff,0x20},//																		
    {0xbf,0x18,0x20},//																		
    {0xc0,0x20,0x20}, //																		
    {0xc1,0xf0,0x20}, //																		
    {0xc2,0x07,0x20}, //																		
    {0xc3,0x80,0x20}, //																		
    {0xc4,0x01,0x20}, //																		
    {0xc5,0x21,0x20}, //																		
    {0xc6,0x70,0x20}, //																		
    {0xc7,0x00,0x20}, //																		
    {0xc8,0x00,0x20}, //																		
    {0xc9,0x00,0x20}, //																		
    {0xca,0x40,0x20}, //																		
    {0xcb,0x40,0x20}, //																		
    {0xcc,0x40,0x20}, //																		
    {0xcd,0x40,0x20}, //																		
    {0xce,0x40,0x20}, //																		
    {0xcf,0x40,0x20}, //																		
    {0xd0,0x00,0x20}, //																		
    {0xd1,0x60,0x20}, //																		
    {0xd2,0xf4,0x20}, //																		
    {0xd3,0x00,0x20}, //																		
    {0xd4,0x30,0x20}, //																		
    {0xd5,0xc0,0x20}, //																		
    {0xd6,0x8e,0x20}, //																		
    {0xd7,0x02,0x20}, //																		
    {0xd8,0x07,0x20}, //																		
    {0xd9,0x30,0x20}, //																		
    {0xda,0x30,0x20}, //																		
    {0xdb,0x00,0x20}, //																		
    {0xdc,0x00,0x20}, //																		
    {0xdd,0x40,0x20}, //																		
    {0xdf,0x90,0x20},//																		
    {0xe0,0x05,0x20}, //																		
    {0xe1,0x05,0x20}, //																		
    {0xe2,0x34,0x20}, //																		
    {0xe3,0x24,0x20}, //																		
    {0xe4,0x14,0x20}, //																		
    {0xe5,0x11,0x20}, //																		
    {0xe6,0x24,0x20}, //																		
    {0xe7,0x18,0x20}, //																		
    {0xff,0xff,0xff}																		
     
  
};
  
  
// use this for 160*120 (QQVGA) capture
const CAM_REG_T RG_InitPowerOnQqvga[] = 
{ 
  
};
  
const CAM_REG_T RG_VidFormatVga[] = 
{ 
        
	{0x17,0x13,1},      
	{0x18,0x01,1},      
	{0x32,0xb6,1},      
	{0x19,0x02,1},      
	{0x1a,0x7a,1},      
	{0x03,0x0a,1},      
	{0x0c,0x00,1},      
	{0x3e,0x00,1},      
	{0x70,0x3a,1},     
	{0x71,0x35,1},      
	{0x72,0x11,1},      
	{0x73,0xf0,1},      
};
  
const CAM_REG_T RG_VidFormatQvga[] = 
{ 
            	     
	{0x17,0x16,1},      
	{0x18,0x04,1},  
	{0x32,0x80,1}, 
	{0x19,0x02,1},      
	{0x1a,0x7a,1},      
	{0x03,0x0a,1},      
	{0x0c,0x04,1},      
	{0x3e,0x19,1},      
	{0x70,0x3a,1},      
	{0x71,0x35,1},      
	{0x72,0x11,1},      
	{0x73,0xf1,1},  
};
  
const CAM_REG_T RG_VidFormatQqvga[] = 
{ 
        
	
	 {0x17, 0x39,1},
	 {0x18, 0x03,1},
	 {0x32, 0x80,1},
	 {0x19, 0x03,1},
	 {0x1a ,0x7b,1},
	 {0x03, 0x0a,1},
	 {0x0c, 0x0c,1},
	 {0x3e, 0x11,1},
	 {0x70, 0x3a,1},
	 {0x71, 0x35,1},
	 {0x72 ,0x11,1},
	 {0x73, 0xf1,1},
	
};
  
typedef struct
{ 
// Camera information structure
    char                desc[40];	
  
    UINT8               snrtype;            //sensor type(RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz				
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure(SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity (TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable
  
    CAM_MODE_T          cammode;
  
  
    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;
  
    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast
  
    CAM_FORMAT_T        format;
    CAM_SIZE_T          npixels;
    CAM_IMAGE_T         vidbuffer;
  
    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure
  
    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence(Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence(Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
//    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information
  
// This 'callback' mechanism is not necessary because the encapsulation is taken
// care of by the environment
//    PSensorSetReg       snrSetRegCall;      //set reg callback
//    PSensorGetReg       snrGetRegCall;
//    PSnrIdChk           snrIdChkCall;
//    PSnrMirrorFlip      snrMirrorFlipCall;
//    PSnrContrast        snrContrastCall;
//    PSnrBrightness      snrBrightnessCall;
//    PSnrMode            snrModeCall;
//    PSnrGetEt           snrGetEt;
//    PSnrSetEt           snrSetEt;
//    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;
  
volatile CAM_INFO_T gSensorInfo =
{ 
    "OV7670 RGB Mode",      // char desc[40];	
  
    0,                      // UINT8 snrtype; (rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x10,                   // UINT8 i2caddress; this is the _REAL_ slave address.  
                           //  The value written in phase 1 of a write cycle will be 0x42
                           //  while the value just before the read will be 0x43
    0x10,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;
  
    CAM_MODE_IDLE,          // cammode
  
    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer
  
    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_VGA,           // npixels(VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer
  
    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
//    {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;
  
    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};
  
// ############
// Private
// ############
  
// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data
  
#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)
  
#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

VOID  camera_WriteOneReg( UINT8 Addr, UINT8 Data);
VOID camera_Delay(UINT16 Wait_mS);
VOID camera_WriteReg(CAM_REG_T RegWrite);
UINT8 camera_ReadReg(UINT8 Addr);
VOID camera_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
VOID camera_InteruptHandler();
