// Here is where all the model specific defines should be


#include "hal_i2c.h"
#include "hal_camera.h"
#include "camera_m.h"

typedef struct
{
    UINT8 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT8 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;


#define CAM_CLK_CFG 0x81

// use this for 320x240 (QVGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQvga[] = 
{
	{0xfd,0x00,3},
	{0x1c,0x00,3},//08
	{0x30,0x00,3},//00:不分频 02:2分频
	{0x0f,0x2f,3},//;analog
	{0x10,0x2f,3},
	{0x13,0x2f,3},
	{0x22,0xe0,3},
	{0x26,0x08,3},
	{0x27,0xe8,3},
	{0x28,0x03,3},
	{0x32,0x00,3},
	{0xfd,0x00,3},
	{0x31,0x10,3},	 //Upside/mirr/Pclk inv/sub
	{0xd8,0x65,3},
	{0xd9,0x65,3},
	{0xda,0x65,3},
	{0xdb,0x50,3},
	{0x5f,0x11,3},
	{0xe0,0x00,3},//;resize
	{0xe1,0xdc,3},
	{0xe2,0xb0,3},
	{0xe3,0x00,3},
	{0xe4,0x2e,3},
	{0xe5,0x00,3},
	{0xe6,0x2b,3},
	{0xb7,0x3c,3},//;LSC
	{0xb8,0x50,3},
	{0xfd,0x01,3},
	{0x25,0x1a,3},//AWB
	{0x26,0xfb,3},
	{0x28,0x61,3},
	{0x29,0x49,3},
	{0x31,0x64,3},
	{0x32,0x18,3},
	{0x4d,0xdc,3},
	{0x4e,0x6b,3},
	{0x41,0x8c,3},
	{0x42,0x66,3},
	{0x55,0xff,3},
	{0x56,0x00,3},
	{0x59,0x82,3},
	{0x5a,0x00,3},
	{0x5d,0xff,3},
	{0x5e,0x6f,3},
	{0x57,0xff,3},
	{0x58,0x00,3},
	{0x5b,0xff,3},
	{0x5c,0xa8,3},
	{0x5f,0x75,3},
	{0x60,0x00,3},
	{0x2d,0x00,3},
	{0x2e,0x00,3},
	{0x2f,0x00,3},
	{0x30,0x00,3},
	{0x33,0x00,3},
	{0x34,0x00,3},
	{0x37,0x00,3},
	{0x38,0x00,3},
	{0x39,0x01,3},
	{0x3a,0x07,3},
	{0xfd,0x00,3},//;BPC
	{0x33,0x0f,3},
	{0x51,0x3f,3},
	{0x52,0x09,3},
	{0x53,0x00,3},
	{0x54,0x00,3},// 4
	{0x55,0x10,3},
	{0x4f,0xff,3},//blueedge
	{0x50,0xff,3},
	{0x56,0x70,3},//smooth
	{0x57,0x40,3},
	{0x58,0x40,3},
	{0x59,0x10,3},
	{0x5a,0x02,3},
	{0x5b,0x02,3},
	{0x5c,0x20,3},
	{0x65,0x06,3},//sharpness
	{0x66,0x01,3},
	{0x67,0x03,3},
	{0x68,0xc6,3},
	{0x69,0x7f,3},
	{0x6a,0x01,3},
	{0x6b,0x0a,3},
	{0x6c,0x01,3},
	{0x6d,0x03,3},
	{0x6e,0xc6,3},
	{0x6f,0x7f,3},
	{0x70,0x01,3},
	{0x71,0x0a,3},
	{0x72,0x10,3},
	{0x73,0x03,3},//3
	{0x74,0xc4,3},
	{0x75,0x7f,3},
	{0x76,0x01,3},
	{0x7f,0x96,3},//;colorcorrection
	{0x80,0xf2,3},
	{0x81,0xfe,3}, 
	{0x82,0xde,3},
	{0x83,0xa3,3},
	{0x84,0xff,3},
	{0x85,0xea,3},
	{0x86,0x81,3},
	{0x87,0x16,3},
	{0x88,0x3c,3}, 
	{0x89,0x33,3},
	{0x8a,0x1f,3}, 
	{0x8b,0x00,3},// ;gamma
	{0x8c,0x1a,3},
	{0x8d,0x29,3},
	{0x8e,0x41,3},
	{0x8f,0x62,3},
	{0x90,0x7c,3},
	{0x91,0x90,3},
	{0x92,0xa2,3},
	{0x93,0xaf,3},
	{0x94,0xba,3},
	{0x95,0xc4,3},
	{0x96,0xce,3},
	{0x97,0xd6,3},
	{0x98,0xdd,3},
	{0x99,0xe4,3},
	{0x9a,0xea,3},
	{0x9b,0xf1,3},
	{0xfd,0x01,3},
	{0x8d,0xf8,3},
	{0x8e,0xff,3},
	{0xfd,0x00,3},
	{0xca,0xcf,3},//;saturation
	{0xcb,0x07,3},//;hist-expand
	{0xcc,0x04,3},
	{0xce,0xff,3},
	{0xcf,0x10,3},
	{0xd0,0x20,3},
	{0xd1,0x00,3},
	{0xd2,0x1c,3},
	{0xd3,0x16,3},
	{0xd4,0x00,3},
	{0xd6,0x1c,3},
	{0xd7,0x16,3},
	{0xdd,0x70,3},// ;heq
	{0xde,0x90,3},
	{0xb9,0x00,3},//;Ygamma 
	{0xba,0x04,3}, 
	{0xbb,0x08,3}, 
	{0xbc,0x10,3},
	{0xbd,0x20,3},
	{0xbe,0x30,3},
	{0xbf,0x40,3},
	{0xc0,0x50,3},
	{0xc1,0x60,3},
	{0xc2,0x70,3},
	{0xc3,0x80,3},
	{0xc4,0x90,3},
	{0xc5,0xA0,3},
	{0xc6,0xB0,3},
	{0xc7,0xC0,3},
	{0xc8,0xD0,3},
	{0xc9,0xE0,3},
	{0xfd,0x01,3},
	{0x89,0xf0,3},
	{0x8a,0xff,3},
	{0xfd,0x00,3},
	{0xe8,0x30,3},//;AE
	{0xe9,0x30,3},
	{0xea,0x40,3},
	{0xf4,0x1b,3},
	{0xf5,0x97,3},
	{0xf7,0x78,3},//AEtarget
	{0xf8,0x63,3},//AEtarget
	{0xf9,0x68,3},//AEtarget
	{0xfa,0x53,3},//AEtarget
	{0xfd,0x01,3},
	{0x09,0x31,3},	
	{0x0a,0x85,3},
	{0x0b,0x0b,3},	
	{0x14,0x20,3},
	{0x15,0x0f,3}, 
	
#if 1 // MCLK 24M 6-30fps
	{0xfd,0x00,3},
	{0x05,0x0 ,3},
	{0x06,0x0 ,3},
	{0x09,0x3 ,3},
	{0x0a,0xbc,3},
	{0xf0,0x50,3},//{0xf0,0x63,3},
	{0xf1,0x0 ,3},
	{0xf2,0x60,3},
	{0xf5,0x79,3},
	{0xfd,0x01,3},
	{0x00,0xb9,3},
	{0x0f,0x61,3},
	{0x16,0x61,3},
	{0x17,0xa9,3},
	{0x18,0xb1,3},
	{0x1b,0x61,3},
	{0x1c,0xb1,3},
	{0xb4,0x21,3},
	{0xb5,0x3b,3},
	{0xb6,0x5f,3},
	{0xb9,0x40,3},
	{0xba,0x4f,3},
	{0xbb,0x47,3},
	{0xbc,0x45,3},
	{0xbd,0x43,3},
	{0xbe,0x42,3},
	{0xbf,0x42,3},
	{0xc0,0x42,3},
	{0xc1,0x41,3},
	{0xc2,0x41,3},
	{0xc3,0x41,3},
	{0xc4,0x41,3},
	{0xc5,0x41,3},
	{0xc6,0x41,3},
	{0xca,0x70,3},
	{0xcb,0x10,3},
	{0xfd,0x00,3},
#endif
	
	{0xfd,0x00,3},
	{0x32,0x15,3},
	{0x34,0x26,3},
	{0x35,0x40,3},
	//{0x36,0x80,3},
	{0xfd,0x00,3},
	
};


PRIVATE const CAM_REG_T RG_InitPowerOnVga[] = 
{
	{0xfd,0x00,3},
	{0x1c,0x00,3},//08
	{0x30,0x00,3},//00:不分频 02:2分频
	{0x0f,0x2f,3},//;analog
	{0x10,0x2f,3},
	{0x13,0x2f,3},
	{0x22,0xe0,3},
	{0x26,0x08,3},
	{0x27,0xe8,3},
	{0x28,0x03,3},
	{0x32,0x00,3},
	{0xfd,0x00,3},
	{0x31,0x50,3},	 //Upside/mirr/Pclk inv/sub
	{0xd8,0x65,3},
	{0xd9,0x65,3},
	{0xda,0x65,3},
	{0xdb,0x50,3},
	{0x5f,0x11,3},
	{0xe0,0x00,3},//;resize
	{0xe1,0xdc,3},
	{0xe2,0xb0,3},
	{0xe3,0x00,3},
	{0xe4,0x2e,3},
	{0xe5,0x00,3},
	{0xe6,0x2b,3},
	{0xb7,0x3c,3},//;LSC
	{0xb8,0x50,3},
	{0xfd,0x01,3},
	{0x25,0x1a,3},//AWB
	{0x26,0xfb,3},
	{0x28,0x61,3},
	{0x29,0x49,3},
	{0x31,0x64,3},
	{0x32,0x18,3},
	{0x4d,0xdc,3},
	{0x4e,0x6b,3},
	{0x41,0x8c,3},
	{0x42,0x66,3},
	{0x55,0xff,3},
	{0x56,0x00,3},
	{0x59,0x82,3},
	{0x5a,0x00,3},
	{0x5d,0xff,3},
	{0x5e,0x6f,3},
	{0x57,0xff,3},
	{0x58,0x00,3},
	{0x5b,0xff,3},
	{0x5c,0xa8,3},
	{0x5f,0x75,3},
	{0x60,0x00,3},
	{0x2d,0x00,3},
	{0x2e,0x00,3},
	{0x2f,0x00,3},
	{0x30,0x00,3},
	{0x33,0x00,3},
	{0x34,0x00,3},
	{0x37,0x00,3},
	{0x38,0x00,3},
	{0x39,0x01,3},
	{0x3a,0x07,3},
	{0xfd,0x00,3},//;BPC
	{0x33,0x0f,3},
	{0x51,0x3f,3},
	{0x52,0x09,3},
	{0x53,0x00,3},
	{0x54,0x00,3},// 4
	{0x55,0x10,3},
	{0x4f,0xff,3},//blueedge
	{0x50,0xff,3},
	{0x56,0x70,3},//smooth
	{0x57,0x40,3},
	{0x58,0x40,3},
	{0x59,0x10,3},
	{0x5a,0x02,3},
	{0x5b,0x02,3},
	{0x5c,0x20,3},
	{0x65,0x06,3},//sharpness
	{0x66,0x01,3},
	{0x67,0x03,3},
	{0x68,0xc6,3},
	{0x69,0x7f,3},
	{0x6a,0x01,3},
	{0x6b,0x0a,3},
	{0x6c,0x01,3},
	{0x6d,0x03,3},
	{0x6e,0xc6,3},
	{0x6f,0x7f,3},
	{0x70,0x01,3},
	{0x71,0x0a,3},
	{0x72,0x10,3},
	{0x73,0x03,3},//3
	{0x74,0xc4,3},
	{0x75,0x7f,3},
	{0x76,0x01,3},
	{0x7f,0x96,3},//;colorcorrection
	{0x80,0xf2,3},
	{0x81,0xfe,3}, 
	{0x82,0xde,3},
	{0x83,0xa3,3},
	{0x84,0xff,3},
	{0x85,0xea,3},
	{0x86,0x81,3},
	{0x87,0x16,3},
	{0x88,0x3c,3}, 
	{0x89,0x33,3},
	{0x8a,0x1f,3}, 
	{0x8b,0x00,3},// ;gamma
	{0x8c,0x1a,3},
	{0x8d,0x29,3},
	{0x8e,0x41,3},
	{0x8f,0x62,3},
	{0x90,0x7c,3},
	{0x91,0x90,3},
	{0x92,0xa2,3},
	{0x93,0xaf,3},
	{0x94,0xba,3},
	{0x95,0xc4,3},
	{0x96,0xce,3},
	{0x97,0xd6,3},
	{0x98,0xdd,3},
	{0x99,0xe4,3},
	{0x9a,0xea,3},
	{0x9b,0xf1,3},
	{0xfd,0x01,3},
	{0x8d,0xf8,3},
	{0x8e,0xff,3},
	{0xfd,0x00,3},
	{0xca,0xcf,3},//;saturation
	{0xcb,0x07,3},//;hist-expand
	{0xcc,0x04,3},
	{0xce,0xff,3},
	{0xcf,0x10,3},
	{0xd0,0x20,3},
	{0xd1,0x00,3},
	{0xd2,0x1c,3},
	{0xd3,0x16,3},
	{0xd4,0x00,3},
	{0xd6,0x1c,3},
	{0xd7,0x16,3},
	{0xdd,0x70,3},// ;heq
	{0xde,0x90,3},
	{0xb9,0x00,3},//;Ygamma 
	{0xba,0x04,3}, 
	{0xbb,0x08,3}, 
	{0xbc,0x10,3},
	{0xbd,0x20,3},
	{0xbe,0x30,3},
	{0xbf,0x40,3},
	{0xc0,0x50,3},
	{0xc1,0x60,3},
	{0xc2,0x70,3},
	{0xc3,0x80,3},
	{0xc4,0x90,3},
	{0xc5,0xA0,3},
	{0xc6,0xB0,3},
	{0xc7,0xC0,3},
	{0xc8,0xD0,3},
	{0xc9,0xE0,3},
	{0xfd,0x01,3},
	{0x89,0xf0,3},
	{0x8a,0xff,3},
	{0xfd,0x00,3},
	{0xe8,0x30,3},//;AE
	{0xe9,0x30,3},
	{0xea,0x40,3},
	{0xf4,0x1b,3},
	{0xf5,0x97,3},
	{0xf7,0x78,3},//AEtarget
	{0xf8,0x63,3},//AEtarget
	{0xf9,0x68,3},//AEtarget
	{0xfa,0x53,3},//AEtarget
	{0xfd,0x01,3},
	{0x09,0x31,3},	
	{0x0a,0x85,3},
	{0x0b,0x0b,3},	
	{0x14,0x20,3},
	{0x15,0x0f,3}, 
	
#if 1 // MCLK 24M 6-30fps
	{0xfd,0x00,3},
	{0x05,0x0 ,3},
	{0x06,0x0 ,3},
	{0x09,0x3 ,3},
	{0x0a,0xbc,3},
	{0xf0,0x50,3},
	{0xf1,0x0 ,3},
	{0xf2,0x60,3},
	{0xf5,0x79,3},
	{0xfd,0x01,3},
	{0x00,0xb9,3},
	{0x0f,0x61,3},
	{0x16,0x61,3},
	{0x17,0xa9,3},
	{0x18,0xb1,3},
	{0x1b,0x61,3},
	{0x1c,0xb1,3},
	{0xb4,0x21,3},
	{0xb5,0x3b,3},
	{0xb6,0x5f,3},
	{0xb9,0x40,3},
	{0xba,0x4f,3},
	{0xbb,0x47,3},
	{0xbc,0x45,3},
	{0xbd,0x43,3},
	{0xbe,0x42,3},
	{0xbf,0x42,3},
	{0xc0,0x42,3},
	{0xc1,0x41,3},
	{0xc2,0x41,3},
	{0xc3,0x41,3},
	{0xc4,0x41,3},
	{0xc5,0x41,3},
	{0xc6,0x41,3},
	{0xca,0x70,3},
	{0xcb,0x10,3},
	{0xfd,0x00,3},
#endif
	
	{0xfd,0x00,3},
	{0x32,0x15,3},
	{0x34,0x26,3},
};

// use this for 160x120 (QQVGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQqvga[] = 
{
	{0xfd,0x00,3},
	{0x1c,0x00,3},//08
	{0x30,0x00,3},//00:不分频 02:2分频
	{0x0f,0x2f,3},//;analog
	{0x10,0x2f,3},
	{0x13,0x2f,3},
	{0x22,0xe0,3},
	{0x26,0x08,3},
	{0x27,0xe8,3},
	{0x28,0x03,3},
	{0x32,0x00,3},
	{0xfd,0x00,3},
	{0x31,0x10,3},	 //Upside/mirr/Pclk inv/sub
	{0xd8,0x65,3},
	{0xd9,0x65,3},
	{0xda,0x65,3},
	{0xdb,0x50,3},
	{0x5f,0x11,3},
	{0xe0,0x00,3},//;resize
	{0xe1,0xdc,3},
	{0xe2,0xb0,3},
	{0xe3,0x00,3},
	{0xe4,0x2e,3},
	{0xe5,0x00,3},
	{0xe6,0x2b,3},
	{0xb7,0x3c,3},//;LSC
	{0xb8,0x50,3},
	{0xfd,0x01,3},
	{0x25,0x1a,3},//AWB
	{0x26,0xfb,3},
	{0x28,0x61,3},
	{0x29,0x49,3},
	{0x31,0x64,3},
	{0x32,0x18,3},
	{0x4d,0xdc,3},
	{0x4e,0x6b,3},
	{0x41,0x8c,3},
	{0x42,0x66,3},
	{0x55,0xff,3},
	{0x56,0x00,3},
	{0x59,0x82,3},
	{0x5a,0x00,3},
	{0x5d,0xff,3},
	{0x5e,0x6f,3},
	{0x57,0xff,3},
	{0x58,0x00,3},
	{0x5b,0xff,3},
	{0x5c,0xa8,3},
	{0x5f,0x75,3},
	{0x60,0x00,3},
	{0x2d,0x00,3},
	{0x2e,0x00,3},
	{0x2f,0x00,3},
	{0x30,0x00,3},
	{0x33,0x00,3},
	{0x34,0x00,3},
	{0x37,0x00,3},
	{0x38,0x00,3},
	{0x39,0x01,3},
	{0x3a,0x07,3},
	{0xfd,0x00,3},//;BPC
	{0x33,0x0f,3},
	{0x51,0x3f,3},
	{0x52,0x09,3},
	{0x53,0x00,3},
	{0x54,0x00,3},// 4
	{0x55,0x10,3},
	{0x4f,0xff,3},//blueedge
	{0x50,0xff,3},
	{0x56,0x70,3},//smooth
	{0x57,0x40,3},
	{0x58,0x40,3},
	{0x59,0x10,3},
	{0x5a,0x02,3},
	{0x5b,0x02,3},
	{0x5c,0x20,3},
	{0x65,0x06,3},//sharpness
	{0x66,0x01,3},
	{0x67,0x03,3},
	{0x68,0xc6,3},
	{0x69,0x7f,3},
	{0x6a,0x01,3},
	{0x6b,0x0a,3},
	{0x6c,0x01,3},
	{0x6d,0x03,3},
	{0x6e,0xc6,3},
	{0x6f,0x7f,3},
	{0x70,0x01,3},
	{0x71,0x0a,3},
	{0x72,0x10,3},
	{0x73,0x03,3},//3
	{0x74,0xc4,3},
	{0x75,0x7f,3},
	{0x76,0x01,3},
	{0x7f,0x96,3},//;colorcorrection
	{0x80,0xf2,3},
	{0x81,0xfe,3}, 
	{0x82,0xde,3},
	{0x83,0xa3,3},
	{0x84,0xff,3},
	{0x85,0xea,3},
	{0x86,0x81,3},
	{0x87,0x16,3},
	{0x88,0x3c,3}, 
	{0x89,0x33,3},
	{0x8a,0x1f,3}, 
	{0x8b,0x00,3},// ;gamma
	{0x8c,0x1a,3},
	{0x8d,0x29,3},
	{0x8e,0x41,3},
	{0x8f,0x62,3},
	{0x90,0x7c,3},
	{0x91,0x90,3},
	{0x92,0xa2,3},
	{0x93,0xaf,3},
	{0x94,0xba,3},
	{0x95,0xc4,3},
	{0x96,0xce,3},
	{0x97,0xd6,3},
	{0x98,0xdd,3},
	{0x99,0xe4,3},
	{0x9a,0xea,3},
	{0x9b,0xf1,3},
	{0xfd,0x01,3},
	{0x8d,0xf8,3},
	{0x8e,0xff,3},
	{0xfd,0x00,3},
	{0xca,0xcf,3},//;saturation
	{0xcb,0x07,3},//;hist-expand
	{0xcc,0x04,3},
	{0xce,0xff,3},
	{0xcf,0x10,3},
	{0xd0,0x20,3},
	{0xd1,0x00,3},
	{0xd2,0x1c,3},
	{0xd3,0x16,3},
	{0xd4,0x00,3},
	{0xd6,0x1c,3},
	{0xd7,0x16,3},
	{0xdd,0x70,3},// ;heq
	{0xde,0x90,3},
	{0xb9,0x00,3},//;Ygamma 
	{0xba,0x04,3}, 
	{0xbb,0x08,3}, 
	{0xbc,0x10,3},
	{0xbd,0x20,3},
	{0xbe,0x30,3},
	{0xbf,0x40,3},
	{0xc0,0x50,3},
	{0xc1,0x60,3},
	{0xc2,0x70,3},
	{0xc3,0x80,3},
	{0xc4,0x90,3},
	{0xc5,0xA0,3},
	{0xc6,0xB0,3},
	{0xc7,0xC0,3},
	{0xc8,0xD0,3},
	{0xc9,0xE0,3},
	{0xfd,0x01,3},
	{0x89,0xf0,3},
	{0x8a,0xff,3},
	{0xfd,0x00,3},
	{0xe8,0x30,3},//;AE
	{0xe9,0x30,3},
	{0xea,0x40,3},
	{0xf4,0x1b,3},
	{0xf5,0x97,3},
	{0xf7,0x78,3},//AEtarget
	{0xf8,0x63,3},//AEtarget
	{0xf9,0x68,3},//AEtarget
	{0xfa,0x53,3},//AEtarget
	{0xfd,0x01,3},
	{0x09,0x31,3},	
	{0x0a,0x85,3},
	{0x0b,0x0b,3},	
	{0x14,0x20,3},
	{0x15,0x0f,3}, 
	
#if 1 // MCLK 24M 6-30fps
	{0xfd,0x00,3},
	{0x05,0x0 ,3},
	{0x06,0x0 ,3},
	{0x09,0x3 ,3},
	{0x0a,0xbc,3},
	{0xf0,0x50,3},
	{0xf1,0x0 ,3},
	{0xf2,0x60,3},
	{0xf5,0x79,3},
	{0xfd,0x01,3},
	{0x00,0xb9,3},
	{0x0f,0x61,3},
	{0x16,0x61,3},
	{0x17,0xa9,3},
	{0x18,0xb1,3},
	{0x1b,0x61,3},
	{0x1c,0xb1,3},
	{0xb4,0x21,3},
	{0xb5,0x3b,3},
	{0xb6,0x5f,3},
	{0xb9,0x40,3},
	{0xba,0x4f,3},
	{0xbb,0x47,3},
	{0xbc,0x45,3},
	{0xbd,0x43,3},
	{0xbe,0x42,3},
	{0xbf,0x42,3},
	{0xc0,0x42,3},
	{0xc1,0x41,3},
	{0xc2,0x41,3},
	{0xc3,0x41,3},
	{0xc4,0x41,3},
	{0xc5,0x41,3},
	{0xc6,0x41,3},
	{0xca,0x70,3},
	{0xcb,0x10,3},
	{0xfd,0x00,3},
#endif
	
	{0xfd,0x00,3},
	{0x32,0x15,3},
	{0x34,0x26,3},
	{0x35,0x40,3},
	//{0x36,0x80,3},
	{0xfd,0x00,3},

#if 	0
	{0xe0,0x01,3},
	{0xe1,0x78,3},
	{0xe2,0xa0,3},
	{0xe3,0x00,3},
	{0xe4,0x55,3},
	{0xe5,0x00,3},
	{0xe6,0x30,3},	
#else
	{0x47,0x00,3},
	{0x48,0x00,3},
	{0x49,0x00,3},
	{0x4a,0x78,3},
	{0x4b,0x00,3},
	{0x4c,0xa0,3},	
#endif
};

PRIVATE const CAM_REG_T RG_VidFormatVga[] = 
{
 //    {0x04, 0x00,3}, // setup clock divider and HV-mirror ;Mclk /4
 //    {0x05, 0x07,3}
};

PRIVATE const CAM_REG_T RG_VidFormatQvga[] = 
{
//     {0x04,0x00,3},   // setup clock divider and HV-mirror ;Mclk /4
//     {0x05,0x05,3}    // setup  output mode 240*320
};

PRIVATE const CAM_REG_T RG_VidFormatQqvga[] = 
{
//     {0x04, 0x00,3}, // setup clock divider and HV-mirror ;Mclk /4
//     {0x05, 0x04,3}
};

typedef struct
{
// Camera information structure
    char                desc[40];	

    UINT8               snrtype;            //sensor type(RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz				
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure(SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity (TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable

    CAM_MODE_T          cammode;


    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;

    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast

    CAM_FORMAT_T        format;
    UINT32              npixels;
    CAM_IMAGE_T         vidbuffer;

    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure

    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence(Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence(Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
//    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information

// This 'callback' mechanism is not necessary because the encapsulation is taken
// care of by the environment
//    PSensorSetReg       snrSetRegCall;      //set reg callback
//    PSensorGetReg       snrGetRegCall;
//    PSnrIdChk           snrIdChkCall;
//    PSnrMirrorFlip      snrMirrorFlipCall;
//    PSnrContrast        snrContrastCall;
//    PSnrBrightness      snrBrightnessCall;
//    PSnrMode            snrModeCall;
//    PSnrGetEt           snrGetEt;
//    PSnrSetEt           snrSetEt;
//    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;

PRIVATE  volatile CAM_INFO_T gSensorInfo =
{
    "SP0828 Mode",      // char desc[40];	

    0,                      // UINT8 snrtype; (rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x18,                   // UINT8 i2caddress; this is the _REAL_ slave address.  
                            //  The value written in phase 1 of a write cycle will be 0x42
                            //  while the value just before the read will be 0x43
    0x18,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;

    CAM_MODE_IDLE,          // cammode

    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer

    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_QVGA,           // npixels(VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer

    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
//   {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
//    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnQvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQvga}, // CAM_REG_GROUP_T Initpoweron;

    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};

// ############
// Private
// ############

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

PRIVATE VOID camerap_WriteOneReg( UINT8 Addr, UINT8 Data);
PRIVATE VOID camerap_Delay(UINT16 Wait_mS);
PRIVATE VOID camerap_WriteReg(CAM_REG_T RegWrite);
PRIVATE UINT8 camerap_ReadReg(UINT8 Addr);
PRIVATE VOID camerap_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
PRIVATE VOID camerap_InteruptHandler(HAL_CAMERA_IRQ_CAUSE_T cause);
PRIVATE UINT8 camerap_GetId(VOID);

