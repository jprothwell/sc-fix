// Here is where all the model specific defines should be


#include "hal_i2c.h"
#include "camera_m.h"

//#define  DRV_CAM_FRAME_6    1
 #define  DRV_CAM_FRAME_10    1
//#define  DRV_CAM_FRAME_12    1
typedef struct
{
    UINT32 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT16 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;

// On FPGA platform, Pixel Clock must not be too fast or xfer screws up
#define CAM_CLK_CFG 0x81

// use this for 320x240 (VGA) capture
const CAM_REG_T RG_InitPowerOnQvga[] = 
{    
    {0x1c, 0x01,10},

    {0xf0, 0x00,1},
    {0x02, 0x00,1},
    {0x03, 0x04,1},
    {0x04, 0x00,1},
    {0x05, 0x0a,1},
    {0x06, 0x02,1},
    {0x07, 0x80,1},
    {0x08, 0x01,1},
    {0x09, 0xe0,1},
    {0x0a, 0xa0,1},
    {0x0c, 0x02,1},
    {0x0d, 0x09,1},
    {0x0e, 0x00,1},
    {0x0f, 0x40,1},
    {0x10, 0x00,1},
    {0x11, 0xf4,1},
    {0x12, 0x0e,1},

    {0x80, 0x00,1},
    {0xfa, 0xff,1},

    {0xf0, 0x02,1},

	
	//R 	
	 {0x10 , 0xDE,1},
	 {0x11 , 0x7A,1},
	 {0x12 , 0x75,1},
	 {0x13 , 0x77,1},
	 {0x14 , 0x7A,1},
	 {0x15 , 0x7E,1},
	 {0x16 , 0x82,1},
	 {0x17 , 0x83,1},
	 {0x18 , 0x8C,1},
	 {0x19 , 0x90,1},
	 {0x1A , 0x8B,1},
	 {0x1B , 0x8A,1},
	 {0x1C , 0x9B,1},
	 {0x1D , 0xA4,1},
	 {0x1E , 0xB6,1},
	 {0x1F , 0xC0,1},
	//B 	
	 {0x20 , 0xDE,1},
	 {0x21 , 0x7A,1},
	 {0x22 , 0x75,1},
	 {0x23 , 0x77,1},
	 {0x24 , 0x7A,1},
	 {0x25 , 0x7E,1},
	 {0x26 , 0x82,1},
	 {0x27 , 0x83,1},
	 {0x28 , 0x8C,1},
	 {0x29 , 0x90,1},
	 {0x2A , 0x8B,1},
	 {0x2B , 0x8A,1},
	 {0x2C , 0x9B,1},
	 {0x2D , 0xA4,1},
	 {0x2E , 0xB6,1},
	 {0x2F , 0xC0,1},
	//G2	
	 {0x30 , 0xDE,1},
	 {0x31 , 0x7A,1},
	 {0x32 , 0x75,1},
	 {0x33 , 0x77,1},
	 {0x34 , 0x7A,1},
	 {0x35 , 0x7E,1},
	 {0x36 , 0x82,1},
	 {0x37 , 0x83,1},
	 {0x38 , 0x8C,1},
	 {0x39 , 0x90,1},
	 {0x3A , 0x8B,1},
	 {0x3B , 0x8A,1},
	 {0x3C , 0x9B,1},
	 {0x3D , 0xA4,1},
	 {0x3E , 0xB6,1},
	 {0x3F , 0xC0,1},
	//STEP	
	 {0xC0 , 0x0D,1},
	 {0xC1 , 0x0D,1},
	 {0xC2 , 0x0D,1},
	 {0xC3 , 0x0D,1},
	 {0xC4 , 0x0D,1},
	 {0xC5 , 0x0D,1},
	 {0xC6 , 0x0D,1},
	 {0xC7 , 0x0E,1},
	 {0xC8 , 0x0E,1},
	 {0xC9 , 0x0F,1},
	 {0xCA , 0x0F,1},
	 {0xCB , 0x0D,1},
	 {0xCC , 0x0D,1},
	 {0xCD , 0x0C,1},
	 {0xCE , 0x0C,1},
	//H 	
	 {0xCF , 0x01,1},
	 {0xD0 , 0x44,1},
	//V 	
	 {0xD1 , 0x00,1},
	 {0xD2 , 0xFE,1},
	
	
	
	


	
    {0x40, 0x01,1},
    {0x41, 0xe0,1},
    {0x42, 0x00,1},
    {0x43, 0xe0,1},
    {0x44, 0x00,1},
    {0x45, 0xc0,1},
    {0x46, 0xc0,1},
    {0x47, 0x90,1},
    {0x48, 0x80,1},
    {0x49, 0x78,1},
    {0x4a, 0x70,1},
    {0x4b, 0x5c,1},
    {0x4c, 0x48,1},
    {0x4d, 0x42,1},
    {0x4e, 0x3a,1},
    {0x4f, 0x32,1},
    {0x50, 0x2a,1},
    {0x51, 0x1e,1},
    {0x52, 0x16,1},
    {0x53, 0x02,1},
    {0x54, 0xfe,1},
    {0x55, 0x00,1},
    {0x98, 0xa8,1},  //90->a8  by jeff 20090813
    {0x99, 0x50,1},
    {0x9a, 0x50,1},
    {0x6d, 0x25,1},
    {0x6e, 0x07,1},
    {0x6f, 0x01,1},
    {0x70, 0x01,1},
    {0x73, 0x26,1},
    {0x74, 0x0f,1},
    {0x75, 0x26,1},
    {0x76, 0x0f,1},
    {0x77, 0x00,1},
    {0x8c, 0x4d,1},
    {0x8d, 0x96,1},
    {0x8e, 0x1d,1},
    {0x8f, 0xd5,1},
    {0x90, 0xab,1},
    {0x91, 0x80,1},
    {0x92, 0x80,1},
    {0x93, 0x95,1},
    {0x94, 0xeb,1},
    {0x95, 0x00,1},
    {0x96, 0x80,1},
    {0x97, 0x80,1},
    {0x9c, 0x40,1},
    {0x89, 0x88,1},
    {0x8a, 0x88,1},
    {0x8b, 0x88,1},
    {0x9d, 0x60,1},

    {0xf0, 0x03,1},
    {0x00, 0x2d,1},
    {0x01, 0x02,1},
    {0x02, 0x48,1},
    {0x03, 0x38,1},
    {0x04, 0x07,1},
    {0x0a, 0x1c,1},
	{0x05, 0x4e,1},
	{0x06, 0xa6,1},
	{0x0b, 0x3a,1},

  //  {0x07, 0x3e,1},
    //{0x07, 0x4e,1},
    {0x07, 0x4e,1},
    {0x08, 0x01,1},
    {0x09, 0x40,1},
    {0x0c, 0x01,1},
    {0x0d, 0x30,1},
    {0x0e, 0x08,1},
    {0x0f, 0x70,1},
    {0x10, 0x08,1},
    {0x11, 0xb0,1},
    {0x12, 0x08,1},
    {0x13, 0xe0,1},
    {0x14, 0x08,1},
    {0x15, 0xe8,1},
    {0x16, 0x08,1},
    {0x17, 0xf0,1},
    {0x18, 0x08,1},
    {0x19, 0xf8,1},
    {0x1a, 0x09,1},
    {0x1b, 0x00,1},
    {0x1c, 0x09,1},
    {0x1d, 0x08,1},
    {0x1e, 0x01,1},
    {0x1f, 0x10,1},
    {0x20, 0x01,1},
    {0x21, 0x18,1},
    {0x22, 0x01,1},
    {0x23, 0x20,1},
    {0x24, 0x01,1},
    {0x25, 0x28,1},
    {0x36, 0x82,1},

    {0x50, 0x00,1},
    {0x39, 0x0f,1},
    {0x3a, 0x05,1},
    {0x37, 0x01,1},
    {0x38, 0x01,1},
    {0x47, 0x01,1},
    {0x41, 0x07,1},  //05->07  by jeff 20090707
    {0x42, 0x07,1},  //05->07  by jeff 20090707
    {0x43, 0x02,1},
    {0x44, 0x04,1},
    {0x45, 0x08,1},
    {0x48, 0x08,1},
    {0x49, 0xeb,1},
    {0x50, 0x00,1},

    {0xf0, 0x00,1},
    {0x1d, 0x01,10}, 



};

// use this for 640x480 (VGA) capture
const CAM_REG_T RG_InitPowerOnVga[] = 
{ 

    {0x1c, 0x01,10},

    {0xf0, 0x00,1},
    {0x02, 0x00,1},
    {0x03, 0x04,1},
    {0x04, 0x00,1},
    {0x05, 0x0a,1},
    {0x06, 0x02,1},
    {0x07, 0x80,1},
    {0x08, 0x01,1},
    {0x09, 0xe0,1},
    {0x0a, 0xa1,1},  //20->a1
    {0x0c, 0x02,1},
    {0x0d, 0x09,1},
    {0x0e, 0x00,1},
    {0x0f, 0x40,1},
    {0x10, 0x00,1},
    {0x11, 0xf4,1},
    {0x12, 0x0e,1},
    {0x18, 0x1a,1},
    {0x19, 0x1a,1},
    {0x1f, 0x00,1},
    {0x20, 0x00,1},
    {0x21, 0x00,1},
    {0x22, 0x00,1},
    {0x23, 0x00,1},
    {0x24, 0x18,1},
    {0x27, 0x00,1},
    {0x28, 0x40,1},
    {0x29, 0x40,1},
    {0x2a, 0x3b,1},
    {0x2b, 0x60,1},
    {0x2d, 0x07,1},
    {0x2e, 0x0f,1},
    {0x2f, 0x0a,1},
    {0x30, 0x00,1},
    {0x33, 0x0a,1},
    {0x40, 0x00,1},
    {0x41, 0x00,1},
    {0x42, 0x00,1},
    {0x43, 0x00,1},
    {0x44, 0x00,1},
    {0x45, 0x00,1},
    {0x46, 0x00,1},
    {0x47, 0x00,1},
    {0x48, 0x00,1},
    {0x49, 0x00,1},
    {0x4a, 0x00,1},
    {0x4b, 0x00,1},
    {0x4c, 0x00,1},
    {0x4d, 0x00,1},
    {0x4e, 0x00,1},
    {0x80, 0x00,1},
    {0xfa, 0xff,1},

    {0xf0, 0x02,1},
    //R 	
	 {0x10 , 0xDE,1},
	 {0x11 , 0x7A,1},
	 {0x12 , 0x75,1},
	 {0x13 , 0x77,1},
	 {0x14 , 0x7A,1},
	 {0x15 , 0x7E,1},
	 {0x16 , 0x82,1},
	 {0x17 , 0x83,1},
	 {0x18 , 0x8C,1},
	 {0x19 , 0x90,1},
	 {0x1A , 0x8B,1},
	 {0x1B , 0x8A,1},
	 {0x1C , 0x9B,1},
	 {0x1D , 0xA4,1},
	 {0x1E , 0xB6,1},
	 {0x1F , 0xC0,1},
	//B 	
	 {0x20 , 0xDE,1},
	 {0x21 , 0x7A,1},
	 {0x22 , 0x75,1},
	 {0x23 , 0x77,1},
	 {0x24 , 0x7A,1},
	 {0x25 , 0x7E,1},
	 {0x26 , 0x82,1},
	 {0x27 , 0x83,1},
	 {0x28 , 0x8C,1},
	 {0x29 , 0x90,1},
	 {0x2A , 0x8B,1},
	 {0x2B , 0x8A,1},
	 {0x2C , 0x9B,1},
	 {0x2D , 0xA4,1},
	 {0x2E , 0xB6,1},
	 {0x2F , 0xC0,1},
	//G2	
	 {0x30 , 0xDE,1},
	 {0x31 , 0x7A,1},
	 {0x32 , 0x75,1},
	 {0x33 , 0x77,1},
	 {0x34 , 0x7A,1},
	 {0x35 , 0x7E,1},
	 {0x36 , 0x82,1},
	 {0x37 , 0x83,1},
	 {0x38 , 0x8C,1},
	 {0x39 , 0x90,1},
	 {0x3A , 0x8B,1},
	 {0x3B , 0x8A,1},
	 {0x3C , 0x9B,1},
	 {0x3D , 0xA4,1},
	 {0x3E , 0xB6,1},
	 {0x3F , 0xC0,1},
	//STEP	
	 {0xC0 , 0x0D,1},
	 {0xC1 , 0x0D,1},
	 {0xC2 , 0x0D,1},
	 {0xC3 , 0x0D,1},
	 {0xC4 , 0x0D,1},
	 {0xC5 , 0x0D,1},
	 {0xC6 , 0x0D,1},
	 {0xC7 , 0x0E,1},
	 {0xC8 , 0x0E,1},
	 {0xC9 , 0x0F,1},
	 {0xCA , 0x0F,1},
	 {0xCB , 0x0D,1},
	 {0xCC , 0x0D,1},
	 {0xCD , 0x0C,1},
	 {0xCE , 0x0C,1},
	//H 	
	 {0xCF , 0x01,1},
	 {0xD0 , 0x44,1},
	//V 	
	 {0xD1 , 0x00,1},
	 {0xD2 , 0xFE,1},
	
	
    {0x40, 0x01,1},
    {0x41, 0xe0,1},
    {0x42, 0x00,1},
    {0x43, 0xe0,1},
    {0x44, 0x00,1},
    {0x45, 0xc0,1},
    {0x46, 0xc0,1},
    {0x47, 0x90,1},
    {0x48, 0x80,1},
    {0x49, 0x78,1},
    {0x4a, 0x70,1},
    {0x4b, 0x5c,1},
    {0x4c, 0x48,1},
    {0x4d, 0x42,1},
    {0x4e, 0x3a,1},
    {0x4f, 0x32,1},
    {0x50, 0x2a,1},
    {0x51, 0x1e,1},
    {0x52, 0x16,1},
    {0x53, 0x02,1},
    {0x54, 0xfe,1},
    {0x55, 0x00,1},
    {0x98, 0xa8,1},  //90->a8  by jeff 20090813
    {0x99, 0x50,1},
    {0x9a, 0x50,1},
    {0x6d, 0x25,1},
    {0x6e, 0x07,1},
    {0x6f, 0x00,1},
    {0x70, 0x01,1},
    {0x73, 0x26,1},
    {0x74, 0x0f,1},
    {0x75, 0x26,1},
    {0x76, 0x0f,1},
    {0x77, 0x00,1},
    {0x8c, 0x4d,1},
    {0x8d, 0x96,1},
    {0x8e, 0x1d,1},
    {0x8f, 0xd5,1},
    {0x90, 0xab,1},
    {0x91, 0x80,1},
    {0x92, 0x80,1},
    {0x93, 0x95,1},
    {0x94, 0xeb,1},
    {0x95, 0x00,1},
    {0x96, 0x80,1},
    {0x97, 0x80,1},
    {0x9c, 0x40,1},
    {0x89, 0x88,1},
    {0x8a, 0x88,1},
    {0x8b, 0x88,1},
    {0x9d, 0x60,1},

    {0xf0, 0x03,1},    
    {0x00, 0x2d,1},
    {0x01, 0x02,1},
    {0x02, 0x48,1},
    {0x03, 0x38,1},
    {0x04, 0x07,1},
    {0x0a, 0x1b,1},
	{0x05, 0x4e,1},
	{0x06, 0xa6,1},
	{0x0b, 0x39,1},
 	{0x07, 0x4e,1}, 

	{0x08, 0x01,1},
    {0x09, 0x40,1},
    {0x0c, 0x01,1},
    {0x0d, 0x30,1},
    {0x0e, 0x08,1},
    {0x0f, 0x70,1},
    {0x10, 0x08,1},
    {0x11, 0xb0,1},
    {0x12, 0x08,1},
    {0x13, 0xe0,1},
    {0x14, 0x08,1},
    {0x15, 0xe8,1},
    {0x16, 0x08,1},
    {0x17, 0xf0,1},
    {0x18, 0x08,1},
    {0x19, 0xf8,1},
    {0x1a, 0x09,1},
    {0x1b, 0x00,1},
    {0x1c, 0x09,1},
    {0x1d, 0x08,1},
    {0x1e, 0x01,1},
    {0x1f, 0x10,1},
    {0x20, 0x01,1},
    {0x21, 0x18,1},
    {0x22, 0x01,1},
    {0x23, 0x20,1},
    {0x24, 0x01,1},
    {0x25, 0x28,1},
    {0x36, 0x82,1},

    {0x50, 0x00,1},
    {0x39, 0x0f,1},
    {0x3a, 0x05,1},
    {0x37, 0x01,1},
    {0x38, 0x01,1},
    {0x47, 0x01,1},
    {0x41, 0x07,1},  //05->07  by jeff 20090707
    {0x42, 0x07,1},  //05->07  by jeff 20090707
    {0x43, 0x02,1},
    {0x44, 0x04,1},
    {0x45, 0x08,1},
    {0x48, 0x08,1},
    {0x49, 0xeb,1},
    {0x50, 0x00,1},

    {0xf0, 0x00,1},
    {0x1d, 0x01,10}, 

};


// use this for 160*120 (QQVGA) capture
const CAM_REG_T RG_InitPowerOnQqvga[] = 
{ 
    {0x1c, 0x01,10},

    {0xf0, 0x00,1},
    {0x02, 0x00,1},
    {0x03, 0x04,1},
    {0x04, 0x00,1},
    {0x05, 0x0a,1},
    {0x06, 0x02,1},
    {0x07, 0x80,1},
    {0x08, 0x01,1},
    {0x09, 0xe0,1},
    {0x0a, 0xa0,1},
    {0x0c, 0x02,1},
    {0x0d, 0x09,1},
    {0x0e, 0x00,1},
    {0x0f, 0x40,1},
    {0x10, 0x00,1},
    {0x11, 0xf4,1},
    {0x12, 0x0e,1},
    {0x18, 0x1a,1},
    {0x19, 0x1a,1},
    {0x1f, 0x00,1},
    {0x20, 0x00,1},
    {0x21, 0x00,1},
    {0x22, 0x00,1},
    {0x23, 0x00,1},
    {0x24, 0x18,1},
    {0x27, 0x00,1},
    {0x28, 0x40,1},
    {0x29, 0x40,1},
    {0x2a, 0x3b,1},
    {0x2b, 0x60,1},
    {0x2d, 0x07,1},
    {0x2e, 0x0f,1},
    {0x2f, 0x0a,1},
    {0x30, 0x00,1},
    {0x33, 0x0a,1},
    {0x40, 0x00,1},
    {0x41, 0x00,1},
    {0x42, 0x00,1},
    {0x43, 0x00,1},
    {0x44, 0x00,1},
    {0x45, 0x00,1},
    {0x46, 0x00,1},
    {0x47, 0x00,1},
    {0x48, 0x00,1},
    {0x49, 0x00,1},
    {0x4a, 0x00,1},
    {0x4b, 0x00,1},
    {0x4c, 0x00,1},
    {0x4d, 0x00,1},
    {0x4e, 0x00,1},
    {0x80, 0x00,1},
    {0xfa, 0xff,1},

    {0xf0, 0x02,1},
    //R 	
	 {0x10 , 0xDE,1},
	 {0x11 , 0x7A,1},
	 {0x12 , 0x75,1},
	 {0x13 , 0x77,1},
	 {0x14 , 0x7A,1},
	 {0x15 , 0x7E,1},
	 {0x16 , 0x82,1},
	 {0x17 , 0x83,1},
	 {0x18 , 0x8C,1},
	 {0x19 , 0x90,1},
	 {0x1A , 0x8B,1},
	 {0x1B , 0x8A,1},
	 {0x1C , 0x9B,1},
	 {0x1D , 0xA4,1},
	 {0x1E , 0xB6,1},
	 {0x1F , 0xC0,1},
	//B 	
	 {0x20 , 0xDE,1},
	 {0x21 , 0x7A,1},
	 {0x22 , 0x75,1},
	 {0x23 , 0x77,1},
	 {0x24 , 0x7A,1},
	 {0x25 , 0x7E,1},
	 {0x26 , 0x82,1},
	 {0x27 , 0x83,1},
	 {0x28 , 0x8C,1},
	 {0x29 , 0x90,1},
	 {0x2A , 0x8B,1},
	 {0x2B , 0x8A,1},
	 {0x2C , 0x9B,1},
	 {0x2D , 0xA4,1},
	 {0x2E , 0xB6,1},
	 {0x2F , 0xC0,1},
	//G2	
	 {0x30 , 0xDE,1},
	 {0x31 , 0x7A,1},
	 {0x32 , 0x75,1},
	 {0x33 , 0x77,1},
	 {0x34 , 0x7A,1},
	 {0x35 , 0x7E,1},
	 {0x36 , 0x82,1},
	 {0x37 , 0x83,1},
	 {0x38 , 0x8C,1},
	 {0x39 , 0x90,1},
	 {0x3A , 0x8B,1},
	 {0x3B , 0x8A,1},
	 {0x3C , 0x9B,1},
	 {0x3D , 0xA4,1},
	 {0x3E , 0xB6,1},
	 {0x3F , 0xC0,1},
	//STEP	
	 {0xC0 , 0x0D,1},
	 {0xC1 , 0x0D,1},
	 {0xC2 , 0x0D,1},
	 {0xC3 , 0x0D,1},
	 {0xC4 , 0x0D,1},
	 {0xC5 , 0x0D,1},
	 {0xC6 , 0x0D,1},
	 {0xC7 , 0x0E,1},
	 {0xC8 , 0x0E,1},
	 {0xC9 , 0x0F,1},
	 {0xCA , 0x0F,1},
	 {0xCB , 0x0D,1},
	 {0xCC , 0x0D,1},
	 {0xCD , 0x0C,1},
	 {0xCE , 0x0C,1},
	//H 	
	 {0xCF , 0x01,1},
	 {0xD0 , 0x44,1},
	//V 	
	 {0xD1 , 0x00,1},
	 {0xD2 , 0xFE,1},
	
	
    {0x40, 0x01,1},
    {0x41, 0xe0,1},
    {0x42, 0x00,1},
    {0x43, 0xe0,1},
    {0x44, 0x00,1},
    {0x45, 0xc0,1},
    {0x46, 0xc0,1},
    {0x47, 0x90,1},
    {0x48, 0x80,1},
    {0x49, 0x78,1},
    {0x4a, 0x70,1},
    {0x4b, 0x5c,1},
    {0x4c, 0x48,1},
    {0x4d, 0x42,1},
    {0x4e, 0x3a,1},
    {0x4f, 0x32,1},
    {0x50, 0x2a,1},
    {0x51, 0x1e,1},
    {0x52, 0x16,1},
    {0x53, 0x02,1},
    {0x54, 0xfe,1},
    {0x55, 0x00,1},
    {0x98, 0xa8,1},  //90->a8  by jeff 20090813
    {0x99, 0x50,1},
    {0x9a, 0x50,1},
    {0x6d, 0x25,1},
    {0x6e, 0x07,1},
    {0x6f, 0x04,1},
    {0x70, 0x01,1},
    {0x73, 0x26,1},
    {0x74, 0x0f,1},
    {0x75, 0x26,1},
    {0x76, 0x0f,1},
    {0x77, 0x00,1},
    {0x8c, 0x4d,1},
    {0x8d, 0x96,1},
    {0x8e, 0x1d,1},
    {0x8f, 0xd5,1},
    {0x90, 0xab,1},
    {0x91, 0x80,1},
    {0x92, 0x80,1},
    {0x93, 0x95,1},
    {0x94, 0xeb,1},
    {0x95, 0x00,1},
    {0x96, 0x80,1},
    {0x97, 0x80,1},
    {0x9c, 0x40,1},
    {0x89, 0x88,1},
    {0x8a, 0x88,1},
    {0x8b, 0x88,1},
    {0x9d, 0x60,1},

    {0xf0, 0x03,1},    
    {0x00, 0x2d,1},
    {0x01, 0x02,1},
    {0x02, 0x48,1},
    {0x03, 0x38,1},
    {0x04, 0x07,1},
    {0x0a, 0x1b,1},
	{0x05, 0x4e,1},
	{0x06, 0xa6,1},
	{0x0b, 0x39,1},
 	{0x07, 0x4e,1}, 


   // {0x07, 0x5d,1},
    //{0x07, 0x9d,1},
    {0x08, 0x01,1},
    {0x09, 0x40,1},
    {0x0c, 0x01,1},
    {0x0d, 0x30,1},
    {0x0e, 0x08,1},
    {0x0f, 0x70,1},
    {0x10, 0x08,1},
    {0x11, 0xb0,1},
    {0x12, 0x08,1},
    {0x13, 0xe0,1},
    {0x14, 0x08,1},
    {0x15, 0xe8,1},
    {0x16, 0x08,1},
    {0x17, 0xf0,1},
    {0x18, 0x08,1},
    {0x19, 0xf8,1},
    {0x1a, 0x09,1},
    {0x1b, 0x00,1},
    {0x1c, 0x09,1},
    {0x1d, 0x08,1},
    {0x1e, 0x01,1},
    {0x1f, 0x10,1},
    {0x20, 0x01,1},
    {0x21, 0x18,1},
    {0x22, 0x01,1},
    {0x23, 0x20,1},
    {0x24, 0x01,1},
    {0x25, 0x28,1},
    {0x36, 0x82,1},  //6f

    {0x50, 0x00,1},
    {0x39, 0x0f,1},
    {0x3a, 0x05,1},
    {0x37, 0x01,1},
    {0x38, 0x01,1},
    {0x47, 0x01,1},
    {0x41, 0x07,1},  //05->07  by jeff 20090707
    {0x42, 0x07,1},  //05->07  by jeff 20090707
    {0x43, 0x02,1},
    {0x44, 0x04,1},
    {0x45, 0x08,1},
    {0x48, 0x08,1},
    {0x49, 0xeb,1},
    {0x50, 0x00,1},

    {0xf0, 0x00,1},
    {0x1d, 0x01,10}, 
};

const CAM_REG_T RG_VidFormatVga[] = 
{   
    {0xf0, 0x02,1},
	{0x6f, 0x00,1},
	{0xf0, 0x03,1},
      
	{0x05, 0x4e,1},
	{0x06, 0xa6,1},
	{0x0b, 0x39,1}, 
    {0x07, 0x9d,1},
    
    {0xf0, 0x00,1},
	{0x0e, 0x00,1},
	{0x0f, 0x40,1},
	{0x10, 0x00,1},
	{0x11, 0xf4,1},
	
	{0x1d, 0x01,10}, 

};

const CAM_REG_T RG_VidFormatQvga[] = 
{ 
	{0xf0, 0x02,1},
	{0x6f, 0x01,1},
	{0xf0, 0x03,1},
      
	{0x05, 0x4e,1},
	{0x06, 0xa6,1},
	{0x0b, 0x39,1}, 
    {0x07, 0x9d,1},
    
    {0xf0, 0x00,1},
	{0x0e, 0x00,1},
	{0x0f, 0x40,1},
	{0x10, 0x00,1},
	{0x11, 0xf4,1},
	
	{0x1d, 0x01,10}, 


};

const CAM_REG_T RG_VidFormatQqvga[] = 
{ 
	{0xf0, 0x02,1},
	{0x6f, 0x04,1},

	{0xf0, 0x03,1},
      
	{0x05, 0xce,1},
	{0x06, 0xa6,1},
	{0x0b, 0x3a,1}, 
    {0x07, 0x9d,1},
	{0xf0, 0x00,1},
	{0x0e, 0x06,1},
	{0x0f, 0x30,1},
	{0x10, 0x01,1},
	{0x11, 0x18,1},
	{0x1d, 0x01,10}, 


};




typedef struct
{
// Camera information structure
    char                desc[40];	

    UINT8               snrtype;            //sensor type(RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz				
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure(SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity (TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable

    CAM_MODE_T          cammode;


    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;

    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast

    CAM_FORMAT_T        format;
    CAM_SIZE_T          npixels;
    CAM_IMAGE_T         vidbuffer;

    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure

    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence(Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence(Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
//    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information

// This 'callback' mechanism is not necessary because the encapsulation is taken
// care of by the environment
//    PSensorSetReg       snrSetRegCall;      //set reg callback
//    PSensorGetReg       snrGetRegCall;
//    PSnrIdChk           snrIdChkCall;
//    PSnrMirrorFlip      snrMirrorFlipCall;
//    PSnrContrast        snrContrastCall;
//    PSnrBrightness      snrBrightnessCall;
//    PSnrMode            snrModeCall;
//    PSnrGetEt           snrGetEt;
//    PSnrSetEt           snrSetEt;
//    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;

volatile CAM_INFO_T gSensorInfo =
{
    "BG0313",      // char desc[40];	

    0,                      // UINT8 snrtype; (rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x52,                   // UINT8 i2caddress; this is the _REAL_ slave address.  
                           //  The value written in phase 1 of a write cycle will be 0xA4
                           //  while the value just before the read will be 0xA5
    0x52,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;

    CAM_MODE_IDLE,          // cammode

    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer

    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_QVGA,           // npixels(VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer

    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
//    {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;

    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};

// ############
// Private
// ############

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
//#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)
#define PHASE2_WR_PH2   0x1000      //Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     //  Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

VOID  camera_WriteOneReg( UINT8 Addr, UINT8 Data);
VOID camera_Delay(UINT16 Wait_mS);
VOID camera_WriteReg(CAM_REG_T RegWrite);
UINT8 camera_ReadReg(UINT8 Addr);
VOID camera_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
VOID camera_InteruptHandler();
