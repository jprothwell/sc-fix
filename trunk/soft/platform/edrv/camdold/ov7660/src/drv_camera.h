// Here is where all the model specific defines should be


#include "hal_i2c.h"
#include "camera_m.h"

typedef struct
{
    UINT32 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT16 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;

// On FPGA platform, Pixel Clock must not be too fast or xfer screws up
#define CAM_CLK_CFG 0x81

const CAM_REG_T RG_InitPowerOnQvga[] = 
{
    {0x12, 80, 10},
//; Insert 5ms delay here
    {0x11, CAM_CLK_CFG, 1}, //changed by vic
    {0x92, 0x66, 3},
    {0x93, 0x00, 3},
    {0x9d, 0x98, 3},
    {0x9e, 0x7f, 3},
    {0x3b, 0x0a, 3}, //;02 for 60Hz, 0a for 50Hz 
    {0x13, 0xf2, 3},
    {0x10, 0x00, 3},
    {0x00, 0x00, 3},
    {0x01, 0x80, 100},
    {0x02, 0x80, 100},
    {0x13, 0xf7, 3},
  
    {0x12, 0x14, 3},
    {0x04, 0x00, 3},
    {0x17, 0x16, 3},
    {0x18, 0x04, 3},
    {0x32, 0x80, 3},
    {0x19, 0x02, 3},
    {0x1a, 0x7a, 3},
    {0x03, 0x0a, 3},

    {0x0e, 0x84, 3},
    {0x0f, 0x62, 3},
    {0x15, 0x02, 3},
    {0x16, 0x02, 3},
    {0x1b, 0x01, 3},
    {0x1e, 0x01, 3},
    {0x29, 0x3c, 3}, // ;20 for internal regulator
    {0x33, 0x00, 3},
    {0x34, 0x07, 3},
    {0x35, 0x84, 3},
    {0x36, 0x00, 3},
    {0x38, 0x13, 3},
    {0x39, 0x43, 3},
    {0x3a, 0x00, 3},
    {0x3c, 0x6c, 3},
    {0x3d, 0x90, 3},
    {0x3f, 0x29, 3},
    {0x40, 0xd1, 3},
    {0x41, 0x20, 3},
    {0x6b, 0x0a, 3},
    {0xa1, 0xc8, 3},

    {0x69, 0x80, 3},
    {0x43, 0xf0, 3},
    {0x44, 0x10, 3},
    {0x45, 0x78, 3},
    {0x46, 0xa8, 3},
    {0x47, 0x60, 3},
    {0x48, 0x80, 3},
    {0x59, 0xba, 3},
    {0x5a, 0x9a, 3},
    {0x5b, 0x22, 3},
    {0x5c, 0xb9, 3},
    {0x5d, 0x9b, 3},
    {0x5e, 0x10, 3},
    {0x5f, 0xe0, 3},
    {0x60, 0x85, 3}, //;05 for advanced AWB
    {0x61, 0x60, 3},
    {0x9f, 0x9d, 3},
    {0xa0, 0xa0, 3},

    {0x4f, 0xae, 3},
    {0x50, 0x26, 3},
    {0x51, 0x08, 3},
    {0x52, 0x1a, 3},
    {0x53, 0xa9, 3},
    {0x54, 0x0f, 3},
    {0x55, 0x05, 3},
    {0x56, 0x46, 3},
    {0x57, 0xcb, 3},
    {0x58, 0x77, 3},

    {0x8b, 0xcc, 3},
    {0x8c, 0xcc, 3},
    {0x8d, 0xcf, 3},

    {0x6c, 0x40, 3},
    {0x6d, 0x30, 3},
    {0x6e, 0x4b, 3},
    {0x6f, 0x60, 3},
    {0x70, 0x70, 3},
    {0x71, 0x70, 3},
    {0x72, 0x70, 3},
    {0x73, 0x70, 3},
    {0x74, 0x60, 3},
    {0x75, 0x60, 3},
    {0x76, 0x50, 3},
    {0x77, 0x48, 3},
    {0x78, 0x3a, 3},
    {0x79, 0x2e, 3},
    {0x7a, 0x28, 3},
    {0x7b, 0x22, 3},
    {0x7c, 0x04, 3},
    {0x7d, 0x07, 3},
    {0x7e, 0x10, 3},
    {0x7f, 0x28, 3},
    {0x80, 0x36, 3},
    {0x81, 0x44, 3},
    {0x82, 0x52, 3},
    {0x83, 0x60, 3},
    {0x84, 0x6c, 3},
    {0x85, 0x78, 3},
    {0x86, 0x8c, 3},
    {0x87, 0x9e, 3},
    {0x88, 0xbb, 3},
    {0x89, 0xd2, 3},
    {0x8a, 0xe6, 3},

    {0x14, 0x2e, 3},
    {0x24, 0x68, 3},
    {0x25, 0x5c, 3},

    {0x2a, 0x00, 3},
    {0x2b, 0x00, 3},
    {0x92, 0x00, 3},
    {0x93, 0x00, 3},
    {0x3b, 0x0a, 3}

};

#if 1
// use this for 640x480 (VGA) capture
const CAM_REG_T RG_InitPowerOnVga[] = 
{
    {0x12, 0x80, 10},
    {0x11, CAM_CLK_CFG, 1}, //changed by ywq 2006-10-26 14:33
    {0x92, 0x66, 1}, //changed by ywq 2006-10-27 17:39 for dummy pixel = 0 2006-12-19 17:40;
    {0x93, 0x00, 1},
    {0x9d, 0x98, 1}, //50Hz
    {0x9e, 0x7f, 1}, //60Hz
//	 {0x6a, 0xa5, 1}, //50Hz for 26M
//	 {0x9d, 0xa5, 1}, //50Hz
//	 {0x9e, 0x8a, 1}, //60Hz	
    {0x3b, 0x0a, 1}, 
    {0x13, 0xf2, 1},
    {0x10, 0x00, 1},
    {0x00, 0x00, 1}, 

    {0x01, 0x80, 100},
    {0x02, 0x80, 100}, 
	{0x13, 0xf7, 3},	
    {0x12, 0x04, 3},	 
    {0x04, 0x00, 3},
    {0x18, 0x00, 3},	 
    {0x17, 0x12, 3},
    {0x32, 0xa4, 3},
    {0x19, 0x02, 3}, 
    {0x1a, 0x7a, 3},
    {0x03, 0x00, 3},
    {0x0e, 0x84, 3},
    {0x0f, 0x62, 3}, 
    {0x15, 0x02, 3},
    {0x16, 0x02, 3},
    {0x1b, 0x01, 3},
    {0x1e, 0x01, 3},
//	 {0x29, 0x30, 3},
    {0x29, 0x3c, 3},
    {0x33, 0x00, 3},
    {0x34, 0x07, 3},
    {0x35, 0x84, 3},
    {0x36, 0x00, 3},
    {0x38, 0x13, 3},
    {0x39, 0x43, 3},
    {0x3a, 0x00, 3},
    {0x3c, 0x6c, 3},
    {0x3d, 0x90, 3},
    {0x3f, 0x29, 3},
//	 {0x3f, 0x26, 3},	//edge enhancement factor changed 2006-12-13 14:45
    {0x40, 0xd1, 3},
    {0x41, 0x20, 3},
//	 {0x41, 0x30, 3},	//edge enhancement changed 2006-12-13 14:45
    {0x6b, 0x0a, 3},
    {0xa1, 0xc8, 3},
    {0x69, 0x80, 3},
    {0x43, 0xf0, 3},
    {0x44, 0x10, 3},
    {0x45, 0x78, 3},
    {0x46, 0xa8, 3},
    {0x47, 0x60, 3},
    {0x48, 0x80, 3},
    {0x59, 0xba, 3}, 
    {0x5a, 0x9a, 3},
    {0x5b, 0x22, 3},
    {0x5c, 0xb9, 3}, 
    {0x5d, 0x9b, 3},
    {0x5e, 0x10, 3}, 
    {0x5f, 0xe0, 3},
    {0x60, 0x85, 3},	 
    {0x61, 0x60, 3},
    {0x9f, 0x9d, 3},	 
    {0xa0, 0xa0, 3},
    {0x4f, 0xae, 3},
    {0x50, 0x26, 3}, 
    {0x51, 0x08, 3},
    {0x52, 0x1a, 3},
    {0x53, 0xa9, 3},
    {0x54, 0x0f, 3}, 
    {0x55, 0x05, 3},
    {0x56, 0x46, 3},
    {0x57, 0xcb, 3},
    {0x58, 0x77, 3},
    {0x8b, 0xcc, 3},
    {0x8c, 0xcc, 3},
    {0x8d, 0xcf, 3},
    {0x6c, 0x40, 3},	//gamma
    {0x6d, 0x30, 3},
    {0x6e, 0x4b, 3},
    {0x6f, 0x60, 3},
    {0x70, 0x70, 3},
    {0x71, 0x70, 3},
    {0x72, 0x70, 1},
    {0x73, 0x70, 1},
    {0x74, 0x60, 1},
    {0x75, 0x60, 1},
    {0x76, 0x50, 1},
    {0x77, 0x48, 1},
    {0x78, 0x3a, 1},
    {0x79, 0x2e, 1},
    {0x7a, 0x28, 1},
    {0x7b, 0x22, 1},
    {0x7c, 0x04, 3},
    {0x7d, 0x07, 1},
    {0x7e, 0x10, 1},
    {0x7f, 0x28, 1},
    {0x80, 0x36, 1}, 
    {0x81, 0x44, 1},
    {0x82, 0x52, 1},
    {0x83, 0x60, 1}, 
    {0x84, 0x6c, 1},
    {0x85, 0x78, 1}, 
    {0x86, 0x8c, 1},
    {0x87, 0x9e, 1},	 
    {0x88, 0xbb, 1},
    {0x89, 0xd2, 1},	 
    {0x8a, 0xe6, 1},
	{0x14, 0x2e, 1},
    {0x24, 0x68, 1}, 
    {0x25, 0x5c, 1},
/*  {0x2a, 0x00, 1},	//2b=70 the right side has several dark columns in captured image
    {0x2b, 0x70, 3},	//changed following settings for capturing video and mirror LCD 2006-12-19 15:59
    {0x92, 0x19, 3},
    {0x6a, 0x85, 3}, 	//50Hz for 24M
    {0x9d, 0x85, 3}, 	//50Hz
    {0x9e, 0x6f, 3}, 	//60Hz
//  {0x6a, 0x91, 3}, 	//50Hz for 26M
//  {0x9d, 0x91, 3}, 	//50Hz
//  {0x9e, 0x78, 3}, 	//60Hz */
};
#endif
#if 0
// use this for 640x480 (VGA) capture
const CAM_REG_T RG_InitPowerOnVga[] = 
{
    {0x12, 0x80, 10},
    {0x11, CAM_CLK_CFG, 1}, //changed by ywq 2006-10-26 14:33
    {0x92, 0x66, 1}, //changed by ywq 2006-10-27 17:39 for dummy pixel = 0 2006-12-19 17:40;
    {0x93, 0x00, 1},
    {0x6a, 0x98, 1}, //50Hz for 24M
    {0x9d, 0x98, 1}, //50Hz
    {0x9e, 0x7e, 1}, //60Hz
//	 {0x6a, 0xa5, 1}, //50Hz for 26M
//	 {0x9d, 0xa5, 1}, //50Hz
//	 {0x9e, 0x8a, 1}, //60Hz	
    {0x3b, 0x0a, 1}, 
    {0x13, 0xf2, 1},
    {0x14, 0x26, 1},
    {0x10, 0x00, 1},
    {0x00, 0x00, 1}, 

    {0x13, 0xf5, 1}, //changed by ywq enable AWB	2006-10-9 15:03
    {0x01, 0x88, 100},
    {0x02, 0xa5, 100}, 
//	 {0x13, 0xf7, 3},	
    {0x12, 0x04, 3},	 
    {0x04, 0x00, 3},
    {0x18, 0x01, 3},	 
    {0x17, 0x13, 3},
    {0x32, 0x92, 3},
    {0x19, 0x02, 3}, 
    {0x1a, 0x7a, 3},
    {0x03, 0x00, 3},
    {0x0e, 0x04, 3},
    {0x0f, 0x62, 3}, 
    {0x15, 0x02, 3},
    {0x16, 0x02, 3},
    {0x1b, 0x01, 3},
    {0x1e, 0x01, 3},
//	 {0x29, 0x30, 3},
    {0x29, 0x20, 3},
    {0x33, 0x00, 3},
    {0x34, 0x07, 3},
    {0x35, 0x84, 3},
    {0x36, 0x00, 3},
    {0x38, 0x13, 3},
    {0x39, 0x43, 3},
    {0x3a, 0x00, 3},
    {0x3c, 0x6c, 3},
    {0x3d, 0x90, 3},
    {0x3f, 0x29, 3},
//	 {0x3f, 0x26, 3},	//edge enhancement factor changed 2006-12-13 14:45
    {0x40, 0xd1, 3},
    {0x41, 0x20, 3},
//	 {0x41, 0x30, 3},	//edge enhancement changed 2006-12-13 14:45
    {0x6b, 0x0a, 3},
    {0xa1, 0xc8, 3},
    {0x69, 0x80, 3},
    {0x43, 0xf0, 3},
    {0x44, 0x10, 3},
    {0x45, 0x78, 3},
    {0x46, 0xa8, 3},
    {0x47, 0x60, 3},
    {0x48, 0x80, 3},
    {0x59, 0xba, 3}, 
    {0x5a, 0x9a, 3},
    {0x5b, 0x22, 3},
    {0x5c, 0xb9, 3}, 
    {0x5d, 0x9b, 3},
    {0x5e, 0x10, 3}, 
    {0x5f, 0xe0, 3},
    {0x60, 0x85, 3},	 
    {0x61, 0x60, 3},
    {0x9f, 0x9d, 3},	 
    {0xa0, 0xa0, 3},
    {0x4f, 0x66, 3},
    {0x50, 0x6b, 3}, 
    {0x51, 0x05, 3},
    {0x52, 0x19, 3},
    {0x53, 0x40, 3},
    {0x54, 0x59, 3}, 
    {0x55, 0x40, 3},
    {0x56, 0x40, 3},
    {0x57, 0x40, 3},
    {0x58, 0x0d, 3},
    {0x8b, 0xcc, 3},
    {0x8c, 0xcc, 3},
    {0x8d, 0xcf, 3},
    {0x6c, 0x40, 3},	//gamma
    {0x6d, 0x30, 3},
    {0x6e, 0x4b, 3},
    {0x6f, 0x60, 3},
    {0x70, 0x70, 3},
    {0x71, 0x70, 3},
    {0x72, 0x70, 1},
    {0x73, 0x70, 1},
    {0x74, 0x60, 1},
    {0x75, 0x60, 1},
    {0x76, 0x50, 1},
    {0x77, 0x48, 1},
    {0x78, 0x3a, 1},
    {0x79, 0x2e, 1},
    {0x7a, 0x28, 1},
    {0x7b, 0x22, 1},
    {0x7c, 0x04, 3},
    {0x7d, 0x07, 1},
    {0x7e, 0x10, 1},
    {0x7f, 0x28, 1},
    {0x80, 0x36, 1}, 
    {0x81, 0x44, 1},
    {0x82, 0x52, 1},
    {0x83, 0x60, 1}, 
    {0x84, 0x6c, 1},
    {0x85, 0x78, 1}, 
    {0x86, 0x8c, 1},
    {0x87, 0x9e, 1},	 
    {0x88, 0xbb, 1},
    {0x89, 0xd2, 1},	 
    {0x8a, 0xe6, 1},
//	 {0x14, 0x2e, 1},
    {0x24, 0x78, 1}, 
    {0x25, 0x68, 1},
/*  {0x2a, 0x00, 1},	//2b=70 the right side has several dark columns in captured image
    {0x2b, 0x70, 3},	//changed following settings for capturing video and mirror LCD 2006-12-19 15:59
    {0x92, 0x19, 3},
    {0x6a, 0x85, 3}, 	//50Hz for 24M
    {0x9d, 0x85, 3}, 	//50Hz
    {0x9e, 0x6f, 3}, 	//60Hz
//  {0x6a, 0x91, 3}, 	//50Hz for 26M
//  {0x9d, 0x91, 3}, 	//50Hz
//  {0x9e, 0x78, 3}, 	//60Hz
*/  {0x13, 0xf7, 1}
};
#endif

// use this for 160x120 (QQVGA) capture
const CAM_REG_T RG_InitPowerOnQqvga[] = 
{
    {0x12, 0x80, 10},                       // SCCB Reset
    {0x11, CAM_CLK_CFG, 1}, //changed by ywq 2006-10-26 14:33
    {0x92, 0x66, 1}, //changed by ywq 2006-10-27 17:39 for dummy pixel = 0 2006-12-19 17:40;
    {0x93, 0x00, 1},
    {0x6a, 0x98, 1}, //50Hz for 24M
    {0x9d, 0x98, 1}, //50Hz
    {0x9e, 0x7e, 1}, //60Hz
//	 {0x6a, 0xa5, 1}, //50Hz for 26M
//	 {0x9d, 0xa5, 1}, //50Hz
//	 {0x9e, 0x8a, 1}, //60Hz	
    {0x3b, 0x0a, 1},                // Night Mode
    {0x13, 0xf2, 1},
    {0x14, 0x26, 1},
    {0x10, 0x00, 1},                // Exposure
    {0x00, 0x00, 1},                // AGC Gain

    {0x13, 0xf5, 1}, //changed by ywq enable AWB	2006-10-9 15:03
    {0x01, 0x88, 100},
    {0x02, 0xa5, 100}, 
//	 {0x13, 0xf7, 3},	
    {0x12, 0x04, 3},	                    // Output Format
    {0x04, 0x00, 3},                        // More Output Format
    {0x18, 0x01, 3},	            // HSTOP
    {0x17, 0x13, 3},                // HSTART
    {0x32, 0x92, 3},                // HREF
    {0x19, 0x02, 3},                // VSTART
    {0x1a, 0x7a, 3},                // VSTOP
    {0x03, 0x00, 3},                // VREF
    {0x0e, 0x84, 3},
    {0x0f, 0x62, 3}, 
    {0x15, 0x02, 3},
    {0x16, 0x02, 3},
    {0x1b, 0x01, 3},                // Pixel Delay
    {0x1e, 0x01, 3},                // Mirror/Flip
//	 {0x29, 0x30, 3},
    {0x29, 0x20, 3},
    {0x33, 0x00, 3},
    {0x34, 0x07, 3},
    {0x35, 0x84, 3},
    {0x36, 0x00, 3},
    {0x38, 0x13, 3},
    {0x39, 0x43, 3},
    {0x3a, 0x00, 3},
    {0x3c, 0x6c, 3},
    {0x3d, 0x90, 3},
    {0x3f, 0x29, 3},
//	 {0x3f, 0x26, 3},	//edge enhancement factor changed 2006-12-13 14:45
    {0x40, 0xd1, 3},                        // Data Format
    {0x41, 0x20, 3},
//	 {0x41, 0x30, 3},	//edge enhancement changed 2006-12-13 14:45
    {0x6b, 0x0a, 3},
    {0xa1, 0xc8, 3},
    {0x69, 0x80, 3},
    {0x43, 0xf0, 3},
    {0x44, 0x10, 3},
    {0x45, 0x78, 3},
    {0x46, 0xa8, 3},
    {0x47, 0x60, 3},
    {0x48, 0x80, 3},
    {0x59, 0xba, 3}, 
    {0x5a, 0x9a, 3},
    {0x5b, 0x22, 3},
    {0x5c, 0xb9, 3}, 
    {0x5d, 0x9b, 3},
    {0x5e, 0x10, 3}, 
    {0x5f, 0xe0, 3},
    {0x60, 0x85, 3},	 
    {0x61, 0x60, 3},
    {0x9f, 0x9d, 3},	 
    {0xa0, 0xa0, 3},
    {0x4f, 0x66, 3},
    {0x50, 0x6b, 3}, 
    {0x51, 0x05, 3},
    {0x52, 0x19, 3},
    {0x53, 0x40, 3},
    {0x54, 0x59, 3}, 
    {0x55, 0x40, 3},
    {0x56, 0x40, 3},
    {0x57, 0x40, 3},
    {0x58, 0x0d, 3},
    {0x8b, 0xcc, 3},
    {0x8c, 0xcc, 3},
    {0x8d, 0xcf, 3},
    {0x6c, 0x40, 3},	//gamma
    {0x6d, 0x30, 3},
    {0x6e, 0x4b, 3},
    {0x6f, 0x60, 3},
    {0x70, 0x70, 3},
    {0x71, 0x70, 3},
    {0x72, 0x70, 1},
    {0x73, 0x70, 1},
    {0x74, 0x60, 1},
    {0x75, 0x60, 1},
    {0x76, 0x50, 1},
    {0x77, 0x48, 1},
    {0x78, 0x3a, 1},
    {0x79, 0x2e, 1},
    {0x7a, 0x28, 1},
    {0x7b, 0x22, 1},
    {0x7c, 0x04, 3},
    {0x7d, 0x07, 1},
    {0x7e, 0x10, 1},
    {0x7f, 0x28, 1},
    {0x80, 0x36, 1}, 
    {0x81, 0x44, 1},
    {0x82, 0x52, 1},
    {0x83, 0x60, 1}, 
    {0x84, 0x6c, 1},
    {0x85, 0x78, 1}, 
    {0x86, 0x8c, 1},
    {0x87, 0x9e, 1},	 
    {0x88, 0xbb, 1},
    {0x89, 0xd2, 1},	 
    {0x8a, 0xe6, 1},
//	 {0x14, 0x2e, 1},
    {0x24, 0x78, 1}, 
    {0x25, 0x68, 1},
/*  {0x2a, 0x00, 1},	//2b=70 the right side has several dark columns in captured image
    {0x2b, 0x70, 3},	//changed following settings for capturing video and mirror LCD 2006-12-19 15:59
    {0x92, 0x19, 3},
    {0x6a, 0x85, 3}, 	//50Hz for 24M
    {0x9d, 0x85, 3}, 	//50Hz
    {0x9e, 0x6f, 3}, 	//60Hz
//  {0x6a, 0x91, 3}, 	//50Hz for 26M
//  {0x9d, 0x91, 3}, 	//50Hz
//  {0x9e, 0x78, 3}, 	//60Hz
*/  {0x13, 0xf7, 1}                 // WEIRD!!!
};

const CAM_REG_T RG_VidFormatVga[] = 
{
    {0x12, 0x04, 3},	                    // Output Format
    {0x04, 0x00, 3},                        // More Output Format
    {0x40, 0xd1, 3},                        // Data Format
};

const CAM_REG_T RG_VidFormatQvga[] = 
{
    {0x12, 0x14, 3},	                    // Output Format
    {0x04, 0x00, 3},                        // More Output Format
    {0x40, 0xd1, 3},                        // Data Format
};

const CAM_REG_T RG_VidFormatQqvga[] = 
{
    {0x12, 0x14, 3},	                    // Output Format
    {0x04, 0x24, 3},                        // More Output Format
    {0x40, 0xd1, 3},                        // Data Format
};

typedef struct
{
// Camera information structure
    char                desc[40];	

    UINT8               snrtype;            //sensor type(RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz				
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure(SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity (TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable

    CAM_MODE_T          cammode;


    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;

    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast

    CAM_FORMAT_T        format;
    CAM_SIZE_T          npixels;
    CAM_IMAGE_T         vidbuffer;

    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure

    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence(Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence(Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
//    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information

// This 'callback' mechanism is not necessary because the encapsulation is taken
// care of by the environment
//    PSensorSetReg       snrSetRegCall;      //set reg callback
//    PSensorGetReg       snrGetRegCall;
//    PSnrIdChk           snrIdChkCall;
//    PSnrMirrorFlip      snrMirrorFlipCall;
//    PSnrContrast        snrContrastCall;
//    PSnrBrightness      snrBrightnessCall;
//    PSnrMode            snrModeCall;
//    PSnrGetEt           snrGetEt;
//    PSnrSetEt           snrSetEt;
//    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;

volatile CAM_INFO_T gSensorInfo =
{
    "OV7660 RGB Mode",      // char desc[40];	

    0,                      // UINT8 snrtype; (rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x21,                   // UINT8 i2caddress; this is the _REAL_ slave address.  
                            //  The value written in phase 1 of a write cycle will be 0x42
                            //  while the value just before the read will be 0x43
    0x21,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;

    CAM_MODE_IDLE,          // cammode

    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer

    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_VGA,           // npixels(VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer

    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
//    {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;

    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};

// ############
// Private
// ############

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

VOID camera_Delay(UINT16 Wait_mS);
VOID camera_WriteReg(CAM_REG_T RegWrite);
UINT8 camera_ReadReg(UINT8 Addr);
VOID camera_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
VOID camera_InteruptHandler();
