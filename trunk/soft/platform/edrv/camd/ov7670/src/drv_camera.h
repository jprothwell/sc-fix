// Here is where all the model specific defines should be


#include "hal_i2c.h"
#include "camd_m.h"

/// Time to wait after sending commands to be allowed 
/// to take picture and use the camera (milliseconds) 
#define CAMD_CMD_SETTLE_TIME    (200)

// When the following is defined, we can adjust the skip
// value by using the Scratch register
#ifdef CAMD_TEST_ADJUST_SKIP_VAL
#define CAMD_DROP_NB    ((*((volatile UINT32*) 0xA0B80000)) & (0xFF))
#else
#define CAMD_DROP_NB    3
#endif

typedef struct
{
    UINT32 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT16 Wait;            // Time to wait after write
} CAMD_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAMD_REG_T *RegVal;      // Array of registers
} CAMD_REG_GROUP_T;

typedef enum
{
    CAMD_MODE_IDLE,
    CAMD_MODE_PREP_IMG_CAPTURE,
    CAMD_MODE_IMG_CAPTURE,
    CAMD_MODE_STREAM_CAPTURE
} CAMD_MODE_T;


// use this for 320x240 (VGA) capture
const CAMD_REG_T RG_InitPowerOnQvga[] = 
{
    {0x12,0x80,10}, // Reset all registers to default
    {0x11,0x00, 1}, 

    {0x3a,0x04,1},  // Select YUYV output sequence
    {0x12,0x04,1},
    {0x40,0xd0,1},  // Output RGB 565 from 0 to FF
    {0x32,0x80,1},  // HREF Edge offset set to 2    
    {0x17,0x16,1},  // HSTART Hi
    {0x18,0x04,1},  // HSTOP Hi
    {0x19,0x02,1},  // VSTART Hi
    {0x1a,0x7a,1},  // VSTOP Hi
    {0x03,0x0a,1},  // VREF start/end Lo
    {0x0c,0x04,1},      
    
    
    {0x3e,0x19,1},      
    {0x70,0x3a,1},      
    {0x71,0x35,1},      
    {0x72,0x11,1},      
    {0x73,0xf1,1},      
    {0xa2,0x02,1},  
    
    {0x7a, 0x19,1}, 
    {0x7b, 0x0c,1},
    {0x7c, 0x18,1},
    {0x7d, 0x2f,1},
    {0x7e, 0x54,1},
    {0x7f, 0x64,1},
    {0x80, 0x71,1},
    {0x81, 0x7d,1},
    {0x82, 0x88,1},
    {0x83, 0x91,1},
    {0x84, 0x98,1},
    {0x85, 0xa7,1},
    {0x86, 0xb4,1},
    {0x87, 0xcb,1},
    {0x88, 0xde,1},
    {0x89, 0xed,1},
    
    {0x13,0xe0,1},      
    {0x00,0x00,1},      
    {0x10,0x00,1},      
    {0x0d,0x40,1},      
    {0x14,0x38,1},      
    {0xa5,0x05,1},      
    {0xab,0x07,1},      
    {0x24,0x95,1},      
    {0x25,0x33,1},      
    {0x26,0xe3,1},      
    {0x9f,0x78,1},      
    {0xa0,0x68,1},      
    {0xa1,0x03,1},      
    {0xa6,0xd8,1},      
    {0xa7,0xd8,1},      
    {0xa8,0xf0,1},      
    {0xa9,0x90,1},      
    {0xaa,0x94,1},      
    {0x13,0xe5,1},      
    {0x0e,0x61,1},      
    {0x0f,0x4b,1},      
    {0x16,0x02,1},      
    {0x1e,0x07,1},      
    {0x21,0x02,1},      
    {0x22,0x91,1},      
    {0x29,0x07,1},      
    {0x33,0x0b,1},      
    {0x35,0x0b,1},      
    {0x37,0x1d,1},      
    {0x38,0x71,1},      
    {0x39,0x2a,1},      
    {0x3c,0x78,1},      
    {0x4d,0x40,1},      
    {0x4e,0x20,1},      
    {0x69,0x00,1},      
    {0x6b,0x0a,1},      
    {0x74,0x19,1},      
    {0x8d,0x4f,1},      
    {0x8e,0x00,1},      
    {0x8f,0x00,1},      
    {0x90,0x00,1},      
    {0x91,0x00,1},      
    {0x96,0x00,1},      
    {0x9a,0x80,1},      
    {0xb0,0x84,1},      
    {0xb1,0x0c,1},      
    {0xb2,0x0e,1},      
    {0xb3,0x82,1},      
    {0xb8,0x0a,1},      
    {0x43,0x14,1},      
    {0x44,0xf0,1},      
    {0x45,0x34,1},      
    {0x46,0x58,1},      
    {0x47,0x28,1},      
    {0x48,0x3a,1},      
    {0x59,0x88,1},      
    {0x5a,0x88,1},      
    {0x5b,0x44,1},      
    {0x5c,0x67,1},      
    {0x5d,0x49,1},      
    {0x5e,0x0e,1},      
    {0x6c,0x0a,1},      
    {0x6d,0x55,1},      
    {0x6e,0x11,1},      
    {0x6f,0x9f,1},      
    {0x6a,0x40,1},      
    {0x01,0x40,1},      
    {0x02,0x40,1},      
    {0x13,0xe7,1},      
    {0x4f,0x80,1},      
    {0x50,0x80,1},      
    {0x51,0x00,1},      
    {0x52,0x22,1},      
    {0x53,0x5e,1},      
    {0x54,0x80,1},      
    {0x58,0x9e,1},      
    {0x41,0x08,1},      
    {0x3f,0x00,1},      
    {0x75,0x05,1},      
    {0x76,0xe1,1},      
    {0x4c,0x00,1},      
    {0x77,0x01,1},      
    {0x3d,0xc0,1},      
    {0x4b,0x09,1},       
    {0xc9,0x60,1},

    {0x41,0x38,1},   
    {0x56,0x40,1},   
    {0x34,0x11,1},   
    //{0x3b,0x02,1},  
    {0x3b,0x0a,1},
    {0xa4,0x88,1},   
    {0x96,0x00,1},   
    {0x97,0x30,1},   
    {0x98,0x20,1},   
    {0x99,0x30,1},   
    {0x9a,0x84,1},   
    {0x9b,0x29,1},   
    {0x9c,0x03,1},   
    {0x9d,0x4c,1},   
    {0x9e,0x3f,1},   
    {0x78,0x04,1},   
    {0x79,0x01,1},   
    {0xc8,0xf0,1},   
    {0x79,0x0f,1},   
    {0xc8,0x00,1},   
    {0x79,0x10,1},   
    {0xc8,0x7e,1},   
    {0x79,0x0a,1},   
    {0xc8,0x80,1},   
    {0x79,0x0b,1},   
    {0xc8,0x01,1},   
    {0x79,0x0c,1},   
    {0xc8,0x0f,1},   
    {0x79,0x0d,1},   
    {0xc8,0x20,1},   
    {0x79,0x09,1},   
    {0xc8,0x80,1},   
    {0x79,0x02,1},   
    {0xc8,0xc0,1},   
    {0x79,0x03,1},   
    {0xc8,0x40,1},   
    {0x79,0x05,1},   
    {0xc8,0x30,1},   
    {0x79,0x26,10},   

//    {0x11,0x00,1},    
    {0x6b,0x0a,1},
    {0x92,0x10,1},
    {0x93,0x00,1},
    {0x2a,0x00,1},
    {0x2b,0x00,1},

    {0x9d,0x47,1},
    {0x9e,0x3B,1},

    {0xa5,0x06,1},
    {0xab,0x07,CAMD_CMD_SETTLE_TIME},

};

// use this for 640x480 (VGA) capture
const CAMD_REG_T RG_InitPowerOnVga[] = 
{
       
    {0x12,0x80,10},
    {0x11,0x01,1},  //frame rate
                    
    {0x3a,0x04,1},
    {0x12,0x04,1},
    {0x40,0xd0,1},      
    {0x17,0x13,1},      
    {0x18,0x01,1},      
    {0x32,0xb6,1},      
    {0x19,0x02,1},      
    {0x1a,0x7a,1},      
    {0x03,0x0a,1},      
    {0x0c,0x00,1},  
    
    
    {0x3e,0x00,1},      
    {0x70,0x3a,1},     
    {0x71,0x35,1},      
    {0x72,0x11,1},      
    {0x73,0xf0,1},      
    {0xa2,0x02,1},    
    
    {0x7a, 0x19,1}, 
    {0x7b, 0x0c,1},
    {0x7c, 0x18,1},
    {0x7d, 0x2f,1},
    {0x7e, 0x54,1},
    {0x7f, 0x64,1},
    {0x80, 0x71,1},
    {0x81, 0x7d,1},
    {0x82, 0x88,1},
    {0x83, 0x91,1},
    {0x84, 0x98,1},
    {0x85, 0xa7,1},
    {0x86, 0xb4,1},
    {0x87, 0xcb,1},
    {0x88, 0xde,1},
    {0x89, 0xed,1},
    
    {0x13,0xe0,1},      
    {0x00,0x00,1},      
    {0x10,0x00,1},      
    {0x0d,0x40,1},      
    {0x14,0x38,1},      
    {0xa5,0x05,1},      
    {0xab,0x07,1},      
    {0x24,0x95,1},      
    {0x25,0x33,1},      
    {0x26,0xe3,1},      
    {0x9f,0x78,1},      
    {0xa0,0x68,1},      
    {0xa1,0x03,1},      
    {0xa6,0xd8,1},      
    {0xa7,0xd8,1},      
    {0xa8,0xf0,1},      
    {0xa9,0x90,1},      
    {0xaa,0x94,1},      
    {0x13,0xe5,1},      
    {0x0e,0x61,1},      
    {0x0f,0x4b,1},      
    {0x16,0x02,1},      
    {0x1e,0x07,1},      
    {0x21,0x02,1},      
    {0x22,0x91,1},      
    {0x29,0x07,1},      
    {0x33,0x0b,1},      
    {0x35,0x0b,1},      
    {0x37,0x1d,1},      
    {0x38,0x71,1},      
    {0x39,0x2a,1},      
    {0x3c,0x78,1},      
    {0x4d,0x40,1},      
    {0x4e,0x20,1},      
    {0x69,0x00,1},      
    {0x6b,0x0a,1},      
    {0x74,0x19,1},      
    {0x8d,0x4f,1},      
    {0x8e,0x00,1},      
    {0x8f,0x00,1},      
    {0x90,0x00,1},      
    {0x91,0x00,1},      
    {0x96,0x00,1},      
    {0x9a,0x80,1},      
    {0xb0,0x84,1},      
    {0xb1,0x0c,1},      
    {0xb2,0x0e,1},      
    {0xb3,0x82,1},      
    {0xb8,0x0a,1},      
    {0x43,0x14,1},      
    {0x44,0xf0,1},      
    {0x45,0x34,1},      
    {0x46,0x58,1},      
    {0x47,0x28,1},      
    {0x48,0x3a,1},      
    {0x59,0x88,1},      
    {0x5a,0x88,1},      
    {0x5b,0x44,1},      
    {0x5c,0x67,1},      
    {0x5d,0x49,1},      
    {0x5e,0x0e,1},      
    {0x6c,0x0a,1},      
    {0x6d,0x55,1},      
    {0x6e,0x11,1},      
    {0x6f,0x9f,1},     
    {0x6a,0x40,1},      
    {0x01,0x40,1},      
    {0x02,0x40,1},      
    {0x13,0xe7,1},      
    {0x4f,0x80,1},      
    {0x50,0x80,1},      
    {0x51,0x00,1},      
    {0x52,0x22,1},      
    {0x53,0x5e,1},      
    {0x54,0x80,1},      
    {0x58,0x9e,1},      
    {0x41,0x08,1},      
    {0x3f,0x00,1},  
    
    {0x75,0x05,1},   
    
    {0x76,0xe1,1},      
    {0x4c,0x00,1},      
    {0x77,0x01,1},      
    {0x3d,0xc0,1},      
    {0x4b,0x09,1},      
    {0xc9,0x60,1},

    {0x41,0x38,1},   
    {0x56,0x40,1},   
    {0x34,0x11,1},   
    
    {0x3b,0x0a,1},
    {0xa4,0x88,1},   
    {0x96,0x00,1},   
    {0x97,0x30,1},   
    {0x98,0x20,1},   
    {0x99,0x30,1},   
    {0x9a,0x84,1},   
    {0x9b,0x29,1},   
    {0x9c,0x03,1},   
    {0x9d,0x4c,1},   
    {0x9e,0x3f,1},   
    {0x78,0x04,1},   
    {0x79,0x01,1},   
    {0xc8,0xf0,1},   
    {0x79,0x0f,1},   
    {0xc8,0x00,1},   
    {0x79,0x10,1},   
    {0xc8,0x7e,1},   
    {0x79,0x0a,1},   
    {0xc8,0x80,1},   
    {0x79,0x0b,1},   
    {0xc8,0x01,1},   
    {0x79,0x0c,1},   
    {0xc8,0x0f,1},   
    {0x79,0x0d,1},   
    {0xc8,0x20,1},   
    {0x79,0x09,1},   
    {0xc8,0x80,1},   
    {0x79,0x02,1},   
    {0xc8,0xc0,1},   
    {0x79,0x03,1},   
    {0xc8,0x40,1},   
    {0x79,0x05,1},   
    {0xc8,0x30,1},   
    {0x79,0x26,CAMD_CMD_SETTLE_TIME},  
    
};

// use this for 176x144  (QQVGA) capture
const CAMD_REG_T RG_InitPowerOnQqvga[] = 
{
    {0x12, 0x80,10},
    {0x11, 0x01,1},  //frame rate

    {0x3a, 0x0c,1},
    {0x12, 0x14,1},
	{0x40, 0xd0,1},        
    {0x17, 0x1a,1},
    {0x18, 0x08,1},
    {0x32, 0xe2,1},
    {0x19, 0x03,1},
    {0x1a ,0x7b,1},
    {0x03, 0x0d,1},
    {0x0c, 0x04,1}, // Scale Enable

       
    {0x3e, 0x1a,1},
    {0x70, 0x3a,1},
    {0x71, 0x35,1},
    {0x72 ,0x22,1},     
    {0x73, 0xf2,1},
    {0xa2 ,0x02,1},

    {0x7a, 0x19,1}, 
    {0x7b, 0x0c,1},
    {0x7c, 0x18,1},
    {0x7d, 0x2f,1},
    {0x7e, 0x54,1},
    {0x7f, 0x64,1},
    {0x80, 0x71,1},
    {0x81, 0x7d,1},
    {0x82 ,0x88,1},
    {0x83, 0x91,1},
    {0x84, 0x98,1},
    {0x85, 0xa7,1},
    {0x86, 0xb4,1},
    {0x87, 0xcb,1},
    {0x88, 0xde,1},
    {0x89, 0xed,1},

    {0x13, 0xe0,1},
    {0x00, 0x00,1},
    {0x10, 0x00,1},
    {0x0d, 0x40,1},
    {0x14, 0x38,1},
    {0xa5, 0x05,1},
    {0xab, 0x07,1},
    {0x24, 0x95,1},
    {0x25, 0x33,1},
    {0x26, 0xe3,1},
    {0x9f, 0x78,1},
    {0xa0, 0x68,1},
    {0xa1, 0x03,1},
    {0xa6, 0xd8,1},
    {0xa7, 0xd8,1},
    {0xa8, 0xf0,1},
    {0xa9, 0x90,1},
    {0xaa, 0x94,1},
    {0x13, 0xe5,1},
    {0x0e, 0x61,1},
    {0x0f, 0x4b,1},
    {0x16, 0x02,1},
    {0x1e, 0x07,1},
    {0x21, 0x02,1},
    {0x22, 0x91,1},
    {0x29, 0x07,1},
    {0x33, 0x0b,1},
    {0x35, 0x0b,1},
    {0x37, 0x1d,1},
    {0x38, 0x71,1},
    {0x39, 0x2a,1},
    {0x3c, 0x78,1},
    {0x4d, 0x40,1},
    {0x4e, 0x20,1},
    {0x69, 0x00,1},
    {0x6b, 0x0a,1},
    {0x74, 0x19,1},
    {0x8d, 0x4f,1},
    {0x8e ,0x00,1},
    {0x8f ,0x00,1},
    {0x90, 0x00,1},
    {0x91, 0x00,1},
    {0x96 ,0x00,1},
    {0x9a ,0x80,1},
    {0xb0 ,0x84,1},
    {0xb1 ,0x0c,1},
    {0xb2 ,0x0e,1},
    {0xb3 ,0x82,1},
    {0xb8 ,0x0a,1},
    {0x43, 0x14,1},
    {0x44, 0xf0,1},
    {0x45, 0x34,1},
    {0x46, 0x58,1},
    {0x47, 0x28,1},
    {0x48, 0x3a,1},
    {0x59, 0x88,1},
    {0x5a, 0x88,1},
    {0x5b, 0x44,1},
    {0x5c, 0x67,1},
    {0x5d, 0x49,1},
    {0x5e, 0x0e,1},  
    {0x6c, 0x0a,1},
    {0x6d, 0x55,1},
    {0x6e, 0x11,1},
    {0x6f, 0x9f,1},
    {0x6a, 0x40,1},
    {0x01, 0x40,1},
    {0x02, 0x40,1},
    {0x13, 0xe7,1},
    {0x4f, 0x80,1},
    {0x50, 0x80,1},
    {0x51, 0x00,1},
    {0x52, 0x22,1},
    {0x53, 0x5e,1},
    {0x54, 0x80,1},
    {0x58, 0x9e,1},
    {0x41, 0x08,1},
    {0x3f, 0x00,1},
    {0x75, 0x05,1},
    {0x76, 0xe1,1},
    {0x4c, 0x00,1},
    {0x77, 0x01,1},
    {0x3d, 0xc0,1},         
    {0x4b, 0x09,1},
    {0xc9, 0x60,1},
 
    {0x41, 0x38,1},
    {0x56, 0x40,1},
    {0x34, 0x11,1},

    {0x3b, 0x0a,1},
    {0xa4, 0x88,1},
    {0x96, 0x00,1},
    {0x97 ,0x30,1},
    {0x98 ,0x20,1},
    {0x99, 0x30,1},
    {0x9a, 0x84,1},
    {0x9b, 0x29,1},
    {0x9c, 0x03,1},
    {0x9d, 0x4c,1},
    {0x9e, 0x3f,1},
    {0x78, 0x04,1},
    {0x79, 0x01,1},
    {0xc8, 0xf0,1},
    {0x79, 0x0f,1},
    {0xc8, 0x00,1},
    {0x79, 0x10,1},
    {0xc8, 0x7e,1},
    {0x79, 0x0a,1},
    {0xc8, 0x80,1},
    {0x79, 0x0b,1},
    {0xc8, 0x01,1},
    {0x79, 0x0c,1},
    {0xc8, 0x0f,1},
    {0x79, 0x0d,1},
    {0xc8, 0x20,1},
    {0x79, 0x09,1},
    {0xc8, 0x80,1},
    {0x79, 0x02,1},
    {0xc8, 0xc0,1},
    {0x79, 0x03,1},
    {0xc8, 0x40,1},
    {0x79, 0x05,1},
    {0xc8, 0x30,1},
    {0x79, 0x26,10},     

    {0x92,0x10,1},
    {0x93,0x00,1},
    {0x2a,0x00,1},
    {0x2b,0x00,1},

    {0x9d,0x47,1},
    {0x9e,0x3B,1},

    {0xa5,0x06,1},
    {0xab,0x07,1},

    {0x3e, 0x1a,1}, // Pclk divider.
// Scaling -- >
    {0x70, 0x3a,1},
    {0x71, 0x35,1},
    {0x72 ,0x22,1},     
    {0x73, 0xf2,CAMD_CMD_SETTLE_TIME},
// <-- Scaling

};


const CAMD_REG_T RG_VidFormatVga[] = 
{
        
#ifdef FPGA
    {0x15, 0x00, 1}, // OK
#else
    {0x15, 0x20, 1}, // OK
#endif /* FPGA */
    // Output Format VGA
    {0x12,0x04,1},
    // Clock Setting
    {0x11,0x01,1},  //frame rate
    {0x6b,0x0a,1},
    // HREF Setup
    {0x17,0x14,1},      
    {0x18,0x02,1},      
    {0x32,0xa4,1},         
    //{0x32,0xae,1},         
    // VREF Setup
    {0x19,0x03,1},      
    {0x1a,0x7b,1},      
    {0x03,0x0f,1},      
    // DCW Disabled - DCW SCALE
    {0x72,0x11,1},      
    {0x0c,0x00,1},      
    // PCLK DIV not enabled
    {0x73,0xf1,1},  
    {0x3e,0x00,1},      
    // H SCALE
    {0x70,0x3a,1},     
    // V SCALE
    {0x71,0x35,CAMD_CMD_SETTLE_TIME},      
};

const CAMD_REG_T RG_VidFormatQvga[] = 
{
#ifdef FPGA
    {0x15, 0x00, 1}, // OK
#else
    {0x15, 0x20, 1}, // OK
#endif /* FPGA */
    // Output Format QVGA
    {0x12,0x14,1},
    // Clock Setting
    {0x11,0x00,1},      
    {0x6b,0x0a,1},
   // HREF Setup
    {0x17,0x15,1},      
    {0x18,0x3,1},      
    {0x32,0xb6,1},         
    //{0x32,0xae,1},         
    // VREF Setup
    {0x19,0x03,1},      
    {0x1a,0x7b,1},      
    {0x03,0x0f,1},  
    // DCW Enabled - DCW SCALE
    {0x72,0x11,1},      
    //{0x0c,0x04,1},      
    {0x0c,0x00,1},      
    // PCLK DIV enabled
    {0x73,0xf1,1},  
    //{0x3e,0x19,1},      
    {0x3e,0x00,1},      
    // H SCALE
    {0x70,0x3a,1},      
    // V SCALE
    {0x71,0x35,CAMD_CMD_SETTLE_TIME},      
};

const CAMD_REG_T RG_VidFormatQqvga[] = 
{
#ifdef FPGA
    {0x15, 0x00, 1}, // OK
#else
    {0x15, 0x20, 1}, // OK
#endif /* FPGA */
    // Output Format QQVGA
    {0x12, 0x14, 1}, // FIXME (Cannot do less than QVGA)
    // Clock Setting
    {0x11, 0x01, 1}, // FIXME Internal clock prescalar
    {0x6b, 0x0a, 1}, //0x0a
    // HREF Setup
    {0x17, 0x1a, 1}, 
    {0x18, 0x08, 1}, 
    {0x32, 0xe2, 1}, 
    // VREF Setup
    {0x19, 0x03, 1}, // OK
    {0x1a, 0x7b, 1}, // OK
    {0x03, 0x0d, 1}, // OK
    // DCW Enabled - DCW SCALE
    {0x72, 0x22, 1}, // OK
    {0x0c, 0x04, 1}, // OK
// {0x0c, 0x0c, 1}, 
    // PCLK DIV enabled
    {0x73, 0xf2, 1}, // OK ?
    {0x3e, 0x1a, 1}, // OK ?
    // H SCALE
    {0x70, 0x3a, 1}, // OK
    // V SCALE
    {0x71, 0x35, CAMD_CMD_SETTLE_TIME}, //OK
};


// ############
// Private
// ############

// Camera information structure.
// Stores global values.
typedef struct
{
    char                desc[40];    

    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz                
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               ifcChan;
    UINT8               frameDoneMbx;       //Mailbox to send Frame done message
    CAMD_MODE_T         camdMode;
    UINT16*             imgBuffer;
    UINT32              nPixels;
    BOOL                streaming;
    BOOL                skipOddFrames;
    UINT8               camdDrop;
    UINT32              bufferSize;         // Size of the streaming buffer
    // Offset from the buffer start, in bytes.
    UINT32              bufferOffset;
} CAMD_INFO_T;

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data


// =============================================================================
// camd_SetFlash
// -----------------------------------------------------------------------------
/// Configure the camera flash light.
///
/// @param flash Flash configuration to apply.
// =============================================================================
PRIVATE VOID camd_SetFlash(CAMD_PARAM_FLASH_T flash);

PRIVATE VOID camd_SetContrast(CAMD_PARAM_CONTRAST_T Contrast);
PRIVATE VOID camd_SetBrightness(CAMD_PARAM_BRIGHTNESS_T Brightness);
PRIVATE VOID camd_SetExposure(CAMD_PARAM_EXPOSURE_T Exposure);
PRIVATE VOID camd_SetWhiteBalance(CAMD_PARAM_WHITE_BALANCE_T WhiteBalance);
PRIVATE VOID camd_SetSpecialEffect(CAMD_PARAM_SPECIAL_EFFECT_T SpecialEffect);
PRIVATE VOID camd_EnableNightMode(UINT16 NightMode);
PRIVATE VOID camd_SetResolution(CAMD_PARAM_RESOLUTION_T Resolution);
/*PRIVATE */VOID camd_SetFrameRate(UINT16 FrameRate);
PRIVATE VOID camd_WriteOneReg(UINT8 Addr, UINT8 Data);


// =============================================================================
// camd_SendRgSeq
// =============================================================================
PRIVATE VOID camd_SendRgSeq(const CAMD_REG_T *RegList, UINT16 Len);

// =============================================================================
// camd_WriteReg
// -----------------------------------------------------------------------------
// =============================================================================
VOID camd_WriteReg(CAMD_REG_T RegWrite);

// =============================================================================
// camd_ReadReg
// -----------------------------------------------------------------------------
// =============================================================================
UINT8 camd_ReadReg(UINT8 Addr);

VOID camd_InteruptHandler();
