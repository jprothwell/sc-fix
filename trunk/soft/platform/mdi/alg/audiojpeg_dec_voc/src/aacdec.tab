		//0x0230		VoC_code_section_1
		//0x0230		Coolsand_AACDecode
0x6C39DFE9,	//0x0230		VoC_bez16_d(AACDecode_Begin,0x4001)(lo)	|	VoC_push16(RA,DEFAULT)
0xF0004001,	//0x0232		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_bez16_d(AACDecode_Begin,0x4001)(hi)
0xF01DF01C,	//0x0234		VoC_lw16i_short(WRAP1,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP0,0x0,DEFAULT)
0xF01FF01E,	//0x0236		VoC_lw16i_short(WRAP3,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP2,0x0,DEFAULT)
0x7FC11540,	//0x0238		VoC_sw16_d(REG0,0xffc1)
0x003F0A96,	//0x023a		VoC_lw16i(STATUS,0x3f)
0xFF44F01B,	//0x023c		VoC_lw32z(ACC0,DEFAULT)	|	VoC_lw16i_short(BITCACHE,0x0,DEFAULT)
0x00000A81,	//0x023e		VoC_lw16i(REG1,0x0)
0x0C591509,	//0x0240		VoC_sw16_d(ACC0_HI,0xc59)
0x401C1509,	//0x0242		VoC_sw16_d(ACC0_HI,0x401c)
0x0C791509,	//0x0244		VoC_sw16_d(ACC0_HI,0xc79)
0x0C721509,	//0x0246		VoC_sw16_d(ACC0_HI,0xc72)
0x0C681509,	//0x0248		VoC_sw16_d(ACC0_HI,0xc68)
0x0C691509,	//0x024a		VoC_sw16_d(ACC0_HI,0xc69)
0x0C521509,	//0x024c		VoC_sw16_d(ACC0_HI,0xc52)
0x0C531509,	//0x024e		VoC_sw16_d(ACC0_HI,0xc53)
0x0400180B,	//0x0250		VoC_lw16i_set_inc(REG3,0x400,0x2)
0x02572C09,	//0x0252		VoC_loop_i(0x1,0x4)
0x02562E00,	//0x0254		VoC_loop_i(0x0,0x0)
		//0x0256		VoC_endloop0
0xFFC0DDDC,	//0x0256		VoC_NOP	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x0257		VoC_endloop1
0x4DB4180B,	//0x0258		VoC_lw16i_set_inc(REG3,0x4db4,0x2)
0x025F2C09,	//0x025a		VoC_loop_i(0x1,0x4)
0x025E2E00,	//0x025c		VoC_loop_i(0x0,0x0)
		//0x025e		VoC_endloop0
0xFFC0DDDC,	//0x025e		VoC_NOP	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x025f		VoC_endloop1
0x26981584,	//0x0260		VoC_sw32_d(ACC0,0x2698)
0x0C541584,	//0x0262		VoC_sw32_d(ACC0,0xc54)
0x0C561509,	//0x0264		VoC_sw16_d(ACC0_HI,0xc56)
0x0C571501,	//0x0266		VoC_sw16_d(REG1,0xc57)
0x0C581501,	//0x0268		VoC_sw16_d(REG1,0xc58)
		//0x026a		AACDecode_Begin
0xFF44715E,	//0x026a		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(WRAP2,0xa,DEFAULT)
0x00081792,	//0x026c		VoC_cfg_lg(0x8,)
0x401E1584,	//0x026e		VoC_sw32_d(ACC0,0x401e)
0x03F72B80,	//0x0270		VoC_jal(Coolsand_reload_data)
0x0C59141B,	//0x0272		VoC_lw16_d(BITCACHE,0xc59)
0x0C541486,	//0x0274		VoC_lw32_d(RL6,0xc54)
0x0C561401,	//0x0276		VoC_lw16_d(REG1,0xc56)
0xF00678E9,	//0x0278		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0xfffffffd,DEFAULT)
0x0C581402,	//0x027a		VoC_lw16_d(REG2,0xc58)
0x0C796E1B,	//0x027c		VoC_bnez16_d(AACDecode_L0,0xc79)
0x4DB24C29,	//0x027e		VoC_bnlt16_rd(AACDecode_L1,REG1,0x4db2)
0x2B00F7E0,	//0x0280		VoC_jump_lg(AACDecode_End)(lo)	|	VoC_lw16i_short(REG0,0xffffffff,DEFAULT)
0xE24203BC,	//0x0282		VoC_lbinc_p(REG2)	|	VoC_jump_lg(AACDecode_End)(hi)
		//0x0283		AACDecode_L1
0xE242E280,	//0x0284		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG4,0x10,DEFAULT)
0x0A86E281,	//0x0286		VoC_lw16i(REG6,0x4144)(lo)	|	VoC_rbinc_i(REG5,0x10,DEFAULT)
0x0A874144,	//0x0288		VoC_lw16i(REG7,0x4946)(lo)	|	VoC_lw16i(REG6,0x4144)(hi)
0xF0234946,	//0x028a		VoC_lw16i_short(REG3,0x1,DEFAULT)	|	VoC_lw16i(REG7,0x4946)(hi)
0x02923793,	//0x028c		VoC_bne32_rr(AACDecode_L2,REG45,REG67)
0x31C0F043,	//0x028e		VoC_bnez16_r(AACDecode_End,REG0)(lo)	|	VoC_lw16i_short(REG3,0x2,DEFAULT)
0xFFC003BC,	//0x0290		VoC_NAD	|	VoC_bnez16_r(AACDecode_End,REG0)(hi)
		//0x0292		AACDecode_L2
0x0C791503,	//0x0292		VoC_sw16_d(REG3,0xc79)
0x4DA40792,	//0x0294		VoC_sub16_rd(REG2,REG2,0x4da4)
0xF026F01B,	//0x0296		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_lw16i_short(BITCACHE,0x0,DEFAULT)
		//0x0297		AACDecode_L0
0x0C791407,	//0x0298		VoC_lw16_d(REG7,0xc79)
0x02C035B7,	//0x029a		VoC_bne16_rr(AACDecode_L3,REG6,REG7)
0x0C726E1D,	//0x029c		VoC_bnez16_d(AACDecode_L4,0xc72)
0x16562B80,	//0x029e		VoC_jal(Coolsand_AACFindSyncWord)
0x02A63243,	//0x02a0		VoC_bnltz16_r(AACDecode_L5,REG3)
0x2B00F7E0,	//0x02a2		VoC_jump_lg(AACDecode_End)(lo)	|	VoC_lw16i_short(REG0,0xffffffff,DEFAULT)
0xFFC003BC,	//0x02a4		VoC_NAD	|	VoC_jump_lg(AACDecode_End)(hi)
		//0x02a6		AACDecode_L5
0x0C560B1C,	//0x02a6		VoC_sub16_dr(REG4,0xc56,REG3)
0x06000A85,	//0x02a8		VoC_lw16i(REG5,0x600)
0x02B03425,	//0x02aa		VoC_bgt16_rr(AACDecode_X1,REG4,REG5)
0x2B00F7E0,	//0x02ac		VoC_jump_lg(AACDecode_End)(lo)	|	VoC_lw16i_short(REG0,0xffffffff,DEFAULT)
0xFFC003BC,	//0x02ae		VoC_NAD	|	VoC_jump_lg(AACDecode_End)(hi)
		//0x02b0		AACDecode_X1
0x0B762B80,	//0x02b0		VoC_jal(Coolsand_UnpackADTSHeader)
0x03BC31C0,	//0x02b2		VoC_bnez16_r(AACDecode_End,REG0)
0x4426F7E6,	//0x02b4		VoC_bne16_rd(AACDecode_L4,REG6,0xc73)(lo)	|	VoC_lw16i_short(REG6,0xffffffff,DEFAULT)
0x31C00C73,	//0x02b6		VoC_bnez16_r(AACDecode_End,REG0)(lo)	|	VoC_bne16_rd(AACDecode_L4,REG6,0xc73)(hi)
0xF02603BC,	//0x02b8		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_bnez16_r(AACDecode_End,REG0)(hi)
		//0x02b9		AACDecode_L4
0x0C720B36,	//0x02ba		VoC_sub16_dr(REG6,0xc72,REG6)
0x1506FFC0,	//0x02bc		VoC_sw16_d(REG6,0xc72)(lo)	|	VoC_NOP
0xE5C60C72,	//0x02be		VoC_jump(AACDecode_L6)	|	VoC_sw16_d(REG6,0xc72)(hi)
		//0x02c0		AACDecode_L3
0x4426F066,	//0x02c0		VoC_bne16_rd(AACDecode_L6,REG6,0xc79)(lo)	|	VoC_lw16i_short(REG6,0x3,DEFAULT)
0x31C00C79,	//0x02c2		VoC_bnez16_r(AACDecode_End,REG0)(lo)	|	VoC_bne16_rd(AACDecode_L6,REG6,0xc79)(hi)
0xF62003BC,	//0x02c4		VoC_lw16i_short(REG0,0xfffffff1,DEFAULT)	|	VoC_bnez16_r(AACDecode_End,REG0)(hi)
		//0x02c5		AACDecode_L6
0xE0077046,	//0x02c6		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x2,DEFAULT)
0x0C721404,	//0x02c8		VoC_lw16_d(REG4,0xc72)
0x0C731405,	//0x02ca		VoC_lw16_d(REG5,0xc73)
0x03BC3426,	//0x02cc		VoC_bgt16_rr(AACDecode_End,REG4,REG6)
0x03BC3145,	//0x02ce		VoC_bngtz16_r(AACDecode_End,REG5)
0x1507F006,	//0x02d0		VoC_sw16_d(REG7,0xc7b)(lo)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0x15070C7B,	//0x02d2		VoC_sw16_d(REG7,0xc7c)(lo)	|	VoC_sw16_d(REG7,0xc7b)(hi)
0xF15E0C7C,	//0x02d4		VoC_lw16i_short(WRAP2,0xa,DEFAULT)	|	VoC_sw16_d(REG7,0xc7c)(hi)
		//0x02d5		AACDecode_L7
0xF0065FC6,	//0x02d6		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0x07BA2B80,	//0x02d8		VoC_jal(Coolsand_DecodeNextElement)
0x03BC31C0,	//0x02da		VoC_bnez16_r(AACDecode_End,REG0)
0x4D920A84,	//0x02dc		VoC_lw16i(REG4,0x4d92)
0x0C6C0724,	//0x02de		VoC_add16_rd(REG4,REG4,0xc6c)
0xE0275F86,	//0x02e0		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_pop16(REG6,DEFAULT)
0x81A45845,	//0x02e2		VoC_add16_rp(REG4,REG6,REG4,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG4,DEFAULT)
0x02EA34A7,	//0x02e4		VoC_bngt16_rr(AACDecode_L8,REG4,REG7)
0x7FF10AC0,	//0x02e6		VoC_lw16i(REG0,0xfffffff1)
0x03BC2B00,	//0x02e8		VoC_jump_lg(AACDecode_End)
		//0x02ea		AACDecode_L8
0xDFC57004,	//0x02ea		VoC_push16(REG5,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0xFFC05FC6,	//0x02ec		VoC_NAD(IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
		//0x02ee		AACDecode_L9
0x031734AC,	//0x02ee		VoC_bngt16_rr(AACDecode_L10,REG5,REG4)
0x5F42F15E,	//0x02f0		VoC_push32(REG45,DEFAULT)	|	VoC_lw16i_short(WRAP2,0xa,DEFAULT)
0x31C4F681,	//0x02f2		VoC_bnez16_r(AACDecode_DMA_L0,REG4)(lo)	|	VoC_movreg16(REG1,REG4,IN_PARALLEL)
0x0A860306,	//0x02f4		VoC_lw16i(REG6,0x2ada)(lo)	|	VoC_bnez16_r(AACDecode_DMA_L0,REG4)(hi)
0x0A872ADA,	//0x02f6		VoC_lw16i(REG7,0x270)(lo)	|	VoC_lw16i(REG6,0x2ada)(hi)
0x14840270,	//0x02f8		VoC_lw32_d(ACC0,0x402c)(lo)	|	VoC_lw16i(REG7,0x270)(hi)
0x1546402C,	//0x02fa		VoC_sw16_d(REG6,0xffc3)(lo)	|	VoC_lw32_d(ACC0,0x402c)(hi)
0x15477FC3,	//0x02fc		VoC_sw16_d(REG7,0xffc2)(lo)	|	VoC_sw16_d(REG6,0xffc3)(hi)
0x15C47FC2,	//0x02fe		VoC_sw32_d(ACC0,0xffc4)(lo)	|	VoC_sw16_d(REG7,0xffc2)(hi)
0xDE807FC4,	//0x0300		VoC_cfg(0x0)	|	VoC_sw32_d(ACC0,0xffc4)(hi)
0x1794FFC0,	//0x0302		VoC_cfg_lg(0x8,)(lo)	|	VoC_NOP
0xFFC00008,	//0x0304		VoC_NAD	|	VoC_cfg_lg(0x8,)(hi)
		//0x0306		AACDecode_DMA_L0
0x13942B80,	//0x0306		VoC_jal(Coolsand_DecodeNoiselessData)
0x03BC31C0,	//0x0308		VoC_bnez16_r(AACDecode_End,REG0)
0xD90BF01E,	//0x030a		VoC_lw32_sd(REG67,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP2,0x0,DEFAULT)
0xDFC25F46,	//0x030c		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0x08BE2B80,	//0x030e		VoC_jal(Coolsand_Dequantize)
0xDF065F82,	//0x0310		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0xE0165F02,	//0x0312		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0x2B00C134,	//0x0314		VoC_jump_lg(AACDecode_L9)(lo)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0xF02402EE,	//0x0316		VoC_lw16i_short(REG4,0x1,DEFAULT)	|	VoC_jump_lg(AACDecode_L9)(hi)
		//0x0317		AACDecode_L10
0x0C6C44B4,	//0x0318		VoC_bne16_rd(AACDecode_L11,REG4,0xc6c)
0xDFC25F46,	//0x031a		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0x14682B80,	//0x031c		VoC_jal(Coolsand_StereoProcess)
0xDF065F82,	//0x031e		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0x03263180,	//0x0320		VoC_bez16_r(AACDecode_L11,REG0)
0x2B00F6C0,	//0x0322		VoC_jump_lg(AACDecode_End)(lo)	|	VoC_lw16i_short(REG0,0xfffffff6,DEFAULT)
0xFFC003BC,	//0x0324		VoC_NAD	|	VoC_jump_lg(AACDecode_End)(hi)
		//0x0326		AACDecode_L11
0xDF867004,	//0x0326		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x5F46DF85,	//0x0328		VoC_push32(RL6,DEFAULT)	|	VoC_pop16(REG5,DEFAULT)
0xFFC0DFC2,	//0x032a		VoC_NAD	|	VoC_push16(REG2,IN_PARALLEL)
		//0x032c		AACDecode_L12
0x036834AC,	//0x032c		VoC_bngt16_rr(AACDecode_L13,REG5,REG4)
0xDFC65F42,	//0x032e		VoC_push16(REG6,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0x2ADA0A86,	//0x0330		VoC_lw16i(REG6,0x2ada)
0x04800A87,	//0x0332		VoC_lw16i(REG7,0x480)
0x402E1484,	//0x0334		VoC_lw32_d(ACC0,0x402e)
0x7FC31546,	//0x0336		VoC_sw16_d(REG6,0xffc3)
0x7FC21547,	//0x0338		VoC_sw16_d(REG7,0xffc2)
0x7FC415C4,	//0x033a		VoC_sw32_d(ACC0,0xffc4)
0xFFC0DE80,	//0x033c		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x033e		VoC_cfg_lg(0x8,)
0x2F5A0A86,	//0x0340		VoC_lw16i(REG6,0x2f5a)
0x04800A87,	//0x0342		VoC_lw16i(REG7,0x480)
0x40301484,	//0x0344		VoC_lw32_d(ACC0,0x4030)
0x7FC31546,	//0x0346		VoC_sw16_d(REG6,0xffc3)
0x7FC21547,	//0x0348		VoC_sw16_d(REG7,0xffc2)
0x7FC415C4,	//0x034a		VoC_sw32_d(ACC0,0xffc4)
0xFFC0DE80,	//0x034c		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x034e		VoC_cfg_lg(0x8,)
0xDFC46081,	//0x0350		VoC_push16(REG4,IN_PARALLEL)	|	VoC_movreg16(REG1,REG4,DEFAULT)
0x06602B80,	//0x0352		VoC_jal(Coolsand_PNS)
0x03593180,	//0x0354		VoC_bez16_r(AACDecode_L14,REG0)
0x2B00F6A0,	//0x0356		VoC_jump_lg(AACDecode_End)(lo)	|	VoC_lw16i_short(REG0,0xfffffff5,DEFAULT)
0xDF8403BC,	//0x0358		VoC_pop16(REG4,DEFAULT)	|	VoC_jump_lg(AACDecode_End)(hi)
		//0x0359		AACDecode_L14
0x15702B80,	//0x035a		VoC_jal(Coolsand_TNSFilter)
0xD614590B,	//0x035c		VoC_lw16_sd(REG4,0x0,IN_PARALLEL)	|	VoC_lw32_sd(REG67,0x0,DEFAULT)
0xFFC041A7,	//0x035e		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG7,REG6,REG4,DEFAULT)
0x11432B80,	//0x0360		VoC_jal(Coolsand_IMDCT)
0xE0165F02,	//0x0362		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xDF864134,	//0x0364		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0x032C2B00,	//0x0366		VoC_jump_lg(AACDecode_L12)
		//0x0368		AACDecode_L13
0xDF065F82,	//0x0368		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0xC1AE70E7,	//0x036a		VoC_add16_rr(REG6,REG6,REG5,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x7,DEFAULT)
0x0C6C1404,	//0x036c		VoC_lw16_d(REG4,0xc6c)
0x02D535BC,	//0x036e		VoC_bne16_rr(AACDecode_L7,REG7,REG4)
0x6E15F047,	//0x0370		VoC_bnez16_d(AACDecode_Channelprocess,0x4002)(lo)	|	VoC_lw16i_short(REG7,0x2,DEFAULT)
0x451F4002,	//0x0372		VoC_bne16_rd(AACDecode_Channelprocess,REG7,0x4003)(lo)	|	VoC_bnez16_d(AACDecode_Channelprocess,0x4002)(hi)
0xF0474003,	//0x0374		VoC_lw16i_short(REG7,0x2,DEFAULT)	|	VoC_bne16_rd(AACDecode_Channelprocess,REG7,0x4003)(hi)
0x0C734507,	//0x0376		VoC_bne16_rd(AACDecode_Channelprocess,REG7,0xc73)
0x0CAC180B,	//0x0378		VoC_lw16i_set_inc(REG3,0xcac,0x2)
0x03852C09,	//0x037a		VoC_loop_i(0x1,0x4)
0x03842E00,	//0x037c		VoC_loop_i(0x0,0x0)
0x780ED99B,	//0x037e		VoC_shr16_ri(REG6,0x1,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0xC1F6F80F,	//0x0380		VoC_add16_rr(REG6,REG7,REG6,DEFAULT)	|	VoC_shr16_ri(REG7,0x1,IN_PARALLEL)
0xFFC0E0C7,	//0x0382		VoC_NOP	|	VoC_movreg16(REG7,REG6,DEFAULT)
		//0x0384		VoC_endloop0
0xFFC0DDDB,	//0x0384		VoC_NOP	|	VoC_sw32inc_p(REG67,REG3,DEFAULT)
		//0x0385		VoC_endloop1
		//0x0386		AACDecode_Channelprocess
0x02000A87,	//0x0386		VoC_lw16i(REG7,0x200)
0x0C731403,	//0x0388		VoC_lw16_d(REG3,0xc73)
0x0A86C5DF,	//0x038a		VoC_lw16i(REG6,0x656)(lo)	|	VoC_mult16_rr(REG7,REG7,REG3,DEFAULT)
0x14840656,	//0x038c		VoC_lw32_d(ACC0,0x4006)(lo)	|	VoC_lw16i(REG6,0x656)(hi)
0x15464006,	//0x038e		VoC_sw16_d(REG6,0xffc3)(lo)	|	VoC_lw32_d(ACC0,0x4006)(hi)
0x15477FC3,	//0x0390		VoC_sw16_d(REG7,0xffc2)(lo)	|	VoC_sw16_d(REG6,0xffc3)(hi)
0x15C47FC2,	//0x0392		VoC_sw32_d(ACC0,0xffc4)(lo)	|	VoC_sw16_d(REG7,0xffc2)(hi)
0x14037FC4,	//0x0394		VoC_lw16_d(REG3,0xc73)(lo)	|	VoC_sw32_d(ACC0,0xffc4)(hi)
0x0B1B0C73,	//0x0396		VoC_sub16_dr(REG3,0x4da0,REG3)(lo)	|	VoC_lw16_d(REG3,0xc73)(hi)
0x0A854DA0,	//0x0398		VoC_lw16i(REG5,0x400)(lo)	|	VoC_sub16_dr(REG3,0x4da0,REG3)(hi)
0xFE1D0400,	//0x039a		VoC_shr16_rr(REG5,REG3,DEFAULT)	|	VoC_lw16i(REG5,0x400)(hi)
0xFFC0FC82,	//0x039c		VoC_NOP	|	VoC_shru32_ri(REG45,0x10,DEFAULT)
0x40161582,	//0x039e		VoC_sw32_d(REG45,0x4016)
0xFFC0DE80,	//0x03a0		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x03a2		VoC_cfg_lg(0x8,)
0x40026C08,	//0x03a4		VoC_bez16_d(LABLE_AAC_DMAOUT_DATA,0x4002)
0xDF465FC2,	//0x03a6		VoC_push32(RL6,IN_PARALLEL)	|	VoC_push16(REG2,DEFAULT)
0x1D702B80,	//0x03a8		VoC_jal(CS_sbc_encode)
0xDF065F82,	//0x03aa		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
		//0x03ac		LABLE_AAC_DMAOUT_DATA
0xE0065FDB,	//0x03ac		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_push16(BITCACHE,DEFAULT)
0xF000DF85,	//0x03ae		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_pop16(REG5,DEFAULT)
0x00071605,	//0x03b0		VoC_and16_ri(REG5,0x7)
0x1586E328,	//0x03b2		VoC_sw32_d(RL6,0xc54)(lo)	|	VoC_rbinc_r(REG4,REG5,DEFAULT)
0x151B0C54,	//0x03b4		VoC_sw16_d(BITCACHE,0xc59)(lo)	|	VoC_sw32_d(RL6,0xc54)(hi)
0x15020C59,	//0x03b6		VoC_sw16_d(REG2,0xc58)(lo)	|	VoC_sw16_d(BITCACHE,0xc59)(hi)
0x15060C58,	//0x03b8		VoC_sw16_d(REG6,0x4001)(lo)	|	VoC_sw16_d(REG2,0xc58)(hi)
0xFFC04001,	//0x03ba		VoC_NAD	|	VoC_sw16_d(REG6,0x4001)(hi)
		//0x03bc		AACDecode_End
0xEFF35FA9,	//0x03bc		VoC_lw16i_short(REG3,0xffffffff,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0x401D1500,	//0x03be		VoC_sw16_d(REG0,0x401d)
0x03D83180,	//0x03c0		VoC_bez16_r(AACDecode_error_manage,REG0)
0x03D83503,	//0x03c2		VoC_be16_rr(AACDecode_error_manage,REG0,REG3)
0x0C582006,	//0x03c4		VoC_lw16d_set_inc(REG2,0xc58,0x1)
0x0C541486,	//0x03c6		VoC_lw32_d(RL6,0xc54)
0x0C59141B,	//0x03c8		VoC_lw16_d(BITCACHE,0xc59)
0x6C04F004,	//0x03ca		VoC_bez16_d(AACDecode_error_manage_L0,0x401d)(lo)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x1504401D,	//0x03cc		VoC_sw16_d(REG4,0xc72)(lo)	|	VoC_bez16_d(AACDecode_error_manage_L0,0x401d)(hi)
0xFFC00C72,	//0x03ce		VoC_NOP	|	VoC_sw16_d(REG4,0xc72)(hi)
		//0x03cf		AACDecode_error_manage_L0
0xE2A0E242,	//0x03d0		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_lbinc_p(REG2)
0x0C581502,	//0x03d2		VoC_sw16_d(REG2,0xc58)
0x0C541586,	//0x03d4		VoC_sw32_d(RL6,0xc54)
0x0C59151B,	//0x03d6		VoC_sw16_d(BITCACHE,0xc59)
		//0x03d8		AACDecode_error_manage
0x1407F100,	//0x03d8		VoC_lw16_d(REG7,0xc58)(lo)	|	VoC_lw16i_short(REG0,0x8,DEFAULT)
0x16070C58,	//0x03da		VoC_and16_ri(REG7,0x3ff)(lo)	|	VoC_lw16_d(REG7,0xc58)(hi)
0x164703FF,	//0x03dc		VoC_and16_ri(REG7,0xfff8)(lo)	|	VoC_and16_ri(REG7,0x3ff)(hi)
0x14067FF8,	//0x03de		VoC_lw16_d(REG6,0xc57)(lo)	|	VoC_and16_ri(REG7,0xfff8)(hi)
0xC3BD0C57,	//0x03e0		VoC_sub16_rr(REG5,REG6,REG7,DEFAULT)	|	VoC_lw16_d(REG6,0xc57)(hi)
0x03E83105,	//0x03e2		VoC_bgtz16_r(VPP_AAC_DECODE_L0,REG5)
0x04000A81,	//0x03e4		VoC_lw16i(REG1,0x400)
0xFFC0414D,	//0x03e6		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG5,REG5,REG1,DEFAULT)
		//0x03e8		VPP_AAC_DECODE_L0
0x03F534A8,	//0x03e8		VoC_bngt16_rr(VPP_AAC_DECODE_L1,REG5,REG0)
0xC1C74345,	//0x03ea		VoC_add16_rr(REG7,REG7,REG0,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG5,REG0,DEFAULT)
0x03FF1607,	//0x03ec		VoC_and16_ri(REG7,0x3ff)
0x0B2AF8FD,	//0x03ee		VoC_sub16_dr(REG2,0x401b,REG5)(lo)	|	VoC_shr16_ri(REG5,0xffffffff,DEFAULT)
0x1507401B,	//0x03f0		VoC_sw16_d(REG7,0xc57)(lo)	|	VoC_sub16_dr(REG2,0x401b,REG5)(hi)
0x15020C57,	//0x03f2		VoC_sw16_d(REG2,0x401b)(lo)	|	VoC_sw16_d(REG7,0xc57)(hi)
0xFFC0401B,	//0x03f4		VoC_NOP	|	VoC_sw16_d(REG2,0x401b)(hi)
		//0x03f5		VPP_AAC_DECODE_L1
0xF144E580,	//0x03f6		VoC_lw16i_short(REG4,0xa,DEFAULT)	|	VoC_return
		//0x03f7		Coolsand_reload_data
0x0C571400,	//0x03f8		VoC_lw16_d(REG0,0xc57)
0x0C581402,	//0x03fa		VoC_lw16_d(REG2,0xc58)
0x7FC11544,	//0x03fc		VoC_sw16_d(REG4,0xffc1)
0xE0014287,	//0x03fe		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_sub16_rr(REG7,REG2,REG0,DEFAULT)
0x04000A86,	//0x0400		VoC_lw16i(REG6,0x400)
0x04063410,	//0x0402		VoC_bgt16_rr(Coolsand_reload_data_L0,REG2,REG0)
0xFFC041BF,	//0x0404		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG7,REG6,REG7,DEFAULT)
		//0x0406		Coolsand_reload_data_L0
0xE00443BB,	//0x0406		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_sub16_rr(REG3,REG6,REG7,DEFAULT)
0xF808781F,	//0x0408		VoC_shr16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x3,DEFAULT)
0xE08678F7,	//0x040a		VoC_lw16i_short(REG6,0x8,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0xfffffffe,DEFAULT)
0x34BEF8FB,	//0x040c		VoC_bngt16_rr(Coolsand_reload_data_end,REG7,REG6)(lo)	|	VoC_shr16_ri(REG3,0xffffffff,DEFAULT)
0x07BF0428,	//0x040e		VoC_sub16_rd(REG7,REG7,0x4da6)(lo)	|	VoC_bngt16_rr(Coolsand_reload_data_end,REG7,REG6)(hi)
0x14844DA6,	//0x0410		VoC_lw32_d(ACC0,0x4004)(lo)	|	VoC_sub16_rd(REG7,REG7,0x4da6)(hi)
0x15404004,	//0x0412		VoC_sw16_d(REG0,0xffc3)(lo)	|	VoC_lw32_d(ACC0,0x4004)(hi)
0x15477FC3,	//0x0414		VoC_sw16_d(REG7,0xffc2)(lo)	|	VoC_sw16_d(REG0,0xffc3)(hi)
0x15C47FC2,	//0x0416		VoC_sw32_d(ACC0,0xffc4)(lo)	|	VoC_sw16_d(REG7,0xffc2)(hi)
0xDE807FC4,	//0x0418		VoC_cfg(0x0)	|	VoC_sw32_d(ACC0,0xffc4)(hi)
0x1794FFC0,	//0x041a		VoC_cfg_lg(0x8,)(lo)	|	VoC_NOP
0xF8FF0008,	//0x041c		VoC_shr16_ri(REG7,0xffffffff,DEFAULT)	|	VoC_cfg_lg(0x8,)(hi)
0x0C570738,	//0x041e		VoC_add16_rd(REG0,REG7,0xc57)
0x03FF1600,	//0x0420		VoC_and16_ri(REG0,0x3ff)
0x40FBF8FF,	//0x0422		VoC_add16_rr(REG3,REG3,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xffffffff,DEFAULT)
0x1500F6E1,	//0x0424		VoC_sw16_d(REG0,0xc57)(lo)	|	VoC_movreg16(REG1,REG7,IN_PARALLEL)
0xFFC00C57,	//0x0426		VoC_NAD	|	VoC_sw16_d(REG0,0xc57)(hi)
		//0x0428		Coolsand_reload_data_end
0x401B1501,	//0x0428		VoC_sw16_d(REG1,0x401b)
0x7FC11544,	//0x042a		VoC_sw16_d(REG4,0xffc1)
0x0C561503,	//0x042c		VoC_sw16_d(REG3,0xc56)
0xFFC06580,	//0x042e		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0430		Coolsand_CLZ
0x00200A86,	//0x0430		VoC_lw16i(REG6,0x20)
0x04553306,	//0x0432		VoC_bez32_r(CLZ_End,RL6)
0xFC867F37,	//0x0434		VoC_shru32_ri(RL6,0x10,IN_PARALLEL)	|	VoC_movreg32(RL7,RL6,DEFAULT)
0xE1077026,	//0x0436		VoC_lw16i_short(REG7,0x10,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x1,DEFAULT)
0x043C3346,	//0x0438		VoC_bnez32_r(CLZ_L0,RL6)
0xFD8741BE,	//0x043a		VoC_shru32_ri(RL7,0xfffffff0,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG7,DEFAULT)
		//0x043c		CLZ_L0
0x7CC6FF3E,	//0x043c		VoC_shru32_ri(RL6,0x18,DEFAULT)	|	VoC_movreg32(RL6,RL7,DEFAULT)
0x3346E087,	//0x043e		VoC_bnez32_r(CLZ_L1,RL6)(lo)	|	VoC_lw16i_short(REG7,0x8,IN_PARALLEL)
0x41BE0443,	//0x0440		VoC_add16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_bnez32_r(CLZ_L1,RL6)(hi)
0xFF3EFDC7,	//0x0442		VoC_movreg32(RL6,RL7,DEFAULT)	|	VoC_shru32_ri(RL7,0xfffffff8,IN_PARALLEL)
		//0x0443		CLZ_L1
0xE0477CE6,	//0x0444		VoC_lw16i_short(REG7,0x4,IN_PARALLEL)	|	VoC_shru32_ri(RL6,0x1c,DEFAULT)
0x044A3346,	//0x0446		VoC_bnez32_r(CLZ_L2,RL6)
0xFDE741BE,	//0x0448		VoC_shru32_ri(RL7,0xfffffffc,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG7,DEFAULT)
		//0x044a		CLZ_L2
0x7CF6FF3E,	//0x044a		VoC_shru32_ri(RL6,0x1e,DEFAULT)	|	VoC_movreg32(RL6,RL7,DEFAULT)
0x3346E027,	//0x044c		VoC_bnez32_r(CLZ_L3,RL6)(lo)	|	VoC_lw16i_short(REG7,0x2,IN_PARALLEL)
0x41BE0452,	//0x044e		VoC_add16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_bnez32_r(CLZ_L3,RL6)(hi)
0xFFC0FDF7,	//0x0450		VoC_NAD	|	VoC_shru32_ri(RL7,0xfffffffe,IN_PARALLEL)
		//0x0452		CLZ_L3
0xE0077CFF,	//0x0452		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_shru32_ri(RL7,0x1f,DEFAULT)
0xE580CAFB,	//0x0454		VoC_return	|	VoC_sub32_rr(REG67,REG67,RL7,DEFAULT)
		//0x0455		CLZ_End
		//0x0456		Coolsand_MULSHIFT32
0xF90E4C7C,	//0x0456		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x0458		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xE580CE78,	//0x045a		VoC_return	|	VoC_macX_rr(REG7,REG0,DEFAULT)
		//0x045c		Coolsand_MADD64
0xF6C56004,	//0x045c		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_movreg16(REG4,REG0,DEFAULT)
0xCE0F790E,	//0x045e		VoC_mac32_rr(REG1,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEB17908,	//0x0460		VoC_macX_rr(REG6,REG1,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0x1,DEFAULT)
0xCEB8700D,	//0x0462		VoC_macX_rr(REG7,REG0,IN_PARALLEL)	|	VoC_lw16i_short(RL6_HI,0x0,DEFAULT)
0x00600A96,	//0x0464		VoC_lw16i(STATUS,0x60)
0x4E06F02C,	//0x0466		VoC_mac32_rr(REG0,REG6,DEFAULT)	|	VoC_lw16i_short(RL6_LO,0x1,DEFAULT)
0x1605F5F1,	//0x0468		VoC_and16_ri(REG5,0x1)(lo)	|	VoC_lw16i_short(FORMAT32,0xfffffffe,IN_PARALLEL)
0x30800001,	//0x046a		VoC_bcz16_r(MADD64_L0)(lo)	|	VoC_and16_ri(REG5,0x1)(hi)
0x70960470,	//0x046c		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_bcz16_r(MADD64_L0)(hi)
0xFFC0C975,	//0x046e		VoC_NAD	|	VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)
		//0x0470		MADD64_L0
0xF57A4E47,	//0x0470		VoC_lw16i_short(FORMATX,0xffffffef,IN_PARALLEL)	|	VoC_macX_rr(REG0,REG7,DEFAULT)
0x00011604,	//0x0472		VoC_and16_ri(REG4,0x1)
0x04783080,	//0x0474		VoC_bcz16_r(MADD64_L1)
0xC9757096,	//0x0476		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0478		MADD64_L1
0xF9F84E4E,	//0x0478		VoC_shru16_ri(REG0,0xffffffff,IN_PARALLEL)	|	VoC_macX_rr(REG1,REG6,DEFAULT)
0xF9FE71FA,	//0x047a		VoC_shru16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_lw16i_short(FORMATX,0xf,DEFAULT)
0x04803080,	//0x047c		VoC_bcz16_r(MADD64_L2)
0xC9757096,	//0x047e		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0480		MADD64_L2
0x048A3184,	//0x0480		VoC_bez16_r(MADD64_L3,REG4)
0xFAFB7F1F,	//0x0482		VoC_shr32_ri(REG67,0x1f,IN_PARALLEL)	|	VoC_movreg32(RL7,REG67,DEFAULT)
0xC95D493C,	//0x0484		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
0x048A3080,	//0x0486		VoC_bcz16_r(MADD64_L3)
0xC9757096,	//0x0488		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x048a		MADD64_L3
0x04943185,	//0x048a		VoC_bez16_r(MADD64_L4,REG5)
0xFAF87F07,	//0x048c		VoC_shr32_ri(REG01,0x1f,IN_PARALLEL)	|	VoC_movreg32(RL7,REG01,DEFAULT)
0xC945493C,	//0x048e		VoC_add32_rr(ACC1,ACC1,REG01,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
0x04943080,	//0x0490		VoC_bcz16_r(MADD64_L4)
0xC9757096,	//0x0492		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x0494		MADD64_L4
0x3184E42C,	//0x0494		VoC_bez16_r(MADD64_L5,REG4)(lo)	|	VoC_and16_rr(REG4,REG5,DEFAULT)
0xC934049C,	//0x0496		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_bez16_r(MADD64_L5,REG4)(hi)
0x049C3080,	//0x0498		VoC_bcz16_r(MADD64_L5)
0xC9757096,	//0x049a		VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
		//0x049c		MADD64_L5
0x00200A96,	//0x049c		VoC_lw16i(STATUS,0x20)
0xFFC06580,	//0x049e		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x04a0		Coolsand_PreMultiplyRescale
0xF47A7019,	//0x04a0		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xF3FA7006,	//0x04a2		VoC_lw16i_short(INC2,0xfffffffe,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0x01000A85,	//0x04a4		VoC_lw16i(REG5,0x100)
0x55B40A84,	//0x04a6		VoC_lw16i(REG4,0x55b4)
0x04AE3183,	//0x04a8		VoC_bez16_r(PreMultiplyRescale_L0,REG3)
0x01000A86,	//0x04aa		VoC_lw16i(REG6,0x100)
0x08000A85,	//0x04ac		VoC_lw16i(REG5,0x800)
		//0x04ae		PreMultiplyRescale_L0
0xC133406A,	//0x04ae		VoC_add16_rr(REG3,REG4,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG1,REG5,DEFAULT)
0xF00B781D,	//0x04b0		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0x3,DEFAULT)
0xFFC05E10,	//0x04b2		VoC_NAD(IN_PARALLEL)	|	VoC_inc_p(REG2,DEFAULT)
0x04FD2E28,	//0x04b4		VoC_loop_r(0,REG5)
0xD98B59DE,	//0x04b6		VoC_lw32_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG3,DEFAULT)
0xD99559DA,	//0x04b8		VoC_lw32_p(ACC1,REG2,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG3,DEFAULT)
0xFE857E83,	//0x04ba		VoC_shr32_rr(ACC1,REG0,IN_PARALLEL)	|	VoC_shr32_rr(REG67,REG0,DEFAULT)
0xFF1748EB,	//0x04bc		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,ACC1,DEFAULT)
0xF90E4D7C,	//0x04be		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x04c0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xFF2B4E7C,	//0x04c2		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xFBFF7F32,	//0x04c4		VoC_shr32_ri(RL7,0xffffffff,IN_PARALLEL)	|	VoC_movreg32(REG45,RL6,DEFAULT)
0xCD7D790E,	//0x04c6		VoC_multf32_rr(ACC1,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEB5790C,	//0x04c8		VoC_macX_rr(REG6,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEBC4BBA,	//0x04ca		VoC_macX_rr(REG7,REG4,IN_PARALLEL)	|	VoC_sub32_rr(REG45,RL6,RL7,DEFAULT)
0xD98B7F27,	//0x04cc		VoC_lw32_p(REG67,REG1,IN_PARALLEL)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0xCB7D7E83,	//0x04ce		VoC_sub32_rr(ACC1,ACC1,RL7,IN_PARALLEL)	|	VoC_shr32_rr(REG67,REG0,DEFAULT)
0xF90E4D7C,	//0x04d0		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x04d2		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xD9DE4E7C,	//0x04d4		VoC_lw32inc_p(RL6,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0x4DA40794,	//0x04d6		VoC_sub16_rd(REG4,REG2,0x4da4)
0xD9DA493C,	//0x04d8		VoC_lw32inc_p(REG45,REG3,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
0xFF1759A3,	//0x04da		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG4,DEFAULT)
0xFE835DCC,	//0x04dc		VoC_shr32_rr(REG67,REG0,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x7E84D98C,	//0x04de		VoC_shr32_rr(ACC0,REG0,DEFAULT)	|	VoC_lw32_p(ACC0,REG1,DEFAULT)
0x48E3DDCD,	//0x04e0		VoC_add32_rr(REG67,REG67,ACC0,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG1,IN_PARALLEL)
0x7F25DF43,	//0x04e2		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_push32(REG67,IN_PARALLEL)
0x4D7CF90E,	//0x04e4		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E75F90C,	//0x04e6		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x4E7CFBFF,	//0x04e8		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shr32_ri(RL7,0xffffffff,IN_PARALLEL)
0xFF32FF2B,	//0x04ea		VoC_movreg32(REG45,RL6,DEFAULT)	|	VoC_movreg32(REG67,ACC1,IN_PARALLEL)
0xCD7D790E,	//0x04ec		VoC_multf32_rr(ACC1,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEB5790C,	//0x04ee		VoC_macX_rr(REG6,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEBC4BBA,	//0x04f0		VoC_macX_rr(REG7,REG4,IN_PARALLEL)	|	VoC_sub32_rr(REG45,RL6,RL7,DEFAULT)
0x5F03FF27,	//0x04f2		VoC_pop32(REG67,DEFAULT)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0x4D7CCB7D,	//0x04f4		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,RL7,IN_PARALLEL)
0x4E75F90E,	//0x04f6		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE7CF90C,	//0x04f8		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xC93CDDD5,	//0x04fa		VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
0xDDD4FFC0,	//0x04fc		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_NOP
		//0x04fd		VoC_endloop0
0xFFC06580,	//0x04fe		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0500		Coolsand_PostMultiplyRescale
0x4DA00B00,	//0x0500		VoC_sub16_dr(REG0,0x4da0,REG0)
0xF3FA73C6,	//0x0502		VoC_lw16i_short(INC2,0xfffffffe,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x1e,DEFAULT)
0x01000A85,	//0x0504		VoC_lw16i(REG5,0x100)
0x55B40A84,	//0x0506		VoC_lw16i(REG4,0x55b4)
0x050D3183,	//0x0508		VoC_bez16_r(PostMultiplyRescale_L0,REG3)
0x0A85F046,	//0x050a		VoC_lw16i(REG5,0x800)(lo)	|	VoC_lw16i_short(REG6,0x2,DEFAULT)
0xC06A0800,	//0x050c		VoC_add16_rr(REG2,REG1,REG5,DEFAULT)	|	VoC_lw16i(REG5,0x800)(hi)
		//0x050d		PostMultiplyRescale_L0
0x44440A83,	//0x050e		VoC_lw16i(REG3,0x4444)
0xDE107053,	//0x0510		VoC_inc_p(REG2,IN_PARALLEL)	|	VoC_lw16i_short(INC3,0x2,DEFAULT)
0xF0097019,	//0x0512		VoC_lw16i_short(INC1,0x2,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xC0F359DE,	//0x0514		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG3,DEFAULT)
0xF81D599F,	//0x0516		VoC_shr16_ri(REG5,0x3,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG3,DEFAULT)
0x05642E28,	//0x0518		VoC_loop_r(0,REG5)
0xD9CADFC6,	//0x051a		VoC_lw32inc_p(REG45,REG1,DEFAULT)	|	VoC_push16(REG6,DEFAULT)
0xFF3B108A,	//0x051c		VoC_movreg32(REG67,RL7,IN_PARALLEL)	|	VoC_add32_rp(REG45,REG45,REG1,DEFAULT)
0xF90E4D7C,	//0x051e		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x0520		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xE0274E7C,	//0x0522		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xC279598A,	//0x0524		VoC_sub16_rr(REG1,REG1,REG7,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG1,DEFAULT)
0xFF257F33,	//0x0526		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_movreg32(REG67,RL6,DEFAULT)
0xF90E4D7C,	//0x0528		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x052a		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xFBFF4E7C,	//0x052c		VoC_shr32_ri(RL7,0xffffffff,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xD98A4BBB,	//0x052e		VoC_lw32_p(REG45,REG1,IN_PARALLEL)	|	VoC_sub32_rr(REG67,RL6,RL7,DEFAULT)
0xD9964B64,	//0x0530		VoC_lw32_p(RL6,REG2,IN_PARALLEL)	|	VoC_sub32_rr(ACC0,ACC1,ACC0,DEFAULT)
0x4D7CFE84,	//0x0532		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shr32_rr(ACC0,REG0,DEFAULT)
0x5DD4F90E,	//0x0534		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0x4E75F90C,	//0x0536		VoC_macX_rr(REG6,REG5,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xCE7CDF86,	//0x0538		VoC_macX_rr(REG7,REG4,DEFAULT)	|	VoC_pop16(REG6,IN_PARALLEL)
0xC0F359DF,	//0x053a		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_lw32inc_p(RL7,REG3,DEFAULT)
0xC964599A,	//0x053c		VoC_add32_rr(ACC0,ACC1,ACC0,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG3,DEFAULT)
0xFF455FC6,	//0x053e		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0xCB755993,	//0x0540		VoC_sub32_rr(ACC1,ACC1,RL6,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG2,DEFAULT)
0xFE8448EB,	//0x0542		VoC_shr32_rr(ACC0,REG0,IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,ACC1,DEFAULT)
0xCD7C7F16,	//0x0544		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_movreg32(RL6,REG45,DEFAULT)
0xF90E5DCC,	//0x0546		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xF90C4E75,	//0x0548		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xFF3A4E7C,	//0x054a		VoC_movreg32(REG45,RL7,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xF90C7F2B,	//0x054c		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_movreg32(REG67,ACC1,DEFAULT)
0xF90E7F25,	//0x054e		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
0xDF464D7C,	//0x0550		VoC_push32(RL6,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xFBFE4E75,	//0x0552		VoC_shr32_ri(RL6,0xffffffff,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xCBF34E7C,	//0x0554		VoC_sub32_rr(REG67,RL7,RL6,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xFF3E5992,	//0x0556		VoC_movreg32(RL6,RL7,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG2,DEFAULT)
0xF90E4B67,	//0x0558		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_sub32_rr(RL7,ACC1,ACC0,DEFAULT)
0xF90C7E87,	//0x055a		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_shr32_rr(RL7,REG0,DEFAULT)
0xFF2C4E2F,	//0x055c		VoC_movreg32(ACC0,ACC1,IN_PARALLEL)	|	VoC_mac32_rr(REG5,REG7,DEFAULT)
0xDDD74E75,	//0x055e		VoC_sw32inc_p(RL7,REG2,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xDF86CE7C,	//0x0560		VoC_pop16(REG6,DEFAULT)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xDF07FE84,	//0x0562		VoC_pop32(RL7,DEFAULT)	|	VoC_shr32_rr(ACC0,REG0,DEFAULT)
		//0x0564		VoC_endloop0
0xE580DDCC,	//0x0564		VoC_return	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
		//0x0566		Coolsand_DCT4
0x7087F000,	//0x0566		VoC_lw16i_short(REG7,0x4,DEFAULT)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0x34BADFE9,	//0x0568		VoC_bngt16_rr(DCT4_L0,REG7,REG2)(lo)	|	VoC_push16(RA,IN_PARALLEL)
0xC3D0056C,	//0x056a		VoC_sub16_rr(REG0,REG7,REG2,DEFAULT)	|	VoC_bngt16_rr(DCT4_L0,REG7,REG2)(hi)
		//0x056c		DCT4_L0
0xDF40DFC3,	//0x056c		VoC_push32(REG01,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0x04A02B80,	//0x056e		VoC_jal(Coolsand_PreMultiplyRescale)
0xD9085613,	//0x0570		VoC_lw32_sd(REG01,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0x0B432B80,	//0x0572		VoC_jal(Coolsand_R4FFT)
0xDF005F83,	//0x0574		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0x05002B80,	//0x0576		VoC_jal(Coolsand_PostMultiplyRescale)
0xFFC0DFA9,	//0x0578		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xF180E580,	//0x057a		VoC_lw16i_short(REG0,0xc,DEFAULT)	|	VoC_return
		//0x057b		Coolsand_InvRootR
0xFF1D7D20,	//0x057c		VoC_movreg32(ACC1,REG67,IN_PARALLEL)	|	VoC_shru32_ri(REG01,0xffffffe4,DEFAULT)
0xF90E4C7C,	//0x057e		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x0580		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xE0604E78,	//0x0582		VoC_lw16i_short(REG0,0x6,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0xFDF4FD20,	//0x0584		VoC_shru32_ri(ACC0,0xfffffffe,DEFAULT)	|	VoC_shru32_ri(REG01,0xffffffe4,DEFAULT)
0xE89BC900,	//0x0586		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_add32_rr(REG01,ACC0,REG01,DEFAULT)
0xFF077F03,	//0x0588		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_movreg32(REG67,REG01,DEFAULT)
0xF90E4C7C,	//0x058a		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x058c		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xFF2BCE78,	//0x058e		VoC_movreg32(REG67,ACC1,DEFAULT)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0x4C7CFF20,	//0x0590		VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)	|	VoC_movreg32(REG01,ACC0,DEFAULT)
0x4E71F90E,	//0x0592		VoC_macX_rr(REG6,REG1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE78F908,	//0x0594		VoC_macX_rr(REG7,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x1,IN_PARALLEL)
0xE0CE7F38,	//0x0596		VoC_lw16i_short(RL7_LO,0xc,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xFDF4FD47,	//0x0598		VoC_shru32_ri(ACC0,0xfffffffe,DEFAULT)	|	VoC_shru32_ri(RL7,0xffffffe8,DEFAULT)
0x4C7CCBE3,	//0x059a		VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)	|	VoC_sub32_rr(REG67,RL7,ACC0,DEFAULT)
0x4E71F90E,	//0x059c		VoC_macX_rr(REG6,REG1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE78F908,	//0x059e		VoC_macX_rr(REG7,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x1,IN_PARALLEL)
0xFDDCFFC0,	//0x05a0		VoC_shru32_ri(ACC0,0xfffffffb,DEFAULT)	|	VoC_NOP
		//0x05a2		VoC_endloop0
0x7AF4FF20,	//0x05a2		VoC_shr32_ri(ACC0,0x1e,DEFAULT)	|	VoC_movreg32(REG01,ACC0,DEFAULT)
0x3304E016,	//0x05a4		VoC_bez32_r(InvRootR_L0,ACC0)(lo)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0xFB1305AA,	//0x05a6		VoC_shr32_ri(REG67,0xffffffe2,DEFAULT)	|	VoC_bez32_r(InvRootR_L0,ACC0)(hi)
0x4DA20998,	//0x05a8		VoC_sub32_rd(REG01,REG67,0x4da2)
		//0x05aa		InvRootR_L0
0xE580FF03,	//0x05aa		VoC_return	|	VoC_movreg32(REG67,REG01,DEFAULT)
		//0x05ac		Coolsand_ScaleNoiseVector
0xF00A7119,	//0x05ac		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x8,DEFAULT)
0xF6827F44,	//0x05ae		VoC_movreg16(REG2,REG4,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x05B43180,	//0x05b0		VoC_bez16_r(ScaleNoiseVector_L0,REG0)
0xD412E601,	//0x05b2		VoC_mac32inc_pp(REG2,REG2,DEFAULT)	|	VoC_loop_r_short(REG0,DEFAULT)
		//0x05b3		VoC_endloop0
		//0x05b4		ScaleNoiseVector_L0
0x3304F019,	//0x05b4		VoC_bez32_r(ScaleNoiseVector_End,ACC0)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0x5F450616,	//0x05b6		VoC_push32(ACC1,DEFAULT)	|	VoC_bez32_r(ScaleNoiseVector_End,ACC0)(hi)
0xDF46DFE9,	//0x05b8		VoC_push32(RL6,DEFAULT)	|	VoC_push16(RA,IN_PARALLEL)
0x6066DF47,	//0x05ba		VoC_movreg16(REG6,REG3,DEFAULT)	|	VoC_push32(RL7,DEFAULT)
0x0A82DFC0,	//0x05bc		VoC_lw16i(REG2,0x4932)(lo)	|	VoC_push16(REG0,IN_PARALLEL)
0x16064932,	//0x05be		VoC_and16_ri(REG6,0x3)(lo)	|	VoC_lw16i(REG2,0x4932)(hi)
0x78FE0003,	//0x05c0		VoC_shr16_ri(REG6,0xffffffff,DEFAULT)	|	VoC_and16_ri(REG6,0x3)(hi)
0x40B2F813,	//0x05c2		VoC_add16_rr(REG2,REG2,REG6,DEFAULT)	|	VoC_shr16_ri(REG3,0x2,IN_PARALLEL)
0xC0F3E056,	//0x05c4		VoC_add16_rr(REG3,REG3,REG6,DEFAULT)	|	VoC_lw16i_short(REG6,0x5,IN_PARALLEL)
0xFF265995,	//0x05c6		VoC_movreg32(RL6,ACC0,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG2,DEFAULT)
0x04302B80,	//0x05c8		VoC_jal(Coolsand_CLZ)
0x4DA407B5,	//0x05ca		VoC_sub16_rd(REG5,REG6,0x4da4)
0x7FFE1645,	//0x05cc		VoC_and16_ri(REG5,0xfffe)
0x4DA00B28,	//0x05ce		VoC_sub16_dr(REG0,0x4da0,REG5)
0xDF457F23,	//0x05d0		VoC_push32(ACC1,IN_PARALLEL)	|	VoC_movreg32(REG67,ACC0,DEFAULT)
0xFFC07E83,	//0x05d2		VoC_NAD(IN_PARALLEL)	|	VoC_shr32_rr(REG67,REG0,DEFAULT)
0x057B2B80,	//0x05d4		VoC_jal(Coolsand_InvRootR)
0xE1367F1C,	//0x05d6		VoC_lw16i_short(REG6,0x13,IN_PARALLEL)	|	VoC_movreg32(ACC0,REG67,DEFAULT)
0xDF05780D,	//0x05d8		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0x1,DEFAULT)
0x42F3C3AE,	//0x05da		VoC_sub16_rr(REG3,REG3,REG6,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)
0xFFC0FF26,	//0x05dc		VoC_NAD	|	VoC_movreg32(RL6,ACC0,IN_PARALLEL)
0x04302B80,	//0x05de		VoC_jal(Coolsand_CLZ)
0x4DA20B36,	//0x05e0		VoC_sub16_dr(REG6,0x4da2,REG6)
0x0736FEB4,	//0x05e2		VoC_add16_rd(REG6,REG6,0x4da7)(lo)	|	VoC_shr32_rr(ACC0,REG6,DEFAULT)
0xC19D4DA7,	//0x05e4		VoC_add16_rr(REG5,REG6,REG3,DEFAULT)	|	VoC_add16_rd(REG6,REG6,0x4da7)(hi)
0xFF2B7F20,	//0x05e6		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_movreg32(REG01,ACC0,DEFAULT)
0xF90E4C7C,	//0x05e8		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xF9084E71,	//0x05ea		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xEE104E78,	//0x05ec		VoC_lw16i_short(REG0,0xffffffe1,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0x4DA00B2D,	//0x05ee		VoC_sub16_dr(REG5,0x4da0,REG5)
0x05F43485,	//0x05f0		VoC_bngt16_rr(ScaleNoiseVector_L1,REG0,REG5)
0xFFC06005,	//0x05f2		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(REG5,REG0,DEFAULT)
		//0x05f4		ScaleNoiseVector_L1
0x27881486,	//0x05f4		VoC_lw32_d(RL6,0x2788)
0xF6825F80,	//0x05f6		VoC_movreg16(REG2,REG4,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x3105F004,	//0x05f8		VoC_bgtz16_r(ScaleNoiseVector_L2,REG5)(lo)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x60A405FE,	//0x05fa		VoC_movreg16(REG4,REG5,DEFAULT)	|	VoC_bgtz16_r(ScaleNoiseVector_L2,REG5)(hi)
0xFFC0E005,	//0x05fc		VoC_NAD	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
		//0x05fe		ScaleNoiseVector_L2
0xFF256611,	//0x05fe		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_loop_r_short(REG0,DEFAULT)
0xFF2B5990,	//0x0600		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_lw32_p(REG01,REG2,DEFAULT)
0x4C7CFEA0,	//0x0602		VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)	|	VoC_shr32_rr(REG01,REG4,DEFAULT)
0x4E71F90E,	//0x0604		VoC_macX_rr(REG6,REG1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE78F908,	//0x0606		VoC_macX_rr(REG7,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x1,IN_PARALLEL)
0xFEACFFC0,	//0x0608		VoC_shr32_rr(ACC0,REG5,DEFAULT)	|	VoC_NOP
0xFAFC7F23,	//0x060a		VoC_shr32_ri(ACC0,0x1f,IN_PARALLEL)	|	VoC_movreg32(REG67,ACC0,DEFAULT)
0xDDD46563,	//0x060c		VoC_sw32inc_p(ACC0,REG2,IN_PARALLEL)	|	VoC_xor32_rr(REG67,ACC0,DEFAULT)
0xE51ECAE3,	//0x060e		VoC_or32_rr(RL6,REG67,DEFAULT)	|	VoC_sub32_rr(REG67,REG67,ACC0,DEFAULT)
		//0x060f		VoC_endloop0
0xDFA95F07,	//0x0610		VoC_pop16(RA,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0xDF05DF06,	//0x0612		VoC_pop32(ACC1,DEFAULT)	|	VoC_pop32(RL6,DEFAULT)
0x27881586,	//0x0614		VoC_sw32_d(RL6,0x2788)
		//0x0616		ScaleNoiseVector_End
0xFFC06580,	//0x0616		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0618		Coolsand_GenerateNoiseVector
0x06513140,	//0x0618		VoC_bngtz16_r(GenerateNoiseVector_L0,REG0)
0xDFC65F40,	//0x061a		VoC_push16(REG6,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xDFC75F45,	//0x061c		VoC_push16(REG7,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xDFC25F46,	//0x061e		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0xDFC35F47,	//0x0620		VoC_push16(REG3,IN_PARALLEL)	|	VoC_push32(RL7,DEFAULT)
0xF00A6082,	//0x0622		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_movreg16(REG2,REG4,DEFAULT)
0x2698180B,	//0x0624		VoC_lw16i_set_inc(REG3,0x2698,0x2)
0x735F0ACA,	//0x0626		VoC_lw16i(ACC1_LO,0xf35f)
0x3C6E0A8B,	//0x0628		VoC_lw16i(ACC1_HI,0x3c6e)
0x00480A96,	//0x062a		VoC_lw16i(STATUS,0x48)
0xE61AF096,	//0x062c		VoC_loop_r_short(REG0,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0x7F26D99C,	//0x062e		VoC_movreg32(RL6,ACC0,DEFAULT)	|	VoC_lw32_p(ACC0,REG3,DEFAULT)
0x4934FD84,	//0x0630		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_shru32_ri(ACC0,0xfffffff0,IN_PARALLEL)
0x7F37FDF6,	//0x0632		VoC_movreg32(RL7,RL6,DEFAULT)	|	VoC_shru32_ri(RL6,0xfffffffe,IN_PARALLEL)
0xF096FDFE,	//0x0634		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_shru32_ri(RL6,0xffffffff,IN_PARALLEL)
0xF096C9BE,	//0x0636		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_add32_rr(RL6,RL6,RL7,DEFAULT)
0xFDCE4934,	//0x0638		VoC_shru32_ri(RL6,0xfffffff9,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)
0x4934F096,	//0x063a		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xF096FDE6,	//0x063c		VoC_lw16i_short(STATUS,0x4,DEFAULT)	|	VoC_shru32_ri(RL6,0xfffffffc,IN_PARALLEL)
0xFDD64934,	//0x063e		VoC_shru32_ri(RL6,0xfffffffa,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)
0xC934F096,	//0x0640		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xC92CF096,	//0x0642		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xFA847096,	//0x0644		VoC_shr32_ri(ACC0,0x10,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x4,DEFAULT)
0xDDD4DD9C,	//0x0646		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32_p(ACC0,REG3,DEFAULT)
		//0x0647		VoC_endloop0
0x5F07F116,	//0x0648		VoC_pop32(RL7,DEFAULT)	|	VoC_lw16i_short(STATUS,0x8,DEFAULT)
0x5F06DF83,	//0x064a		VoC_pop32(RL6,DEFAULT)	|	VoC_pop16(REG3,IN_PARALLEL)
0x5F05DF82,	//0x064c		VoC_pop32(ACC1,DEFAULT)	|	VoC_pop16(REG2,IN_PARALLEL)
0x5F00DF87,	//0x064e		VoC_pop32(REG01,DEFAULT)	|	VoC_pop16(REG7,IN_PARALLEL)
0xE580DF86,	//0x0650		VoC_return	|	VoC_pop16(REG6,IN_PARALLEL)
		//0x0651		GenerateNoiseVector_L0
		//0x0652		Coolsand_CopyNoiseVector
0x6082DF41,	//0x0652		VoC_movreg16(REG2,REG4,DEFAULT)	|	VoC_push32(REG23,DEFAULT)
0x60E3F00A,	//0x0654		VoC_movreg16(REG3,REG7,DEFAULT)	|	VoC_lw16i_short(INC2,0x2,IN_PARALLEL)
0x3140F00B,	//0x0656		VoC_bngtz16_r(CopyNoiseVecto_L0,REG0)(lo)	|	VoC_lw16i_short(INC3,0x2,IN_PARALLEL)
0xE603065D,	//0x0658		VoC_loop_r_short(REG0,DEFAULT)	|	VoC_bngtz16_r(CopyNoiseVecto_L0,REG0)(hi)
0xFFC0D9D4,	//0x065a		VoC_NOP	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
		//0x065c		VoC_endloop0
0xDF01DDDC,	//0x065c		VoC_pop32(REG23,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x065d		CopyNoiseVecto_L0
0xFFC06580,	//0x065e		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0660		Coolsand_PNS
0xDFE97078,	//0x0660		VoC_push16(RA,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT16,0x3,DEFAULT)
0x24AC1403,	//0x0662		VoC_lw16_d(REG3,0x24ac)
0x0C8C1804,	//0x0664		VoC_lw16i_set_inc(REG0,0xc8c,0x1)
0x26960A84,	//0x0666		VoC_lw16i(REG4,0x2696)
0x4DA24481,	//0x0668		VoC_bne16_rd(Coolsand_PNS_L0,REG1,0x4da2)
0x26970A84,	//0x066a		VoC_lw16i(REG4,0x2697)
0x4DA24023,	//0x066c		VoC_be16_rd(Coolsand_PNS_L0,REG3,0x4da2)
0x0C9B1804,	//0x066e		VoC_lw16i_set_inc(REG0,0xc9b,0x1)
		//0x0670		Coolsand_PNS_L0
0xFF465844,	//0x0670		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_lw16_p(REG4,REG4,DEFAULT)
0x067831C4,	//0x0672		VoC_bnez16_r(Coolsand_PNS_L0_sub0,REG4)
0x2B00F000,	//0x0674		VoC_jump_lg(Coolsand_PNS_End)(lo)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0xFFC0076A,	//0x0676		VoC_NAD	|	VoC_jump_lg(Coolsand_PNS_End)(hi)
		//0x0678		Coolsand_PNS_L0_sub0
0x27881586,	//0x0678		VoC_sw32_d(RL6,0x2788)
0xF0085E00,	//0x067a		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xF00C6026,	//0x067c		VoC_lw16i_short(INC0,0x3,IN_PARALLEL)	|	VoC_movreg16(REG6,REG1,DEFAULT)
0xF0045883,	//0x067e		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_lw16inc_p(REG3,REG0,DEFAULT)
0xF4015884,	//0x0680		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0xF47A5885,	//0x0682		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x0C671504,	//0x0684		VoC_sw16_d(REG4,0xc67)
0x278A1505,	//0x0686		VoC_sw16_d(REG5,0x278a)
0x4A460A84,	//0x0688		VoC_lw16i(REG4,0x4a46)
0x4A521805,	//0x068a		VoC_lw16i_set_inc(REG1,0x4a52,0x1)
0x04000A87,	//0x068c		VoC_lw16i(REG7,0x400)
0x4DA44483,	//0x068e		VoC_bne16_rd(Coolsand_PNS_L1,REG3,0x4da4)
0x4C8A0A84,	//0x0690		VoC_lw16i(REG4,0x4c8a)
0x4C961805,	//0x0692		VoC_lw16i_set_inc(REG1,0x4c96,0x1)
0x00800A87,	//0x0694		VoC_lw16i(REG7,0x80)
		//0x0696		Coolsand_PNS_L1
0x0C6A0724,	//0x0696		VoC_add16_rd(REG4,REG4,0xc6a)
0x8061F005,	//0x0698		VoC_add16_rp(REG1,REG1,REG4,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x278D1507,	//0x069a		VoC_sw16_d(REG7,0x278d)
0x0C661506,	//0x069c		VoC_sw16_d(REG6,0xc66)
0xE0137002,	//0x069e		VoC_lw16i_short(REG3,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x278B1502,	//0x06a0		VoC_sw16_d(REG2,0x278b)
0x0C6C4433,	//0x06a2		VoC_bne16_rd(Coolsand_PNS_L1_sub0,REG3,0xc6c)
0x24AC4423,	//0x06a4		VoC_bne16_rd(Coolsand_PNS_L1_sub0,REG3,0x24ac)
0x278B1503,	//0x06a6		VoC_sw16_d(REG3,0x278b)
		//0x06a8		Coolsand_PNS_L1_sub0
0x06B43186,	//0x06a8		VoC_bez16_r(Coolsand_PNS_L2,REG6)
0x1CAC0A84,	//0x06aa		VoC_lw16i(REG4,0x1cac)
0x26151806,	//0x06ac		VoC_lw16i_set_inc(REG2,0x2615,0x1)
0x25251807,	//0x06ae		VoC_lw16i_set_inc(REG3,0x2525,0x1)
0x0C510A86,	//0x06b0		VoC_lw16i(REG6,0xc51)
0xFFC065CA,	//0x06b2		VoC_NAD(IN_PARALLEL)	|	VoC_jump(Coolsand_PNS_L3)
		//0x06b4		Coolsand_PNS_L2
0x14AC0A84,	//0x06b4		VoC_lw16i(REG4,0x14ac)
0x259D1806,	//0x06b6		VoC_lw16i_set_inc(REG2,0x259d,0x1)
0x24AD1807,	//0x06b8		VoC_lw16i_set_inc(REG3,0x24ad,0x1)
0x0C500A86,	//0x06ba		VoC_lw16i(REG6,0xc50)
		//0x06bc		Coolsand_PNS_L3
0x1506FF0D,	//0x06bc		VoC_sw16_d(REG6,0x2785)(lo)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0x15012785,	//0x06be		VoC_sw16_d(REG1,0x2784)(lo)	|	VoC_sw16_d(REG6,0x2785)(hi)
0xFF472784,	//0x06c0		VoC_lw32z(RL7,DEFAULT)	|	VoC_sw16_d(REG1,0x2784)(hi)
		//0x06c2		Coolsand_PNS_L10
0x1405E1E6,	//0x06c2		VoC_lw16_d(REG5,0x278a)(lo)	|	VoC_movreg16(REG6,RL7_HI,DEFAULT)
0x34AE278A,	//0x06c4		VoC_bngt16_rr(Coolsand_PNS_L11,REG5,REG6)(lo)	|	VoC_lw16_d(REG5,0x278a)(hi)
0xD885075A,	//0x06c6		VoC_lw16inc_p(REG5,REG0,DEFAULT)	|	VoC_bngt16_rr(Coolsand_PNS_L11,REG5,REG6)(hi)
0xFFC05FC0,	//0x06c8		VoC_NAD(IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x07512E29,	//0x06ca		VoC_loop_r(1,REG5)
0x0C670836,	//0x06cc		VoC_mult16_rd(REG6,REG6,0xc67)
0x27841401,	//0x06ce		VoC_lw16_d(REG1,0x2784)
0xF82660C5,	//0x06d0		VoC_shr16_ri(REG6,0x4,IN_PARALLEL)	|	VoC_movreg16(REG5,REG6,DEFAULT)
0x0C651506,	//0x06d2		VoC_sw16_d(REG6,0xc65)
0x268E0A80,	//0x06d4		VoC_lw16i(REG0,0x268e)
0x1605C180,	//0x06d6		VoC_and16_ri(REG5,0xf)(lo)	|	VoC_add16_rr(REG0,REG6,REG0,DEFAULT)
0x5886000F,	//0x06d8		VoC_lw16inc_p(REG6,REG0,DEFAULT)	|	VoC_and16_ri(REG5,0xf)(hi)
0x7E6EF742,	//0x06da		VoC_shru16_rr(REG6,REG5,DEFAULT)	|	VoC_movreg16(REG2,ACC1_LO,IN_PARALLEL)
0x600CF6AD,	//0x06dc		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_movreg16(RL6_HI,REG5,IN_PARALLEL)
0x1401F742,	//0x06de		VoC_lw16_d(REG1,0x2784)(lo)	|	VoC_movreg16(REG2,ACC1_LO,IN_PARALLEL)
0xFFC02784,	//0x06e0		VoC_NAD	|	VoC_lw16_d(REG1,0x2784)(hi)
		//0x06e2		Coolsand_PNS_L5
0xF00661C0,	//0x06e2		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0x0C671405,	//0x06e4		VoC_lw16_d(REG5,0xc67)
0x074C34A8,	//0x06e6		VoC_bngt16_rr(Coolsand_PNS_L4,REG5,REG0)
0xD890D8A5,	//0x06e8		VoC_lw16inc_p(REG0,REG1,DEFAULT)	|	VoC_lw16inc_p(REG5,REG2,DEFAULT)
0xDFC4B840,	//0x06ea		VoC_push16(REG4,DEFAULT)	|	VoC_sub16_pr(REG0,REG1,REG0,DEFAULT)
0xDF405FC6,	//0x06ec		VoC_push32(REG01,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0xE0D75FC2,	//0x06ee		VoC_lw16i_short(REG7,0xd,IN_PARALLEL)	|	VoC_push16(REG2,DEFAULT)
0x073535AF,	//0x06f0		VoC_bne16_rr(Coolsand_PNS_L6,REG5,REG7)
0x6E19F027,	//0x06f2		VoC_bnez16_d(Coolsand_PNS_L7,0xc66)(lo)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
0x2B800C66,	//0x06f4		VoC_jal(Coolsand_GenerateNoiseVector)(lo)	|	VoC_bnez16_d(Coolsand_PNS_L7,0xc66)(hi)
0xE1C70618,	//0x06f6		VoC_movreg16(REG7,RL7_LO,DEFAULT)	|	VoC_jal(Coolsand_GenerateNoiseVector)(hi)
0x26150A85,	//0x06f8		VoC_lw16i(REG5,0x2615)
0x072DC17D,	//0x06fa		VoC_add16_rd(REG5,REG5,0xc65)(lo)	|	VoC_add16_rr(REG5,REG5,REG7,DEFAULT)
0x6C0D0C65,	//0x06fc		VoC_bez16_d(Coolsand_PNS_L4_sub0,0x278b)(lo)	|	VoC_add16_rd(REG5,REG5,0xc65)(hi)
0xD855278B,	//0x06fe		VoC_lw16_p(REG5,REG5,DEFAULT)	|	VoC_bez16_d(Coolsand_PNS_L4_sub0,0x278b)(hi)
0x4DAE4495,	//0x0700		VoC_bne16_rd(Coolsand_PNS_L4_sub0,REG5,0x4dae)
0x14AC0A86,	//0x0702		VoC_lw16i(REG6,0x14ac)
0x1CAC0A87,	//0x0704		VoC_lw16i(REG7,0x1cac)
0xC1F7C336,	//0x0706		VoC_add16_rr(REG7,REG7,REG6,DEFAULT)	|	VoC_sub16_rr(REG6,REG4,REG6,DEFAULT)
0x06522B80,	//0x0708		VoC_jal(Coolsand_CopyNoiseVector)
		//0x070a		Coolsand_PNS_L4_sub0
0x072C2B00,	//0x070a		VoC_jump_lg(Coolsand_PNS_L7_sub3)
		//0x070c		Coolsand_PNS_L7
0x278C1507,	//0x070c		VoC_sw16_d(REG7,0x278c)
0x0A85E1C7,	//0x070e		VoC_lw16i(REG5,0x259d)(lo)	|	VoC_movreg16(REG7,RL7_LO,DEFAULT)
0xC17D259D,	//0x0710		VoC_add16_rr(REG5,REG5,REG7,DEFAULT)	|	VoC_lw16i(REG5,0x259d)(hi)
0x0C65072D,	//0x0712		VoC_add16_rd(REG5,REG5,0xc65)
0x278B6C14,	//0x0714		VoC_bez16_d(Coolsand_PNS_L7_sub0,0x278b)
0x450DD855,	//0x0716		VoC_bne16_rd(Coolsand_PNS_L7_sub0,REG5,0x4dae)(lo)	|	VoC_lw16_p(REG5,REG5,DEFAULT)
0x70274DAE,	//0x0718		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_bne16_rd(Coolsand_PNS_L7_sub0,REG5,0x4dae)(hi)
0x1606E005,	//0x071a		VoC_and16_ri(REG6,0x1)(lo)	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
0x31860001,	//0x071c		VoC_bez16_r(Coolsand_PNS_L7_sub1,REG6)(lo)	|	VoC_and16_ri(REG6,0x1)(hi)
0x44270723,	//0x071e		VoC_bne16_rd(Coolsand_PNS_L7_sub1,REG7,0x268d)(lo)	|	VoC_bez16_r(Coolsand_PNS_L7_sub1,REG6)(hi)
0x1505268D,	//0x0720		VoC_sw16_d(REG5,0x278c)(lo)	|	VoC_bne16_rd(Coolsand_PNS_L7_sub1,REG7,0x268d)(hi)
0xF047278C,	//0x0722		VoC_lw16i_short(REG7,0x2,DEFAULT)	|	VoC_sw16_d(REG5,0x278c)(hi)
		//0x0723		Coolsand_PNS_L7_sub1
0x268D4427,	//0x0724		VoC_bne16_rd(Coolsand_PNS_L7_sub0,REG7,0x268d)
0x278C1505,	//0x0726		VoC_sw16_d(REG5,0x278c)
		//0x0728		Coolsand_PNS_L7_sub0
0x278C6C04,	//0x0728		VoC_bez16_d(Coolsand_PNS_L7_sub3,0x278c)
0x06182B80,	//0x072a		VoC_jal(Coolsand_GenerateNoiseVector)
		//0x072c		Coolsand_PNS_L7_sub3
0xF76561C7,	//0x072c		VoC_movreg16(REG5,ACC1_HI,IN_PARALLEL)	|	VoC_movreg16(REG7,RL7_LO,DEFAULT)
0x072DC17D,	//0x072e		VoC_add16_rd(REG5,REG5,0xc65)(lo)	|	VoC_add16_rr(REG5,REG5,REG7,DEFAULT)
0xFFC00C65,	//0x0730		VoC_NOP	|	VoC_add16_rd(REG5,REG5,0xc65)(hi)
0x2B80D853,	//0x0732		VoC_jal(Coolsand_ScaleNoiseVector)(lo)	|	VoC_lw16_p(REG3,REG5,DEFAULT)
0xDF8205AC,	//0x0734		VoC_pop16(REG2,DEFAULT)	|	VoC_jal(Coolsand_ScaleNoiseVector)(hi)
		//0x0735		Coolsand_PNS_L6
0xDF005F86,	//0x0736		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG6,DEFAULT)
0xF8F85F84,	//0x0738		VoC_shr16_ri(REG0,0xffffffff,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0x6180C104,	//0x073a		VoC_movreg16(REG0,RL6_LO,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG0,DEFAULT)
0xF90EF7A5,	//0x073c		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG5,RL6_HI,IN_PARALLEL)
0x4DA2072D,	//0x073e		VoC_add16_rd(REG5,REG5,0x4da2)
0x4DB14425,	//0x0740		VoC_bne16_rd(Coolsand_PNS_L8,REG5,0x4db1)
0xF005D886,	//0x0742		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_lw16inc_p(REG6,REG0,DEFAULT)
		//0x0744		Coolsand_PNS_L8
0xF6AD600C,	//0x0744		VoC_movreg16(RL6_HI,REG5,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0x0700E1C0,	//0x0746		VoC_add16_rd(REG0,REG0,0x4da2)(lo)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0xE00E4DA2,	//0x0748		VoC_movreg16(RL7_LO,REG0,DEFAULT)	|	VoC_add16_rd(REG0,REG0,0x4da2)(hi)
0x06E22B00,	//0x074a		VoC_jump_lg(Coolsand_PNS_L5)
		//0x074c		Coolsand_PNS_L4
0x278D1407,	//0x074c		VoC_lw16_d(REG7,0x278d)
0x85CE700E,	//0x074e		VoC_sub16_rp(REG6,REG7,REG1,IN_PARALLEL)	|	VoC_lw16i_short(RL7_LO,0x0,DEFAULT)
0xC134F8FE,	//0x0750		VoC_add16_rr(REG4,REG4,REG6,DEFAULT)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
		//0x0751		VoC_endloop1
0x0736E1E6,	//0x0752		VoC_add16_rd(REG6,REG6,0x4da2)(lo)	|	VoC_movreg16(REG6,RL7_HI,DEFAULT)
0xE0CF4DA2,	//0x0754		VoC_movreg16(RL7_HI,REG6,DEFAULT)	|	VoC_add16_rd(REG6,REG6,0x4da2)(hi)
0xDF807F0D,	//0x0756		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0x06C22B00,	//0x0758		VoC_jump_lg(Coolsand_PNS_L10)
		//0x075a		Coolsand_PNS_L11
0x0C500A80,	//0x075a		VoC_lw16i(REG0,0xc50)
0x0C666C04,	//0x075c		VoC_bez16_d(Coolsand_PNS_L12,0xc66)
0x0C510A80,	//0x075e		VoC_lw16i(REG0,0xc51)
		//0x0760		Coolsand_PNS_L12
0x27881486,	//0x0760		VoC_lw32_d(RL6,0x2788)
0x04302B80,	//0x0762		VoC_jal(Coolsand_CLZ)
0x4DA207B6,	//0x0764		VoC_sub16_rd(REG6,REG6,0x4da2)
0x348ED801,	//0x0766		VoC_bngt16_rr(Coolsand_PNS_End,REG1,REG6)(lo)	|	VoC_lw16_p(REG1,REG0,DEFAULT)
0xDC06076A,	//0x0768		VoC_sw16_p(REG6,REG0,DEFAULT)	|	VoC_bngt16_rr(Coolsand_PNS_End,REG1,REG6)(hi)
		//0x076a		Coolsand_PNS_End
0xF000DFA9,	//0x076a		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xE290E580,	//0x076c		VoC_rbinc_i(REG4,0x4,DEFAULT)	|	VoC_return
		//0x076d		Coolsand_DecodeSingleChannelElement
0x1504F000,	//0x076e		VoC_sw16_d(REG4,0xc6d)(lo)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0xE5800C6D,	//0x0770		VoC_return	|	VoC_sw16_d(REG4,0xc6d)(hi)
		//0x0772		Coolsand_DecodeChannelPairElement
0xE285E290,	//0x0772		VoC_rbinc_i(REG5,0x1,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0x1504E242,	//0x0774		VoC_sw16_d(REG4,0xc6d)(lo)	|	VoC_lbinc_p(REG2)
0x15050C6D,	//0x0776		VoC_sw16_d(REG5,0x24ac)(lo)	|	VoC_sw16_d(REG4,0xc6d)(hi)
0x318524AC,	//0x0778		VoC_bez16_r(DecodeChannelPairElement_End,REG5)(lo)	|	VoC_sw16_d(REG5,0x24ac)(hi)
0xDFE907A2,	//0x077a		VoC_push16(RA,DEFAULT)	|	VoC_bez16_r(DecodeChannelPairElement_End,REG5)(hi)
0x0C8C1804,	//0x077c		VoC_lw16i_set_inc(REG0,0xc8c,0x1)
0x12112B80,	//0x077e		VoC_jal(Coolsand_DecodeICSInfo)
0xDFA9628B,	//0x0780		VoC_pop16(RA,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x2,DEFAULT)
0x1507E242,	//0x0782		VoC_sw16_d(REG7,0x268d)(lo)	|	VoC_lbinc_p(REG2)
0x45AF268D,	//0x0784		VoC_bne16_rd(DecodeChannelPairElement_End,REG7,0x4da2)(lo)	|	VoC_sw16_d(REG7,0x268d)(hi)
0x18044DA2,	//0x0786		VoC_lw16i_set_inc(REG0,0x268e,0x1)(lo)	|	VoC_bne16_rd(DecodeChannelPairElement_End,REG7,0x4da2)(hi)
0x1407268E,	//0x0788		VoC_lw16_d(REG7,0xc92)(lo)	|	VoC_lw16i_set_inc(REG0,0x268e,0x1)(hi)
0x14030C92,	//0x078a		VoC_lw16_d(REG3,0xc8f)(lo)	|	VoC_lw16_d(REG7,0xc92)(hi)
0x70260C8F,	//0x078c		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_lw16_d(REG3,0xc8f)(hi)
0x3147FF42,	//0x078e		VoC_bngtz16_r(DecodeChannelPairElement_End,REG7)(lo)	|	VoC_lw32z(REG45,IN_PARALLEL)
0x314307A2,	//0x0790		VoC_bngtz16_r(DecodeChannelPairElement_End,REG3)(lo)	|	VoC_bngtz16_r(DecodeChannelPairElement_End,REG7)(hi)
0x2E3907A2,	//0x0792		VoC_loop_r(1,REG7)(lo)	|	VoC_bngtz16_r(DecodeChannelPairElement_End,REG3)(hi)
0xE6CB07A1,	//0x0794		VoC_loop_r_short(REG3,DEFAULT)	|	VoC_loop_r(1,REG7)(hi)
0x7E67E287,	//0x0796		VoC_shru16_rr(REG7,REG4,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0x647DC334,	//0x0798		VoC_or16_rr(REG5,REG7,DEFAULT)	|	VoC_sub16_rr(REG4,REG4,REG6,IN_PARALLEL)
0x35A1EF01,	//0x079a		VoC_bne16_rr(DecodeChannelPairElement_L0,REG4,REG1)(lo)	|	VoC_lw16i_short(REG1,0xfffffff0,IN_PARALLEL)
0x7F4207A0,	//0x079c		VoC_lw32z(REG45,DEFAULT)	|	VoC_bne16_rr(DecodeChannelPairElement_L0,REG4,REG1)(hi)
0xE242DC85,	//0x079e		VoC_lbinc_p(REG2)	|	VoC_sw16inc_p(REG5,REG0,IN_PARALLEL)
		//0x07a0		DecodeChannelPairElement_L0
		//0x07a0		VoC_endloop0
0xFFC0DC05,	//0x07a0		VoC_NOP	|	VoC_sw16_p(REG5,REG0,DEFAULT)
		//0x07a1		VoC_endloop1
		//0x07a2		DecodeChannelPairElement_End
0xE242FFC0,	//0x07a2		VoC_lbinc_p(REG2)	|	VoC_NOP
0xE580F000,	//0x07a4		VoC_return	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
		//0x07a6		Coolsand_DecodeFillElement
0x77E1E290,	//0x07a6		VoC_lw16i_short(REG1,0xffffffff,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0x4434E013,	//0x07a8		VoC_bne16_rd(DecodeFillElement_L0,REG4,0x4db0)(lo)	|	VoC_lw16i_short(REG3,0x1,IN_PARALLEL)
0x62A14DB0,	//0x07aa		VoC_rbinc_i(REG5,0x8,DEFAULT)	|	VoC_bne16_rd(DecodeFillElement_L0,REG4,0x4db0)(hi)
0xE242C31C,	//0x07ac		VoC_lbinc_p(REG2)	|	VoC_sub16_rr(REG4,REG4,REG3,IN_PARALLEL)
0xF000C12C,	//0x07ae		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG5,DEFAULT)
		//0x07af		DecodeFillElement_L0
0x0C6D1501,	//0x07b0		VoC_sw16_d(REG1,0xc6d)
		//0x07b2		DecodeFillElement_L1
0x07B83144,	//0x07b2		VoC_bngtz16_r(DecodeFillElement_End,REG4)
0xC31C62A1,	//0x07b4		VoC_sub16_rr(REG4,REG4,REG3,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
0xE5FBE242,	//0x07b6		VoC_jump(DecodeFillElement_L1)	|	VoC_lbinc_p(REG2)
		//0x07b8		DecodeFillElement_End
0xFFC06580,	//0x07b8		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x07ba		Coolsand_DecodeNextElement
0xE0005FE9,	//0x07ba		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x0C6C1406,	//0x07bc		VoC_lw16_d(REG6,0xc6c)
0xE242E28C,	//0x07be		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG4,0x3,DEFAULT)
0x24AC1500,	//0x07c0		VoC_sw16_d(REG0,0x24ac)
0x0C6B1506,	//0x07c2		VoC_sw16_d(REG6,0xc6b)
0x0C6C1504,	//0x07c4		VoC_sw16_d(REG4,0xc6c)
0x07CC31C4,	//0x07c6		VoC_bnez16_r(DecodeNextElement_L0,REG4)
0x076D2B80,	//0x07c8		VoC_jal(Coolsand_DecodeSingleChannelElement)
0xFFC065DE,	//0x07ca		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeNextElement_L6)
		//0x07cc		DecodeNextElement_L0
0x4DA24434,	//0x07cc		VoC_bne16_rd(DecodeNextElement_L1,REG4,0x4da2)
0x07722B80,	//0x07ce		VoC_jal(Coolsand_DecodeChannelPairElement)
0xFFC065D8,	//0x07d0		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeNextElement_L6)
		//0x07d2		DecodeNextElement_L1
0x4DA44424,	//0x07d2		VoC_bne16_rd(DecodeNextElement_L2,REG4,0x4da4)
0xFFC065D4,	//0x07d4		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeNextElement_L6)
		//0x07d6		DecodeNextElement_L2
0xE0477066,	//0x07d6		VoC_lw16i_short(REG7,0x4,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x3,DEFAULT)
0x07DC35A6,	//0x07d8		VoC_bne16_rr(DecodeNextElement_L3,REG4,REG6)
0xFFC065CE,	//0x07da		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeNextElement_L6)
		//0x07dc		DecodeNextElement_L3
0x07E035A7,	//0x07dc		VoC_bne16_rr(DecodeNextElement_L4,REG4,REG7)
0xFFC065CA,	//0x07de		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeNextElement_L6)
		//0x07e0		DecodeNextElement_L4
0xE06770A6,	//0x07e0		VoC_lw16i_short(REG7,0x6,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x5,DEFAULT)
0x07E435A6,	//0x07e2		VoC_bne16_rr(DecodeNextElement_L5,REG4,REG6)
		//0x07e4		DecodeNextElement_L5
0x07E835A7,	//0x07e4		VoC_bne16_rr(DecodeNextElement_L6,REG4,REG7)
0x07A62B80,	//0x07e6		VoC_jal(Coolsand_DecodeFillElement)
		//0x07e8		DecodeNextElement_L6
0x3180DFA9,	//0x07e8		VoC_bez16_r(DecodeNextElement_End,REG0)(lo)	|	VoC_pop16(RA,DEFAULT)
0xF70007EC,	//0x07ea		VoC_lw16i_short(REG0,0xfffffff8,DEFAULT)	|	VoC_bez16_r(DecodeNextElement_End,REG0)(hi)
		//0x07ec		DecodeNextElement_End
0xFFC06580,	//0x07ec		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x07ee		Coolsand_DequantBlock
0x08BC3146,	//0x07ee		VoC_bngtz16_r(DequantBlock_End,REG6)
0x00640A81,	//0x07f0		VoC_lw16i(REG1,0x64)
0x4208DFE9,	//0x07f2		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x6001F009,	//0x07f4		VoC_movreg16(REG1,REG0,DEFAULT)	|	VoC_lw16i_short(INC1,0x2,IN_PARALLEL)
0x1600E102,	//0x07f6		VoC_and16_ri(REG0,0x3)(lo)	|	VoC_lw16i_short(REG2,0x10,IN_PARALLEL)
0xF8F80003,	//0x07f8		VoC_shr16_ri(REG0,0xffffffff,DEFAULT)	|	VoC_and16_ri(REG0,0x3)(hi)
0x49320A83,	//0x07fa		VoC_lw16i(REG3,0x4932)
0xC0C34482,	//0x07fc		VoC_add16_rr(REG3,REG3,REG0,IN_PARALLEL)	|	VoC_mult16_rr(REG2,REG2,REG0,DEFAULT)
0x493A0A85,	//0x07fe		VoC_lw16i(REG5,0x493a)
0xC155599D,	//0x0800		VoC_add16_rr(REG5,REG5,REG2,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG3,DEFAULT)
0xE0527811,	//0x0802		VoC_lw16i_short(REG2,0x5,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x2,DEFAULT)
0xE1C04057,	//0x0804		VoC_lw16i_short(REG0,0x1c,IN_PARALLEL)	|	VoC_add16_rr(REG7,REG1,REG2,DEFAULT)
0xEE124238,	//0x0806		VoC_lw16i_short(REG2,0xffffffe1,IN_PARALLEL)	|	VoC_sub16_rr(REG0,REG0,REG7,DEFAULT)
0xF6A17F44,	//0x0808		VoC_movreg16(REG1,REG5,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x277C180B,	//0x080a		VoC_lw16i_set_inc(REG3,0x277c,0x2)
0x081A3100,	//0x080c		VoC_bgtz16_r(DequantBlock_L1,REG0)
0x08113490,	//0x080e		VoC_bngt16_rr(DequantBlock_L2,REG2,REG0)
0xE846E040,	//0x0810		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_movreg16(REG0,REG2,DEFAULT)
		//0x0811		DequantBlock_L2
0x59CED9CC,	//0x0812		VoC_lw32inc_p(RL6,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xFE86FE84,	//0x0814		VoC_shr32_rr(RL6,REG0,DEFAULT)	|	VoC_shr32_rr(ACC0,REG0,IN_PARALLEL)
0xDDDEDDDC,	//0x0816		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x0817		VoC_endloop0
0xFFC065CE,	//0x0818		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DequantBlock_L5)
		//0x081a		DequantBlock_L1
0xDE085DDC,	//0x081a		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
0x7E84D9CC,	//0x081c		VoC_shr32_rr(ACC0,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0x59CFD9CE,	//0x081e		VoC_lw32inc_p(RL7,REG1,DEFAULT)	|	VoC_lw32inc_p(RL6,REG1,IN_PARALLEL)
0x7E87FE86,	//0x0820		VoC_shr32_rr(RL7,REG0,DEFAULT)	|	VoC_shr32_rr(RL6,REG0,IN_PARALLEL)
0xDDDEDDDC,	//0x0822		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,IN_PARALLEL)
0xFFC05D9F,	//0x0824		VoC_NAD(IN_PARALLEL)	|	VoC_sw32_p(RL7,REG3,DEFAULT)
		//0x0826		DequantBlock_L5
0xFF466083,	//0x0826		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_movreg16(REG3,REG4,DEFAULT)
0x277C0A84,	//0x0828		VoC_lw16i(REG4,0x277c)
0x08B92E30,	//0x082a		VoC_loop_r(0,REG6)
0xF66E5831,	//0x082c		VoC_movreg16(RL7_LO,REG3,IN_PARALLEL)	|	VoC_lw16_p(REG1,REG3,DEFAULT)
0x6020E02F,	//0x082e		VoC_movreg16(REG0,REG1,DEFAULT)	|	VoC_movreg16(RL7_HI,REG1,DEFAULT)
0x6488F879,	//0x0830		VoC_xor16_rr(REG0,REG1,DEFAULT)	|	VoC_shr16_ri(REG1,0xf,IN_PARALLEL)
0xC208E042,	//0x0832		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i_short(REG2,0x4,IN_PARALLEL)
0xC036C026,	//0x0834		VoC_add16_rr(REG6,REG0,REG6,DEFAULT)	|	VoC_add16_rr(REG6,REG0,REG4,DEFAULT)
0x083B3490,	//0x0836		VoC_bngt16_rr(DequantBlock_L6,REG2,REG0)
0x2B00D9B4,	//0x0838		VoC_jump_lg(DequantBlock_L16)(lo)	|	VoC_lw32_p(ACC0,REG6,DEFAULT)
0xC02E08AE,	//0x083a		VoC_add16_rr(REG6,REG0,REG5,DEFAULT)	|	VoC_jump_lg(DequantBlock_L16)(hi)
		//0x083b		DequantBlock_L6
0xC1867202,	//0x083c		VoC_add16_rr(REG6,REG6,REG0,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x10,DEFAULT)
0x08453490,	//0x083e		VoC_bngt16_rr(DequantBlock_L7,REG2,REG0)
0x59B4F323,	//0x0840		VoC_lw32_p(ACC0,REG6,DEFAULT)	|	VoC_lw16i_short(REG3,0x19,DEFAULT)
0x2B00C2FB,	//0x0842		VoC_jump_lg(DequantBlock_L13)(lo)	|	VoC_sub16_rr(REG3,REG3,REG7,IN_PARALLEL)
0xC21608A4,	//0x0844		VoC_sub16_rr(REG6,REG0,REG2,DEFAULT)	|	VoC_jump_lg(DequantBlock_L13)(hi)
		//0x0845		DequantBlock_L7
0xF8FE78F2,	//0x0846		VoC_shr16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_shr16_ri(REG2,0xfffffffe,DEFAULT)
0x08583490,	//0x0848		VoC_bngt16_rr(DequantBlock_L8,REG2,REG0)
0x49BA0A83,	//0x084a		VoC_lw16i(REG3,0x49ba)
0xF2A3C0F6,	//0x084c		VoC_lw16i_short(REG3,0x15,DEFAULT)	|	VoC_add16_rr(REG6,REG3,REG6,DEFAULT)
0xDFC7C2FB,	//0x084e		VoC_push16(REG7,DEFAULT)	|	VoC_sub16_rr(REG3,REG3,REG7,DEFAULT)
0xFF2859B3,	//0x0850		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0x04562B80,	//0x0852		VoC_jal(Coolsand_MULSHIFT32)
0x2B00DF87,	//0x0854		VoC_jump_lg(DequantBlock_L13)(lo)	|	VoC_pop16(REG7,DEFAULT)
0xFFC008A4,	//0x0856		VoC_NAD	|	VoC_jump_lg(DequantBlock_L13)(hi)
		//0x0858		DequantBlock_L8
0xDF457001,	//0x0858		VoC_push32(ACC1,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xE0037B78,	//0x085a		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xffffffef,DEFAULT)
0xE01A700B,	//0x085c		VoC_lw16i_short(ACC1_LO,0x1,IN_PARALLEL)	|	VoC_lw16i_short(ACC1_HI,0x0,DEFAULT)
0xE0467B2D,	//0x085e		VoC_lw16i_short(REG6,0x4,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xffffffe5,DEFAULT)
0x086436A8,	//0x0860		VoC_bngt32_rr(DequantBlock_L9,ACC1,REG01)
0xC0F37BE0,	//0x0862		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xfffffffc,DEFAULT)
		//0x0864		DequantBlock_L9
0xE0267BF5,	//0x0864		VoC_lw16i_short(REG6,0x2,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xfffffffe,DEFAULT)
0x086A36A8,	//0x0866		VoC_bngt32_rr(DequantBlock_L10,ACC1,REG01)
0xC0F37BF0,	//0x0868		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xfffffffe,DEFAULT)
		//0x086a		DequantBlock_L10
0xE0167BFD,	//0x086a		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xffffffff,DEFAULT)
0x087036A8,	//0x086c		VoC_bngt32_rr(DequantBlock_L11,ACC1,REG01)
0xC0F37BF8,	//0x086e		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xffffffff,DEFAULT)
		//0x0870		DequantBlock_L11
0x4A24180A,	//0x0870		VoC_lw16i_set_inc(REG2,0x4a24,0x2)
0x799A0A8A,	//0x0872		VoC_lw16i(ACC1_LO,0x799a)
0x5A820A8B,	//0x0874		VoC_lw16i(ACC1_HI,0x5a82)
0x087A36A8,	//0x0876		VoC_bngt32_rr(DequantBlock_L12,ACC1,REG01)
0x4A1A180A,	//0x0878		VoC_lw16i_set_inc(REG2,0x4a1a,0x2)
		//0x087a		DequantBlock_L12
0x7F05DFC7,	//0x087a		VoC_movreg32(ACC1,REG01,DEFAULT)	|	VoC_push16(REG7,DEFAULT)
0xFFC0D9D3,	//0x087c		VoC_NAD	|	VoC_lw32inc_p(REG67,REG2,IN_PARALLEL)
0x04562B80,	//0x087e		VoC_jal(Coolsand_MULSHIFT32)
0xFF281313,	//0x0880		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)
0x04562B80,	//0x0882		VoC_jal(Coolsand_MULSHIFT32)
0xFF281313,	//0x0884		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)
0x04562B80,	//0x0886		VoC_jal(Coolsand_MULSHIFT32)
0xFF281313,	//0x0888		VoC_movreg32(REG01,ACC1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)
0x04562B80,	//0x088a		VoC_jal(Coolsand_MULSHIFT32)
0x4A360A80,	//0x088c		VoC_lw16i(REG0,0x4a36)
0xF66178FB,	//0x088e		VoC_movreg16(REG1,REG3,IN_PARALLEL)	|	VoC_shr16_ri(REG3,0xffffffff,DEFAULT)
0x9313C018,	//0x0890		VoC_add32inc_rp(REG67,ACC0,REG2,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,DEFAULT)
0xF6235980,	//0x0892		VoC_movreg16(REG3,REG1,IN_PARALLEL)	|	VoC_lw32_p(REG01,REG0,DEFAULT)
0x04562B80,	//0x0894		VoC_jal(Coolsand_MULSHIFT32)
0xDF057BEC,	//0x0896		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffffd,DEFAULT)
0xFF237F28,	//0x0898		VoC_movreg32(REG67,ACC0,IN_PARALLEL)	|	VoC_movreg32(REG01,ACC1,DEFAULT)
0x04562B80,	//0x089a		VoC_jal(Coolsand_MULSHIFT32)
0x4A2E0A86,	//0x089c		VoC_lw16i(REG6,0x4a2e)
0x7302DF87,	//0x089e		VoC_lw16i_short(REG2,0x18,DEFAULT)	|	VoC_pop16(REG7,DEFAULT)
0xC2BAC0F6,	//0x08a0		VoC_sub16_rr(REG2,REG2,REG7,DEFAULT)	|	VoC_add16_rr(REG6,REG3,REG6,IN_PARALLEL)
0xFFC004B3,	//0x08a2		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rp(REG3,REG2,REG6,DEFAULT)
		//0x08a4		DequantBlock_L13
0x08AC3243,	//0x08a4		VoC_bnltz16_r(DequantBlock_L14,REG3)
0x3493F422,	//0x08a6		VoC_bngt16_rr(DequantBlock_L15,REG2,REG3)(lo)	|	VoC_lw16i_short(REG2,0xffffffe1,DEFAULT)
0xE04308AA,	//0x08a8		VoC_movreg16(REG3,REG2,DEFAULT)	|	VoC_bngt16_rr(DequantBlock_L15,REG2,REG3)(hi)
		//0x08aa		DequantBlock_L15
0xE5C3FE9C,	//0x08aa		VoC_jump(DequantBlock_L16)	|	VoC_shr32_rr(ACC0,REG3,DEFAULT)
		//0x08ac		DequantBlock_L14
0xFFC07E9C,	//0x08ac		VoC_NAD(IN_PARALLEL)	|	VoC_shr32_rr(ACC0,REG3,DEFAULT)
		//0x08ae		DequantBlock_L16
0xFF2661E1,	//0x08ae		VoC_movreg32(RL6,ACC0,IN_PARALLEL)	|	VoC_movreg16(REG1,RL7_HI,DEFAULT)
0xFAF861C3,	//0x08b0		VoC_shr32_ri(REG01,0x1f,IN_PARALLEL)	|	VoC_movreg16(REG3,RL7_LO,DEFAULT)
0x0C622A06,	//0x08b2		VoC_or32_rd(RL6,0xc62)
0xF00B6544,	//0x08b4		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_xor32_rr(ACC0,REG01,DEFAULT)
0x1586CB04,	//0x08b6		VoC_sw32_d(RL6,0xc62)(lo)	|	VoC_sub32_rr(ACC0,ACC0,REG01,DEFAULT)
0xDDDC0C62,	//0x08b8		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sw32_d(RL6,0xc62)(hi)
		//0x08b9		VoC_endloop0
0xE064DFA9,	//0x08ba		VoC_movreg16(REG4,REG3,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
		//0x08bc		DequantBlock_End
0xFFC06580,	//0x08bc		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x08be		Coolsand_Dequantize
0x24AC1403,	//0x08be		VoC_lw16_d(REG3,0x24ac)
0xFF467024,	//0x08c0		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x0C8C1804,	//0x08c2		VoC_lw16i_set_inc(REG0,0xc8c,0x1)
0x08CA35B4,	//0x08c4		VoC_bne16_rr(Dequantize_L0,REG6,REG4)
0x08CA351C,	//0x08c6		VoC_be16_rr(Dequantize_L0,REG3,REG4)
0x0C9B1804,	//0x08c8		VoC_lw16i_set_inc(REG0,0xc9b,0x1)
		//0x08ca		Dequantize_L0
0x0C621586,	//0x08ca		VoC_sw32_d(RL6,0xc62)
0xF0085E00,	//0x08cc		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xE0547070,	//0x08ce		VoC_lw16i_short(REG4,0x5,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x3,DEFAULT)
0xF0045883,	//0x08d0		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_lw16inc_p(REG3,REG0,DEFAULT)
0xF4015884,	//0x08d2		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0xF47A5885,	//0x08d4		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x27871504,	//0x08d6		VoC_sw16_d(REG4,0x2787)
0x27861505,	//0x08d8		VoC_sw16_d(REG5,0x2786)
0x4A460A84,	//0x08da		VoC_lw16i(REG4,0x4a46)
0x4A521805,	//0x08dc		VoC_lw16i_set_inc(REG1,0x4a52,0x1)
0x04000A87,	//0x08de		VoC_lw16i(REG7,0x400)
0x35ABF045,	//0x08e0		VoC_bne16_rr(Dequantize_L1,REG5,REG3)(lo)	|	VoC_lw16i_short(REG5,0x2,DEFAULT)
0x0A8408EA,	//0x08e2		VoC_lw16i(REG4,0x4c8a)(lo)	|	VoC_bne16_rr(Dequantize_L1,REG5,REG3)(hi)
0x18054C8A,	//0x08e4		VoC_lw16i_set_inc(REG1,0x4c96,0x1)(lo)	|	VoC_lw16i(REG4,0x4c8a)(hi)
0x0A874C96,	//0x08e6		VoC_lw16i(REG7,0x80)(lo)	|	VoC_lw16i_set_inc(REG1,0x4c96,0x1)(hi)
0xFFC00080,	//0x08e8		VoC_NAD	|	VoC_lw16i(REG7,0x80)(hi)
		//0x08ea		Dequantize_L1
0x0C6A0724,	//0x08ea		VoC_add16_rd(REG4,REG4,0xc6a)
0x8061F005,	//0x08ec		VoC_add16_rp(REG1,REG1,REG4,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x09023186,	//0x08ee		VoC_bez16_r(Dequantize_L2,REG6)
0x269B1505,	//0x08f0		VoC_sw16_d(REG5,0x269b)
0x26971505,	//0x08f2		VoC_sw16_d(REG5,0x2697)
0x269B0A88,	//0x08f4		VoC_lw16i(ACC0_LO,0x269b)
0x26970A89,	//0x08f6		VoC_lw16i(ACC0_HI,0x2697)
0x1CAC0A84,	//0x08f8		VoC_lw16i(REG4,0x1cac)
0x26151806,	//0x08fa		VoC_lw16i_set_inc(REG2,0x2615,0x1)
0x25251807,	//0x08fc		VoC_lw16i_set_inc(REG3,0x2525,0x1)
0x0C510A86,	//0x08fe		VoC_lw16i(REG6,0xc51)
0xFFC065D2,	//0x0900		VoC_NAD(IN_PARALLEL)	|	VoC_jump(Dequantize_L3)
		//0x0902		Dequantize_L2
0x269A1505,	//0x0902		VoC_sw16_d(REG5,0x269a)
0x26961505,	//0x0904		VoC_sw16_d(REG5,0x2696)
0x269A0A88,	//0x0906		VoC_lw16i(ACC0_LO,0x269a)
0x26960A89,	//0x0908		VoC_lw16i(ACC0_HI,0x2696)
0x14AC0A84,	//0x090a		VoC_lw16i(REG4,0x14ac)
0x259D1806,	//0x090c		VoC_lw16i_set_inc(REG2,0x259d,0x1)
0x24AD1807,	//0x090e		VoC_lw16i_set_inc(REG3,0x24ad,0x1)
0x0C500A86,	//0x0910		VoC_lw16i(REG6,0xc50)
		//0x0912		Dequantize_L3
0x1506FF0D,	//0x0912		VoC_sw16_d(REG6,0x2785)(lo)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0x15012785,	//0x0914		VoC_sw16_d(REG1,0x2784)(lo)	|	VoC_sw16_d(REG6,0x2785)(hi)
0x5FE92784,	//0x0916		VoC_push16(RA,DEFAULT)	|	VoC_sw16_d(REG1,0x2784)(hi)
0xFF46FF47,	//0x0918		VoC_lw32z(RL6,DEFAULT)	|	VoC_lw32z(RL7,IN_PARALLEL)
		//0x091a		Dequantize_L10
0x1405E1E6,	//0x091a		VoC_lw16_d(REG5,0x2786)(lo)	|	VoC_movreg16(REG6,RL7_HI,DEFAULT)
0x34AE2786,	//0x091c		VoC_bngt16_rr(Dequantize_L11,REG5,REG6)(lo)	|	VoC_lw16_d(REG5,0x2786)(hi)
0xF0250965,	//0x091e		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_bngt16_rr(Dequantize_L11,REG5,REG6)(hi)
0x60CFC176,	//0x0920		VoC_movreg16(RL7_HI,REG6,DEFAULT)	|	VoC_add16_rr(REG6,REG5,REG6,DEFAULT)
0x2E31D886,	//0x0922		VoC_loop_r(1,REG6)(lo)	|	VoC_lw16inc_p(REG6,REG0,IN_PARALLEL)
0xFF290961,	//0x0924		VoC_movreg32(REG23,ACC1,DEFAULT)	|	VoC_loop_r(1,REG6)(hi)
0x27841401,	//0x0926		VoC_lw16_d(REG1,0x2784)
		//0x0928		Dequantize_L5
0x61C6F032,	//0x0928		VoC_movreg16(REG6,RL7_LO,DEFAULT)	|	VoC_lw16i_short(INC2,0x1,DEFAULT)
0x1405F005,	//0x092a		VoC_lw16_d(REG5,0x2787)(lo)	|	VoC_lw16i_short(INC1,0x1,IN_PARALLEL)
0x34AE2787,	//0x092c		VoC_bngt16_rr(Dequantize_L4,REG5,REG6)(lo)	|	VoC_lw16_d(REG5,0x2787)(hi)
0xF025095E,	//0x092e		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_bngt16_rr(Dequantize_L4,REG5,REG6)(hi)
0xD8A541AE,	//0x0930		VoC_lw16inc_p(REG5,REG2,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG5,DEFAULT)
0xF6CE5896,	//0x0932		VoC_movreg16(RL7_LO,REG6,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0xF0073876,	//0x0934		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_sub16_pr(REG6,REG1,REG6,DEFAULT)
0xD8B0DF40,	//0x0936		VoC_lw16inc_p(REG0,REG3,DEFAULT)	|	VoC_push32(REG01,DEFAULT)
0x094B3205,	//0x0938		VoC_bltz16_r(Dequantize_L6,REG5)
0x4DAD390D,	//0x093a		VoC_bgt16_rd(Dequantize_L6,REG5,0x4dad)
0xDFC75F47,	//0x093c		VoC_push16(REG7,IN_PARALLEL)	|	VoC_push32(RL7,DEFAULT)
0xDFC25F45,	//0x093e		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xDFC35F44,	//0x0940		VoC_push16(REG3,IN_PARALLEL)	|	VoC_push32(ACC0,DEFAULT)
0x07EE2B80,	//0x0942		VoC_jal(Coolsand_DequantBlock)
0xDF045F83,	//0x0944		VoC_pop32(ACC0,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDF055F82,	//0x0946		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0xDF075F87,	//0x0948		VoC_pop32(RL7,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xF8FEE5D0,	//0x094a		VoC_shr16_ri(REG6,0xffffffff,DEFAULT)	|	VoC_jump(Dequantize_L9)
		//0x094b		Dequantize_L6
0x6126C134,	//0x094c		VoC_movreg16(REG6,ACC0_HI,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0x4425E010,	//0x094e		VoC_bne16_rd(Dequantize_L7,REG5,0x4dae)(lo)	|	VoC_lw16i_short(REG0,0x1,IN_PARALLEL)
0xDC604DAE,	//0x0950		VoC_sw16_p(REG0,REG6,DEFAULT)	|	VoC_bne16_rd(Dequantize_L7,REG5,0x4dae)(hi)
0xE106E5C8,	//0x0952		VoC_movreg16(REG6,ACC0_LO,DEFAULT)	|	VoC_jump(Dequantize_L9)
		//0x0953		Dequantize_L7
0x4DAF402D,	//0x0954		VoC_be16_rd(Dequantize_L8,REG5,0x4daf)
0x4DB0401D,	//0x0956		VoC_be16_rd(Dequantize_L8,REG5,0x4db0)
0xDC60E5C2,	//0x0958		VoC_sw16_p(REG0,REG6,DEFAULT)	|	VoC_jump(Dequantize_L9)
		//0x0959		Dequantize_L8
		//0x095a		Dequantize_L9
0x2B00DF00,	//0x095a		VoC_jump_lg(Dequantize_L5)(lo)	|	VoC_pop32(REG01,DEFAULT)
0xFFC00928,	//0x095c		VoC_NAD	|	VoC_jump_lg(Dequantize_L5)(hi)
		//0x095e		Dequantize_L4
0x85CE700E,	//0x095e		VoC_sub16_rp(REG6,REG7,REG1,IN_PARALLEL)	|	VoC_lw16i_short(RL7_LO,0x0,DEFAULT)
0xC134F8FE,	//0x0960		VoC_add16_rr(REG4,REG4,REG6,DEFAULT)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
		//0x0961		VoC_endloop1
0x2B00FF0D,	//0x0962		VoC_jump_lg(Dequantize_L10)(lo)	|	VoC_movreg32(ACC1,REG23,DEFAULT)
0xE126091A,	//0x0964		VoC_movreg16(REG6,ACC0_HI,DEFAULT)	|	VoC_jump_lg(Dequantize_L10)(hi)
		//0x0965		Dequantize_L11
0x27851401,	//0x0966		VoC_lw16_d(REG1,0x2785)
0x2886D866,	//0x0968		VoC_or16_rd(REG6,0xc7c)(lo)	|	VoC_lw16_p(REG6,REG6,DEFAULT)
0x70250C7C,	//0x096a		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_or16_rd(REG6,0xc7c)(hi)
0x1506E000,	//0x096c		VoC_sw16_d(REG6,0xc7c)(lo)	|	VoC_lw16i_short(REG0,0x0,IN_PARALLEL)
0x14860C7C,	//0x096e		VoC_lw32_d(RL6,0xc62)(lo)	|	VoC_sw16_d(REG6,0xc7c)(hi)
0xFFC00C62,	//0x0970		VoC_NAD	|	VoC_lw32_d(RL6,0xc62)(hi)
0x04302B80,	//0x0972		VoC_jal(Coolsand_CLZ)
0xDFA943AE,	//0x0974		VoC_pop16(RA,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)
0x0C621586,	//0x0976		VoC_sw32_d(RL6,0xc62)
0xE580DC16,	//0x0978		VoC_return	|	VoC_sw16_p(REG6,REG1,DEFAULT)
		//0x097a		Coolsand_BitReverse
0x6020F050,	//0x097a		VoC_movreg16(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0x7006F006,	//0x097c		VoC_lw16i_short(REG6,0x0,DEFAULT)	|	VoC_lw16i_short(INC2,0x1,IN_PARALLEL)
0x3183EF97,	//0x097e		VoC_bez16_r(BitReverse_L0,REG3)(lo)	|	VoC_lw16i_short(REG7,0xfffffff9,IN_PARALLEL)
0x72260984,	//0x0980		VoC_lw16i_short(REG6,0x11,DEFAULT)	|	VoC_bez16_r(BitReverse_L0,REG3)(hi)
0xFFC0EF67,	//0x0982		VoC_NAD	|	VoC_lw16i_short(REG7,0xfffffff6,IN_PARALLEL)
		//0x0984		BitReverse_L0
0xE0437024,	//0x0984		VoC_lw16i_short(REG3,0x4,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x48480A85,	//0x0986		VoC_lw16i(REG5,0x4848)
0xFE3C4172,	//0x0988		VoC_shr16_rr(REG4,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG5,REG6,DEFAULT)
0xFF03C061,	//0x098a		VoC_movreg32(REG67,REG01,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x098c		BitReverse_L2
0x3184D8A4,	//0x098c		VoC_bez16_r(BitReverse_L1,REG4)(lo)	|	VoC_lw16inc_p(REG4,REG2,DEFAULT)
0x58A509C8,	//0x098e		VoC_lw16inc_p(REG5,REG2,DEFAULT)	|	VoC_bez16_r(BitReverse_L1,REG4)(hi)
0x78EDF8EC,	//0x0990		VoC_shr16_ri(REG5,0xfffffffd,DEFAULT)	|	VoC_shr16_ri(REG4,0xfffffffd,IN_PARALLEL)
0xC1A9C1A0,	//0x0992		VoC_add16_rr(REG1,REG6,REG5,DEFAULT)	|	VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)
0x5985D9C4,	//0x0994		VoC_lw32_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xD9CEC1A0,	//0x0996		VoC_lw32inc_p(RL6,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)
0xC1A9598F,	//0x0998		VoC_add16_rr(REG1,REG6,REG5,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0xDDC7DDC6,	//0x099a		VoC_sw32inc_p(RL7,REG0,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0x5D8DDDCC,	//0x099c		VoC_sw32_p(ACC1,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xD9C4C1E9,	//0x099e		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)
0xC1A05985,	//0x09a0		VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG0,DEFAULT)
0xC01859CE,	//0x09a2		VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG1,DEFAULT)
0xC1E9598F,	//0x09a4		VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0x5D87DDC6,	//0x09a6		VoC_sw32_p(RL7,REG0,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xDDCCC1E0,	//0x09a8		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG7,REG4,IN_PARALLEL)
0xC1A95D8D,	//0x09aa		VoC_add16_rr(REG1,REG6,REG5,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG1,DEFAULT)
0xC05959C4,	//0x09ac		VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xC1E05985,	//0x09ae		VoC_add16_rr(REG0,REG7,REG4,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG0,DEFAULT)
0xC1A959CE,	//0x09b0		VoC_add16_rr(REG1,REG6,REG5,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG1,DEFAULT)
0xC059598F,	//0x09b2		VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0xDDCCDDC6,	//0x09b4		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC1E95D8D,	//0x09b6		VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG1,DEFAULT)
0x59C4DDC7,	//0x09b8		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(RL7,REG0,DEFAULT)
0x5985C059,	//0x09ba		VoC_lw32_p(ACC1,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)
0x59CEC1E0,	//0x09bc		VoC_lw32inc_p(RL6,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG7,REG4,IN_PARALLEL)
0x598FC018,	//0x09be		VoC_lw32_p(RL7,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)
0x5DC6C1E9,	//0x09c0		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG7,REG5,IN_PARALLEL)
0xDDC7C059,	//0x09c2		VoC_sw32inc_p(RL7,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)
0xDD8DDDCC,	//0x09c4		VoC_sw32_p(ACC1,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x098C2B00,	//0x09c6		VoC_jump_lg(BitReverse_L2)
		//0x09c8		BitReverse_L1
0xC1E1F8EC,	//0x09c8		VoC_add16_rr(REG1,REG7,REG4,DEFAULT)	|	VoC_shr16_ri(REG4,0xfffffffd,DEFAULT)
0xFFC041A0,	//0x09ca		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG0,REG6,REG4,DEFAULT)
		//0x09cc		BitReverse_L3
0xC01859CE,	//0x09cc		VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)	|	VoC_lw32inc_p(RL6,REG1,DEFAULT)
0xC1E1598F,	//0x09ce		VoC_add16_rr(REG1,REG7,REG4,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG1,DEFAULT)
0x5985D9C4,	//0x09d0		VoC_lw32_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0x5DCCC1A0,	//0x09d2		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)
0xD8A4C018,	//0x09d4		VoC_lw16inc_p(REG4,REG2,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)
0xF8EC5D8D,	//0x09d6		VoC_shr16_ri(REG4,0xfffffffd,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG1,DEFAULT)
0xC1E15DC6,	//0x09d8		VoC_add16_rr(REG1,REG7,REG4,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC1A05D87,	//0x09da		VoC_add16_rr(REG0,REG6,REG4,IN_PARALLEL)	|	VoC_sw32_p(RL7,REG0,DEFAULT)
0x09CC31C4,	//0x09dc		VoC_bnez16_r(BitReverse_L3,REG4)
0xFFC06580,	//0x09de		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x09e0		Coolsand_R4FirstPass
0xF6227052,	//0x09e0		VoC_movreg16(REG2,REG1,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x2,DEFAULT)
0xDFC2E6E6,	//0x09e2		VoC_push16(REG2,DEFAULT)	|	VoC_loop_r_short(REG3,DEFAULT)
0xD9D7D9D0,	//0x09e4		VoC_lw32inc_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(REG01,REG2,DEFAULT)
0xD9D3D9D2,	//0x09e6		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xD9D5D9D4,	//0x09e8		VoC_lw32inc_p(ACC1,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
0x5997D9D6,	//0x09ea		VoC_lw32_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(RL6,REG2,DEFAULT)
0x4810FF39,	//0x09ec		VoC_add32_rr(REG01,REG01,REG45,DEFAULT)	|	VoC_movreg32(REG23,RL7,IN_PARALLEL)
0x4859CA12,	//0x09ee		VoC_add32_rr(REG23,REG23,REG67,DEFAULT)	|	VoC_sub32_rr(REG45,REG01,REG45,IN_PARALLEL)
0x4934CA5B,	//0x09f0		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_sub32_rr(REG67,REG23,REG67,IN_PARALLEL)
0x497DCB36,	//0x09f2		VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)	|	VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)
0x4820CB7F,	//0x09f4		VoC_add32_rr(REG01,REG01,ACC0,DEFAULT)	|	VoC_sub32_rr(RL7,ACC1,RL7,IN_PARALLEL)
0x4869CA24,	//0x09f6		VoC_add32_rr(REG23,REG23,ACC1,DEFAULT)	|	VoC_sub32_rr(ACC0,REG01,ACC0,IN_PARALLEL)
0x48BACA6D,	//0x09f8		VoC_add32_rr(REG45,REG45,RL7,DEFAULT)	|	VoC_sub32_rr(ACC1,REG23,ACC1,IN_PARALLEL)
0x5F45CABF,	//0x09fa		VoC_push32(ACC1,DEFAULT)	|	VoC_sub32_rr(RL7,REG45,RL7,IN_PARALLEL)
0xDF82FF0D,	//0x09fc		VoC_pop16(REG2,DEFAULT)	|	VoC_movreg32(ACC1,REG23,IN_PARALLEL)
0xCAF348F6,	//0x09fe		VoC_sub32_rr(REG67,REG67,RL6,IN_PARALLEL)	|	VoC_add32_rr(RL6,REG67,RL6,DEFAULT)
0xDDD5DDD0,	//0x0a00		VoC_sw32inc_p(ACC1,REG2,DEFAULT)	|	VoC_sw32inc_p(REG01,REG2,DEFAULT)
0xDDD2DF05,	//0x0a02		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_pop32(ACC1,DEFAULT)
0xDDD4DDD3,	//0x0a04		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32inc_p(REG67,REG2,DEFAULT)
0xDDD7DDD5,	//0x0a06		VoC_sw32inc_p(RL7,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
		//0x0a08		VoC_endloop0
0xE580DDD6,	//0x0a08		VoC_return	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
		//0x0a0a		Coolsand_R8FirstPass
0x7052F053,	//0x0a0a		VoC_lw16i_short(INC2,0x2,DEFAULT)	|	VoC_lw16i_short(INC3,0x2,DEFAULT)
0x2E18F622,	//0x0a0c		VoC_loop_r(0,REG3)(lo)	|	VoC_movreg16(REG2,REG1,IN_PARALLEL)
0xDFC20AB7,	//0x0a0e		VoC_push16(REG2,DEFAULT)	|	VoC_loop_r(0,REG3)(hi)
0xD9D7D9D0,	//0x0a10		VoC_lw32inc_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(REG01,REG2,DEFAULT)
0xD9D3D9D2,	//0x0a12		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xD9D5D9D4,	//0x0a14		VoC_lw32inc_p(ACC1,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
0x5997D9D6,	//0x0a16		VoC_lw32_p(RL7,REG2,DEFAULT)	|	VoC_lw32inc_p(RL6,REG2,DEFAULT)
0x4810FF39,	//0x0a18		VoC_add32_rr(REG01,REG01,REG45,DEFAULT)	|	VoC_movreg32(REG23,RL7,IN_PARALLEL)
0x4859CA12,	//0x0a1a		VoC_add32_rr(REG23,REG23,REG67,DEFAULT)	|	VoC_sub32_rr(REG45,REG01,REG45,IN_PARALLEL)
0x4934CA5B,	//0x0a1c		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_sub32_rr(REG67,REG23,REG67,IN_PARALLEL)
0x497DCB36,	//0x0a1e		VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)	|	VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)
0x4820CB7F,	//0x0a20		VoC_add32_rr(REG01,REG01,ACC0,DEFAULT)	|	VoC_sub32_rr(RL7,ACC1,RL7,IN_PARALLEL)
0x4869CA24,	//0x0a22		VoC_add32_rr(REG23,REG23,ACC1,DEFAULT)	|	VoC_sub32_rr(ACC0,REG01,ACC0,IN_PARALLEL)
0x48BFCA6D,	//0x0a24		VoC_add32_rr(RL7,REG45,RL7,DEFAULT)	|	VoC_sub32_rr(ACC1,REG23,ACC1,IN_PARALLEL)
0x48F6CABA,	//0x0a26		VoC_add32_rr(RL6,REG67,RL6,DEFAULT)	|	VoC_sub32_rr(REG45,REG45,RL7,IN_PARALLEL)
0x7A0ACAF3,	//0x0a28		VoC_shr32_ri(REG45,0x1,DEFAULT)	|	VoC_sub32_rr(REG67,REG67,RL6,IN_PARALLEL)
0x7A08FA0F,	//0x0a2a		VoC_shr32_ri(REG01,0x1,DEFAULT)	|	VoC_shr32_ri(RL7,0x1,IN_PARALLEL)
0x7A09FA0C,	//0x0a2c		VoC_shr32_ri(REG23,0x1,DEFAULT)	|	VoC_shr32_ri(ACC0,0x1,IN_PARALLEL)
0x5F42FA0D,	//0x0a2e		VoC_push32(REG45,DEFAULT)	|	VoC_shr32_ri(ACC1,0x1,IN_PARALLEL)
0xD612FF0A,	//0x0a30		VoC_lw16_sd(REG2,0x0,DEFAULT)	|	VoC_movreg32(REG45,REG23,IN_PARALLEL)
0xFA0B7A0E,	//0x0a32		VoC_shr32_ri(REG67,0x1,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0x1,DEFAULT)
0xDDD2DDD0,	//0x0a34		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_sw32inc_p(REG01,REG2,DEFAULT)
0xDDD7DF02,	//0x0a36		VoC_sw32inc_p(RL7,REG2,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0xDDD4DDD3,	//0x0a38		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32inc_p(REG67,REG2,DEFAULT)
0xDDD2DDD5,	//0x0a3a		VoC_sw32inc_p(REG45,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
0xD9D0DDD6,	//0x0a3c		VoC_lw32inc_p(REG01,REG2,DEFAULT)	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
0xD9D2D9D7,	//0x0a3e		VoC_lw32inc_p(REG45,REG2,DEFAULT)	|	VoC_lw32inc_p(RL7,REG2,DEFAULT)
0xD9D4D9D3,	//0x0a40		VoC_lw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_lw32inc_p(REG67,REG2,DEFAULT)
0xD9D6D9D5,	//0x0a42		VoC_lw32inc_p(RL6,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC1,REG2,DEFAULT)
0xFF395997,	//0x0a44		VoC_movreg32(REG23,RL7,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG2,DEFAULT)
0xCA124810,	//0x0a46		VoC_sub32_rr(REG45,REG01,REG45,IN_PARALLEL)	|	VoC_add32_rr(REG01,REG01,REG45,DEFAULT)
0xCA5B4859,	//0x0a48		VoC_sub32_rr(REG67,REG23,REG67,IN_PARALLEL)	|	VoC_add32_rr(REG23,REG23,REG67,DEFAULT)
0xCB364934,	//0x0a4a		VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)
0xCB7F497D,	//0x0a4c		VoC_sub32_rr(RL7,ACC1,RL7,IN_PARALLEL)	|	VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)
0xCA244820,	//0x0a4e		VoC_sub32_rr(ACC0,REG01,ACC0,IN_PARALLEL)	|	VoC_add32_rr(REG01,REG01,ACC0,DEFAULT)
0xCA6D4869,	//0x0a50		VoC_sub32_rr(ACC1,REG23,ACC1,IN_PARALLEL)	|	VoC_add32_rr(REG23,REG23,ACC1,DEFAULT)
0xFA0C7A08,	//0x0a52		VoC_shr32_ri(ACC0,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0x1,DEFAULT)
0xFA0D7A09,	//0x0a54		VoC_shr32_ri(ACC1,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG23,0x1,DEFAULT)
0xFF0A5F42,	//0x0a56		VoC_movreg32(REG45,REG23,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0xDF825F43,	//0x0a58		VoC_pop16(REG2,IN_PARALLEL)	|	VoC_push32(REG67,DEFAULT)
0xF6435F46,	//0x0a5a		VoC_movreg16(REG3,REG2,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0xE1065F47,	//0x0a5c		VoC_lw16i_short(REG6,0x10,IN_PARALLEL)	|	VoC_push32(RL7,DEFAULT)
0xE02740F3,	//0x0a5e		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG6,DEFAULT)
0xC1D65996,	//0x0a60		VoC_add16_rr(REG6,REG7,REG2,IN_PARALLEL)	|	VoC_lw32_p(RL6,REG2,DEFAULT)
0xCB804986,	//0x0a62		VoC_sub32_rr(REG01,RL6,REG01,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,REG01,DEFAULT)
0xE06659B7,	//0x0a64		VoC_lw16i_short(REG6,0x6,IN_PARALLEL)	|	VoC_lw32_p(RL7,REG6,DEFAULT)
0xCBD249D7,	//0x0a66		VoC_sub32_rr(REG45,RL7,REG45,IN_PARALLEL)	|	VoC_add32_rr(RL7,RL7,REG45,DEFAULT)
0xDDD8DDD6,	//0x0a68		VoC_sw32inc_p(REG01,REG3,DEFAULT)	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
0xC0B25D97,	//0x0a6a		VoC_add16_rr(REG2,REG2,REG6,IN_PARALLEL)	|	VoC_sw32_p(RL7,REG2,DEFAULT)
0xC0F35D9A,	//0x0a6c		VoC_add16_rr(REG3,REG3,REG6,IN_PARALLEL)	|	VoC_sw32_p(REG45,REG3,DEFAULT)
0xC1D65996,	//0x0a6e		VoC_add16_rr(REG6,REG7,REG2,IN_PARALLEL)	|	VoC_lw32_p(RL6,REG2,DEFAULT)
0xCBAD49AE,	//0x0a70		VoC_sub32_rr(ACC1,RL6,ACC1,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,ACC1,DEFAULT)
0x49E7D9B7,	//0x0a72		VoC_add32_rr(RL7,RL7,ACC0,DEFAULT)	|	VoC_lw32_p(RL7,REG6,DEFAULT)
0xDDD6CBE4,	//0x0a74		VoC_sw32inc_p(RL6,REG2,DEFAULT)	|	VoC_sub32_rr(ACC0,RL7,ACC0,IN_PARALLEL)
0xDDD4DDDD,	//0x0a76		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0xDF07DDDF,	//0x0a78		VoC_pop32(RL7,DEFAULT)	|	VoC_sw32inc_p(RL7,REG3,DEFAULT)
0x4D9A1480,	//0x0a7a		VoC_lw32_d(REG01,0x4d9a)
0xF9085F06,	//0x0a7c		VoC_shru16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_pop32(RL6,DEFAULT)
0xDF02DF03,	//0x0a7e		VoC_pop32(REG45,DEFAULT)	|	VoC_pop32(REG67,DEFAULT)
0xCABA48BF,	//0x0a80		VoC_sub32_rr(REG45,REG45,RL7,IN_PARALLEL)	|	VoC_add32_rr(RL7,REG45,RL7,DEFAULT)
0xCAF648F3,	//0x0a82		VoC_sub32_rr(RL6,REG67,RL6,IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,RL6,DEFAULT)
0xCA9B489A,	//0x0a84		VoC_sub32_rr(REG67,REG45,REG67,IN_PARALLEL)	|	VoC_add32_rr(REG45,REG45,REG67,DEFAULT)
0xCBF749F6,	//0x0a86		VoC_sub32_rr(RL7,RL7,RL6,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL7,RL6,DEFAULT)
0xF90E790C,	//0x0a88		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCC6D4C7C,	//0x0a8a		VoC_multf32_rr(ACC1,REG1,REG5,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xCEA14E71,	//0x0a8c		VoC_macX_rr(REG4,REG1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xCEA84E78,	//0x0a8e		VoC_macX_rr(REG5,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0xFF3B7F32,	//0x0a90		VoC_movreg32(REG67,RL7,IN_PARALLEL)	|	VoC_movreg32(REG45,RL6,DEFAULT)
0xFF2F7F26,	//0x0a92		VoC_movreg32(RL7,ACC1,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0xF90E790C,	//0x0a94		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCC6D4C7C,	//0x0a96		VoC_multf32_rr(ACC1,REG1,REG5,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG1,REG7,DEFAULT)
0xCEA14E71,	//0x0a98		VoC_macX_rr(REG4,REG1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG1,DEFAULT)
0xCEA84E78,	//0x0a9a		VoC_macX_rr(REG5,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG7,REG0,DEFAULT)
0x5990F047,	//0x0a9c		VoC_lw32_p(REG01,REG2,DEFAULT)	|	VoC_lw16i_short(REG7,0x2,DEFAULT)
0x4A30C0BE,	//0x0a9e		VoC_sub32_rr(REG01,REG01,RL6,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG7,IN_PARALLEL)
0x59B2C836,	//0x0aa0		VoC_lw32_p(REG45,REG6,DEFAULT)	|	VoC_add32_rr(RL6,REG01,RL6,IN_PARALLEL)
0x4ABAE0A6,	//0x0aa2		VoC_sub32_rr(REG45,REG45,RL7,DEFAULT)	|	VoC_lw16i_short(REG6,0xa,IN_PARALLEL)
0xDDD0C8BF,	//0x0aa4		VoC_sw32inc_p(REG01,REG2,DEFAULT)	|	VoC_add32_rr(RL7,REG45,RL7,IN_PARALLEL)
0x5D92DDDE,	//0x0aa6		VoC_sw32_p(REG45,REG2,DEFAULT)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
0x5D9FC2B2,	//0x0aa8		VoC_sw32_p(RL7,REG3,DEFAULT)	|	VoC_sub16_rr(REG2,REG2,REG6,IN_PARALLEL)
0x5990C2F3,	//0x0aaa		VoC_lw32_p(REG01,REG2,DEFAULT)	|	VoC_sub16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x4828C0BE,	//0x0aac		VoC_add32_rr(REG01,REG01,ACC1,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG7,IN_PARALLEL)
0x59B2CA2D,	//0x0aae		VoC_lw32_p(REG45,REG6,DEFAULT)	|	VoC_sub32_rr(ACC1,REG01,ACC1,IN_PARALLEL)
0x48A2E1A6,	//0x0ab0		VoC_add32_rr(REG45,REG45,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1a,IN_PARALLEL)
0x5DD0CAA4,	//0x0ab2		VoC_sw32inc_p(REG01,REG2,DEFAULT)	|	VoC_sub32_rr(ACC0,REG45,ACC0,IN_PARALLEL)
0xDD94C0B2,	//0x0ab4		VoC_sw32_p(ACC0,REG2,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG6,IN_PARALLEL)
0xDD9ADDDD,	//0x0ab6		VoC_sw32_p(REG45,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
		//0x0ab7		VoC_endloop0
0xD9C6E580,	//0x0ab8		VoC_lw32inc_p(RL6,REG0,DEFAULT)	|	VoC_return
		//0x0ab9		Coolsand_R4Core_subfunction
0xD98AD9CF,	//0x0aba		VoC_lw32_p(REG45,REG1,DEFAULT)	|	VoC_lw32inc_p(RL7,REG1,DEFAULT)
0xC8BA5981,	//0x0abc		VoC_add32_rr(REG45,REG45,RL7,IN_PARALLEL)	|	VoC_lw32_p(REG23,REG0,DEFAULT)
0xF90A4D5C,	//0x0abe		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG3,DEFAULT)
0xF90C4E55,	//0x0ac0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xD9C14E5C,	//0x0ac2		VoC_lw32inc_p(REG23,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF3A7BF9,	//0x0ac4		VoC_movreg32(REG45,RL7,IN_PARALLEL)	|	VoC_shr32_ri(REG23,0xffffffff,DEFAULT)
0xC8717F27,	//0x0ac6		VoC_add32_rr(REG23,REG23,RL6,IN_PARALLEL)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0xF90A4D5C,	//0x0ac8		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG3,DEFAULT)
0xF90C4E55,	//0x0aca		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xFF314E5C,	//0x0acc		VoC_movreg32(REG23,RL6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xF90A598A,	//0x0ace		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG1,DEFAULT)
0xFF254D5C,	//0x0ad0		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG3,DEFAULT)
0xF90C4E55,	//0x0ad2		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCB7DCE5C,	//0x0ad4		VoC_sub32_rr(ACC1,ACC1,RL7,DEFAULT)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xE580C93C,	//0x0ad6		VoC_return	|	VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)
		//0x0ad8		Coolsand_R4Core
0x7050F019,	//0x0ad8		VoC_lw16i_short(INC0,0x2,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xFFC0F009,	//0x0ada		VoC_NAD	|	VoC_lw16i_short(INC1,0x2,IN_PARALLEL)
		//0x0adc		R4Core_LX
0x0B423184,	//0x0adc		VoC_bez16_r(R4Core_L0,REG4)
0xE02760A6,	//0x0ade		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_movreg16(REG6,REG5,DEFAULT)
0xF8F64D2C,	//0x0ae0		VoC_shr16_ri(REG6,0xfffffffe,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG4,REG5,DEFAULT)
0xDFE943BE,	//0x0ae2		VoC_push16(RA,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
0xDF425FC1,	//0x0ae4		VoC_push32(REG45,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0x0B3A3304,	//0x0ae6		VoC_bez32_r(R4Core_L1,ACC0)
0x0B382E21,	//0x0ae8		VoC_loop_r(1,REG4)
0xDFC5DFC0,	//0x0aea		VoC_push16(REG5,DEFAULT)	|	VoC_push16(REG0,DEFAULT)
0x0B332E28,	//0x0aec		VoC_loop_r(0,REG5)
0x598DD9CC,	//0x0aee		VoC_lw32_p(ACC1,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0x5F44C071,	//0x0af0		VoC_push32(ACC0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)
0xDF45DFC6,	//0x0af2		VoC_push32(ACC1,DEFAULT)	|	VoC_push16(REG6,IN_PARALLEL)
0x0AB92B80,	//0x0af4		VoC_jal(Coolsand_R4Core_subfunction)
0xC0715F45,	//0x0af6		VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xFFC05F44,	//0x0af8		VoC_NAD(IN_PARALLEL)	|	VoC_push32(ACC0,DEFAULT)
0x0AB92B80,	//0x0afa		VoC_jal(Coolsand_R4Core_subfunction)
0xC0715F45,	//0x0afc		VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0xFFC05F44,	//0x0afe		VoC_NAD(IN_PARALLEL)	|	VoC_push32(ACC0,DEFAULT)
0x0AB92B80,	//0x0b00		VoC_jal(Coolsand_R4Core_subfunction)
0xE0225F07,	//0x0b02		VoC_lw16i_short(REG2,0x2,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0xC251DF06,	//0x0b04		VoC_sub16_rr(REG1,REG1,REG2,DEFAULT)	|	VoC_pop32(RL6,DEFAULT)
0xDFC05F02,	//0x0b06		VoC_push16(REG0,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xDFC15F01,	//0x0b08		VoC_push16(REG1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDFC65F03,	//0x0b0a		VoC_push16(REG6,IN_PARALLEL)	|	VoC_pop32(REG67,DEFAULT)
0xFA135F00,	//0x0b0c		VoC_shr32_ri(REG67,0x2,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x4808FA10,	//0x0b0e		VoC_add32_rr(REG01,REG01,REG23,DEFAULT)	|	VoC_shr32_ri(REG01,0x2,DEFAULT)
0x48D3CA09,	//0x0b10		VoC_add32_rr(REG67,REG67,REG45,DEFAULT)	|	VoC_sub32_rr(REG23,REG01,REG23,IN_PARALLEL)
0x49AECAD2,	//0x0b12		VoC_add32_rr(RL6,RL6,ACC1,DEFAULT)	|	VoC_sub32_rr(REG45,REG67,REG45,IN_PARALLEL)
0x493CCBAD,	//0x0b14		VoC_add32_rr(ACC0,ACC0,RL7,DEFAULT)	|	VoC_sub32_rr(ACC1,RL6,ACC1,IN_PARALLEL)
0x4830CB3F,	//0x0b16		VoC_add32_rr(REG01,REG01,RL6,DEFAULT)	|	VoC_sub32_rr(RL7,ACC0,RL7,IN_PARALLEL)
0x4879CA36,	//0x0b18		VoC_add32_rr(REG23,REG23,RL7,DEFAULT)	|	VoC_sub32_rr(RL6,REG01,RL6,IN_PARALLEL)
0x48AACA7F,	//0x0b1a		VoC_add32_rr(REG45,REG45,ACC1,DEFAULT)	|	VoC_sub32_rr(RL7,REG23,RL7,IN_PARALLEL)
0x5F40CAAD,	//0x0b1c		VoC_push32(REG01,DEFAULT)	|	VoC_sub32_rr(ACC1,REG45,ACC1,IN_PARALLEL)
0xF081DF80,	//0x0b1e		VoC_lw16i_short(REG1,0x4,DEFAULT)	|	VoC_pop16(REG0,IN_PARALLEL)
0xC0085F81,	//0x0b20		VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xCAE448E3,	//0x0b22		VoC_sub32_rr(ACC0,REG67,ACC0,IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,ACC0,DEFAULT)
0xC2415DC9,	//0x0b24		VoC_sub16_rr(REG1,REG1,REG0,IN_PARALLEL)	|	VoC_sw32inc_p(REG23,REG1,DEFAULT)
0x5DCEDD8A,	//0x0b26		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_sw32_p(REG45,REG1,DEFAULT)
0xDD8CC241,	//0x0b28		VoC_sw32_p(ACC0,REG1,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG0,IN_PARALLEL)
0x5DCFDF01,	//0x0b2a		VoC_sw32inc_p(RL7,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0xDD8DC241,	//0x0b2c		VoC_sw32_p(ACC1,REG1,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG0,IN_PARALLEL)
0xE0225DC9,	//0x0b2e		VoC_lw16i_short(REG2,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG23,REG1,DEFAULT)
0xE0335DCB,	//0x0b30		VoC_lw16i_short(REG3,0x3,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xDF86DF80,	//0x0b32		VoC_pop16(REG6,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
		//0x0b33		VoC_endloop0
0xDF854194,	//0x0b34		VoC_pop16(REG5,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG6,REG2,DEFAULT)
0xDF80C51C,	//0x0b36		VoC_pop16(REG0,DEFAULT)	|	VoC_mult16_rr(REG4,REG4,REG3,DEFAULT)
		//0x0b38		VoC_endloop1
0xFFC04061,	//0x0b38		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x0b3a		R4Core_L1
0xDF814020,	//0x0b3a		VoC_pop16(REG1,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0xDF025FA9,	//0x0b3c		VoC_pop32(REG45,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0xF8F57814,	//0x0b3e		VoC_shr16_ri(REG5,0xfffffffe,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x2,DEFAULT)
0x0ADC2B00,	//0x0b40		VoC_jump_lg(R4Core_LX)
		//0x0b42		R4Core_L0
0xE060E580,	//0x0b42		VoC_movreg16(REG0,REG3,DEFAULT)	|	VoC_return
		//0x0b43		Coolsand_R4FFT
0xDF40DFE9,	//0x0b44		VoC_push32(REG01,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x097A2B80,	//0x0b46		VoC_jal(Coolsand_BitReverse)
0xDF0070C6,	//0x0b48		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x6,DEFAULT)
0x00400A87,	//0x0b4a		VoC_lw16i(REG7,0x40)
0x0B523180,	//0x0b4c		VoC_bez16_r(R4FFT_L0,REG0)
0x0A87F126,	//0x0b4e		VoC_lw16i(REG7,0x200)(lo)	|	VoC_lw16i_short(REG6,0x9,DEFAULT)
0xFFC00200,	//0x0b50		VoC_NAD	|	VoC_lw16i(REG7,0x200)(hi)
		//0x0b52		R4FFT_L0
0xF6E060E3,	//0x0b52		VoC_movreg16(REG0,REG7,IN_PARALLEL)	|	VoC_movreg16(REG3,REG7,DEFAULT)
0x00011606,	//0x0b54		VoC_and16_ri(REG6,0x1)
0x0B663186,	//0x0b56		VoC_bez16_r(R4FFT_L1,REG6)
0xDF40F81B,	//0x0b58		VoC_push32(REG01,DEFAULT)	|	VoC_shr16_ri(REG3,0x3,DEFAULT)
0x0A0A2B80,	//0x0b5a		VoC_jal(Coolsand_R8FirstPass)
0x6004DF00,	//0x0b5c		VoC_movreg16(REG4,REG0,DEFAULT)	|	VoC_pop32(REG01,DEFAULT)
0x0A80E085,	//0x0b5e		VoC_lw16i(REG0,0x5eb4)(lo)	|	VoC_lw16i_short(REG5,0x8,IN_PARALLEL)
0xF82C5EB4,	//0x0b60		VoC_shr16_ri(REG4,0x5,DEFAULT)	|	VoC_lw16i(REG0,0x5eb4)(hi)
0x0AD82B80,	//0x0b62		VoC_jal(Coolsand_R4Core)
0xFFC065CE,	//0x0b64		VoC_NAD(IN_PARALLEL)	|	VoC_jump(R4FFT_L2)
		//0x0b66		R4FFT_L1
0xF8135F40,	//0x0b66		VoC_shr16_ri(REG3,0x2,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x09E02B80,	//0x0b68		VoC_jal(Coolsand_R4FirstPass)
0x6004DF00,	//0x0b6a		VoC_movreg16(REG4,REG0,DEFAULT)	|	VoC_pop32(REG01,DEFAULT)
0x0A80E045,	//0x0b6c		VoC_lw16i(REG0,0x4054)(lo)	|	VoC_lw16i_short(REG5,0x4,IN_PARALLEL)
0xF8244054,	//0x0b6e		VoC_shr16_ri(REG4,0x4,DEFAULT)	|	VoC_lw16i(REG0,0x4054)(hi)
0x0AD82B80,	//0x0b70		VoC_jal(Coolsand_R4Core)
		//0x0b72		R4FFT_L2
0xFFC0DFA9,	//0x0b72		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0b74		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0b76		Coolsand_UnpackADTSHeader
0xEFD062B0,	//0x0b76		VoC_lw16i_short(REG0,0xfffffffd,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0xc,DEFAULT)
0x4DB31405,	//0x0b78		VoC_lw16_d(REG5,0x4db3)
0x0BF435A5,	//0x0b7a		VoC_bne16_rr(UnpackADTSHeader_End,REG4,REG5)
0x1805E242,	//0x0b7c		VoC_lw16i_set_inc(REG1,0xc7e,0x1)(lo)	|	VoC_lbinc_p(REG2)
0xE2840C7E,	//0x0b7e		VoC_rbinc_i(REG4,0x1,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0xc7e,0x1)(hi)
0xE286E289,	//0x0b80		VoC_rbinc_i(REG6,0x1,DEFAULT)	|	VoC_rbinc_i(REG5,0x2,DEFAULT)
0xDC94628B,	//0x0b82		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x2,DEFAULT)
0xDC956290,	//0x0b84		VoC_sw16inc_p(REG5,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0xDC966285,	//0x0b86		VoC_sw16inc_p(REG6,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0xDC97628E,	//0x0b88		VoC_sw16inc_p(REG7,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x3,DEFAULT)
0xDC946287,	//0x0b8a		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0x6284E242,	//0x0b8c		VoC_rbinc_i(REG4,0x1,DEFAULT)	|	VoC_lbinc_p(REG2)
0x6285DC95,	//0x0b8e		VoC_rbinc_i(REG5,0x1,DEFAULT)	|	VoC_sw16inc_p(REG5,REG1,IN_PARALLEL)
0x6286DC96,	//0x0b90		VoC_rbinc_i(REG6,0x1,DEFAULT)	|	VoC_sw16inc_p(REG6,REG1,IN_PARALLEL)
0x62B7DC97,	//0x0b92		VoC_rbinc_i(REG7,0xd,DEFAULT)	|	VoC_sw16inc_p(REG7,REG1,IN_PARALLEL)
0xE242DC94,	//0x0b94		VoC_lbinc_p(REG2)	|	VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)
0x401A1507,	//0x0b96		VoC_sw16_d(REG7,0x401a)
0xDC9562AD,	//0x0b98		VoC_sw16inc_p(REG5,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0xb,DEFAULT)
0xDC96628A,	//0x0b9a		VoC_sw16inc_p(REG6,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x2,DEFAULT)
0x4DA20736,	//0x0b9c		VoC_add16_rd(REG6,REG6,0x4da2)
0xE0835C97,	//0x0b9e		VoC_lw16i_short(REG3,0x8,IN_PARALLEL)	|	VoC_sw16inc_p(REG7,REG1,DEFAULT)
0xDC95E242,	//0x0ba0		VoC_sw16inc_p(REG5,REG1,DEFAULT)	|	VoC_lbinc_p(REG2)
0x6E05DC96,	//0x0ba2		VoC_bnez16_d(UnpackADTSHeader_L1,0xc80)(lo)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
0xE2830C80,	//0x0ba4		VoC_rbinc_i(REG7,0x10,DEFAULT)	|	VoC_bnez16_d(UnpackADTSHeader_L1,0xc80)(hi)
0xFFC06242,	//0x0ba6		VoC_NAD(IN_PARALLEL)	|	VoC_lbinc_p(REG2)
		//0x0ba8		UnpackADTSHeader_L1
0xE0165FDB,	//0x0ba8		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_push16(BITCACHE,DEFAULT)
0xE0C75F80,	//0x0baa		VoC_lw16i_short(REG7,0xc,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x00071600,	//0x0bac		VoC_and16_ri(REG0,0x7)
0xFF446300,	//0x0bae		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_rbinc_r(REG4,REG0,DEFAULT)
0xE08377A0,	//0x0bb0		VoC_lw16i_short(REG3,0x8,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xfffffffd,DEFAULT)
0x0C7F1404,	//0x0bb2		VoC_lw16_d(REG4,0xc7f)
0x0C811405,	//0x0bb4		VoC_lw16_d(REG5,0xc81)
0x0BF431C4,	//0x0bb6		VoC_bnez16_r(UnpackADTSHeader_End,REG4)
0x0BF435B5,	//0x0bb8		VoC_bne16_rr(UnpackADTSHeader_End,REG6,REG5)
0x0C821404,	//0x0bba		VoC_lw16_d(REG4,0xc82)
0x0C841405,	//0x0bbc		VoC_lw16_d(REG5,0xc84)
0x0BF434BC,	//0x0bbe		VoC_bngt16_rr(UnpackADTSHeader_End,REG7,REG4)
0x0BF4349D,	//0x0bc0		VoC_bngt16_rr(UnpackADTSHeader_End,REG3,REG5)
0x0C821400,	//0x0bc2		VoC_lw16_d(REG0,0xc82)
0x4D720A83,	//0x0bc4		VoC_lw16i(REG3,0x4d72)
0x0C84071B,	//0x0bc6		VoC_add16_rd(REG3,REG3,0xc84)
0x0C6A1500,	//0x0bc8		VoC_sw16_d(REG0,0xc6a)
0xEFF15830,	//0x0bca		VoC_lw16i_short(REG1,0xffffffff,IN_PARALLEL)	|	VoC_lw16_p(REG0,REG3,DEFAULT)
0x0C696E04,	//0x0bcc		VoC_bnez16_d(UnpackADTSHeader_L2,0xc69)
0x0C681500,	//0x0bce		VoC_sw16_d(REG0,0xc68)
		//0x0bd0		UnpackADTSHeader_L2
0x0C6B1501,	//0x0bd0		VoC_sw16_d(REG1,0xc6b)
0x0C6C1501,	//0x0bd2		VoC_sw16_d(REG1,0xc6c)
0x0C741584,	//0x0bd4		VoC_sw32_d(ACC0,0xc74)
0x0C7A1509,	//0x0bd6		VoC_sw16_d(ACC0_HI,0xc7a)
0x0C6D1501,	//0x0bd8		VoC_sw16_d(REG1,0xc6d)
0x0C681404,	//0x0bda		VoC_lw16_d(REG4,0xc68)
0x0C811405,	//0x0bdc		VoC_lw16_d(REG5,0xc81)
0x0C8B1406,	//0x0bde		VoC_lw16_d(REG6,0xc8b)
0x0C6A1400,	//0x0be0		VoC_lw16_d(REG0,0xc6a)
0x0A81F8F8,	//0x0be2		VoC_lw16i(REG1,0x4d7a)(lo)	|	VoC_shr16_ri(REG0,0xffffffff,DEFAULT)
0xC0084D7A,	//0x0be4		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i(REG1,0x4d7a)(hi)
0x0C731504,	//0x0be6		VoC_sw16_d(REG4,0xc73)
0x40151504,	//0x0be8		VoC_sw16_d(REG4,0x4015)
0x0C781505,	//0x0bea		VoC_sw16_d(REG5,0xc78)
0x1506D984,	//0x0bec		VoC_sw16_d(REG6,0xc72)(lo)	|	VoC_lw32_p(ACC0,REG0,DEFAULT)
0x15840C72,	//0x0bee		VoC_sw32_d(ACC0,0xc76)(lo)	|	VoC_sw16_d(REG6,0xc72)(hi)
0x15840C76,	//0x0bf0		VoC_sw32_d(ACC0,0x4018)(lo)	|	VoC_sw32_d(ACC0,0xc76)(hi)
0xF0004018,	//0x0bf2		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_sw32_d(ACC0,0x4018)(hi)
		//0x0bf4		UnpackADTSHeader_End
0xF2A3E580,	//0x0bf4		VoC_lw16i_short(REG3,0x15,DEFAULT)	|	VoC_return
		//0x0bf5		Coolsand_DecodeHuffmanScalar
0xFF43401B,	//0x0bf6		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG0,REG3,DEFAULT)
0xFF445E00,	//0x0bf8		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xE0030059,	//0x0bfa		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_add16_rp(REG1,REG1,REG3,DEFAULT)
		//0x0bfc		DecodeHuffmanScalar_L0
0x7A82E065,	//0x0bfc		VoC_shr32_ri(REG45,0x10,DEFAULT)	|	VoC_movreg16(REG5,REG3,DEFAULT)
0x48D3C059,	//0x0bfe		VoC_add32_rr(REG67,REG67,REG45,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG3,IN_PARALLEL)
0x7BFBE005,	//0x0c00		VoC_shr32_ri(REG67,0xffffffff,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
0xE242D883,	//0x0c02		VoC_lbinc_p(REG2)	|	VoC_lw16inc_p(REG3,REG0,IN_PARALLEL)
0xFBFC6284,	//0x0c04		VoC_shr32_ri(ACC0,0xffffffff,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xCB1AE514,	//0x0c06		VoC_sub32_rr(REG45,ACC0,REG67,DEFAULT)	|	VoC_or32_rr(ACC0,REG45,DEFAULT)
0x0BFC349C,	//0x0c08		VoC_bngt16_rr(DecodeHuffmanScalar_L0,REG3,REG4)
0xE242C061,	//0x0c0a		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0xE580D816,	//0x0c0c		VoC_return	|	VoC_lw16_p(REG6,REG1,DEFAULT)
		//0x0c0e		Coolsand_UnpackZeros
0xF6807066,	//0x0c0e		VoC_movreg16(REG0,REG4,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x3,DEFAULT)
0xFF4341F4,	//0x0c10		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG7,REG6,DEFAULT)
0xF0087814,	//0x0c12		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x2,DEFAULT)
0x0C1B3184,	//0x0c14		VoC_bez16_r(UnpackZeros_End,REG4)
0xDDC3E704,	//0x0c16		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_loop_r_short(REG4,DEFAULT)
0xDDC3DDC3,	//0x0c18		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
		//0x0c1a		VoC_endloop0
0xF030DDC3,	//0x0c1a		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
		//0x0c1b		UnpackZeros_End
0xFFC06580,	//0x0c1c		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0c1e		Coolsand_UnpackQuads
0xE1607025,	//0x0c1e		VoC_lw16i_short(REG0,0x16,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF68A43AD,	//0x0c20		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG5,DEFAULT)
0xE0364545,	//0x0c22		VoC_lw16i_short(REG6,0x3,IN_PARALLEL)	|	VoC_mult16_rr(REG5,REG5,REG0,DEFAULT)
0x4B980A80,	//0x0c24		VoC_lw16i(REG0,0x4b98)
0x55B40A81,	//0x0c26		VoC_lw16i(REG1,0x55b4)
0xC1F74028,	//0x0c28		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xFF077817,	//0x0c2a		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x2,DEFAULT)
0x0C7B3147,	//0x0c2c		VoC_bngtz16_r(UnpackQuads_L0,REG7)
0xFFC05FE9,	//0x0c2e		VoC_NAD(IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x0C782E38,	//0x0c30		VoC_loop_r(0,REG7)
0x0BF52B80,	//0x0c32		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xF6C760C3,	//0x0c34		VoC_movreg16(REG7,REG6,IN_PARALLEL)	|	VoC_movreg16(REG3,REG6,DEFAULT)
0xF6C479E3,	//0x0c36		VoC_movreg16(REG4,REG6,IN_PARALLEL)	|	VoC_shru16_ri(REG3,0xfffffffc,DEFAULT)
0xF6C579CC,	//0x0c38		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0xfffffff9,DEFAULT)
0xF99E79B5,	//0x0c3a		VoC_shru16_ri(REG6,0xfffffff3,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xfffffff6,DEFAULT)
0xF86C786B,	//0x0c3c		VoC_shr16_ri(REG4,0xd,IN_PARALLEL)	|	VoC_shr16_ri(REG3,0xd,DEFAULT)
0xF9FF786D,	//0x0c3e		VoC_shru16_ri(REG7,0xffffffff,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xd,DEFAULT)
0xF86E796F,	//0x0c40		VoC_shr16_ri(REG6,0xd,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xd,DEFAULT)
0x0C633187,	//0x0c42		VoC_bez16_r(UnpackQuads_L1,REG7)
0x0C4C3183,	//0x0c44		VoC_bez16_r(UnpackQuads_L2,REG3)
0xF98FE287,	//0x0c46		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BBF87F,	//0x0c48		VoC_xor16_rr(REG3,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC042FB,	//0x0c4a		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG3,REG3,REG7,DEFAULT)
		//0x0c4c		UnpackQuads_L2
0x0C543184,	//0x0c4c		VoC_bez16_r(UnpackQuads_L3,REG4)
0xF98FE287,	//0x0c4e		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BCF87F,	//0x0c50		VoC_xor16_rr(REG4,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC0433C,	//0x0c52		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG4,REG7,DEFAULT)
		//0x0c54		UnpackQuads_L3
0x0C5C3185,	//0x0c54		VoC_bez16_r(UnpackQuads_L4,REG5)
0xF98FE287,	//0x0c56		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BDF87F,	//0x0c58		VoC_xor16_rr(REG5,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC0437D,	//0x0c5a		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)
		//0x0c5c		UnpackQuads_L4
0x0C633186,	//0x0c5c		VoC_bez16_r(UnpackQuads_L1,REG6)
0xF98FE287,	//0x0c5e		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BEF87F,	//0x0c60		VoC_xor16_rr(REG6,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xF053C3BE,	//0x0c62		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
		//0x0c63		UnpackQuads_L1
0xF6CB7F44,	//0x0c64		VoC_movreg16(ACC1_HI,REG6,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xF7436069,	//0x0c66		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_movreg16(ACC0_HI,REG3,DEFAULT)
0xFF437A84,	//0x0c68		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x10,DEFAULT)
0x5DDCE242,	//0x0c6a		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_lbinc_p(REG2)
0x7A83F687,	//0x0c6c		VoC_shr32_ri(REG67,0x10,DEFAULT)	|	VoC_movreg16(REG7,REG4,IN_PARALLEL)
0xE0A9FF44,	//0x0c6e		VoC_movreg16(ACC0_HI,REG5,DEFAULT)	|	VoC_lw32z(ACC0,IN_PARALLEL)
0xFA845DDB,	//0x0c70		VoC_shr32_ri(ACC0,0x10,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG3,DEFAULT)
0xF7677006,	//0x0c72		VoC_movreg16(REG7,ACC1_HI,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0xDDDCFA83,	//0x0c74		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_shr32_ri(REG67,0x10,DEFAULT)
0xFF385DDB,	//0x0c76		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG3,DEFAULT)
		//0x0c78		VoC_endloop0
0xDFA9E06A,	//0x0c78		VoC_pop16(RA,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG3,DEFAULT)
0xE580F033,	//0x0c7a		VoC_return	|	VoC_lw16i_short(INC3,0x1,DEFAULT)
		//0x0c7b		UnpackQuads_L0
		//0x0c7c		Coolsand_UnpackPairsNoEsc
0xE1607025,	//0x0c7c		VoC_lw16i_short(REG0,0x16,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF68A43AD,	//0x0c7e		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG5,DEFAULT)
0xE0164545,	//0x0c80		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_mult16_rr(REG5,REG5,REG0,DEFAULT)
0x4B980A80,	//0x0c82		VoC_lw16i(REG0,0x4b98)
0x55B40A81,	//0x0c84		VoC_lw16i(REG1,0x55b4)
0xC1F74028,	//0x0c86		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xFF07780F,	//0x0c88		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x1,DEFAULT)
0x0CB73147,	//0x0c8a		VoC_bngtz16_r(UnpackPairsNoEsc_L0,REG7)
0xDFE967E8,	//0x0c8c		VoC_push16(RA,IN_PARALLEL)	|	VoC_loop_r_short(REG7,DEFAULT)
0x0BF52B80,	//0x0c8e		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xF6C560C7,	//0x0c90		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG6,DEFAULT)
0xF9AE79D5,	//0x0c92		VoC_shru16_ri(REG6,0xfffffff5,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xfffffffa,DEFAULT)
0xF9E7785D,	//0x0c94		VoC_shru16_ri(REG7,0xfffffffc,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xb,DEFAULT)
0xF85E7977,	//0x0c96		VoC_shr16_ri(REG6,0xb,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xe,DEFAULT)
0x0CA93187,	//0x0c98		VoC_bez16_r(UnpackPairsNoEsc_L1,REG7)
0x0CA23185,	//0x0c9a		VoC_bez16_r(UnpackPairsNoEsc_L2,REG5)
0xF98FE287,	//0x0c9c		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BDF87F,	//0x0c9e		VoC_xor16_rr(REG5,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xFFC0437D,	//0x0ca0		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)
		//0x0ca2		UnpackPairsNoEsc_L2
0x0CA93186,	//0x0ca2		VoC_bez16_r(UnpackPairsNoEsc_L1,REG6)
0xF98FE287,	//0x0ca4		VoC_shru16_ri(REG7,0xfffffff1,DEFAULT)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xE4BEF87F,	//0x0ca6		VoC_xor16_rr(REG6,REG7,DEFAULT)	|	VoC_shr16_ri(REG7,0xf,DEFAULT)
0xF053C3BE,	//0x0ca8		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
		//0x0ca9		UnpackPairsNoEsc_L1
0xF6C460A7,	//0x0caa		VoC_movreg16(REG4,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG5,DEFAULT)
0xF7437A83,	//0x0cac		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0x10,DEFAULT)
0x7A84E089,	//0x0cae		VoC_shr32_ri(ACC0,0x10,DEFAULT)	|	VoC_movreg16(ACC0_HI,REG4,DEFAULT)
0xE242DDDB,	//0x0cb0		VoC_lbinc_p(REG2)	|	VoC_sw32inc_p(REG67,REG3,IN_PARALLEL)
0xFF385DDC,	//0x0cb2		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x0cb4		VoC_endloop0
0xDFA9E06A,	//0x0cb4		VoC_pop16(RA,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG3,DEFAULT)
0xE580F033,	//0x0cb6		VoC_return	|	VoC_lw16i_short(INC3,0x1,DEFAULT)
		//0x0cb7		UnpackPairsNoEsc_L0
		//0x0cb8		Coolsand_UnpackPairsEsc
0xE1607025,	//0x0cb8		VoC_lw16i_short(REG0,0x16,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF68A43AD,	//0x0cba		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG5,DEFAULT)
0xE0164545,	//0x0cbc		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_mult16_rr(REG5,REG5,REG0,DEFAULT)
0x4B980A80,	//0x0cbe		VoC_lw16i(REG0,0x4b98)
0x55B40A81,	//0x0cc0		VoC_lw16i(REG1,0x55b4)
0xC1F74028,	//0x0cc2		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xFF07780F,	//0x0cc4		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x1,DEFAULT)
0x0D1B3147,	//0x0cc6		VoC_bngtz16_r(UnpackPairsEsc_L0,REG7)
0xFFC05FE9,	//0x0cc8		VoC_NAD(IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x0D182E38,	//0x0cca		VoC_loop_r(0,REG7)
0x0BF52B80,	//0x0ccc		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xF6C560C7,	//0x0cce		VoC_movreg16(REG5,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG6,DEFAULT)
0xF9B679E5,	//0x0cd0		VoC_shru16_ri(REG6,0xfffffff6,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0xfffffffc,DEFAULT)
0xF9F77855,	//0x0cd2		VoC_shru16_ri(REG7,0xfffffffe,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xa,DEFAULT)
0xF8567977,	//0x0cd4		VoC_shr16_ri(REG6,0xa,IN_PARALLEL)	|	VoC_shru16_ri(REG7,0xe,DEFAULT)
0x6083E338,	//0x0cd6		VoC_movreg16(REG3,REG4,DEFAULT)	|	VoC_rbinc_r(REG4,REG7,DEFAULT)
0x43E4E104,	//0x0cd8		VoC_sub16_rr(REG4,REG7,REG4,DEFAULT)	|	VoC_lw16i_short(REG4,0x10,IN_PARALLEL)
0x7E63FF04,	//0x0cda		VoC_shru16_rr(REG3,REG4,DEFAULT)	|	VoC_movreg32(ACC0,REG01,IN_PARALLEL)
0x35A8E100,	//0x0cdc		VoC_bne16_rr(UnpackPairsEsc_L1,REG5,REG0)(lo)	|	VoC_lw16i_short(REG0,0x10,IN_PARALLEL)
0x70810CED,	//0x0cde		VoC_lw16i_short(REG1,0x4,DEFAULT)	|	VoC_bne16_rr(UnpackPairsEsc_L1,REG5,REG0)(hi)
0xFFC0E014,	//0x0ce0		VoC_NAD	|	VoC_lw16i_short(REG4,0x1,IN_PARALLEL)
		//0x0ce2		UnpackPairsEsc_L2
0xE0006285,	//0x0ce2		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0x35ACE242,	//0x0ce4		VoC_bne16_rr(UnpackPairsEsc_L3,REG5,REG4)(lo)	|	VoC_lbinc_p(REG2)
0xC0610CE9,	//0x0ce6		VoC_add16_rr(REG1,REG1,REG4,DEFAULT)	|	VoC_bne16_rr(UnpackPairsEsc_L3,REG5,REG4)(hi)
0xC208E5FA,	//0x0ce8		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_jump(UnpackPairsEsc_L2)
		//0x0ce9		UnpackPairsEsc_L3
0xFE046309,	//0x0cea		VoC_shr16_rr(REG4,REG0,IN_PARALLEL)	|	VoC_rbinc_r(REG5,REG1,DEFAULT)
0xF200C165,	//0x0cec		VoC_lw16i_short(REG0,0x10,DEFAULT)	|	VoC_add16_rr(REG5,REG5,REG4,DEFAULT)
		//0x0ced		UnpackPairsEsc_L1
0x0CFD35B0,	//0x0cee		VoC_bne16_rr(UnpackPairsEsc_L4,REG6,REG0)
0xE0147081,	//0x0cf0		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x4,DEFAULT)
		//0x0cf2		UnpackPairsEsc_L5
0xE0006286,	//0x0cf2		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x1,DEFAULT)
0x35B4E242,	//0x0cf4		VoC_bne16_rr(UnpackPairsEsc_L6,REG6,REG4)(lo)	|	VoC_lbinc_p(REG2)
0xC0610CF9,	//0x0cf6		VoC_add16_rr(REG1,REG1,REG4,DEFAULT)	|	VoC_bne16_rr(UnpackPairsEsc_L6,REG6,REG4)(hi)
0xC208E5FA,	//0x0cf8		VoC_sub16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_jump(UnpackPairsEsc_L5)
		//0x0cf9		UnpackPairsEsc_L6
0xFE04630A,	//0x0cfa		VoC_shr16_rr(REG4,REG0,IN_PARALLEL)	|	VoC_rbinc_r(REG6,REG1,DEFAULT)
0xFF20C1A6,	//0x0cfc		VoC_movreg32(REG01,ACC0,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG4,DEFAULT)
		//0x0cfd		UnpackPairsEsc_L4
0x0D0D3187,	//0x0cfe		VoC_bez16_r(UnpackPairsEsc_L7,REG7)
0x0D083185,	//0x0d00		VoC_bez16_r(UnpackPairsEsc_L8,REG5)
0xF87B6064,	//0x0d02		VoC_shr16_ri(REG3,0xf,IN_PARALLEL)	|	VoC_movreg16(REG4,REG3,DEFAULT)
0xF9FC649D,	//0x0d04		VoC_shru16_ri(REG4,0xffffffff,IN_PARALLEL)	|	VoC_xor16_rr(REG5,REG3,DEFAULT)
0xF683435D,	//0x0d06		VoC_movreg16(REG3,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG5,REG3,DEFAULT)
		//0x0d08		UnpackPairsEsc_L8
0x0D0D3186,	//0x0d08		VoC_bez16_r(UnpackPairsEsc_L7,REG6)
0xE49EF87B,	//0x0d0a		VoC_xor16_rr(REG6,REG3,DEFAULT)	|	VoC_shr16_ri(REG3,0xf,DEFAULT)
0xF053C39E,	//0x0d0c		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_sub16_rr(REG6,REG6,REG3,DEFAULT)
		//0x0d0d		UnpackPairsEsc_L7
0xF6C460A7,	//0x0d0e		VoC_movreg16(REG4,REG6,IN_PARALLEL)	|	VoC_movreg16(REG7,REG5,DEFAULT)
0xF7437A83,	//0x0d10		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0x10,DEFAULT)
0x7A84E089,	//0x0d12		VoC_shr32_ri(ACC0,0x10,DEFAULT)	|	VoC_movreg16(ACC0_HI,REG4,DEFAULT)
0xE242DDDB,	//0x0d14		VoC_lbinc_p(REG2)	|	VoC_sw32inc_p(REG67,REG3,IN_PARALLEL)
0xFF385DDC,	//0x0d16		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x0d18		VoC_endloop0
0xDFA9E06A,	//0x0d18		VoC_pop16(RA,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG3,DEFAULT)
0xE580F033,	//0x0d1a		VoC_return	|	VoC_lw16i_short(INC3,0x1,DEFAULT)
		//0x0d1b		UnpackPairsEsc_L0
		//0x0d1c		Coolsand_DecodeSpectrumLong
0xDFE95E00,	//0x0d1c		VoC_push16(RA,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xDE006026,	//0x0d1e		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_movreg16(REG6,REG1,DEFAULT)
0x4A460A84,	//0x0d20		VoC_lw16i(REG4,0x4a46)
0x0C6A0724,	//0x0d22		VoC_add16_rd(REG4,REG4,0xc6a)
0x4A520A85,	//0x0d24		VoC_lw16i(REG5,0x4a52)
0xD8050160,	//0x0d26		VoC_lw16_p(REG5,REG0,IN_PARALLEL)	|	VoC_add16_rp(REG0,REG5,REG4,DEFAULT)
0x14AC1809,	//0x0d28		VoC_lw16i_set_inc(REG1,0x14ac,0x2)
0x259D1807,	//0x0d2a		VoC_lw16i_set_inc(REG3,0x259d,0x1)
0x269C0A84,	//0x0d2c		VoC_lw16i(REG4,0x269c)
0x0D363186,	//0x0d2e		VoC_bez16_r(DecodeSpectrumLong_L0,REG6)
0x1CAC1809,	//0x0d30		VoC_lw16i_set_inc(REG1,0x1cac,0x2)
0x26151807,	//0x0d32		VoC_lw16i_set_inc(REG3,0x2615,0x1)
0x26A70A84,	//0x0d34		VoC_lw16i(REG4,0x26a7)
		//0x0d36		DecodeSpectrumLong_L0
0xDFC45F40,	//0x0d36		VoC_push16(REG4,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x0D643145,	//0x0d38		VoC_bngtz16_r(DecodeSpectrumLong_L12,REG5)
0x0D622E29,	//0x0d3a		VoC_loop_r(1,REG5)
0xD8B6D887,	//0x0d3c		VoC_lw16inc_p(REG6,REG3,DEFAULT)	|	VoC_lw16inc_p(REG7,REG0,DEFAULT)
0xF624383F,	//0x0d3e		VoC_movreg16(REG4,REG1,IN_PARALLEL)	|	VoC_sub16_pr(REG7,REG0,REG7,DEFAULT)
0xDF405FC3,	//0x0d40		VoC_push32(REG01,IN_PARALLEL)	|	VoC_push16(REG3,DEFAULT)
0x31C6DFC7,	//0x0d42		VoC_bnez16_r(DecodeSpectrumLong_L3,REG6)(lo)	|	VoC_push16(REG7,DEFAULT)
0x2B800D48,	//0x0d44		VoC_jal(Coolsand_UnpackZeros)(lo)	|	VoC_bnez16_r(DecodeSpectrumLong_L3,REG6)(hi)
0xE5D70C0E,	//0x0d46		VoC_jump(DecodeSpectrumLong_L8)	|	VoC_jal(Coolsand_UnpackZeros)(hi)
		//0x0d48		DecodeSpectrumLong_L3
0xE0A17080,	//0x0d48		VoC_lw16i_short(REG1,0xa,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x4,DEFAULT)
0x0D503430,	//0x0d4a		VoC_bgt16_rr(DecodeSpectrumLong_L4,REG6,REG0)
0x0C1E2B80,	//0x0d4c		VoC_jal(Coolsand_UnpackQuads)
0xFFC065D0,	//0x0d4e		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeSpectrumLong_L8)
		//0x0d50		DecodeSpectrumLong_L4
0x0D563431,	//0x0d50		VoC_bgt16_rr(DecodeSpectrumLong_L5,REG6,REG1)
0x0C7C2B80,	//0x0d52		VoC_jal(Coolsand_UnpackPairsNoEsc)
0xFFC065CA,	//0x0d54		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeSpectrumLong_L8)
		//0x0d56		DecodeSpectrumLong_L5
0x4DAD4436,	//0x0d56		VoC_bne16_rd(DecodeSpectrumLong_L6,REG6,0x4dad)
0x0CB82B80,	//0x0d58		VoC_jal(Coolsand_UnpackPairsEsc)
0xFFC065C4,	//0x0d5a		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeSpectrumLong_L8)
		//0x0d5c		DecodeSpectrumLong_L6
0x0C0E2B80,	//0x0d5c		VoC_jal(Coolsand_UnpackZeros)
		//0x0d5e		DecodeSpectrumLong_L8
0xDF005F87,	//0x0d5e		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xF8FF5F83,	//0x0d60		VoC_shr16_ri(REG7,0xffffffff,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
		//0x0d62		VoC_endloop1
0xFFC041C9,	//0x0d62		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG1,REG7,REG1,DEFAULT)
		//0x0d64		DecodeSpectrumLong_L12
0x04000A84,	//0x0d64		VoC_lw16i(REG4,0x400)
0xF6240507,	//0x0d66		VoC_movreg16(REG4,REG1,IN_PARALLEL)	|	VoC_sub16_rp(REG7,REG4,REG0,DEFAULT)
0x0C0E2B80,	//0x0d68		VoC_jal(Coolsand_UnpackZeros)
0x5F00DF84,	//0x0d6a		VoC_pop32(REG01,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xD8C7DFA9,	//0x0d6c		VoC_lw16inc_p(REG7,REG4,DEFAULT)	|	VoC_pop16(RA,IN_PARALLEL)
0x0D893187,	//0x0d6e		VoC_bez16_r(DecodeSpectrumLong_L9,REG7)
0xE04658C7,	//0x0d70		VoC_lw16i_short(REG6,0x4,IN_PARALLEL)	|	VoC_lw16inc_p(REG7,REG4,DEFAULT)
0xC1338220,	//0x0d72		VoC_add16_rr(REG3,REG4,REG6,DEFAULT)	|	VoC_add16inc_rp(REG0,REG0,REG4,DEFAULT)
0xF6805885,	//0x0d74		VoC_movreg16(REG0,REG4,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x0D893187,	//0x0d76		VoC_bez16_r(DecodeSpectrumLong_L9,REG7)
0x834567D0,	//0x0d78		VoC_add16inc_rp(REG5,REG5,REG0,IN_PARALLEL)	|	VoC_loop_r_short(REG7,DEFAULT)
0x414CF8FD,	//0x0d7a		VoC_add16_rr(REG4,REG5,REG1,DEFAULT)	|	VoC_shr16_ri(REG5,0xffffffff,DEFAULT)
0x59A4D8B7,	//0x0d7c		VoC_lw32_p(ACC0,REG4,DEFAULT)	|	VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)
0x32C4FA83,	//0x0d7e		VoC_bngtz32_r(DecodeSpectrumLong_L10,ACC0)(lo)	|	VoC_shr32_ri(REG67,0x10,IN_PARALLEL)
0xC91C0D84,	//0x0d80		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_bngtz32_r(DecodeSpectrumLong_L10,ACC0)(hi)
0xFFC065C5,	//0x0d82		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeSpectrumLong_L11)
		//0x0d84		DecodeSpectrumLong_L10
0x0D8732C4,	//0x0d84		VoC_bngtz32_r(DecodeSpectrumLong_L11,ACC0)
0x8345CB1C,	//0x0d86		VoC_add16inc_rp(REG5,REG5,REG0,DEFAULT)	|	VoC_sub32_rr(ACC0,ACC0,REG67,DEFAULT)
		//0x0d87		DecodeSpectrumLong_L11
		//0x0d88		VoC_endloop0
0xE580DDA4,	//0x0d88		VoC_return	|	VoC_sw32_p(ACC0,REG4,DEFAULT)
		//0x0d89		DecodeSpectrumLong_L9
		//0x0d8a		Coolsand_DecodeSpectrumShort
0xE0266024,	//0x0d8a		VoC_lw16i_short(REG6,0x2,IN_PARALLEL)	|	VoC_movreg16(REG4,REG1,DEFAULT)
0x14AC1807,	//0x0d8c		VoC_lw16i_set_inc(REG3,0x14ac,0x1)
0x259D1805,	//0x0d8e		VoC_lw16i_set_inc(REG1,0x259d,0x1)
0x0D963184,	//0x0d90		VoC_bez16_r(DecodeSpectrumShort_L0,REG4)
0x1CAC1807,	//0x0d92		VoC_lw16i_set_inc(REG3,0x1cac,0x1)
0x26151805,	//0x0d94		VoC_lw16i_set_inc(REG1,0x2615,0x1)
		//0x0d96		DecodeSpectrumShort_L0
0xE0564187,	//0x0d96		VoC_lw16i_short(REG6,0x5,IN_PARALLEL)	|	VoC_add16_rr(REG7,REG6,REG0,DEFAULT)
0xDFE94180,	//0x0d98		VoC_push16(RA,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG6,REG0,DEFAULT)
0x4C8A0A84,	//0x0d9a		VoC_lw16i(REG4,0x4c8a)
0x0C6A0724,	//0x0d9c		VoC_add16_rd(REG4,REG4,0xc6a)
0x4C960A85,	//0x0d9e		VoC_lw16i(REG5,0x4c96)
0xD8750164,	//0x0da0		VoC_lw16_p(REG5,REG7,IN_PARALLEL)	|	VoC_add16_rp(REG4,REG5,REG4,DEFAULT)
0xFF155886,	//0x0da2		VoC_movreg32(ACC1,REG45,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG0,DEFAULT)
0xF7436068,	//0x0da4		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_movreg16(ACC0_LO,REG3,DEFAULT)
0xE0077024,	//0x0da6		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
		//0x0da8		DecodeSpectrumShort_L10
0x0E1634B7,	//0x0da8		VoC_bngt16_rr(DecodeSpectrumShort_L11,REG6,REG7)
0xE165C1E7,	//0x0daa		VoC_movreg16(REG5,ACC1_HI,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG4,DEFAULT)
0xDFC35F43,	//0x0dac		VoC_push16(REG3,IN_PARALLEL)	|	VoC_push32(REG67,DEFAULT)
0x0DF03145,	//0x0dae		VoC_bngtz16_r(DecodeSpectrumShort_L12,REG5)
0x0DEE2E29,	//0x0db0		VoC_loop_r(1,REG5)
0xD8B7D896,	//0x0db2		VoC_lw16inc_p(REG7,REG3,DEFAULT)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0xF66A38FF,	//0x0db4		VoC_movreg16(ACC1_LO,REG3,IN_PARALLEL)	|	VoC_sub16_pr(REG7,REG3,REG7,DEFAULT)
0xE0035805,	//0x0db6		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG0,DEFAULT)
		//0x0db8		DecodeSpectrumShort_L2
0x0DEA34AB,	//0x0db8		VoC_bngt16_rr(DecodeSpectrumShort_L1,REG5,REG3)
0x0A84DF40,	//0x0dba		VoC_lw16i(REG4,0x80)(lo)	|	VoC_push32(REG01,DEFAULT)
0x451C0080,	//0x0dbc		VoC_mult16_rr(REG4,REG4,REG3,DEFAULT)	|	VoC_lw16i(REG4,0x80)(hi)
0x5FC5F705,	//0x0dbe		VoC_push16(REG5,DEFAULT)	|	VoC_movreg16(REG5,ACC0_LO,IN_PARALLEL)
0x5FC8DF45,	//0x0dc0		VoC_push16(ACC0_LO,DEFAULT)	|	VoC_push32(ACC1,IN_PARALLEL)
0x78FCDF43,	//0x0dc2		VoC_shr16_ri(REG4,0xffffffff,DEFAULT)	|	VoC_push32(REG67,IN_PARALLEL)
0x5FC3DE18,	//0x0dc4		VoC_push16(REG3,DEFAULT)	|	VoC_inc_p(REG3,IN_PARALLEL)
0x31C6C164,	//0x0dc6		VoC_bnez16_r(DecodeSpectrumShort_L3,REG6)(lo)	|	VoC_add16_rr(REG4,REG5,REG4,IN_PARALLEL)
0x2B800DCC,	//0x0dc8		VoC_jal(Coolsand_UnpackZeros)(lo)	|	VoC_bnez16_r(DecodeSpectrumShort_L3,REG6)(hi)
0xE5D70C0E,	//0x0dca		VoC_jump(DecodeSpectrumShort_L8)	|	VoC_jal(Coolsand_UnpackZeros)(hi)
		//0x0dcc		DecodeSpectrumShort_L3
0xE0A17080,	//0x0dcc		VoC_lw16i_short(REG1,0xa,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x4,DEFAULT)
0x0DD43430,	//0x0dce		VoC_bgt16_rr(DecodeSpectrumShort_L4,REG6,REG0)
0x0C1E2B80,	//0x0dd0		VoC_jal(Coolsand_UnpackQuads)
0xFFC065D0,	//0x0dd2		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeSpectrumShort_L8)
		//0x0dd4		DecodeSpectrumShort_L4
0x0DD93431,	//0x0dd4		VoC_bgt16_rr(DecodeSpectrumShort_L5,REG6,REG1)
0x0C7C2B80,	//0x0dd6		VoC_jal(Coolsand_UnpackPairsNoEsc)
0xF160E5CA,	//0x0dd8		VoC_lw16i_short(REG0,0xb,DEFAULT)	|	VoC_jump(DecodeSpectrumShort_L8)
		//0x0dd9		DecodeSpectrumShort_L5
0x0DE035B0,	//0x0dda		VoC_bne16_rr(DecodeSpectrumShort_L6,REG6,REG0)
0x0CB82B80,	//0x0ddc		VoC_jal(Coolsand_UnpackPairsEsc)
0xFFC065C4,	//0x0dde		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeSpectrumShort_L8)
		//0x0de0		DecodeSpectrumShort_L6
0x0C0E2B80,	//0x0de0		VoC_jal(Coolsand_UnpackZeros)
		//0x0de2		DecodeSpectrumShort_L8
0xDF035F83,	//0x0de2		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDF055F88,	//0x0de4		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_pop16(ACC0_LO,DEFAULT)
0xDF005F85,	//0x0de6		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
0x0DB82B00,	//0x0de8		VoC_jump_lg(DecodeSpectrumShort_L2)
		//0x0dea		DecodeSpectrumShort_L1
0xF70678FF,	//0x0dea		VoC_movreg16(REG6,ACC0_LO,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0xffffffff,DEFAULT)
0xC1F66143,	//0x0dec		VoC_add16_rr(REG6,REG7,REG6,IN_PARALLEL)	|	VoC_movreg16(REG3,ACC1_LO,DEFAULT)
		//0x0dee		VoC_endloop1
0xFFC060C8,	//0x0dee		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(ACC0_LO,REG6,DEFAULT)
		//0x0df0		DecodeSpectrumShort_L12
0xD8856147,	//0x0df0		VoC_lw16inc_p(REG5,REG0,IN_PARALLEL)	|	VoC_movreg16(REG7,ACC1_LO,DEFAULT)
0x00800A86,	//0x0df2		VoC_lw16i(REG6,0x80)
0x85BF6104,	//0x0df4		VoC_sub16_rp(REG7,REG6,REG7,IN_PARALLEL)	|	VoC_movreg16(REG4,ACC0_LO,DEFAULT)
0xC1E35FC0,	//0x0df6		VoC_add16_rr(REG3,REG7,REG4,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xE01041DB,	//0x0df8		VoC_lw16i_short(REG0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG7,REG3,DEFAULT)
0xC430C340,	//0x0dfa		VoC_mult16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_sub16_rr(REG0,REG5,REG0,DEFAULT)
0xF8F8E242,	//0x0dfc		VoC_shr16_ri(REG0,0xffffffff,DEFAULT)	|	VoC_lbinc_p(REG2)
0xF8FE40C3,	//0x0dfe		VoC_shr16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG0,DEFAULT)
0xE0036068,	//0x0e00		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_movreg16(ACC0_LO,REG3,DEFAULT)
0x0E103185,	//0x0e02		VoC_bez16_r(DecodeSpectrumShort_L9,REG5)
0x0E0E2E29,	//0x0e04		VoC_loop_r(1,REG5)
0x5FC4C4F5,	//0x0e06		VoC_push16(REG4,DEFAULT)	|	VoC_mult16_rr(REG5,REG3,REG6,DEFAULT)
0x412CDE18,	//0x0e08		VoC_add16_rr(REG4,REG4,REG5,DEFAULT)	|	VoC_inc_p(REG3,IN_PARALLEL)
0x2B80DF43,	//0x0e0a		VoC_jal(Coolsand_UnpackZeros)(lo)	|	VoC_push32(REG67,IN_PARALLEL)
0xDF030C0E,	//0x0e0c		VoC_pop32(REG67,DEFAULT)	|	VoC_jal(Coolsand_UnpackZeros)(hi)
		//0x0e0e		VoC_endloop1
0xFFC05F84,	//0x0e0e		VoC_NAD(IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
		//0x0e10		DecodeSpectrumShort_L9
0xDF805F03,	//0x0e10		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_pop32(REG67,DEFAULT)
0xE0145F83,	//0x0e12		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0x0DA82B00,	//0x0e14		VoC_jump_lg(DecodeSpectrumShort_L10)
		//0x0e16		DecodeSpectrumShort_L11
0xFFC0DFA9,	//0x0e16		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0e18		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0e1a		Coolsand_DecWindowOverlap
0x04000A83,	//0x0e1a		VoC_lw16i(REG3,0x400)
0xF3F94019,	//0x0e1c		VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG3,DEFAULT)
0xF0086020,	//0x0e1e		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_movreg16(REG0,REG1,DEFAULT)
0x0C731403,	//0x0e20		VoC_lw16_d(REG3,0xc73)
0xDE087F06,	//0x0e22		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x07FE0A81,	//0x0e24		VoC_lw16i(REG1,0x7fe)
0xC10D6072,	//0x0e26		VoC_add16_rr(REG5,REG4,REG1,IN_PARALLEL)	|	VoC_movreg16(INC2,REG3,DEFAULT)
0xE0007809,	//0x0e28		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x1,DEFAULT)
0xC21B4459,	//0x0e2a		VoC_sub16_rr(REG3,REG0,REG3,IN_PARALLEL)	|	VoC_mult16_rr(REG1,REG1,REG3,DEFAULT)
0xFF176073,	//0x0e2c		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_movreg16(INC3,REG3,DEFAULT)
0x0A81C08B,	//0x0e2e		VoC_lw16i(REG1,0x100)(lo)	|	VoC_add16_rr(REG3,REG2,REG1,DEFAULT)
0x443F0100,	//0x0e30		VoC_bne16_rd(DecWindowOverlap_L0,REG7,0x4da2)(lo)	|	VoC_lw16i(REG1,0x100)(hi)
0x0A804DA2,	//0x0e32		VoC_lw16i(REG0,0x5eb4)(lo)	|	VoC_bne16_rd(DecWindowOverlap_L0,REG7,0x4da2)(hi)
0xC0085EB4,	//0x0e34		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_lw16i(REG0,0x5eb4)(hi)
0xFFC065C6,	//0x0e36		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecWindowOverlap_L1)
		//0x0e38		DecWindowOverlap_L0
0x55B40A80,	//0x0e38		VoC_lw16i(REG0,0x55b4)
0xFFC04008,	//0x0e3a		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
		//0x0e3c		DecWindowOverlap_L1
0x0E7635B7,	//0x0e3c		VoC_bne16_rr(DecWindowOverlap_L2,REG6,REG7)
		//0x0e3e		DecWindowOverlap_L3
0x59C3D9C2,	//0x0e3e		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x790EF90C,	//0x0e40		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F42DFC0,	//0x0e42		VoC_push32(REG45,DEFAULT)	|	VoC_push16(REG0,IN_PARALLEL)
0xDF43F780,	//0x0e44		VoC_push32(REG67,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x5F41D9C1,	//0x0e46		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x0e48		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x0e4a		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x0e4c		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x0e4e		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x5F01FF38,	//0x0e50		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x3C24E016,	//0x0e52		VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0x114DE007,	//0x0e54		VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0x491CFBF3,	//0x0e56		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)
0x7B9CC95D,	//0x0e58		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x5F02DF03,	//0x0e5a		VoC_pop32(REG45,DEFAULT)	|	VoC_pop32(REG67,IN_PARALLEL)
0x5CA9FB9D,	//0x0e5c		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0xDCBBF7A1,	//0x0e5e		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0xF62D59C9,	//0x0e60		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF90A5F41,	//0x0e62		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x0e64		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x0e66		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x0e68		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDF01FF38,	//0x0e6a		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDDC5,	//0x0e6c		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xFF075F80,	//0x0e6e		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x343EFF3B,	//0x0e70		VoC_bgt16_rr(DecWindowOverlap_L3,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,DEFAULT)
0x2B000E3E,	//0x0e72		VoC_jump_lg(DecWindowOverlap_L4)(lo)	|	VoC_bgt16_rr(DecWindowOverlap_L3,REG7,REG6)(hi)
0xFFC00EB8,	//0x0e74		VoC_NAD	|	VoC_jump_lg(DecWindowOverlap_L4)(hi)
		//0x0e76		DecWindowOverlap_L2
0x4DA24436,	//0x0e76		VoC_bne16_rd(DecWindowOverlap_L5,REG6,0x4da2)
0x5EB40A80,	//0x0e78		VoC_lw16i(REG0,0x5eb4)
0xE5C4C009,	//0x0e7a		VoC_jump(DecWindowOverlap_L6)	|	VoC_add16_rr(REG1,REG0,REG1,DEFAULT)
		//0x0e7c		DecWindowOverlap_L5
0x55B40A80,	//0x0e7c		VoC_lw16i(REG0,0x55b4)
0xD9C2C009,	//0x0e7e		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG0,REG1,DEFAULT)
		//0x0e7f		DecWindowOverlap_L6
0xF90C59C3,	//0x0e80		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF7805FC0,	//0x0e82		VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xDFC1790E,	//0x0e84		VoC_push16(REG1,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0x5F41D9C1,	//0x0e86		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x0e88		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x0e8a		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x0e8c		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x0e8e		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x5F01FF38,	//0x0e90		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x3C24E016,	//0x0e92		VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0x114DE007,	//0x0e94		VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0xDF80FBF3,	//0x0e96		VoC_pop16(REG0,DEFAULT)	|	VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)
0xC95D491C,	//0x0e98		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)
0xD9C27B9C,	//0x0e9a		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xFB9D59C3,	//0x0e9c		VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF7A15CA9,	//0x0e9e		VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
0xF90C5CBB,	//0x0ea0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)
0xF90E59C9,	//0x0ea2		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF62D5F41,	//0x0ea4		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0x4CECF90A,	//0x0ea6		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,DEFAULT)
0x4E55CCFD,	//0x0ea8		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x0eaa		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x7F38CE9E,	//0x0eac		VoC_movreg32(REG01,RL7,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0xDF01DFC0,	//0x0eae		VoC_pop32(REG23,DEFAULT)	|	VoC_push16(REG0,IN_PARALLEL)
0xDDCCDDC5,	//0x0eb0		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xFF075F81,	//0x0eb2		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xFF3B5F80,	//0x0eb4		VoC_movreg32(REG67,RL7,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x0E7F343E,	//0x0eb6		VoC_bgt16_rr(DecWindowOverlap_L6,REG7,REG6)
		//0x0eb8		DecWindowOverlap_L4
0xFFC06580,	//0x0eb8		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0eba		Coolsand_DecWindowOverlapLongStart
0x04000A83,	//0x0eba		VoC_lw16i(REG3,0x400)
0xF3F94019,	//0x0ebc		VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG3,DEFAULT)
0xF0086020,	//0x0ebe		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_movreg16(REG0,REG1,DEFAULT)
0x0C731403,	//0x0ec0		VoC_lw16_d(REG3,0xc73)
0xDE087F06,	//0x0ec2		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x07FE0A81,	//0x0ec4		VoC_lw16i(REG1,0x7fe)
0xC10D6072,	//0x0ec6		VoC_add16_rr(REG5,REG4,REG1,IN_PARALLEL)	|	VoC_movreg16(INC2,REG3,DEFAULT)
0xE0007809,	//0x0ec8		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x1,DEFAULT)
0xC21B4459,	//0x0eca		VoC_sub16_rr(REG3,REG0,REG3,IN_PARALLEL)	|	VoC_mult16_rr(REG1,REG1,REG3,DEFAULT)
0xFF176073,	//0x0ecc		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_movreg16(INC3,REG3,DEFAULT)
0xDFC6408B,	//0x0ece		VoC_push16(REG6,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG2,REG1,DEFAULT)
0x01000A81,	//0x0ed0		VoC_lw16i(REG1,0x100)
0x4DA24437,	//0x0ed2		VoC_bne16_rd(DecWindowOverlapLongStart_L0,REG7,0x4da2)
0x5EB40A80,	//0x0ed4		VoC_lw16i(REG0,0x5eb4)
0xE5C5C008,	//0x0ed6		VoC_jump(DecWindowOverlapLongStart_L1)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
		//0x0ed8		DecWindowOverlapLongStart_L0
0x55B40A80,	//0x0ed8		VoC_lw16i(REG0,0x55b4)
0xFFC04008,	//0x0eda		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
		//0x0edc		DecWindowOverlapLongStart_L1
0x0F072C05,	//0x0edc		VoC_loop_i(0x1,0x2)
0x0F062DC0,	//0x0ede		VoC_loop_i(0x0,0xe0)
0x59C3D9C2,	//0x0ee0		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x0ee2		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xF90EF780,	//0x0ee4		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x5F41D9C1,	//0x0ee6		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x0ee8		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x0eea		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x0eec		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x0eee		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x5F01FF38,	//0x0ef0		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x3C24E016,	//0x0ef2		VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)	|	VoC_lw16i_short(REG6,0x1,IN_PARALLEL)
0x114DE007,	//0x0ef4		VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0xE1A1FBF3,	//0x0ef6		VoC_movreg16(REG1,RL6_HI,DEFAULT)	|	VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)
0xC95D491C,	//0x0ef8		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)
0xF62D59CA,	//0x0efa		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG1,DEFAULT)
0xFB9D7B9C,	//0x0efc		VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xFF447F38,	//0x0efe		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xFA0A5CA9,	//0x0f00		VoC_shr32_ri(REG45,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
0x5DC2DDCC,	//0x0f02		VoC_sw32inc_p(REG45,REG0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xDF80FF07,	//0x0f04		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
		//0x0f06		VoC_endloop0
0xFFC0DCBB,	//0x0f06		VoC_NOP	|	VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)
		//0x0f07		VoC_endloop1
0x442EDF86,	//0x0f08		VoC_bne16_rd(DecWindowOverlapLongStart_L2,REG6,0x4da2)(lo)	|	VoC_pop16(REG6,DEFAULT)
0x0A814DA2,	//0x0f0a		VoC_lw16i(REG1,0x5eb4)(lo)	|	VoC_bne16_rd(DecWindowOverlapLongStart_L2,REG6,0x4da2)(hi)
0xE5C35EB4,	//0x0f0c		VoC_jump(DecWindowOverlapLongStart_L3)	|	VoC_lw16i(REG1,0x5eb4)(hi)
		//0x0f0e		DecWindowOverlapLongStart_L2
0x55B40A81,	//0x0f0e		VoC_lw16i(REG1,0x55b4)
		//0x0f10		DecWindowOverlapLongStart_L3
0x59C3D9C2,	//0x0f10		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x0f12		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x790EF780,	//0x0f14		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0xD9C1DFC1,	//0x0f16		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0xF90A5F41,	//0x0f18		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x0f1a		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x0f1c		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x0f1e		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF38600C,	//0x0f20		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0xE0165F01,	//0x0f22		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0073C24,	//0x0f24		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)
0xFBF3114D,	//0x0f26		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0x491CDF80,	//0x0f28		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
0x7B9CC95D,	//0x0f2a		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x59C3D9C2,	//0x0f2c		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0x5CA9FB9D,	//0x0f2e		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0x5CBBF7A1,	//0x0f30		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0x59C9F90C,	//0x0f32		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F41F90E,	//0x0f34		VoC_push32(REG23,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90AF62D,	//0x0f36		VoC_shru16_ri(REG2,0x1,DEFAULT)	|	VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)
0xCCFD4CEC,	//0x0f38		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x0f3a		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x0f3c		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x0f3e		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDF01,	//0x0f40		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0x5F81DDC5,	//0x0f42		VoC_pop16(REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0x5F80FF07,	//0x0f44		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x343EFF3B,	//0x0f46		VoC_bgt16_rr(DecWindowOverlapLongStart_L3,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0xE5800F10,	//0x0f48		VoC_return	|	VoC_bgt16_rr(DecWindowOverlapLongStart_L3,REG7,REG6)(hi)
		//0x0f4a		Coolsand_DecWindowOverlapLongStop
0x04000A83,	//0x0f4a		VoC_lw16i(REG3,0x400)
0xF3F94019,	//0x0f4c		VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG3,DEFAULT)
0xF0086020,	//0x0f4e		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_movreg16(REG0,REG1,DEFAULT)
0x0C731403,	//0x0f50		VoC_lw16_d(REG3,0xc73)
0xDE087F06,	//0x0f52		VoC_inc_p(REG1,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x07FE0A81,	//0x0f54		VoC_lw16i(REG1,0x7fe)
0xC10D6072,	//0x0f56		VoC_add16_rr(REG5,REG4,REG1,IN_PARALLEL)	|	VoC_movreg16(INC2,REG3,DEFAULT)
0xE0007809,	//0x0f58		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x1,DEFAULT)
0xC21B4459,	//0x0f5a		VoC_sub16_rr(REG3,REG0,REG3,IN_PARALLEL)	|	VoC_mult16_rr(REG1,REG1,REG3,DEFAULT)
0xFF176073,	//0x0f5c		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_movreg16(INC3,REG3,DEFAULT)
0x0A84C08B,	//0x0f5e		VoC_lw16i(REG4,0x100)(lo)	|	VoC_add16_rr(REG3,REG2,REG1,DEFAULT)
0x442F0100,	//0x0f60		VoC_bne16_rd(DecWindowOverlapLongStop_L0,REG7,0x4da2)(lo)	|	VoC_lw16i(REG4,0x100)(hi)
0x0A804DA2,	//0x0f62		VoC_lw16i(REG0,0x5eb4)(lo)	|	VoC_bne16_rd(DecWindowOverlapLongStop_L0,REG7,0x4da2)(hi)
0xE5C35EB4,	//0x0f64		VoC_jump(DecWindowOverlapLongStop_L1)	|	VoC_lw16i(REG0,0x5eb4)(hi)
		//0x0f66		DecWindowOverlapLongStop_L0
0x55B40A80,	//0x0f66		VoC_lw16i(REG0,0x55b4)
		//0x0f68		DecWindowOverlapLongStop_L1
0x4DA24436,	//0x0f68		VoC_bne16_rd(DecWindowOverlapLongStop_L2,REG6,0x4da2)
0x5EB40A81,	//0x0f6a		VoC_lw16i(REG1,0x5eb4)
0xE5C4C061,	//0x0f6c		VoC_jump(DecWindowOverlapLongStop_L3)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x0f6e		DecWindowOverlapLongStop_L2
0x55B40A81,	//0x0f6e		VoC_lw16i(REG1,0x55b4)
0xDFC0C061,	//0x0f70		VoC_push16(REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
		//0x0f71		DecWindowOverlapLongStop_L3
0x0F9D2C05,	//0x0f72		VoC_loop_i(0x1,0x2)
0x0F9C2DC0,	//0x0f74		VoC_loop_i(0x0,0xe0)
0xDFC1E180,	//0x0f76		VoC_push16(REG1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,DEFAULT)
0xF60C59C5,	//0x0f78		VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)	|	VoC_lw32inc_p(ACC1,REG0,DEFAULT)
0xFF387A0D,	//0x0f7a		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x1,DEFAULT)
0xE0077026,	//0x0f7c		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x1,DEFAULT)
0xFBF3114D,	//0x0f7e		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0x10C4DF80,	//0x0f80		VoC_add32_rp(ACC0,REG67,REG0,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
0x7B9CC95D,	//0x0f82		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x59C3D9C2,	//0x0f84		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0x5CA9FB9D,	//0x0f86		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0x5CBBF7A1,	//0x0f88		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0x59C9F90C,	//0x0f8a		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F41F90E,	//0x0f8c		VoC_push32(REG23,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90AF62D,	//0x0f8e		VoC_shru16_ri(REG2,0x1,DEFAULT)	|	VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)
0xCCFD4CEC,	//0x0f90		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x0f92		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x0f94		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x0f96		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDF01,	//0x0f98		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0xFF075DC5,	//0x0f9a		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
		//0x0f9c		VoC_endloop0
0xFFC0DF81,	//0x0f9c		VoC_NOP	|	VoC_pop16(REG1,DEFAULT)
		//0x0f9d		VoC_endloop1
0xFFC0DF80,	//0x0f9e		VoC_NOP	|	VoC_pop16(REG0,DEFAULT)
		//0x0fa0		DecWindowOverlapLongStop_L4
0x59C3D9C2,	//0x0fa0		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F780,	//0x0fa2		VoC_push16(REG0,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x790EF90C,	//0x0fa4		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xD9C1DFC1,	//0x0fa6		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0xF90A5F41,	//0x0fa8		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x0faa		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x0fac		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x0fae		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF38600C,	//0x0fb0		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0xE0165F01,	//0x0fb2		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0073C24,	//0x0fb4		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)
0xFBF3114D,	//0x0fb6		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0x491CDF80,	//0x0fb8		VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)	|	VoC_pop16(REG0,DEFAULT)
0x7B9CC95D,	//0x0fba		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)
0x59C3D9C2,	//0x0fbc		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0x5CA9FB9D,	//0x0fbe		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)
0x5CBBF7A1,	//0x0fc0		VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0x59C9F90C,	//0x0fc2		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x5F41F90E,	//0x0fc4		VoC_push32(REG23,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90AF62D,	//0x0fc6		VoC_shru16_ri(REG2,0x1,DEFAULT)	|	VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)
0xCCFD4CEC,	//0x0fc8		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x0fca		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x0fcc		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x0fce		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDF01,	//0x0fd0		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0x5F81DDC5,	//0x0fd2		VoC_pop16(REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0x5F80FF07,	//0x0fd4		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x343EFF3B,	//0x0fd6		VoC_bgt16_rr(DecWindowOverlapLongStop_L4,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0xE5800FA0,	//0x0fd8		VoC_return	|	VoC_bgt16_rr(DecWindowOverlapLongStop_L4,REG7,REG6)(hi)
		//0x0fda		Coolsand_DecWindowOverlapShort
0xE0017050,	//0x0fda		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0xF6805FC0,	//0x0fdc		VoC_movreg16(REG0,REG4,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x0C731412,	//0x0fde		VoC_lw16_d(INC2,0xc73)
0xE00D702C,	//0x0fe0		VoC_lw16i_short(RL6_HI,0x0,IN_PARALLEL)	|	VoC_lw16i_short(RL6_LO,0x1,DEFAULT)
0x2DC0FBF6,	//0x0fe2		VoC_loop_i(0x0,0xe0)(lo)	|	VoC_shr32_ri(RL6,0xfffffffe,DEFAULT)
0xD9C40FEC,	//0x0fe4		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_loop_i(0x0,0xe0)(hi)
0x4934D9C5,	//0x0fe6		VoC_add32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_lw32inc_p(ACC1,REG0,DEFAULT)
0xFB9CC975,	//0x0fe8		VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,RL6,IN_PARALLEL)
0xDCA9FB9D,	//0x0fea		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff3,DEFAULT)
		//0x0fec		VoC_endloop0
0x6004DCAB,	//0x0fec		VoC_movreg16(REG4,REG0,DEFAULT)	|	VoC_sw16inc_p(ACC1_HI,REG2,DEFAULT)
0xDF80F3F9,	//0x0fee		VoC_pop16(REG0,DEFAULT)	|	VoC_lw16i_short(INC1,0xfffffffe,IN_PARALLEL)
0x00800A83,	//0x0ff0		VoC_lw16i(REG3,0x80)
0xE0034018,	//0x0ff2		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG3,DEFAULT)
0x079DE001,	//0x0ff4		VoC_sub16_rd(REG5,REG3,0xc73)(lo)	|	VoC_movreg16(REG1,REG0,DEFAULT)
0x5E080C73,	//0x0ff6		VoC_inc_p(REG1,DEFAULT)	|	VoC_sub16_rd(REG5,REG3,0xc73)(hi)
0x0A83F6B3,	//0x0ff8		VoC_lw16i(REG3,0xfe)(lo)	|	VoC_movreg16(INC3,REG5,IN_PARALLEL)
0x7F0600FE,	//0x0ffa		VoC_movreg32(RL6,REG01,DEFAULT)	|	VoC_lw16i(REG3,0xfe)(hi)
0x780BC11D,	//0x0ffc		VoC_shr16_ri(REG3,0x1,DEFAULT)	|	VoC_add16_rr(REG5,REG4,REG3,IN_PARALLEL)
0x0819FF17,	//0x0ffe		VoC_mult16_rd(REG1,REG3,0xc73)(lo)	|	VoC_movreg32(RL7,REG45,IN_PARALLEL)
0x442F0C73,	//0x1000		VoC_bne16_rd(DecWindowOverlapShort_L0,REG7,0x4da2)(lo)	|	VoC_mult16_rd(REG1,REG3,0xc73)(hi)
0x0A804DA2,	//0x1002		VoC_lw16i(REG0,0x5eb4)(lo)	|	VoC_bne16_rd(DecWindowOverlapShort_L0,REG7,0x4da2)(hi)
0xE5C35EB4,	//0x1004		VoC_jump(DecWindowOverlapShort_L1)	|	VoC_lw16i(REG0,0x5eb4)(hi)
		//0x1006		DecWindowOverlapShort_L0
0x55B40A80,	//0x1006		VoC_lw16i(REG0,0x55b4)
		//0x1008		DecWindowOverlapShort_L1
0x442EC08B,	//0x1008		VoC_bne16_rd(DecWindowOverlapShort_L2,REG6,0x4da2)(lo)	|	VoC_add16_rr(REG3,REG2,REG1,DEFAULT)
0x0A814DA2,	//0x100a		VoC_lw16i(REG1,0x5eb4)(lo)	|	VoC_bne16_rd(DecWindowOverlapShort_L2,REG6,0x4da2)(hi)
0xE5C35EB4,	//0x100c		VoC_jump(DecWindowOverlapShort_L3)	|	VoC_lw16i(REG1,0x5eb4)(hi)
		//0x100e		DecWindowOverlapShort_L2
0x55B40A81,	//0x100e		VoC_lw16i(REG1,0x55b4)
		//0x1010		DecWindowOverlapShort_L3
		//0x1010		DecWindowOverlapShort_L4
0x59C3D9C2,	//0x1010		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x1012		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x790EF780,	//0x1014		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x59C1DFC1,	//0x1016		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0x5F41F60C,	//0x1018		VoC_push32(REG23,DEFAULT)	|	VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)
0xFF38F90A,	//0x101a		VoC_movreg32(REG01,RL7,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0xCCFD4CEC,	//0x101c		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x101e		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1020		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xE0075F01,	//0x1022		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0163C24,	//0x1024		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG0,ACC0,DEFAULT)
0xFBF3114D,	//0x1026		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0xF7A15F80,	//0x1028		VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0xC95D491C,	//0x102a		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG67,DEFAULT)
0xD9C27B9C,	//0x102c		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xFB9D59C3,	//0x102e		VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF90C5CA9,	//0x1030		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
0xF90E5CBB,	//0x1032		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)
0xF62D59C9,	//0x1034		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF90A5F41,	//0x1036		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1038		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x103a		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x103c		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDFC07F38,	//0x103e		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDC5DF01,	//0x1040		VoC_sw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0x5F81DDCC,	//0x1042		VoC_pop16(REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x5F80FF07,	//0x1044		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x343EFF3B,	//0x1046		VoC_bgt16_rr(DecWindowOverlapShort_L4,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0x60201010,	//0x1048		VoC_movreg16(REG0,REG1,DEFAULT)	|	VoC_bgt16_rr(DecWindowOverlapShort_L4,REG7,REG6)(hi)
0xFFC0F601,	//0x104a		VoC_NAD	|	VoC_movreg16(REG1,REG0,IN_PARALLEL)
0x10A22C06,	//0x104c		VoC_loop_i(0x0,0x3)
0x01000A86,	//0x104e		VoC_lw16i(REG6,0x100)
0xFF324230,	//0x1050		VoC_movreg32(REG45,RL6,IN_PARALLEL)	|	VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)
0xE027780E,	//0x1052		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0x1,DEFAULT)
0xFF385F40,	//0x1054		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xC0304134,	//0x1056		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0xC33D7027,	//0x1058		VoC_sub16_rr(REG5,REG4,REG7,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
0xFF1643BE,	//0x105a		VoC_movreg32(RL6,REG45,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
0xF8FE60C7,	//0x105c		VoC_shr16_ri(REG6,0xffffffff,IN_PARALLEL)	|	VoC_movreg16(REG7,REG6,DEFAULT)
0x1406C031,	//0x105e		VoC_lw16_d(REG6,0xc73)(lo)	|	VoC_add16_rr(REG1,REG0,REG6,DEFAULT)
0x45BF0C73,	//0x1060		VoC_mult16_rr(REG7,REG6,REG7,DEFAULT)	|	VoC_lw16_d(REG6,0xc73)(hi)
0x7F07F8D6,	//0x1062		VoC_movreg32(RL7,REG01,DEFAULT)	|	VoC_shr16_ri(REG6,0xfffffffa,IN_PARALLEL)
0xC0B2DF00,	//0x1064		VoC_add16_rr(REG2,REG2,REG6,DEFAULT)	|	VoC_pop32(REG01,IN_PARALLEL)
0xD9C2C0BB,	//0x1066		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_add16_rr(REG3,REG2,REG7,DEFAULT)
		//0x1067		DecWindowOverlapShort_L5
0xF90C59C3,	//0x1068		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF780790E,	//0x106a		VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xDF425FC0,	//0x106c		VoC_push32(REG45,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xD9C15F43,	//0x106e		VoC_lw32inc_p(REG23,REG0,IN_PARALLEL)	|	VoC_push32(REG67,DEFAULT)
0xF90A5F41,	//0x1070		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x1072		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x1074		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x1076		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF38600C,	//0x1078		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0x01000A84,	//0x107a		VoC_lw16i(REG4,0x100)
0xC2654224,	//0x107c		VoC_sub16_rr(REG5,REG1,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG0,REG4,DEFAULT)
0xE0165F01,	//0x107e		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0073D24,	//0x1080		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG4,ACC0,DEFAULT)
0xFBF3116D,	//0x1082		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG5,DEFAULT)
0xC95D1104,	//0x1084		VoC_add32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_add32_rp(ACC0,ACC0,REG0,DEFAULT)
0xC91C114D,	//0x1086		VoC_add32_rr(ACC0,ACC0,REG67,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG1,DEFAULT)
0xDF037B9C,	//0x1088		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0xFB9D5F02,	//0x108a		VoC_shr32_ri(ACC1,0xfffffff3,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xF7A15CA9,	//0x108c		VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)	|	VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)
0x59C9DCBB,	//0x108e		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_sw16inc_p(ACC1_HI,REG3,DEFAULT)
0x5F41F62D,	//0x1090		VoC_push32(REG23,DEFAULT)	|	VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)
0x4CECF90A,	//0x1092		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x1094		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x1096		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0xFF38CE9E,	//0x1098		VoC_movreg32(REG01,RL7,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0xDDCCDF01,	//0x109a		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0x5F80DDC5,	//0x109c		VoC_pop16(REG0,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xFF3BFF07,	//0x109e		VoC_movreg32(REG67,RL7,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x1067343E,	//0x10a0		VoC_bgt16_rr(DecWindowOverlapShort_L5,REG7,REG6)
		//0x10a2		VoC_endloop0
0x0A86FFC0,	//0x10a2		VoC_lw16i(REG6,0x100)(lo)	|	VoC_NAD
0x42300100,	//0x10a4		VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_lw16i(REG6,0x100)(hi)
0x780EFF32,	//0x10a6		VoC_shr16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg32(REG45,RL6,IN_PARALLEL)
0x5F40E027,	//0x10a8		VoC_push32(REG01,DEFAULT)	|	VoC_lw16i_short(REG7,0x2,IN_PARALLEL)
0x0A85FF38,	//0x10aa		VoC_lw16i(REG5,0x680)(lo)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x41340680,	//0x10ac		VoC_add16_rr(REG4,REG4,REG6,DEFAULT)	|	VoC_lw16i(REG5,0x680)(hi)
0x7027C228,	//0x10ae		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_sub16_rr(REG0,REG0,REG5,IN_PARALLEL)
0xC3BEC33D,	//0x10b0		VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_sub16_rr(REG5,REG4,REG7,IN_PARALLEL)
0xFF1678FE,	//0x10b2		VoC_movreg32(RL6,REG45,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
0x0C731407,	//0x10b4		VoC_lw16_d(REG7,0xc73)
0xF8D74031,	//0x10b6		VoC_shr16_ri(REG7,0xfffffffa,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG6,DEFAULT)
0xDF007F07,	//0x10b8		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_movreg32(RL7,REG01,DEFAULT)
0xD9C2C0BA,	//0x10ba		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG7,DEFAULT)
		//0x10bb		DecWindowOverlapShort_L6
0xF90C59C3,	//0x10bc		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF780790E,	//0x10be		VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xDF425FC0,	//0x10c0		VoC_push32(REG45,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xD9C1DF43,	//0x10c2		VoC_lw32inc_p(REG23,REG0,DEFAULT)	|	VoC_push32(REG67,DEFAULT)
0xF90A5F41,	//0x10c4		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x10c6		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x10c8		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x10ca		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xFF38600C,	//0x10cc		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0x06000A84,	//0x10ce		VoC_lw16i(REG4,0x600)
0xC0654024,	//0x10d0		VoC_add16_rr(REG5,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xE0165F01,	//0x10d2		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xE0073D24,	//0x10d4		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_sub32_pr(ACC0,REG4,ACC0,DEFAULT)
0x07000A84,	//0x10d6		VoC_lw16i(REG4,0x700)
0xFBF34024,	//0x10d8		VoC_shr32_ri(REG67,0xfffffffe,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xC91C116D,	//0x10da		VoC_add32_rr(ACC0,ACC0,REG67,IN_PARALLEL)	|	VoC_add32_rp(ACC1,ACC1,REG5,DEFAULT)
0x01000A85,	//0x10dc		VoC_lw16i(REG5,0x100)
0xC26D1124,	//0x10de		VoC_sub16_rr(REG5,REG1,REG5,IN_PARALLEL)	|	VoC_add32_rp(ACC0,ACC0,REG4,DEFAULT)
0xDF037B9C,	//0x10e0		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xfffffff3,DEFAULT)
0x5CA9DDED,	//0x10e2		VoC_sw16inc_p(ACC0_HI,REG2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG5,DEFAULT)
0xDF02F7A1,	//0x10e4		VoC_pop32(REG45,DEFAULT)	|	VoC_movreg16(REG1,RL6_HI,IN_PARALLEL)
0xF62D59C9,	//0x10e6		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG23,REG1,DEFAULT)
0xF90A5F41,	//0x10e8		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xCCFD4CEC,	//0x10ea		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x10ec		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x10ee		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xDF01FF38,	//0x10f0		VoC_pop32(REG23,DEFAULT)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDCCDDC5,	//0x10f2		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xFF075F80,	//0x10f4		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x343EFF3B,	//0x10f6		VoC_bgt16_rr(DecWindowOverlapShort_L6,REG7,REG6)(lo)	|	VoC_movreg32(REG67,RL7,DEFAULT)
0x2C0610BB,	//0x10f8		VoC_loop_i(0x0,0x3)(lo)	|	VoC_bgt16_rr(DecWindowOverlapShort_L6,REG7,REG6)(hi)
0xFF321138,	//0x10fa		VoC_movreg32(REG45,RL6,DEFAULT)	|	VoC_loop_i(0x0,0x3)(hi)
0x01000A86,	//0x10fc		VoC_lw16i(REG6,0x100)
0xE0274230,	//0x10fe		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)
0xF6C161C0,	//0x1100		VoC_movreg16(REG1,REG6,IN_PARALLEL)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0xF80E5F40,	//0x1102		VoC_shr16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xC0304134,	//0x1104		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG6,DEFAULT)
0xC33D4009,	//0x1106		VoC_sub16_rr(REG5,REG4,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG0,REG1,DEFAULT)
0x7F07C279,	//0x1108		VoC_movreg32(RL7,REG01,DEFAULT)	|	VoC_sub16_rr(REG1,REG1,REG7,DEFAULT)
0xFF16DF00,	//0x110a		VoC_movreg32(RL6,REG45,DEFAULT)	|	VoC_pop32(REG01,IN_PARALLEL)
		//0x110c		DecWindowOverlapShort_L7
0x59C3D9C2,	//0x110c		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x5FC0F90C,	//0x110e		VoC_push16(REG0,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xF90EF780,	//0x1110		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)
0x5F41D9C1,	//0x1112		VoC_push32(REG23,DEFAULT)	|	VoC_lw32inc_p(REG23,REG0,DEFAULT)
0x4CECF90A,	//0x1114		VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x4E55CCFD,	//0x1116		VoC_macX_rr(REG2,REG5,DEFAULT)	|	VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)
0x4E5CCE97,	//0x1118		VoC_macX_rr(REG3,REG4,DEFAULT)	|	VoC_macX_rr(REG2,REG7,IN_PARALLEL)
0x600CCE9E,	//0x111a		VoC_movreg16(RL6_LO,REG0,DEFAULT)	|	VoC_macX_rr(REG3,REG6,IN_PARALLEL)
0x0A82FF38,	//0x111c		VoC_lw16i(REG2,0x100)(lo)	|	VoC_movreg32(REG01,RL7,IN_PARALLEL)
0x42120100,	//0x111e		VoC_sub16_rr(REG2,REG0,REG2,DEFAULT)	|	VoC_lw16i(REG2,0x100)(hi)
0xE1A1C253,	//0x1120		VoC_movreg16(REG1,RL6_HI,DEFAULT)	|	VoC_sub16_rr(REG3,REG1,REG2,IN_PARALLEL)
0x915DBCA4,	//0x1122		VoC_add32_rp(ACC1,ACC1,REG3,DEFAULT)	|	VoC_sub32_pr(ACC0,REG2,ACC0,DEFAULT)
0xD9C9DD94,	//0x1124		VoC_lw32inc_p(REG23,REG1,DEFAULT)	|	VoC_sw32_p(ACC0,REG2,DEFAULT)
0xF90A5D9D,	//0x1126		VoC_shru16_ri(REG2,0x1,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG3,DEFAULT)
0xCCFD4CEC,	//0x1128		VoC_multf32_rr(ACC1,REG3,REG7,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG3,REG5,DEFAULT)
0xCE974E55,	//0x112a		VoC_macX_rr(REG2,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG2,REG5,DEFAULT)
0xCE9E4E5C,	//0x112c		VoC_macX_rr(REG3,REG6,IN_PARALLEL)	|	VoC_macX_rr(REG3,REG4,DEFAULT)
0xF62D7F38,	//0x112e		VoC_movreg16(RL6_HI,REG1,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xDDC5DF01,	//0x1130		VoC_sw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_pop32(REG23,DEFAULT)
0xFF075DCC,	//0x1132		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xFF3B5F80,	//0x1134		VoC_movreg32(REG67,RL7,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x110C343E,	//0x1136		VoC_bgt16_rr(DecWindowOverlapShort_L7,REG7,REG6)
		//0x1138		VoC_endloop0
0xE1C0FFC0,	//0x1138		VoC_movreg16(REG0,RL7_LO,DEFAULT)	|	VoC_NAD
0x00800A81,	//0x113a		VoC_lw16i(REG1,0x80)
0xFF444008,	//0x113c		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
0x11412DC0,	//0x113e		VoC_loop_i(0x0,0xe0)
0xDDC4DDC4,	//0x1140		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x1141		VoC_endloop0
0xDFE9E580,	//0x1142		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x1143		Coolsand_IMDCT
0x24AC1403,	//0x1144		VoC_lw16_d(REG3,0x24ac)
0x0C8C1804,	//0x1146		VoC_lw16i_set_inc(REG0,0xc8c,0x1)
0x14AC1809,	//0x1148		VoC_lw16i_set_inc(REG1,0x14ac,0x2)
0x0C501806,	//0x114a		VoC_lw16i_set_inc(REG2,0xc50,0x1)
0x4DA24496,	//0x114c		VoC_bne16_rd(IMDCT_L0,REG6,0x4da2)
0x1CAC1809,	//0x114e		VoC_lw16i_set_inc(REG1,0x1cac,0x2)
0x0C511806,	//0x1150		VoC_lw16i_set_inc(REG2,0xc51,0x1)
0x4DA24023,	//0x1152		VoC_be16_rd(IMDCT_L0,REG3,0x4da2)
0x0C9B1804,	//0x1154		VoC_lw16i_set_inc(REG0,0xc9b,0x1)
		//0x1156		IMDCT_L0
0xDE00D822,	//0x1156		VoC_inc_p(REG0,DEFAULT)	|	VoC_lw16_p(REG2,REG2,DEFAULT)
0xD805D884,	//0x1158		VoC_lw16_p(REG5,REG0,DEFAULT)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0x5FC7DFC1,	//0x115a		VoC_push16(REG7,DEFAULT)	|	VoC_push16(REG1,DEFAULT)
0xF046DF42,	//0x115c		VoC_lw16i_short(REG6,0x2,DEFAULT)	|	VoC_push32(REG45,IN_PARALLEL)
0x119A35A6,	//0x115e		VoC_bne16_rr(IMDCT_L1,REG4,REG6)
0xE0047003,	//0x1160		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
		//0x1162		IMDCT_L2
0xE0177106,	//0x1162		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x8,DEFAULT)
0x11CE34B4,	//0x1164		VoC_bngt16_rr(IMDCT_L3,REG6,REG4)
0x413CDFC1,	//0x1166		VoC_add16_rr(REG4,REG4,REG7,DEFAULT)	|	VoC_push16(REG1,DEFAULT)
0x5F41F686,	//0x1168		VoC_push32(REG23,DEFAULT)	|	VoC_movreg16(REG6,REG4,IN_PARALLEL)
0x5FC4F8C6,	//0x116a		VoC_push16(REG4,DEFAULT)	|	VoC_shr16_ri(REG6,0xfffffff8,IN_PARALLEL)
0x7024C071,	//0x116c		VoC_bltz16_d(IMDCT_short_LS1,0x4008)(lo)	|	VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)
0x5FC14008,	//0x116e		VoC_push16(REG1,DEFAULT)	|	VoC_bltz16_d(IMDCT_short_LS1,0x4008)(hi)
0x5FC4DF41,	//0x1170		VoC_push16(REG4,DEFAULT)	|	VoC_push32(REG23,IN_PARALLEL)
0x0836E0B6,	//0x1172		VoC_mult16_rd(REG6,REG6,0x4008)(lo)	|	VoC_lw16i_short(REG6,0xb,IN_PARALLEL)
0x18044008,	//0x1174		VoC_lw16i_set_inc(REG0,0x6724,0x1)(lo)	|	VoC_mult16_rd(REG6,REG6,0x4008)(hi)
0x40306724,	//0x1176		VoC_add16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x6724,0x1)(hi)
0x1807FF42,	//0x1178		VoC_lw16i_set_inc(REG3,0x67a8,0x1)(lo)	|	VoC_lw32z(REG45,IN_PARALLEL)
0x71DA67A8,	//0x117a		VoC_lw16i_short(FORMATX,0xe,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0x67a8,0x1)(hi)
0xD8B5F5E9,	//0x117c		VoC_lw16inc_p(REG5,REG3,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0xfffffffd,IN_PARALLEL)
0x2E29D884,	//0x117e		VoC_loop_r(1,REG5)(lo)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0xD8B5118D,	//0x1180		VoC_lw16inc_p(REG5,REG3,DEFAULT)	|	VoC_loop_r(1,REG5)(hi)
0xD98BE749,	//0x1182		VoC_lw32_p(REG67,REG1,DEFAULT)	|	VoC_loop_r_short(REG5,DEFAULT)
0xFF447BFB,	//0x1184		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0xffffffff,DEFAULT)
0xCE74F90E,	//0x1186		VoC_macX_rr(REG6,REG4,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0x8104CE3C,	//0x1188		VoC_add16_rp(REG4,REG4,REG0,DEFAULT)	|	VoC_mac32_rr(REG7,REG4,DEFAULT)
0xDDCCFFC0,	//0x118a		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_NOP
		//0x118b		VoC_endloop0
0x81048704,	//0x118c		VoC_add16_rp(REG4,REG4,REG0,DEFAULT)	|	VoC_sub16inc_rp(REG4,REG4,REG0,DEFAULT)
		//0x118d		VoC_endloop1
0xDF015F84,	//0x118e		VoC_pop32(REG23,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0xFFC0DF81,	//0x1190		VoC_NOP	|	VoC_pop16(REG1,DEFAULT)
		//0x1191		IMDCT_short_LS1
0x05662B80,	//0x1192		VoC_jal(Coolsand_DCT4)
0x5F01DF84,	//0x1194		VoC_pop32(REG23,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0x2B00DF81,	//0x1196		VoC_jump_lg(IMDCT_L2)(lo)	|	VoC_pop16(REG1,IN_PARALLEL)
0xFFC01162,	//0x1198		VoC_NAD	|	VoC_jump_lg(IMDCT_L2)(hi)
		//0x119a		IMDCT_L1
0x40087031,	//0x119a		VoC_bltz16_d(IMDCT_LS1,0x4008)
0xE0B65FC1,	//0x119c		VoC_lw16i_short(REG6,0xb,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0x40080836,	//0x119e		VoC_mult16_rd(REG6,REG6,0x4008)
0x66941804,	//0x11a0		VoC_lw16i_set_inc(REG0,0x6694,0x1)
0xFF424030,	//0x11a2		VoC_lw32z(REG45,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG6,DEFAULT)
0x67181807,	//0x11a4		VoC_lw16i_set_inc(REG3,0x6718,0x1)
0xF5E9719A,	//0x11a6		VoC_lw16i_short(FORMAT32,0xfffffffd,IN_PARALLEL)	|	VoC_lw16i_short(FORMATX,0xc,DEFAULT)
0xD8B5DE08,	//0x11a8		VoC_lw16inc_p(REG5,REG3,DEFAULT)	|	VoC_inc_p(REG1,DEFAULT)
0x2E29D884,	//0x11aa		VoC_loop_r(1,REG5)(lo)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0xD8B511C9,	//0x11ac		VoC_lw16inc_p(REG5,REG3,DEFAULT)	|	VoC_loop_r(1,REG5)(hi)
0x00FF0A86,	//0x11ae		VoC_lw16i(REG6,0xff)
0x11BE34AE,	//0x11b0		VoC_bngt16_rr(IMDCT_LS6,REG5,REG6)
0x2DFEC375,	//0x11b2		VoC_loop_i(0x0,0xff)(lo)	|	VoC_sub16_rr(REG5,REG5,REG6,DEFAULT)
0xD98B11BD,	//0x11b4		VoC_lw32_p(REG67,REG1,DEFAULT)	|	VoC_loop_i(0x0,0xff)(hi)
0xFF447BFB,	//0x11b6		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0xffffffff,DEFAULT)
0xCE74F90E,	//0x11b8		VoC_macX_rr(REG6,REG4,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0x8104CE3C,	//0x11ba		VoC_add16_rp(REG4,REG4,REG0,DEFAULT)	|	VoC_mac32_rr(REG7,REG4,DEFAULT)
0xDDCCFFC0,	//0x11bc		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_NOP
		//0x11bd		VoC_endloop0
		//0x11be		IMDCT_LS6
0xD98BE749,	//0x11be		VoC_lw32_p(REG67,REG1,DEFAULT)	|	VoC_loop_r_short(REG5,DEFAULT)
0xFF447BFB,	//0x11c0		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shr32_ri(REG67,0xffffffff,DEFAULT)
0xCE74F90E,	//0x11c2		VoC_macX_rr(REG6,REG4,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0x8104CE3C,	//0x11c4		VoC_add16_rp(REG4,REG4,REG0,DEFAULT)	|	VoC_mac32_rr(REG7,REG4,DEFAULT)
0xDDCCFFC0,	//0x11c6		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_NOP
		//0x11c7		VoC_endloop0
0x81048704,	//0x11c8		VoC_add16_rp(REG4,REG4,REG0,DEFAULT)	|	VoC_sub16inc_rp(REG4,REG4,REG0,DEFAULT)
		//0x11c9		VoC_endloop1
0xF023DF81,	//0x11ca		VoC_lw16i_short(REG3,0x1,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
		//0x11cb		IMDCT_LS1
0x05662B80,	//0x11cc		VoC_jal(Coolsand_DCT4)
		//0x11ce		IMDCT_L3
0x2ADA0A86,	//0x11ce		VoC_lw16i(REG6,0x2ada)
0x09000A87,	//0x11d0		VoC_lw16i(REG7,0x900)
0x40321484,	//0x11d2		VoC_lw32_d(ACC0,0x4032)
0x7FC31546,	//0x11d4		VoC_sw16_d(REG6,0xffc3)
0x7FC21547,	//0x11d6		VoC_sw16_d(REG7,0xffc2)
0x7FC415C4,	//0x11d8		VoC_sw32_d(ACC0,0xffc4)
0xFFC0DE80,	//0x11da		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x11dc		VoC_cfg_lg(0x8,)
0x5F80DF81,	//0x11de		VoC_pop16(REG0,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x0A82DF02,	//0x11e0		VoC_lw16i(REG2,0x400)(lo)	|	VoC_pop32(REG45,IN_PARALLEL)
0x0A870400,	//0x11e2		VoC_lw16i(REG7,0xc52)(lo)	|	VoC_lw16i(REG2,0x400)(hi)
0x31810C52,	//0x11e4		VoC_bez16_r(IMDCT_L4,REG1)(lo)	|	VoC_lw16i(REG7,0xc52)(hi)
0x0A8211EB,	//0x11e6		VoC_lw16i(REG2,0x4db4)(lo)	|	VoC_bez16_r(IMDCT_L4,REG1)(hi)
0x0A874DB4,	//0x11e8		VoC_lw16i(REG7,0xc53)(lo)	|	VoC_lw16i(REG2,0x4db4)(hi)
0xDFC50C53,	//0x11ea		VoC_push16(REG5,DEFAULT)	|	VoC_lw16i(REG7,0xc53)(hi)
		//0x11eb		IMDCT_L4
0x0CAC0A83,	//0x11ec		VoC_lw16i(REG3,0xcac)
0xC0CB5FC7,	//0x11ee		VoC_add16_rr(REG3,REG3,REG1,IN_PARALLEL)	|	VoC_push16(REG7,DEFAULT)
0xF6815877,	//0x11f0		VoC_movreg16(REG1,REG4,IN_PARALLEL)	|	VoC_lw16_p(REG7,REG7,DEFAULT)
0xF6626044,	//0x11f2		VoC_movreg16(REG2,REG3,IN_PARALLEL)	|	VoC_movreg16(REG4,REG2,DEFAULT)
0xF6A67063,	//0x11f4		VoC_movreg16(REG6,REG5,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x3,DEFAULT)
0x11FC31C1,	//0x11f6		VoC_bnez16_r(IMDCT_L5,REG1)
0x0E1A2B80,	//0x11f8		VoC_jal(Coolsand_DecWindowOverlap)
0xFFC065D2,	//0x11fa		VoC_NAD(IN_PARALLEL)	|	VoC_jump(IMDCT_L8)
		//0x11fc		IMDCT_L5
0x4DA24431,	//0x11fc		VoC_bne16_rd(IMDCT_L6,REG1,0x4da2)
0x0EBA2B80,	//0x11fe		VoC_jal(Coolsand_DecWindowOverlapLongStart)
0xFFC065CC,	//0x1200		VoC_NAD(IN_PARALLEL)	|	VoC_jump(IMDCT_L8)
		//0x1202		IMDCT_L6
0x4DA44431,	//0x1202		VoC_bne16_rd(IMDCT_L7,REG1,0x4da4)
0x0FDA2B80,	//0x1204		VoC_jal(Coolsand_DecWindowOverlapShort)
0xFFC065C6,	//0x1206		VoC_NAD(IN_PARALLEL)	|	VoC_jump(IMDCT_L8)
		//0x1208		IMDCT_L7
0x120C358B,	//0x1208		VoC_bne16_rr(IMDCT_L8,REG1,REG3)
0x0F4A2B80,	//0x120a		VoC_jal(Coolsand_DecWindowOverlapLongStop)
		//0x120c		IMDCT_L8
0xDF85DF87,	//0x120c		VoC_pop16(REG5,DEFAULT)	|	VoC_pop16(REG7,DEFAULT)
0xDC75DFA9,	//0x120e		VoC_sw16_p(REG5,REG7,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xE284E580,	//0x1210		VoC_rbinc_i(REG4,0x1,DEFAULT)	|	VoC_return
		//0x1211		Coolsand_DecodeICSInfo
0xE242E289,	//0x1212		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG5,0x2,DEFAULT)
0xDC846286,	//0x1214		VoC_sw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x1,DEFAULT)
0xE0215C85,	//0x1216		VoC_lw16i_short(REG1,0x2,IN_PARALLEL)	|	VoC_sw16inc_p(REG5,REG0,DEFAULT)
0xE0165C86,	//0x1218		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_sw16inc_p(REG6,REG0,DEFAULT)
0x4DA445BD,	//0x121a		VoC_bne16_rd(DecodeICSInfo_L0,REG5,0x4da4)
0xE29DE290,	//0x121c		VoC_rbinc_i(REG5,0x7,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0x5C84E242,	//0x121e		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_lbinc_p(REG2)
0x5C05C008,	//0x1220		VoC_sw16_p(REG5,REG0,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)
0x6001F6AF,	//0x1222		VoC_movreg16(REG1,REG0,DEFAULT)	|	VoC_movreg16(RL7_HI,REG5,IN_PARALLEL)
0x5C86E014,	//0x1224		VoC_sw16inc_p(REG6,REG0,DEFAULT)	|	VoC_lw16i_short(REG4,0x1,IN_PARALLEL)
0xFFC0E407,	//0x1226		VoC_NAD	|	VoC_lw16i_short(REG7,0x40,IN_PARALLEL)
0xDC0668EE,	//0x1228		VoC_sw16_p(REG6,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x7,DEFAULT)
0xF7E543A3,	//0x122a		VoC_movreg16(REG5,RL7_HI,IN_PARALLEL)	|	VoC_sub16_rr(REG3,REG6,REG4,DEFAULT)
0xC0C3643D,	//0x122c		VoC_add16_rr(REG3,REG3,REG0,IN_PARALLEL)	|	VoC_and16_rr(REG5,REG7,DEFAULT)
0x12323185,	//0x122e		VoC_bez16_r(DecodeICSInfo_L1,REG5)
0xE5C5811D,	//0x1230		VoC_jump(DecodeICSInfo_L2)	|	VoC_add16_rp(REG5,REG4,REG3,DEFAULT)
		//0x1232		DecodeICSInfo_L1
0x40E3C1A6,	//0x1232		VoC_add16_rr(REG3,REG3,REG4,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG4,DEFAULT)
0xDC16F685,	//0x1234		VoC_sw16_p(REG6,REG1,DEFAULT)	|	VoC_movreg16(REG5,REG4,IN_PARALLEL)
		//0x1236		DecodeICSInfo_L2
		//0x1236		VoC_endloop0
0xDC35780F,	//0x1236		VoC_sw16_p(REG5,REG3,IN_PARALLEL)	|	VoC_shr16_ri(REG7,0x1,DEFAULT)
0xE298E5CB,	//0x1238		VoC_rbinc_i(REG4,0x6,DEFAULT)	|	VoC_jump(DecodeICSInfo_End)
		//0x1239		DecodeICSInfo_L0
0xE242E285,	//0x123a		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0xC0415C84,	//0x123c		VoC_add16_rr(REG1,REG1,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0xC0715E00,	//0x123e		VoC_add16_rr(REG1,REG1,REG6,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xDC85DC16,	//0x1240		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_sw16_p(REG6,REG1,DEFAULT)
0xE580DC16,	//0x1242		VoC_return	|	VoC_sw16_p(REG6,REG1,DEFAULT)
		//0x1243		DecodeICSInfo_End
		//0x1244		Coolsand_DecodeSectionData
0xE0345E00,	//0x1244		VoC_lw16i_short(REG4,0x3,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xE0235885,	//0x1246		VoC_lw16i_short(REG3,0x2,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0xE0375E00,	//0x1248		VoC_lw16i_short(REG7,0x3,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0x124E352B,	//0x124a		VoC_be16_rr(DecodeSectionData_L0,REG5,REG3)
0xFFC070A7,	//0x124c		VoC_NAD(IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x5,DEFAULT)
		//0x124e		DecodeSectionData_L0
0xE0067023,	//0x124e		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x1,DEFAULT)
0xE01643BD,	//0x1250		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG6,REG7,DEFAULT)
0xD8057E2B,	//0x1252		VoC_lw16_p(REG5,REG0,IN_PARALLEL)	|	VoC_shr16_rr(REG3,REG5,DEFAULT)
0xC02042F6,	//0x1254		VoC_add16_rr(REG0,REG0,REG4,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG3,REG6,DEFAULT)
0x26151807,	//0x1256		VoC_lw16i_set_inc(REG3,0x2615,0x1)
0x125C31C1,	//0x1258		VoC_bnez16_r(DecodeSectionData_L1,REG1)
0x259D1807,	//0x125a		VoC_lw16i_set_inc(REG3,0x259d,0x1)
		//0x125c		DecodeSectionData_L1
0x1505D800,	//0x125c		VoC_sw16_d(REG5,0xc64)(lo)	|	VoC_lw16_p(REG0,REG0,DEFAULT)
0x2E010C64,	//0x125e		VoC_loop_r(1,REG0)(lo)	|	VoC_sw16_d(REG5,0xc64)(hi)
0xF0001272,	//0x1260		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_loop_r(1,REG0)(hi)
		//0x1262		DecodeSectionData_L2
0x0C644CB8,	//0x1262		VoC_bnlt16_rd(DecodeSectionData_End,REG0,0xc64)
0xE0016290,	//0x1264		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
		//0x1266		DecodeSectionData_L3
0xE242E339,	//0x1266		VoC_lbinc_p(REG2)	|	VoC_rbinc_r(REG5,REG7,DEFAULT)
0x352EC069,	//0x1268		VoC_be16_rr(DecodeSectionData_L3,REG5,REG6)(lo)	|	VoC_add16_rr(REG1,REG1,REG5,DEFAULT)
0xC0081266,	//0x126a		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_be16_rr(DecodeSectionData_L3,REG5,REG6)(hi)
0x12703181,	//0x126c		VoC_bez16_r(DecodeSectionData_L4,REG1)
0xDCB4E641,	//0x126e		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_loop_r_short(REG1,DEFAULT)
		//0x126f		VoC_endloop0
		//0x1270		DecodeSectionData_L4
0xFFC0E5F2,	//0x1270		VoC_NOP	|	VoC_jump(DecodeSectionData_L2)
		//0x1271		DecodeSectionData_End
		//0x1272		VoC_endloop1
0xE580E242,	//0x1272		VoC_return	|	VoC_lbinc_p(REG2)
		//0x1274		Coolsand_DecodeOneScaleFactor
0x5F42DFC3,	//0x1274		VoC_push32(REG45,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0x5F40DFC7,	//0x1276		VoC_push32(REG01,DEFAULT)	|	VoC_push16(REG7,IN_PARALLEL)
0x1804DFE9,	//0x1278		VoC_lw16i_set_inc(REG0,0x4d5c,0x1)(lo)	|	VoC_push16(RA,IN_PARALLEL)
0x18054D5C,	//0x127a		VoC_lw16i_set_inc(REG1,0x4ce2,0x1)(lo)	|	VoC_lw16i_set_inc(REG0,0x4d5c,0x1)(hi)
0xFFC04CE2,	//0x127c		VoC_NAD	|	VoC_lw16i_set_inc(REG1,0x4ce2,0x1)(hi)
0x0BF52B80,	//0x127e		VoC_jal(Coolsand_DecodeHuffmanScalar)
0xDF005FA9,	//0x1280		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0xDF025F87,	//0x1282		VoC_pop32(REG45,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xE580DF83,	//0x1284		VoC_return	|	VoC_pop16(REG3,DEFAULT)
		//0x1286		Coolsand_DecodeScaleFactors
0x5E00DFE9,	//0x1286		VoC_inc_p(REG0,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x5805E034,	//0x1288		VoC_lw16_p(REG5,REG0,DEFAULT)	|	VoC_lw16i_short(REG4,0x3,IN_PARALLEL)
0x0A84C026,	//0x128a		VoC_lw16i(REG4,0x15a)(lo)	|	VoC_add16_rr(REG6,REG0,REG4,IN_PARALLEL)
0x6023015A,	//0x128c		VoC_movreg16(REG3,REG1,DEFAULT)	|	VoC_lw16i(REG4,0x15a)(hi)
0x45AED866,	//0x128e		VoC_mult16_rr(REG6,REG6,REG5,DEFAULT)	|	VoC_lw16_p(REG6,REG6,IN_PARALLEL)
0x1804C3E5,	//0x1290		VoC_lw16i_set_inc(REG0,0x2615,0x1)(lo)	|	VoC_sub16_rr(REG5,REG7,REG4,IN_PARALLEL)
0x18052615,	//0x1292		VoC_lw16i_set_inc(REG1,0x2525,0x1)(lo)	|	VoC_lw16i_set_inc(REG0,0x2615,0x1)(hi)
0x31C32525,	//0x1294		VoC_bnez16_r(DecodeScaleFactors_L1,REG3)(lo)	|	VoC_lw16i_set_inc(REG1,0x2525,0x1)(hi)
0x1804129C,	//0x1296		VoC_lw16i_set_inc(REG0,0x259d,0x1)(lo)	|	VoC_bnez16_r(DecodeScaleFactors_L1,REG3)(hi)
0x1805259D,	//0x1298		VoC_lw16i_set_inc(REG1,0x24ad,0x1)(lo)	|	VoC_lw16i_set_inc(REG0,0x259d,0x1)(hi)
0xFFC024AD,	//0x129a		VoC_NAD	|	VoC_lw16i_set_inc(REG1,0x24ad,0x1)(hi)
		//0x129c		DecodeScaleFactors_L1
0xE0037024,	//0x129c		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x12CB3146,	//0x129e		VoC_bngtz16_r(DecodeScaleFactors_End,REG6)
0xD886E7AA,	//0x12a0		VoC_lw16inc_p(REG6,REG0,DEFAULT)	|	VoC_loop_r_short(REG6,DEFAULT)
0x4DAF4036,	//0x12a2		VoC_be16_rd(DecodeScaleFactors_L2,REG6,0x4daf)
0x4DB04026,	//0x12a4		VoC_be16_rd(DecodeScaleFactors_L2,REG6,0x4db0)
0xFFC065C8,	//0x12a6		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeScaleFactors_L3)
		//0x12a8		DecodeScaleFactors_L2
0x12742B80,	//0x12a8		VoC_jal(Coolsand_DecodeOneScaleFactor)
0xE242C19B,	//0x12aa		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG3,REG6,REG3,DEFAULT)
0xE5DCDC93,	//0x12ac		VoC_jump(DecodeScaleFactors_L6)	|	VoC_sw16inc_p(REG3,REG1,DEFAULT)
		//0x12ae		DecodeScaleFactors_L3
0x4DAE44B6,	//0x12ae		VoC_bne16_rd(DecodeScaleFactors_L4,REG6,0x4dae)
0x12B63184,	//0x12b0		VoC_bez16_r(DecodeScaleFactors_L4_sub1,REG4)
0xE00462A6,	//0x12b2		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x9,DEFAULT)
0xFFC065C4,	//0x12b4		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeScaleFactors_L4_sub2)
		//0x12b6		DecodeScaleFactors_L4_sub1
0x12742B80,	//0x12b6		VoC_jal(Coolsand_DecodeOneScaleFactor)
		//0x12b8		DecodeScaleFactors_L4_sub2
0xE242C1AD,	//0x12b8		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG5,REG6,REG5,DEFAULT)
0xE5CEDC95,	//0x12ba		VoC_jump(DecodeScaleFactors_L6)	|	VoC_sw16inc_p(REG5,REG1,DEFAULT)
		//0x12bc		DecodeScaleFactors_L4
0x4DA24896,	//0x12bc		VoC_blt16_rd(DecodeScaleFactors_L5,REG6,0x4da2)
0x4DAD3886,	//0x12be		VoC_bgt16_rd(DecodeScaleFactors_L5,REG6,0x4dad)
0x12742B80,	//0x12c0		VoC_jal(Coolsand_DecodeOneScaleFactor)
0xE242C1F7,	//0x12c2		VoC_lbinc_p(REG2)	|	VoC_add16_rr(REG7,REG7,REG6,DEFAULT)
0xE5C4DC97,	//0x12c4		VoC_jump(DecodeScaleFactors_L6)	|	VoC_sw16inc_p(REG7,REG1,DEFAULT)
		//0x12c6		DecodeScaleFactors_L5
0xE242F006,	//0x12c6		VoC_lbinc_p(REG2)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0xFFC0DC96,	//0x12c8		VoC_NOP	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
		//0x12c9		DecodeScaleFactors_L6
		//0x12ca		VoC_endloop0
0xDFA9E242,	//0x12ca		VoC_pop16(RA,DEFAULT)	|	VoC_lbinc_p(REG2)
		//0x12cb		DecodeScaleFactors_End
0xE580E242,	//0x12cc		VoC_return	|	VoC_lbinc_p(REG2)
		//0x12ce		Coolsand_DecodePulseInfo
0xE299E288,	//0x12ce		VoC_rbinc_i(REG5,0x6,DEFAULT)	|	VoC_rbinc_i(REG4,0x2,DEFAULT)
0x7020E242,	//0x12d0		VoC_lw16i_short(REG0,0x1,DEFAULT)	|	VoC_lbinc_p(REG2)
0x4104E067,	//0x12d2		VoC_add16_rr(REG4,REG4,REG0,DEFAULT)	|	VoC_lw16i_short(REG7,0x6,IN_PARALLEL)
0x5CB4C0F8,	//0x12d4		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_add16_rr(REG0,REG3,REG7,IN_PARALLEL)
0xDCB5F004,	//0x12d6		VoC_sw16inc_p(REG5,REG3,DEFAULT)	|	VoC_lw16i_short(INC0,0x1,IN_PARALLEL)
0x3184E2D4,	//0x12d8		VoC_bez16_r(DecodePulseInfo_L0,REG4)(lo)	|	VoC_rb_i(REG4,0x5,DEFAULT)
0xE29412E1,	//0x12da		VoC_rbinc_i(REG4,0x5,DEFAULT)	|	VoC_bez16_r(DecodePulseInfo_L0,REG4)(hi)
0xDCB462D1,	//0x12dc		VoC_sw16inc_p(REG4,REG3,IN_PARALLEL)	|	VoC_rb_i(REG5,0x4,DEFAULT)
0xDC85E291,	//0x12de		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_rbinc_i(REG5,0x4,DEFAULT)
0xE580E242,	//0x12e0		VoC_return	|	VoC_lbinc_p(REG2)
		//0x12e1		DecodePulseInfo_L0
		//0x12e2		Coolsand_DecodeTNSInfo
0xF6017106,	//0x12e2		VoC_movreg16(REG1,REG0,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x8,DEFAULT)
0xF0044071,	//0x12e4		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG6,DEFAULT)
0xF0054073,	//0x12e6		VoC_lw16i_short(INC1,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG1,REG6,DEFAULT)
0xF00740F4,	//0x12e8		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG3,REG6,DEFAULT)
0xF68B4135,	//0x12ea		VoC_movreg16(ACC1_HI,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG5,REG4,REG6,DEFAULT)
0xE0244176,	//0x12ec		VoC_lw16i_short(REG4,0x2,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG5,REG6,DEFAULT)
0x132835BC,	//0x12ee		VoC_bne16_rr(DecodeTNSInfo_L0,REG7,REG4)
0xFFC062C7,	//0x12f0		VoC_NAD(IN_PARALLEL)	|	VoC_rb_i(REG7,0x1,DEFAULT)
0x13252C11,	//0x12f2		VoC_loop_i(0x1,0x8)
0xDC876287,	//0x12f4		VoC_sw16inc_p(REG7,REG0,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0x13213187,	//0x12f6		VoC_bez16_r(DecodeTNSInfo_L1,REG7)
0xE0346287,	//0x12f8		VoC_lw16i_short(REG4,0x3,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xC1E76290,	//0x12fa		VoC_add16_rr(REG7,REG7,REG4,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0xFF046160,	//0x12fc		VoC_movreg32(ACC0,REG01,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC1_HI,DEFAULT)
0xDC17628F,	//0x12fe		VoC_sw16_p(REG7,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x3,DEFAULT)
0x5C87DCB4,	//0x1300		VoC_sw16inc_p(REG7,REG0,DEFAULT)	|	VoC_sw16inc_p(REG4,REG3,DEFAULT)
0x3187F60B,	//0x1302		VoC_bez16_r(DecodeTNSInfo_L2,REG7)(lo)	|	VoC_movreg16(ACC1_HI,REG0,IN_PARALLEL)
0xE0C01320,	//0x1304		VoC_movreg16(REG0,REG6,DEFAULT)	|	VoC_bez16_r(DecodeTNSInfo_L2,REG7)(hi)
0xDFC76284,	//0x1306		VoC_push16(REG7,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xD8166287,	//0x1308		VoC_lw16_p(REG6,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x1,DEFAULT)
0xF6A143BE,	//0x130a		VoC_movreg16(REG1,REG5,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)
0xE0257787,	//0x130c		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0xfffffffc,DEFAULT)
0xC3745C94,	//0x130e		VoC_sub16_rr(REG4,REG5,REG6,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
0xFE677E65,	//0x1310		VoC_shru16_rr(REG7,REG4,IN_PARALLEL)	|	VoC_shru16_rr(REG5,REG4,DEFAULT)
0x6709DF84,	//0x1312		VoC_loop_r_short(REG4,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xE330F6AA,	//0x1314		VoC_rbinc_r(REG4,REG6,DEFAULT)	|	VoC_movreg16(ACC1_LO,REG5,IN_PARALLEL)
0x3185E425,	//0x1316		VoC_bez16_r(DecodeTNSInfo_L3,REG5)(lo)	|	VoC_and16_rr(REG5,REG4,DEFAULT)
0xE47C131A,	//0x1318		VoC_or16_rr(REG4,REG7,DEFAULT)	|	VoC_bez16_r(DecodeTNSInfo_L3,REG5)(hi)
		//0x131a		DecodeTNSInfo_L3
0xE242FFC0,	//0x131a		VoC_lbinc_p(REG2)	|	VoC_NOP
		//0x131c		VoC_endloop0
0xF7455C84,	//0x131c		VoC_movreg16(REG5,ACC1_LO,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0xF6256006,	//0x131e		VoC_movreg16(REG5,REG1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG0,DEFAULT)
		//0x1320		DecodeTNSInfo_L2
0xFFC0FF20,	//0x1320		VoC_NOP	|	VoC_movreg32(REG01,ACC0,DEFAULT)
		//0x1321		DecodeTNSInfo_L1
0x62C7E242,	//0x1322		VoC_rb_i(REG7,0x1,DEFAULT)	|	VoC_lbinc_p(REG2)
0xFF04DE08,	//0x1324		VoC_movreg32(ACC0,REG01,DEFAULT)	|	VoC_inc_p(REG1,IN_PARALLEL)
		//0x1325		VoC_endloop1
0x135B2B00,	//0x1326		VoC_jump_lg(DecodeTNSInfo_End)
		//0x1328		DecodeTNSInfo_L0
0xF764628B,	//0x1328		VoC_movreg16(REG4,ACC1_HI,IN_PARALLEL)	|	VoC_rbinc_i(REG7,0x2,DEFAULT)
0xE0347F14,	//0x132a		VoC_lw16i_short(REG4,0x3,IN_PARALLEL)	|	VoC_movreg32(ACC0,REG45,DEFAULT)
0xDC0762C5,	//0x132c		VoC_sw16_p(REG7,REG0,IN_PARALLEL)	|	VoC_rb_i(REG5,0x1,DEFAULT)
0x135B3187,	//0x132e		VoC_bez16_r(DecodeTNSInfo_End,REG7)
0xC1656284,	//0x1330		VoC_add16_rr(REG5,REG5,REG4,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0x5C15E0AB,	//0x1332		VoC_sw16_p(REG5,REG1,DEFAULT)	|	VoC_movreg16(ACC1_HI,REG5,DEFAULT)
0x2E39FF20,	//0x1334		VoC_loop_r(1,REG7)(lo)	|	VoC_movreg32(REG01,ACC0,IN_PARALLEL)
0xE29B135A,	//0x1336		VoC_rbinc_i(REG7,0x6,DEFAULT)	|	VoC_loop_r(1,REG7)(hi)
0xE242E294,	//0x1338		VoC_lbinc_p(REG2)	|	VoC_rbinc_i(REG4,0x5,DEFAULT)
0x5CB7DC84,	//0x133a		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0x3184F608,	//0x133c		VoC_bez16_r(DecodeTNSInfo_L4,REG4)(lo)	|	VoC_movreg16(ACC0_LO,REG0,IN_PARALLEL)
0xE0C01359,	//0x133e		VoC_movreg16(REG0,REG6,DEFAULT)	|	VoC_bez16_r(DecodeTNSInfo_L4,REG4)(hi)
0xDFC46284,	//0x1340		VoC_push16(REG4,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xF7666285,	//0x1342		VoC_movreg16(REG6,ACC1_HI,IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x1,DEFAULT)
0xE02543AE,	//0x1344		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)
0xDC944374,	//0x1346		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG5,REG6,DEFAULT)
0xFE65F787,	//0x1348		VoC_shru16_rr(REG5,REG4,DEFAULT)	|	VoC_lw16i_short(REG7,0xfffffffc,DEFAULT)
0xDF847E67,	//0x134a		VoC_pop16(REG4,IN_PARALLEL)	|	VoC_shru16_rr(REG7,REG4,DEFAULT)
0xF6AA6709,	//0x134c		VoC_movreg16(ACC1_LO,REG5,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0xE425E330,	//0x134e		VoC_and16_rr(REG5,REG4,DEFAULT)	|	VoC_rbinc_r(REG4,REG6,DEFAULT)
0x13533185,	//0x1350		VoC_bez16_r(DecodeTNSInfo_L5,REG5)
0xFFC0E47C,	//0x1352		VoC_NOP	|	VoC_or16_rr(REG4,REG7,DEFAULT)
		//0x1353		DecodeTNSInfo_L5
0x5C84E242,	//0x1354		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_lbinc_p(REG2)
		//0x1355		VoC_endloop0
0x6006F745,	//0x1356		VoC_movreg16(REG6,REG0,DEFAULT)	|	VoC_movreg16(REG5,ACC1_LO,IN_PARALLEL)
0xFFC0F700,	//0x1358		VoC_NOP	|	VoC_movreg16(REG0,ACC0_LO,IN_PARALLEL)
		//0x1359		DecodeTNSInfo_L4
		//0x135a		VoC_endloop1
0xE580E242,	//0x135a		VoC_return	|	VoC_lbinc_p(REG2)
		//0x135b		DecodeTNSInfo_End
		//0x135c		Coolsand_DecodeICS
0xFF0762A0,	//0x135c		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x8,DEFAULT)
0xDFE9608B,	//0x135e		VoC_push16(RA,IN_PARALLEL)	|	VoC_movreg16(ACC1_HI,REG4,DEFAULT)
0x24AC6E08,	//0x1360		VoC_bnez16_d(DecodeICS_L0,0x24ac)
0xDF475FCB,	//0x1362		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(ACC1_HI,DEFAULT)
0x12112B80,	//0x1364		VoC_jal(Coolsand_DecodeICSInfo)
0xDF8B5F07,	//0x1366		VoC_pop16(ACC1_HI,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
		//0x1368		DecodeICS_L0
0xFF387030,	//0x1368		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x1,DEFAULT)
0x12442B80,	//0x136a		VoC_jal(Coolsand_DecodeSectionData)
0xFF387070,	//0x136c		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x3,DEFAULT)
0xDF476167,	//0x136e		VoC_push32(RL7,IN_PARALLEL)	|	VoC_movreg16(REG7,ACC1_HI,DEFAULT)
0x12862B80,	//0x1370		VoC_jal(Coolsand_DecodeScaleFactors)
0xDF036284,	//0x1372		VoC_pop32(REG67,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0x26A71807,	//0x1374		VoC_lw16i_set_inc(REG3,0x26a7,0x1)
0x27170A80,	//0x1376		VoC_lw16i(REG0,0x2717)
0x137E31C7,	//0x1378		VoC_bnez16_r(DecodeICS_L1,REG7)
0x269C1807,	//0x137a		VoC_lw16i_set_inc(REG3,0x269c,0x1)
0x26B20A80,	//0x137c		VoC_lw16i(REG0,0x26b2)
		//0x137e		DecodeICS_L1
0xFF075CB4,	//0x137e		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG3,DEFAULT)
0x13843184,	//0x1380		VoC_bez16_r(DecodeICS_L2,REG4)
0x12CE2B80,	//0x1382		VoC_jal(Coolsand_DecodePulseInfo)
		//0x1384		DecodeICS_L2
0xE0156284,	//0x1384		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xFF3841AE,	//0x1386		VoC_movreg32(REG01,RL7,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG5,DEFAULT)
0xD867E242,	//0x1388		VoC_lw16_p(REG7,REG6,DEFAULT)	|	VoC_lbinc_p(REG2)
0xF6EE5C84,	//0x138a		VoC_movreg16(RL7_LO,REG7,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0x13903184,	//0x138c		VoC_bez16_r(DecodeICS_L3,REG4)
0x12E22B80,	//0x138e		VoC_jal(Coolsand_DecodeTNSInfo)
		//0x1390		DecodeICS_L3
0xDFA9E284,	//0x1390		VoC_pop16(RA,DEFAULT)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xE580E242,	//0x1392		VoC_return	|	VoC_lbinc_p(REG2)
		//0x1394		Coolsand_DecodeNoiselessData
0x1804F024,	//0x1394		VoC_lw16i_set_inc(REG0,0xc8c,0x1)(lo)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x14030C8C,	//0x1396		VoC_lw16_d(REG3,0x24ac)(lo)	|	VoC_lw16i_set_inc(REG0,0xc8c,0x1)(hi)
0x358C24AC,	//0x1398		VoC_bne16_rr(DecodeNoiselessData_L0,REG1,REG4)(lo)	|	VoC_lw16_d(REG3,0x24ac)(hi)
0x351C139F,	//0x139a		VoC_be16_rr(DecodeNoiselessData_L0,REG3,REG4)(lo)	|	VoC_bne16_rr(DecodeNoiselessData_L0,REG1,REG4)(hi)
0x1804139F,	//0x139c		VoC_lw16i_set_inc(REG0,0xc9b,0x1)(lo)	|	VoC_be16_rr(DecodeNoiselessData_L0,REG3,REG4)(hi)
0xDFE90C9B,	//0x139e		VoC_push16(RA,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0xc9b,0x1)(hi)
		//0x139f		DecodeNoiselessData_L0
0xF0065F40,	//0x13a0		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x135C2B80,	//0x13a2		VoC_jal(Coolsand_DecodeICS)
0xF0045F00,	//0x13a4		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x5E00F043,	//0x13a6		VoC_inc_p(REG0,DEFAULT)	|	VoC_lw16i_short(REG3,0x2,DEFAULT)
0xD804DFC1,	//0x13a8		VoC_lw16_p(REG4,REG0,DEFAULT)	|	VoC_push16(REG1,IN_PARALLEL)
0x13B035A3,	//0x13aa		VoC_bne16_rr(DecodeNoiselessData_L1,REG4,REG3)
0x0D8A2B80,	//0x13ac		VoC_jal(Coolsand_DecodeSpectrumShort)
0xFFC065C4,	//0x13ae		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeNoiselessData_L2)
		//0x13b0		DecodeNoiselessData_L1
0x0D1C2B80,	//0x13b0		VoC_jal(Coolsand_DecodeSpectrumLong)
		//0x13b2		DecodeNoiselessData_L2
0xE0005F81,	//0x13b2		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0x1807DFA9,	//0x13b4		VoC_lw16i_set_inc(REG3,0xc6e,0x1)(lo)	|	VoC_pop16(RA,DEFAULT)
0x14040C6E,	//0x13b6		VoC_lw16_d(REG4,0x26b2)(lo)	|	VoC_lw16i_set_inc(REG3,0xc6e,0x1)(hi)
0x318126B2,	//0x13b8		VoC_bez16_r(DecodeNoiselessData_L3,REG1)(lo)	|	VoC_lw16_d(REG4,0x26b2)(hi)
0x288413C0,	//0x13ba		VoC_or16_rd(REG4,0x2717)(lo)	|	VoC_bez16_r(DecodeNoiselessData_L3,REG1)(hi)
0xDE182717,	//0x13bc		VoC_inc_p(REG3,DEFAULT)	|	VoC_or16_rd(REG4,0x2717)(hi)
0xFFC065C4,	//0x13be		VoC_NAD(IN_PARALLEL)	|	VoC_jump(DecodeNoiselessData_L4)
		//0x13c0		DecodeNoiselessData_L3
0x26B22884,	//0x13c0		VoC_or16_rd(REG4,0x26b2)
		//0x13c2		DecodeNoiselessData_L4
0x1504DC30,	//0x13c2		VoC_sw16_d(REG4,0xc7b)(lo)	|	VoC_sw16_p(REG0,REG3,DEFAULT)
0xF0000C7B,	//0x13c4		VoC_lw16i_short(REG0,0x0,DEFAULT)	|	VoC_sw16_d(REG4,0xc7b)(hi)
0xFFC06580,	//0x13c6		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x13c8		Coolsand_StereoProcessGroup
0xF4017F38,	//0x13c8		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0xFF445FE9,	//0x13ca		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xFF455885,	//0x13cc		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0xF780600E,	//0x13ce		VoC_movreg16(REG0,RL6_LO,IN_PARALLEL)	|	VoC_movreg16(RL7_LO,REG0,DEFAULT)
0x14543144,	//0x13d0		VoC_bngtz16_r(StereoProcessGroup_L8,REG4)
0xF47A7E35,	//0x13d2		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_shr16_rr(REG5,REG6,DEFAULT)
0x14522E20,	//0x13d4		VoC_loop_r(0,REG4)
0x3864D894,	//0x13d6		VoC_sub16_pr(REG4,REG1,REG4,DEFAULT)	|	VoC_lw16inc_p(REG4,REG1,DEFAULT)
0x61A0D887,	//0x13d8		VoC_movreg16(REG0,RL6_HI,DEFAULT)	|	VoC_lw16inc_p(REG7,REG0,IN_PARALLEL)
0xE02FF60C,	//0x13da		VoC_movreg16(RL7_HI,REG1,DEFAULT)	|	VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)
0xF60D5E00,	//0x13dc		VoC_movreg16(RL6_HI,REG0,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0x4DAF4037,	//0x13de		VoC_be16_rd(StereoProcessGroup_L0,REG7,0x4daf)
0x4DB04027,	//0x13e0		VoC_be16_rd(StereoProcessGroup_L0,REG7,0x4db0)
0x141C2B00,	//0x13e2		VoC_jump_lg(StereoProcessGroup_L1)
		//0x13e4		StereoProcessGroup_L0
0xDF447020,	//0x13e4		VoC_push32(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x1,DEFAULT)
0xE0116428,	//0x13e6		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_and16_rr(REG0,REG5,DEFAULT)
0x268D4431,	//0x13e8		VoC_bne16_rd(StereoProcessGroup_IS_L0,REG1,0x268d)
0x13EE3180,	//0x13ea		VoC_bez16_r(StereoProcessGroup_IS_L0,REG0)
0xFFC0648F,	//0x13ec		VoC_NAD(IN_PARALLEL)	|	VoC_xor16_rr(REG7,REG1,DEFAULT)
		//0x13ee		StereoProcessGroup_IS_L0
0xF7A0640F,	//0x13ee		VoC_movreg16(REG0,RL6_HI,IN_PARALLEL)	|	VoC_and16_rr(REG7,REG1,DEFAULT)
0x0A81F8EF,	//0x13f0		VoC_lw16i(REG1,0x4932)(lo)	|	VoC_shr16_ri(REG7,0xfffffffd,DEFAULT)
0x41CF4932,	//0x13f2		VoC_add16_rr(REG7,REG7,REG1,DEFAULT)	|	VoC_lw16i(REG1,0x4932)(hi)
0x0C00E031,	//0x13f4		VoC_sub16_dp(REG0,0x4da0,REG0)(lo)	|	VoC_lw16i_short(REG1,0x3,IN_PARALLEL)
0x64014DA0,	//0x13f6		VoC_and16_rr(REG1,REG0,DEFAULT)	|	VoC_sub16_dp(REG0,0x4da0,REG0)(hi)
0xF8F9F810,	//0x13f8		VoC_shr16_ri(REG1,0xffffffff,DEFAULT)	|	VoC_shr16_ri(REG0,0x2,IN_PARALLEL)
0x0707C1C9,	//0x13fa		VoC_add16_rd(REG7,REG0,0x4da4)(lo)	|	VoC_add16_rr(REG1,REG7,REG1,DEFAULT)
0x74204DA4,	//0x13fc		VoC_lw16i_short(REG0,0xffffffe1,DEFAULT)	|	VoC_add16_rd(REG7,REG0,0x4da4)(hi)
0x3407DF42,	//0x13fe		VoC_bgt16_rr(StereoProcessGroup_IS_L2,REG0,REG7)(lo)	|	VoC_push32(REG45,IN_PARALLEL)
0xE0071402,	//0x1400		VoC_movreg16(REG7,REG0,DEFAULT)	|	VoC_bgt16_rr(StereoProcessGroup_IS_L2,REG0,REG7)(hi)
		//0x1402		StereoProcessGroup_IS_L2
0xF6865988,	//0x1402		VoC_movreg16(REG6,REG4,IN_PARALLEL)	|	VoC_lw32_p(REG01,REG1,DEFAULT)
0xDFC67908,	//0x1404		VoC_push16(REG6,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0x1,DEFAULT)
		//0x1406		StereoProcessGroup_IS_L3
0xCD4CD9D2,	//0x1406		VoC_multf32_rr(ACC0,REG5,REG1,DEFAULT)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xF90C4E45,	//0x1408		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG0,REG5,DEFAULT)
0x07B6CE4C,	//0x140a		VoC_sub16_rd(REG6,REG6,0x4da2)(lo)	|	VoC_macX_rr(REG1,REG4,DEFAULT)
0xFEBC4DA2,	//0x140c		VoC_shr32_rr(ACC0,REG7,DEFAULT)	|	VoC_sub16_rd(REG6,REG6,0x4da2)(hi)
0x7AFCFF22,	//0x140e		VoC_shr32_ri(ACC0,0x1f,DEFAULT)	|	VoC_movreg32(REG45,ACC0,DEFAULT)
0xE562DDDC,	//0x1410		VoC_xor32_rr(REG45,ACC0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,IN_PARALLEL)
0xE515CAA2,	//0x1412		VoC_or32_rr(ACC1,REG45,DEFAULT)	|	VoC_sub32_rr(REG45,REG45,ACC0,DEFAULT)
0x140631C6,	//0x1414		VoC_bnez16_r(StereoProcessGroup_IS_L3,REG6)
0x5F86DF02,	//0x1416		VoC_pop16(REG6,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0x2B00DF04,	//0x1418		VoC_jump_lg(StereoProcessGroup_LX)(lo)	|	VoC_pop32(ACC0,IN_PARALLEL)
0xFFC01447,	//0x141a		VoC_NAD	|	VoC_jump_lg(StereoProcessGroup_LX)(hi)
		//0x141c		StereoProcessGroup_L1
0xE01171A0,	//0x141c		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xd,DEFAULT)
0x14443538,	//0x141e		VoC_be16_rr(StereoProcessGroup_L2,REG7,REG0)
0x268D1407,	//0x1420		VoC_lw16_d(REG7,0x268d)
0x4DA44097,	//0x1422		VoC_be16_rd(StereoProcessGroup_L3,REG7,0x4da4)
0x144435B9,	//0x1424		VoC_bne16_rr(StereoProcessGroup_L2,REG7,REG1)
0x1607E0A7,	//0x1426		VoC_and16_ri(REG7,0x1)(lo)	|	VoC_movreg16(REG7,REG5,DEFAULT)
0x31870001,	//0x1428		VoC_bez16_r(StereoProcessGroup_L2,REG7)(lo)	|	VoC_and16_ri(REG7,0x1)(hi)
0xFFC01444,	//0x142a		VoC_NAD	|	VoC_bez16_r(StereoProcessGroup_L2,REG7)(hi)
		//0x142c		StereoProcessGroup_L3
0xDF475FC6,	//0x142c		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
		//0x142e		StereoProcessGroup_L4
0x901BD990,	//0x142e		VoC_add32_rp(REG67,REG01,REG3,DEFAULT)	|	VoC_lw32_p(REG01,REG2,DEFAULT)
0xFF1F1418,	//0x1430		VoC_movreg32(RL7,REG67,IN_PARALLEL)	|	VoC_sub32_rp(REG01,REG01,REG3,DEFAULT)
0xFAFF5DD3,	//0x1432		VoC_shr32_ri(RL7,0x1f,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG2,DEFAULT)
0xDDD8657B,	//0x1434		VoC_sw32inc_p(REG01,REG3,IN_PARALLEL)	|	VoC_xor32_rr(REG67,RL7,DEFAULT)
0xFF074AFB,	//0x1436		VoC_movreg32(RL7,REG01,IN_PARALLEL)	|	VoC_sub32_rr(REG67,REG67,RL7,DEFAULT)
0xFAFF651C,	//0x1438		VoC_shr32_ri(RL7,0x1f,IN_PARALLEL)	|	VoC_or32_rr(ACC0,REG67,DEFAULT)
0xE0166578,	//0x143a		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_xor32_rr(REG01,RL7,DEFAULT)
0xC3344A38,	//0x143c		VoC_sub16_rr(REG4,REG4,REG6,IN_PARALLEL)	|	VoC_sub32_rr(REG01,REG01,RL7,DEFAULT)
0x31C4E505,	//0x143e		VoC_bnez16_r(StereoProcessGroup_L4,REG4)(lo)	|	VoC_or32_rr(ACC1,REG01,DEFAULT)
0x5F86142E,	//0x1440		VoC_pop16(REG6,DEFAULT)	|	VoC_bnez16_r(StereoProcessGroup_L4,REG4)(hi)
0xE5C4DF07,	//0x1442		VoC_jump(StereoProcessGroup_LX)	|	VoC_pop32(RL7,IN_PARALLEL)
		//0x1444		StereoProcessGroup_L2
0x40A2F8FC,	//0x1444		VoC_add16_rr(REG2,REG2,REG4,DEFAULT)	|	VoC_shr16_ri(REG4,0xffffffff,DEFAULT)
0xF021C0E3,	//0x1446		VoC_lw16i_short(REG1,0x1,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG4,IN_PARALLEL)
		//0x1447		StereoProcessGroup_LX
0xF90D418E,	//0x1448		VoC_shru16_ri(REG5,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG1,DEFAULT)
0xE10061C1,	//0x144a		VoC_lw16i_short(REG0,0x10,IN_PARALLEL)	|	VoC_movreg16(REG1,RL7_LO,DEFAULT)
0x145135B0,	//0x144c		VoC_bne16_rr(StereoProcessGroup_L5,REG6,REG0)
0x7006D895,	//0x144e		VoC_lw16i_short(REG6,0x0,DEFAULT)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
0xE1E1F62E,	//0x1450		VoC_movreg16(REG1,RL7_HI,DEFAULT)	|	VoC_movreg16(RL7_LO,REG1,IN_PARALLEL)
		//0x1451		StereoProcessGroup_L5
		//0x1452		VoC_endloop0
0xFFC06180,	//0x1452		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(REG0,RL6_LO,DEFAULT)
		//0x1454		StereoProcessGroup_L8
0xE0117F26,	//0x1454		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0x04302B80,	//0x1456		VoC_jal(Coolsand_CLZ)
0x4C26C38E,	//0x1458		VoC_bnlt16_rd(StereoProcessGroup_L6,REG6,0xc50)(lo)	|	VoC_sub16_rr(REG6,REG6,REG1,DEFAULT)
0x15060C50,	//0x145a		VoC_sw16_d(REG6,0xc50)(lo)	|	VoC_bnlt16_rd(StereoProcessGroup_L6,REG6,0xc50)(hi)
0xFF2E0C50,	//0x145c		VoC_movreg32(RL6,ACC1,DEFAULT)	|	VoC_sw16_d(REG6,0xc50)(hi)
		//0x145d		StereoProcessGroup_L6
0x04302B80,	//0x145e		VoC_jal(Coolsand_CLZ)
0xDFA9438E,	//0x1460		VoC_pop16(RA,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG6,REG1,DEFAULT)
0x0C514C26,	//0x1462		VoC_bnlt16_rd(StereoProcessGroup_L7,REG6,0xc51)
0x0C511506,	//0x1464		VoC_sw16_d(REG6,0xc51)
		//0x1466		StereoProcessGroup_L7
0xFFC06580,	//0x1466		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x1468		Coolsand_StereoProcess
0xE0007021,	//0x1468		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x1,DEFAULT)
0x24AC1404,	//0x146a		VoC_lw16_d(REG4,0x24ac)
0x0C6C1405,	//0x146c		VoC_lw16_d(REG5,0xc6c)
0x14CF358C,	//0x146e		VoC_bne16_rr(StereoProcess_End,REG1,REG4)
0x14CF358D,	//0x1470		VoC_bne16_rr(StereoProcess_End,REG1,REG5)
0x268D6E06,	//0x1472		VoC_bnez16_d(StereoProcess_Begin,0x268d)
0x269B6E04,	//0x1474		VoC_bnez16_d(StereoProcess_Begin,0x269b)
0x14CF2B00,	//0x1476		VoC_jump_lg(StereoProcess_End)
		//0x1478		StereoProcess_Begin
0x0A84F042,	//0x1478		VoC_lw16i(REG4,0x4a46)(lo)	|	VoC_lw16i_short(REG2,0x2,DEFAULT)
0x18054A46,	//0x147a		VoC_lw16i_set_inc(REG1,0x4a52,0x1)(lo)	|	VoC_lw16i(REG4,0x4a46)(hi)
0x0A874A52,	//0x147c		VoC_lw16i(REG7,0x800)(lo)	|	VoC_lw16i_set_inc(REG1,0x4a52,0x1)(hi)
0x448A0800,	//0x147e		VoC_bne16_rd(StereoProcess_L0,REG2,0xc8d)(lo)	|	VoC_lw16i(REG7,0x800)(hi)
0x0A840C8D,	//0x1480		VoC_lw16i(REG4,0x4c8a)(lo)	|	VoC_bne16_rd(StereoProcess_L0,REG2,0xc8d)(hi)
0x18054C8A,	//0x1482		VoC_lw16i_set_inc(REG1,0x4c96,0x1)(lo)	|	VoC_lw16i(REG4,0x4c8a)(hi)
0x0A874C96,	//0x1484		VoC_lw16i(REG7,0x100)(lo)	|	VoC_lw16i_set_inc(REG1,0x4c96,0x1)(hi)
0xFFC00100,	//0x1486		VoC_NAD	|	VoC_lw16i(REG7,0x100)(hi)
		//0x1488		StereoProcess_L0
0x0C6A0724,	//0x1488		VoC_add16_rd(REG4,REG4,0xc6a)
0x0C921405,	//0x148a		VoC_lw16_d(REG5,0xc92)
0xE0060061,	//0x148c		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_add16_rp(REG1,REG1,REG4,DEFAULT)
0x268E1804,	//0x148e		VoC_lw16i_set_inc(REG0,0x268e,0x1)
0x14AC180A,	//0x1490		VoC_lw16i_set_inc(REG2,0x14ac,0x2)
0x1CAC180B,	//0x1492		VoC_lw16i_set_inc(REG3,0x1cac,0x2)
0xDFE97F07,	//0x1494		VoC_push16(RA,IN_PARALLEL)	|	VoC_movreg32(RL7,REG01,DEFAULT)
0x0C8F1404,	//0x1496		VoC_lw16_d(REG4,0xc8f)
0x26151804,	//0x1498		VoC_lw16i_set_inc(REG0,0x2615,0x1)
0x25251805,	//0x149a		VoC_lw16i_set_inc(REG1,0x2525,0x1)
0xE0007F06,	//0x149c		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_movreg32(RL6,REG01,DEFAULT)
0x0C930A81,	//0x149e		VoC_lw16i(REG1,0xc93)
0x14CB2E29,	//0x14a0		VoC_loop_r(1,REG5)
0xFFC05895,	//0x14a2		VoC_NAD(IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
		//0x14a4		StereoProcess_L3
0x14BE34A8,	//0x14a4		VoC_bngt16_rr(StereoProcess_L2,REG5,REG0)
0xDF465E00,	//0x14a6		VoC_push32(RL6,IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
0xDF475FC4,	//0x14a8		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(REG4,DEFAULT)
0xDF405FC6,	//0x14aa		VoC_push32(REG01,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0x5FC7DFC5,	//0x14ac		VoC_push16(REG7,DEFAULT)	|	VoC_push16(REG5,DEFAULT)
0xFFC0DF41,	//0x14ae		VoC_NAD	|	VoC_push32(REG23,IN_PARALLEL)
0x13C82B80,	//0x14b0		VoC_jal(Coolsand_StereoProcessGroup)
0xDF015F87,	//0x14b2		VoC_pop32(REG23,IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0xDF005F85,	//0x14b4		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
0xDF075F86,	//0x14b6		VoC_pop32(RL7,IN_PARALLEL)	|	VoC_pop16(REG6,DEFAULT)
0xDF065F84,	//0x14b8		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0xC0FB40BA,	//0x14ba		VoC_add16_rr(REG3,REG3,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG7,DEFAULT)
0xFFC065E8,	//0x14bc		VoC_NAD(IN_PARALLEL)	|	VoC_jump(StereoProcess_L3)
		//0x14be		StereoProcess_L2
0xFF305FC1,	//0x14be		VoC_movreg32(REG01,RL6,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0xC1A54061,	//0x14c0		VoC_add16_rr(REG5,REG6,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0xF8254020,	//0x14c2		VoC_shr16_ri(REG5,0x4,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0xFF06E1C1,	//0x14c4		VoC_movreg32(RL6,REG01,DEFAULT)	|	VoC_movreg16(REG1,RL7_LO,DEFAULT)
0xC1A64069,	//0x14c6		VoC_add16_rr(REG6,REG6,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG5,DEFAULT)
0xF62E7000,	//0x14c8		VoC_movreg16(RL7_LO,REG1,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0x1606DF81,	//0x14ca		VoC_and16_ri(REG6,0xf)(lo)	|	VoC_pop16(REG1,DEFAULT)
		//0x14cb		VoC_endloop1
0xDFA9000F,	//0x14cc		VoC_pop16(RA,DEFAULT)	|	VoC_and16_ri(REG6,0xf)(hi)
0xE580F000,	//0x14ce		VoC_return	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
		//0x14cf		StereoProcess_End
		//0x14d0		Coolsand_DecodeLPCCoefs
0x180AF019,	//0x14d0		VoC_lw16i_set_inc(REG2,0xc00,0x2)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0x180B0C00,	//0x14d2		VoC_lw16i_set_inc(REG3,0xc28,0x2)(lo)	|	VoC_lw16i_set_inc(REG2,0xc00,0x2)(hi)
0x61E10C28,	//0x14d4		VoC_movreg16(REG1,RL7_HI,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0xc28,0x2)(hi)
0x7064F606,	//0x14d6		VoC_lw16i_short(REG4,0x3,DEFAULT)	|	VoC_movreg16(REG6,REG0,IN_PARALLEL)
0x35B4E045,	//0x14d8		VoC_bne16_rr(DecodeLPCCoefs_L0,REG6,REG4)(lo)	|	VoC_lw16i_short(REG5,0x4,IN_PARALLEL)
0x1FB814DE,	//0x14da		VoC_lw16i_set_inc(REG0,0x48da,0xfffffffe)(lo)	|	VoC_bne16_rr(DecodeLPCCoefs_L0,REG6,REG4)(hi)
0xE5C548DA,	//0x14dc		VoC_jump(DecodeLPCCoefs_L1)	|	VoC_lw16i_set_inc(REG0,0x48da,0xfffffffe)(hi)
		//0x14de		DecodeLPCCoefs_L0
0x151535B5,	//0x14de		VoC_bne16_rr(DecodeLPCCoefs_End,REG6,REG5)
0x48FA1FB8,	//0x14e0		VoC_lw16i_set_inc(REG0,0x48fa,0xfffffffe)
		//0x14e2		DecodeLPCCoefs_L1
0xFFC07004,	//0x14e2		VoC_NAD(IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
		//0x14e4		DecodeLPCCoefs_L2
0x0C5F1405,	//0x14e4		VoC_lw16_d(REG5,0xc5f)
0x151534AC,	//0x14e6		VoC_bngt16_rr(DecodeLPCCoefs_End,REG5,REG4)
0x1605D895,	//0x14e8		VoC_and16_ri(REG5,0xf)(lo)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
0x78FD000F,	//0x14ea		VoC_shr16_ri(REG5,0xffffffff,DEFAULT)	|	VoC_and16_ri(REG5,0xf)(hi)
0x4145FF07,	//0x14ec		VoC_add16_rr(REG5,REG5,REG0,DEFAULT)	|	VoC_movreg32(RL7,REG01,IN_PARALLEL)
0x07A0FF0E,	//0x14ee		VoC_sub16_rd(REG0,REG4,0x4da2)(lo)	|	VoC_movreg32(RL6,REG23,IN_PARALLEL)
0xF8F84DA2,	//0x14f0		VoC_shr16_ri(REG0,0xffffffff,DEFAULT)	|	VoC_sub16_rd(REG0,REG4,0x4da2)(hi)
0xF68159AD,	//0x14f2		VoC_movreg16(REG1,REG4,IN_PARALLEL)	|	VoC_lw32_p(ACC1,REG5,DEFAULT)
0xFF2B4010,	//0x14f4		VoC_movreg32(REG67,ACC1,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG2,DEFAULT)
0x150A3141,	//0x14f6		VoC_bngtz16_r(DecodeLPCCoefs_L3,REG1)
0xD9C2664B,	//0x14f8		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_loop_r_short(REG1,DEFAULT)
0xF90E4D7C,	//0x14fa		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90C4E75,	//0x14fc		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG6,REG5,DEFAULT)
0xD9C2CE7C,	//0x14fe		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_macX_rr(REG7,REG4,DEFAULT)
0xBEA4FBFC,	//0x1500		VoC_sub32inc_pr(ACC0,REG2,ACC0,DEFAULT)	|	VoC_shr32_ri(ACC0,0xffffffff,DEFAULT)
0xDDDCFF2B,	//0x1502		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_movreg32(REG67,ACC1,DEFAULT)
		//0x1503		VoC_endloop0
0xE024FF31,	//0x1504		VoC_movreg16(REG4,REG1,DEFAULT)	|	VoC_movreg32(REG23,RL6,DEFAULT)
0xD9DC6703,	//0x1506		VoC_lw32inc_p(ACC0,REG3,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0xDDD4D9DC,	//0x1508		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG3,DEFAULT)
		//0x1509		VoC_endloop0
		//0x150a		DecodeLPCCoefs_L3
0xFF316085,	//0x150a		VoC_movreg32(REG23,RL6,IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
0xE01678FD,	//0x150c		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xffffffff,DEFAULT)
0xFA5D4155,	//0x150e		VoC_shr32_ri(ACC1,0xb,IN_PARALLEL)	|	VoC_add16_rr(REG5,REG5,REG2,DEFAULT)
0xC1347F38,	//0x1510		VoC_add16_rr(REG4,REG4,REG6,IN_PARALLEL)	|	VoC_movreg32(REG01,RL7,DEFAULT)
0x2B00DDAD,	//0x1512		VoC_jump_lg(DecodeLPCCoefs_L2)(lo)	|	VoC_sw32_p(ACC1,REG5,DEFAULT)
0xF03014E4,	//0x1514		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_jump_lg(DecodeLPCCoefs_L2)(hi)
		//0x1515		DecodeLPCCoefs_End
0xFFC06580,	//0x1516		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x1518		Coolsand_FilterRegion
0xF6475FE9,	//0x1518		VoC_movreg16(REG7,REG2,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xFF4477D0,	//0x151a		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0xfffffffe,DEFAULT)
0x152031C3,	//0x151c		VoC_bnez16_r(FilterRegion_L0,REG3)
0xFF447050,	//0x151e		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
		//0x1520		FilterRegion_L0
0x0C001FBA,	//0x1520		VoC_lw16i_set_inc(REG2,0xc00,0xfffffffe)
0x0C28180B,	//0x1522		VoC_lw16i_set_inc(REG3,0xc28,0x2)
0x0C5F1401,	//0x1524		VoC_lw16_d(REG1,0xc5f)
0xF6656642,	//0x1526		VoC_movreg16(REG5,REG3,IN_PARALLEL)	|	VoC_loop_r_short(REG1,DEFAULT)
		//0x1528		VoC_endloop0
0x60A3DDDC,	//0x1528		VoC_movreg16(REG3,REG5,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
0x77D3F680,	//0x152a		VoC_lw16i_short(INC3,0xfffffffe,DEFAULT)	|	VoC_movreg16(REG0,REG4,IN_PARALLEL)
0xDFC7E005,	//0x152c		VoC_push16(REG7,DEFAULT)	|	VoC_lw16i_short(REG5,0x0,IN_PARALLEL)
		//0x152d		FilterRegion_L3
0x7F25D984,	//0x152e		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_lw32_p(ACC0,REG0,DEFAULT)
0xFA65FD64,	//0x1530		VoC_shr32_ri(ACC1,0xc,DEFAULT)	|	VoC_shru32_ri(ACC0,0xffffffec,IN_PARALLEL)
0xE0145FC1,	//0x1532		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0xDF414264,	//0x1534		VoC_push32(REG23,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG1,REG4,DEFAULT)
0xF9FC6081,	//0x1536		VoC_shru16_ri(REG4,0xffffffff,IN_PARALLEL)	|	VoC_movreg16(REG1,REG4,DEFAULT)
0xC0E340A2,	//0x1538		VoC_add16_rr(REG3,REG3,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
0x3141DFC0,	//0x153a		VoC_bngtz16_r(FilterRegion_L1,REG1)(lo)	|	VoC_push16(REG0,DEFAULT)
0xE64C154A,	//0x153c		VoC_loop_r_short(REG1,DEFAULT)	|	VoC_bngtz16_r(FilterRegion_L1,REG1)(hi)
0x59DBDFC3,	//0x153e		VoC_lw32inc_p(REG67,REG3,DEFAULT)	|	VoC_push16(REG3,DEFAULT)
0x0A96F401,	//0x1540		VoC_lw16i(STATUS,0x48)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xD9D00048,	//0x1542		VoC_lw32inc_p(REG01,REG2,DEFAULT)	|	VoC_lw16i(STATUS,0x48)(hi)
0x045C2B80,	//0x1544		VoC_jal(Coolsand_MADD64)
0xD998DF84,	//0x1546		VoC_lw32_p(REG01,REG3,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xDDA0F116,	//0x1548		VoC_sw32_p(REG01,REG4,DEFAULT)	|	VoC_lw16i_short(STATUS,0x8,DEFAULT)
		//0x1549		VoC_endloop0
		//0x154a		FilterRegion_L1
0xF401599B,	//0x154a		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x0A96D990,	//0x154c		VoC_lw16i(STATUS,0x48)(lo)	|	VoC_lw32_p(REG01,REG2,DEFAULT)
0xFFC00048,	//0x154e		VoC_NAD	|	VoC_lw16i(STATUS,0x48)(hi)
0x045C2B80,	//0x1550		VoC_jal(Coolsand_MADD64)
0xF4017116,	//0x1552		VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)	|	VoC_lw16i_short(STATUS,0x8,DEFAULT)
0xFBA55F80,	//0x1554		VoC_shr32_ri(ACC1,0xfffffff4,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0x4D9C5835,	//0x1556		VoC_be32_rd(FilterRegion_L2,ACC1,0x4d9c)
0x4D9E5825,	//0x1558		VoC_be32_rd(FilterRegion_L2,ACC1,0x4d9e)
0xE525FCA4,	//0x155a		VoC_or32_rr(ACC1,ACC0,DEFAULT)	|	VoC_shru32_ri(ACC0,0x14,DEFAULT)
		//0x155c		FilterRegion_L2
0xFF2C5F81,	//0x155c		VoC_movreg32(ACC0,ACC1,IN_PARALLEL)	|	VoC_pop16(REG1,DEFAULT)
0xFAFC5D9D,	//0x155e		VoC_shr32_ri(ACC0,0x1f,IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG3,DEFAULT)
0xDDC56565,	//0x1560		VoC_sw32inc_p(ACC1,REG0,IN_PARALLEL)	|	VoC_xor32_rr(ACC1,ACC0,DEFAULT)
0xDF874B65,	//0x1562		VoC_pop16(REG7,IN_PARALLEL)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x0C602A05,	//0x1564		VoC_or32_rd(ACC1,0xc60)
0x07BFDF01,	//0x1566		VoC_sub16_rd(REG7,REG7,0x4da2)(lo)	|	VoC_pop32(REG23,DEFAULT)
0x15854DA2,	//0x1568		VoC_sw32_d(ACC1,0xc60)(lo)	|	VoC_sub16_rd(REG7,REG7,0x4da2)(hi)
0x31070C60,	//0x156a		VoC_bgtz16_r(FilterRegion_L3,REG7)(lo)	|	VoC_sw32_d(ACC1,0xc60)(hi)
0xDFA9152D,	//0x156c		VoC_pop16(RA,DEFAULT)	|	VoC_bgtz16_r(FilterRegion_L3,REG7)(hi)
0xE580FFC0,	//0x156e		VoC_return	|	VoC_NOP
		//0x1570		Coolsand_TNSFilter
0x7030F022,	//0x1570		VoC_lw16i_short(INC0,0x1,DEFAULT)	|	VoC_lw16i_short(REG2,0x1,DEFAULT)
0x1807F005,	//0x1572		VoC_lw16i_set_inc(REG3,0xc8c,0x1)(lo)	|	VoC_lw16i_short(INC1,0x1,IN_PARALLEL)
0x14010C8C,	//0x1574		VoC_lw16_d(REG1,0x24ac)(lo)	|	VoC_lw16i_set_inc(REG3,0xc8c,0x1)(hi)
0x35A224AC,	//0x1576		VoC_bne16_rr(TNSFilter_L0,REG4,REG2)(lo)	|	VoC_lw16_d(REG1,0x24ac)(hi)
0x350A157E,	//0x1578		VoC_be16_rr(TNSFilter_L0,REG1,REG2)(lo)	|	VoC_bne16_rr(TNSFilter_L0,REG4,REG2)(hi)
0x1807157E,	//0x157a		VoC_lw16i_set_inc(REG3,0xc9b,0x1)(lo)	|	VoC_be16_rr(TNSFilter_L0,REG1,REG2)(hi)
0xFFC00C9B,	//0x157c		VoC_NAD	|	VoC_lw16i_set_inc(REG3,0xc9b,0x1)(hi)
		//0x157e		TNSFilter_L0
0x0C500A87,	//0x157e		VoC_lw16i(REG7,0xc50)
0x26B21804,	//0x1580		VoC_lw16i_set_inc(REG0,0x26b2,0x1)
0x14AC0A8D,	//0x1582		VoC_lw16i(RL6_HI,0x14ac)
0x158C35A2,	//0x1584		VoC_bne16_rr(TNSFilter_LX,REG4,REG2)
0x0C510A87,	//0x1586		VoC_lw16i(REG7,0xc51)
0x27171804,	//0x1588		VoC_lw16i_set_inc(REG0,0x2717,0x1)
0x1CAC0A8D,	//0x158a		VoC_lw16i(RL6_HI,0x1cac)
		//0x158c		TNSFilter_LX
0xDE185885,	//0x158c		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x16543185,	//0x158e		VoC_bez16_r(TNSFilter_End,REG5)
0x0A84DFE9,	//0x1590		VoC_lw16i(REG4,0x491a)(lo)	|	VoC_push16(RA,DEFAULT)
0x0A85491A,	//0x1592		VoC_lw16i(REG5,0x4926)(lo)	|	VoC_lw16i(REG4,0x491a)(hi)
0x07244926,	//0x1594		VoC_add16_rd(REG4,REG4,0xc6a)(lo)	|	VoC_lw16i(REG5,0x4926)(hi)
0x072D0C6A,	//0x1596		VoC_add16_rd(REG5,REG5,0xc6a)(lo)	|	VoC_add16_rd(REG4,REG4,0xc6a)(hi)
0xD8460C6A,	//0x1598		VoC_lw16_p(REG6,REG4,DEFAULT)	|	VoC_add16_rd(REG5,REG5,0xc6a)(hi)
0xDFC7D857,	//0x159a		VoC_push16(REG7,DEFAULT)	|	VoC_lw16_p(REG7,REG5,DEFAULT)
0x453CD8B4,	//0x159c		VoC_bne16_rd(TNSFilter_L1,REG4,0x4da4)(lo)	|	VoC_lw16inc_p(REG4,REG3,DEFAULT)
0xF0E54DA4,	//0x159e		VoC_lw16i_short(REG5,0x7,DEFAULT)	|	VoC_bne16_rd(TNSFilter_L1,REG4,0x4da4)(hi)
0x00FF1606,	//0x15a0		VoC_and16_ri(REG6,0xff)
0x0C5D1505,	//0x15a2		VoC_sw16_d(REG5,0xc5d)
0x0C5C1506,	//0x15a4		VoC_sw16_d(REG6,0xc5c)
0x1607F104,	//0x15a6		VoC_and16_ri(REG7,0xff)(lo)	|	VoC_lw16i_short(REG4,0x8,DEFAULT)
0x0A8500FF,	//0x15a8		VoC_lw16i(REG5,0x100)(lo)	|	VoC_and16_ri(REG7,0xff)(hi)
0x15040100,	//0x15aa		VoC_sw16_d(REG4,0xc5a)(lo)	|	VoC_lw16i(REG5,0x100)(hi)
0x15050C5A,	//0x15ac		VoC_sw16_d(REG5,0xc5b)(lo)	|	VoC_sw16_d(REG4,0xc5a)(hi)
0x0A840C5B,	//0x15ae		VoC_lw16i(REG4,0x4c96)(lo)	|	VoC_sw16_d(REG5,0xc5b)(hi)
0x0A864C96,	//0x15b0		VoC_lw16i(REG6,0x4c8a)(lo)	|	VoC_lw16i(REG4,0x4c96)(hi)
0xE5D34C8A,	//0x15b2		VoC_jump(TNSFilter_L2)	|	VoC_lw16i(REG6,0x4c8a)(hi)
		//0x15b4		TNSFilter_L1
0xF9467185,	//0x15b4		VoC_shru16_ri(REG6,0x8,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0xc,DEFAULT)
0x4A460A86,	//0x15b6		VoC_lw16i(REG6,0x4a46)
0x0C5C1506,	//0x15b8		VoC_sw16_d(REG6,0xc5c)
0x0C5D1505,	//0x15ba		VoC_sw16_d(REG5,0xc5d)
0xF9477024,	//0x15bc		VoC_shru16_ri(REG7,0x8,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x08000A85,	//0x15be		VoC_lw16i(REG5,0x800)
0x0C5A1504,	//0x15c0		VoC_sw16_d(REG4,0xc5a)
0x0C5B1505,	//0x15c2		VoC_sw16_d(REG5,0xc5b)
0x4A520A84,	//0x15c4		VoC_lw16i(REG4,0x4a52)
		//0x15c6		TNSFilter_L2
0x0736E0E5,	//0x15c6		VoC_add16_rd(REG6,REG6,0xc6a)(lo)	|	VoC_movreg16(REG5,REG7,DEFAULT)
0x7F450C6A,	//0x15c8		VoC_lw32z(ACC1,DEFAULT)	|	VoC_add16_rd(REG6,REG6,0xc6a)(hi)
0x0136DE18,	//0x15ca		VoC_add16_rp(REG6,REG4,REG6,DEFAULT)	|	VoC_inc_p(REG3,IN_PARALLEL)
0x5833F006,	//0x15cc		VoC_lw16_p(REG3,REG3,DEFAULT)	|	VoC_lw16i_short(INC2,0x1,IN_PARALLEL)
0x1505E087,	//0x15ce		VoC_sw16_d(REG5,0xc5e)(lo)	|	VoC_lw16i_short(REG7,0x8,IN_PARALLEL)
0x34AB0C5E,	//0x15d0		VoC_bngt16_rr(TNSFilter_L3,REG5,REG3)(lo)	|	VoC_sw16_d(REG5,0xc5e)(hi)
0x150315D6,	//0x15d2		VoC_sw16_d(REG3,0xc5e)(lo)	|	VoC_bngt16_rr(TNSFilter_L3,REG5,REG3)(hi)
0xFFC00C5E,	//0x15d4		VoC_NAD	|	VoC_sw16_d(REG3,0xc5e)(hi)
		//0x15d6		TNSFilter_L3
0x0C601585,	//0x15d6		VoC_sw32_d(ACC1,0xc60)
0x417AC03D,	//0x15d8		VoC_add16_rr(REG2,REG5,REG7,DEFAULT)	|	VoC_add16_rr(REG5,REG0,REG7,DEFAULT)
0xC0BBF6AE,	//0x15da		VoC_add16_rr(REG3,REG2,REG7,DEFAULT)	|	VoC_movreg16(RL7_LO,REG5,IN_PARALLEL)
0xC07FC0F9,	//0x15dc		VoC_add16_rr(REG7,REG1,REG7,DEFAULT)	|	VoC_add16_rr(REG1,REG3,REG7,DEFAULT)
0xF76460EF,	//0x15de		VoC_movreg16(REG4,ACC1_HI,IN_PARALLEL)	|	VoC_movreg16(RL7_HI,REG7,DEFAULT)
		//0x15e0		TNSFilter_L4
0x0C5A1405,	//0x15e0		VoC_lw16_d(REG5,0xc5a)
0x164834AC,	//0x15e2		VoC_bngt16_rr(TNSFilter_L14,REG5,REG4)
0xD884608B,	//0x15e4		VoC_lw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_movreg16(ACC1_HI,REG4,DEFAULT)
0xE00A5FC0,	//0x15e6		VoC_lw16i_short(ACC1_LO,0x0,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x0C5C1405,	//0x15e8		VoC_lw16_d(REG5,0xc5c)
		//0x15ea		TNSFilter_L6
0x34A7E147,	//0x15ea		VoC_bngt16_rr(TNSFilter_L5,REG4,REG7)(lo)	|	VoC_movreg16(REG7,ACC1_LO,DEFAULT)
0x7024163D,	//0x15ec		VoC_lw16i_short(REG4,0x1,DEFAULT)	|	VoC_bngt16_rr(TNSFilter_L5,REG4,REG7)(hi)
0x60A4DFC4,	//0x15ee		VoC_movreg16(REG4,REG5,DEFAULT)	|	VoC_push16(REG4,IN_PARALLEL)
0x0715C1E7,	//0x15f0		VoC_sub16inc_rp(REG5,REG4,REG2,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG4,IN_PARALLEL)
0x3245F6EA,	//0x15f2		VoC_bnltz16_r(TNSFilter_L7,REG5)(lo)	|	VoC_movreg16(ACC1_LO,REG7,IN_PARALLEL)
0xF00515F6,	//0x15f4		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_bnltz16_r(TNSFilter_L7,REG5)(hi)
		//0x15f6		TNSFilter_L7
0x3C2FD8B7,	//0x15f6		VoC_bngt16_rd(TNSFilter_L8,REG7,0xc5d)(lo)	|	VoC_lw16inc_p(REG7,REG3,DEFAULT)
0x14070C5D,	//0x15f8		VoC_lw16_d(REG7,0xc5d)(lo)	|	VoC_bngt16_rd(TNSFilter_L8,REG7,0xc5d)(hi)
0xFFC00C5D,	//0x15fa		VoC_NAD	|	VoC_lw16_d(REG7,0xc5d)(hi)
		//0x15fc		TNSFilter_L8
0xF6A25F41,	//0x15fc		VoC_movreg16(REG2,REG5,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0x0C5F1507,	//0x15fe		VoC_sw16_d(REG7,0xc5f)
0x16363187,	//0x1600		VoC_bez16_r(TNSFilter_L9,REG7)
0x0C5E3C22,	//0x1602		VoC_bngt16_rd(TNSFilter_L10,REG2,0xc5e)
0x0C5E1402,	//0x1604		VoC_lw16_d(REG2,0xc5e)
		//0x1606		TNSFilter_L10
0x3C24C192,	//0x1606		VoC_bngt16_rd(TNSFilter_L11,REG4,0xc5e)(lo)	|	VoC_add16_rr(REG2,REG6,REG2,DEFAULT)
0x14040C5E,	//0x1608		VoC_lw16_d(REG4,0xc5e)(lo)	|	VoC_bngt16_rd(TNSFilter_L11,REG4,0xc5e)(hi)
0xC1A40C5E,	//0x160a		VoC_add16_rr(REG4,REG6,REG4,DEFAULT)	|	VoC_lw16_d(REG4,0xc5e)(hi)
		//0x160b		TNSFilter_L11
0xD844D827,	//0x160c		VoC_lw16_p(REG4,REG4,DEFAULT)	|	VoC_lw16_p(REG7,REG2,DEFAULT)
0x3142C33A,	//0x160e		VoC_bngtz16_r(TNSFilter_L12,REG2)(lo)	|	VoC_sub16_rr(REG2,REG4,REG7,DEFAULT)
0xD8931632,	//0x1610		VoC_lw16inc_p(REG3,REG1,DEFAULT)	|	VoC_bngtz16_r(TNSFilter_L12,REG2)(hi)
0x16163183,	//0x1612		VoC_bez16_r(TNSFilter_L13,REG3)
0x4DA207A7,	//0x1614		VoC_sub16_rd(REG7,REG4,0x4da2)
		//0x1616		TNSFilter_L13
0x5F40F8FF,	//0x1616		VoC_push32(REG01,DEFAULT)	|	VoC_shr16_ri(REG7,0xffffffff,DEFAULT)
0xC1C4F7A0,	//0x1618		VoC_add16_rr(REG4,REG7,REG0,DEFAULT)	|	VoC_movreg16(REG0,RL6_HI,IN_PARALLEL)
0xF76161C0,	//0x161a		VoC_movreg16(REG1,ACC1_HI,IN_PARALLEL)	|	VoC_movreg16(REG0,RL7_LO,DEFAULT)
0xDFC54008,	//0x161c		VoC_push16(REG5,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
0xDF475FCD,	//0x161e		VoC_push32(RL7,IN_PARALLEL)	|	VoC_push16(RL6_HI,DEFAULT)
0xDF455FC6,	//0x1620		VoC_push32(ACC1,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0xDF415FC4,	//0x1622		VoC_push32(REG23,IN_PARALLEL)	|	VoC_push16(REG4,DEFAULT)
0xFFC05800,	//0x1624		VoC_NAD(IN_PARALLEL)	|	VoC_lw16_p(REG0,REG0,DEFAULT)
0x14D02B80,	//0x1626		VoC_jal(Coolsand_DecodeLPCCoefs)
0xDF015F84,	//0x1628		VoC_pop32(REG23,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0x15182B80,	//0x162a		VoC_jal(Coolsand_FilterRegion)
0xDF865F05,	//0x162c		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_pop32(ACC1,DEFAULT)
0xDF8D5F07,	//0x162e		VoC_pop16(RL6_HI,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0xDF005F85,	//0x1630		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
		//0x1632		TNSFilter_L12
0x0712E1E2,	//0x1632		VoC_add16_rd(REG2,REG2,0xc5f)(lo)	|	VoC_movreg16(REG2,RL7_HI,DEFAULT)
0xE04F0C5F,	//0x1634		VoC_movreg16(RL7_HI,REG2,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0xc5f)(hi)
		//0x1636		TNSFilter_L9
0x5F84F030,	//0x1636		VoC_pop16(REG4,DEFAULT)	|	VoC_lw16i_short(INC0,0x1,DEFAULT)
0x7032DF01,	//0x1638		VoC_lw16i_short(INC2,0x1,DEFAULT)	|	VoC_pop32(REG23,IN_PARALLEL)
0x2B00F007,	//0x163a		VoC_jump_lg(TNSFilter_L6)(lo)	|	VoC_lw16i_short(INC3,0x1,IN_PARALLEL)
0xE1A715EA,	//0x163c		VoC_movreg16(REG7,RL6_HI,DEFAULT)	|	VoC_jump_lg(TNSFilter_L6)(hi)
		//0x163d		TNSFilter_L5
0x0C5B073F,	//0x163e		VoC_add16_rd(REG7,REG7,0xc5b)
0xDF8060ED,	//0x1640		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_movreg16(RL6_HI,REG7,DEFAULT)
0xE0156164,	//0x1642		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_movreg16(REG4,ACC1_HI,DEFAULT)
0x2B00C12C,	//0x1644		VoC_jump_lg(TNSFilter_L4)(lo)	|	VoC_add16_rr(REG4,REG4,REG5,DEFAULT)
0xFFC015E0,	//0x1646		VoC_NAD	|	VoC_jump_lg(TNSFilter_L4)(hi)
		//0x1648		TNSFilter_L14
0xE0115F85,	//0x1648		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_pop16(REG5,DEFAULT)
0x0C601486,	//0x164a		VoC_lw32_d(RL6,0xc60)
0x04302B80,	//0x164c		VoC_jal(Coolsand_CLZ)
0x5854DFA9,	//0x164e		VoC_lw16_p(REG4,REG5,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0x34A6C38E,	//0x1650		VoC_bngt16_rr(TNSFilter_End,REG4,REG6)(lo)	|	VoC_sub16_rr(REG6,REG6,REG1,IN_PARALLEL)
0xDC561654,	//0x1652		VoC_sw16_p(REG6,REG5,DEFAULT)	|	VoC_bngt16_rr(TNSFilter_End,REG4,REG6)(hi)
		//0x1654		TNSFilter_End
0xFFC06580,	//0x1654		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x1656		Coolsand_AACFindSyncWord
0x0C561401,	//0x1656		VoC_lw16_d(REG1,0xc56)
0x4DA20788,	//0x1658		VoC_sub16_rd(REG0,REG1,0x4da2)
0x00001807,	//0x165a		VoC_lw16i_set_inc(REG3,0x0,0x1)
		//0x165c		AACFindSyncWord_loop
0x16653483,	//0x165c		VoC_bngt16_rr(AACFindSyncWord_loop_End,REG0,REG3)
0xE2F1E242,	//0x165e		VoC_rb_i(REG5,0xc,DEFAULT)	|	VoC_lbinc_p(REG2)
0x4DB34035,	//0x1660		VoC_be16_rd(AACFindSyncWord_End,REG5,0x4db3)
0xDE1862A2,	//0x1662		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_rbinc_i(REG6,0x8,DEFAULT)
0xF7E3E5F8,	//0x1664		VoC_lw16i_short(REG3,0xffffffff,DEFAULT)	|	VoC_jump(AACFindSyncWord_loop)
		//0x1665		AACFindSyncWord_loop_End
		//0x1666		AACFindSyncWord_End
0x0C541586,	//0x1666		VoC_sw32_d(RL6,0xc54)
0x0C59151B,	//0x1668		VoC_sw16_d(BITCACHE,0xc59)
0x0C581502,	//0x166a		VoC_sw16_d(REG2,0xc58)
0xFFC0E580,	//0x166c		VoC_NAD	|	VoC_return
