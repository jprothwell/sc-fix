/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of COOLSAND Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("COOLSAND SOFTWARE")
*  RECEIVED FROM COOLSAND AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. COOLSAND EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES COOLSAND PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE COOLSAND SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. COOLSAND SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY COOLSAND SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND COOLSAND'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE COOLSAND SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT COOLSAND'S OPTION, TO REVISE OR REPLACE THE COOLSAND SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  COOLSAND FOR SUCH COOLSAND SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*****************************************************************************
 *
 * Filename:
 * ---------
 * FactoryModeDef.h
 *
 * Project:
 * --------
 
 *
 * Description:
 * ------------
 *   This file is intends for factory mode 
 *
 * Author:
 * -------
 * -------
 *
 *============================================================================
 *             HISTORY
 
 *------------------------------------------------------------------------------
 *
 *
 *------------------------------------------------------------------------------
 
 *============================================================================
 ****************************************************************************/

 
#include "mmi_features.h" 
//CSD End

#ifdef __MMI_FACTORY_MODE__  


#ifndef _FACTORY_MODE_DEF_H
#define _FACTORY_MODE_DEF_H

#include "gui_data_types.h"

/* Defination */
#ifdef TGT_AUTOGEN_MODULE_NAME
#define MAX_VER_NUM	  4
#else
#define MAX_VER_NUM	  3
#endif
//#define MAX_LED_MENU_NUM	6
#define MAX_CONTRAST_NUM   15
#define MIN_CONTRAST_NUM   0
#define CONTRAST_STEP      1


#ifndef MMI_ON_HARDWARE_P
 #ifndef SUBLCD_WIDTH
#define SUBLCD_WIDTH          102
 #endif
#define SUBLCD_HEIGHT         64
#endif

/* Marco */
#define FM_IS_SET(b, a)       ((b & (0x1 << a)) >> a)
#define FM_STATE_SET(b, a)    (b |= (0x1 << a))
#define FM_STATE_UNSET(b, a)  (b &= ~(0x1 << a))
#define FM_STATE_TOGGLE(b, a) (b ^= (0x1 << a))

//Lisen 0630

enum  SCR_ID_FM_ENUM{
   SCR_ID_FM_ROOT = FACTORY_MODE_BASE /* 34000 */,
   SCR_ID_FM_VERSION,
//Lisen 0921 
   SCR_ID_FM_VERSION_SUMMARY,
   SCR_ID_FM_RESOURCE_BIN,
   SCR_ID_FM_RESOURCE_AUDIO,
   SCR_ID_FM_RESOURCE_IMAGE,
   SCR_ID_FM_RESOURCE_STR,
   SCR_ID_FM_RESOURCE_FONT,
   SCR_ID_FM_BBCHIP_VER,
   SCR_ID_FM_DSPCODE_VER,
   SCR_ID_FM_DSPATCH_VER,
   SCR_ID_FM_SW_VER,
   SCR_ID_FM_HW_VER,
   SCR_ID_FM_MELODY_VER,
   SCR_ID_FM_ISN,
   SCR_ID_FM_BUILD_TIME,
   SCR_ID_FM_LED,
   SCR_ID_FM_LCD,
   SCR_ID_FM_LCD_AUTO,
   SCR_ID_FM_LCD_R,
   SCR_ID_FM_LCD_G,
   SCR_ID_FM_LCD_B,
   SCR_ID_FM_LCD_W,
   SCR_ID_FM_LCD_CONTRAST,
   SCR_ID_FM_LCD_CONTRAST_MAINLCD,
   SCR_ID_FM_LCD_CONTRAST_SUBLCD,
   SCR_ID_FM_KEYPAD,
   SCR_ID_FM_LOUDSPK,
   SCR_ID_FM_EACHLOOP,
   SCR_ID_FM_VIBRATOR,
   SCR_ID_FM_ADC,
   SCR_ID_FM_RECEIVER,
   SCR_ID_FM_RTC,
   SCR_ID_FM_HEADSET,
   SCR_ID_FM_CHARGER,
   SCR_ID_FM_RINGTONE,
   SCR_ID_FM_AUTO_TEST_ROOT, 
   SCR_ID_FM_AUTO_TEST_REPORT, 
   SCR_ID_FM_AUTO_TEST_SUMMARY,
   SCR_ID_FM_AUTO_TEST_RESULT,
   SCR_ID_FM_AUTO_TEST_START,
   SCR_ID_FM_MEMORY_CARD,
   SCR_ID_FM_NAND_FLASH,
   SCR_ID_FM_CAMERA,
	SCR_ID_FM_CAMERA_SENSOR_SETTING,
	SCR_ID_FM_CAMERA_ISP_SETTING,
   SCR_ID_FM_SETCAMERAPARA, 
   SCR_ID_FM_MTBF,
   SCR_ID_FM_UART,
   SCR_ID_FM_PARALLEL_PEN,
   SCR_ID_FM_N_CROSS_M_PEN,
   SCR_ID_FM_FM_RADIO,
   SCR_ID_FM_FM_RADIO_CHANNEL_TEST,
   SCR_ID_FM_HC_SW_VERSION,
   SCR_ID_FM_HC_LCD_CAMERA_ID,
   SCR_ID_SWFM_ROOT,   
};

enum  IMG_ID_FM_ENUM{
   IMG_ID_FM_ROOT = FACTORY_MODE_BASE /* 34000 */,
   IMG_ID_FM_VERSION,
   IMG_ID_FM_BBCHIP_VER,
   IMG_ID_FM_DSPCODE_VER,
   IMG_ID_FM_DSPATCH_VER,
// Lisen 0921
   IMG_ID_FM_SW_SUMMARY,
   IMG_ID_FM_SW_VER,
   IMG_ID_FM_RESOURCE_BIN,
   IMG_ID_FM_RESOURCE_LANGPACK,
   IMG_ID_FM_RESOURCE_CUSTPACK,
   IMG_ID_FM_HW_VER,
   IMG_ID_FM_MELODY_VER,
   IMG_ID_FM_ISN,
   IMG_ID_FM_BUILD_TIME,
   IMG_ID_FM_LED,
   IMG_ID_FM_LCD,
   IMG_ID_FM_LCD_CONTRAST,
   IMG_ID_FM_KEYPAD,
   IMG_ID_FM_LOUDSPK,
   IMG_ID_FM_EACHLOOP,
   IMG_ID_FM_VIBRATOR,
   IMG_ID_FM_ADC,
   IMG_ID_FM_RECEIVER,
   IMG_ID_FM_HEADSET,
   IMG_ID_FM_CHARGER,
   IMG_ID_FM_RINGTONE,
   IMG_ID_FM_RTC,
   IMG_ID_FM_MTBF,

   IMG_ID_FM_AUTO_TEST_ROOT, 
   IMG_ID_FM_AUTO_TEST_REPORT, 
   IMG_ID_FM_AUTO_TEST_SUMMARY,
   IMG_ID_FM_AUTO_TEST_RESULT,
   IMG_ID_FM_AUTO_TEST_START,
   IMG_ID_FM_MEMORY_CARD,
   IMG_ID_FM_CAMERA,
   IMG_ID_FM_CAMERA_SETTING,
   IMG_ID_FM_NAND_FLASH,
   IMG_ID_FM_LCD_CONTRAST_MAIN,
   IMG_ID_FM_LCD_CONTRAST_SUB,
   IMG_ID_FM_LCD_AUTO,
   IMG_ID_FM_LCD_R,
   IMG_ID_FM_LCD_G,
   IMG_ID_FM_LCD_B,
   IMG_ID_FM_LCD_W,
//Lisen 05312005	
   IMG_ID_FM_LCD_BLACK,
   
   /* Images */
   IMG_ID_FM_CONTRAST,
   IMG_ID_FM_UART   
};

enum  STR_ID_FM_ENUM{
   STR_ID_FM_ROOT = FACTORY_MODE_BASE /* 34000 */, 
   STR_ID_FM_VERSION,
   STR_ID_FM_BBCHIP_VER,
   STR_ID_FM_DSPCODE_VER,
   STR_ID_FM_DSPATCH_VER,
// Lisen 0921
   STR_ID_FM_HC_SW,
   STR_ID_FM_GET_LCD_CAMERA_ID,
   STR_ID_FM_SW_SUMMARY,
   STR_ID_FM_SW_VER,
   STR_ID_FM_RESOURCE_BIN, 
   STR_ID_FM_RESOURCE_LANGPACK, 
   STR_ID_FM_RESOURCE_CUSTPACK, 
   STR_ID_FM_HW_VER,
   STR_ID_FM_MELODY_VER,
   STR_ID_FM_ISN,
   STR_ID_FM_BUILD_TIME,
   STR_ID_FM_LED,
   STR_ID_FM_LCD,
   STR_ID_FM_LCD_CONTRAST,
   STR_ID_FM_KEYPAD,
   STR_ID_FM_LOUDSPK,
   STR_ID_FM_EACHLOOP,
   STR_ID_FM_VIBRATOR,
   STR_ID_FM_ADC,
   STR_ID_FM_RECEIVER,
   STR_ID_FM_HEADSET,
   STR_ID_FM_CHARGER,
   STR_ID_FM_RINGTONE,
   STR_ID_FM_RTC,

   STR_ID_FM_AUTO_TEST_ROOT, 
   STR_ID_FM_AUTO_TEST_REPORT, 
   STR_ID_FM_AUTO_TEST_SUMMARY,
   STR_ID_FM_AUTO_TEST_RESULT,
   STR_ID_FM_AUTO_TEST_START,
   STR_ID_FM_AUTO_TEST_PASS,
   STR_ID_FM_AUTO_TEST_FAIL,
   STR_ID_FM_AUTO_TEST_RTC,
   STR_ID_FM_AUTO_TEST_STOP,
   STR_ID_FM_AUTO_TEST_RETEST, 
   STR_ID_FM_AUTO_TEST_EXIT, 
   STR_ID_FM_AUTO_TEST_ALLDONE, 
   STR_ID_FM_AUTO_TEST_ALLPASSED, 
   STR_ID_FM_AUTO_TEST_FAILED, 
   STR_ID_FM_AUTO_TEST_UNFINISHED, 

   STR_ID_FM_AUTOTEST_LED_R, 
   STR_ID_FM_AUTOTEST_LED_G, 
   STR_ID_FM_AUTOTEST_LED_B, 
   STR_ID_FM_AUTOTEST_CLAM, 	
   STR_ID_FM_AUTOTEST_SUBLCM, 
   STR_ID_FM_AUTOTEST_BACKLIGHT, 
   STR_ID_FM_AUTOTEST_RECEIVER, 
   STR_ID_FM_AUTOTEST_MIC, 
   STR_ID_FM_AUTOTEST_SPEAKER, 
   STR_ID_FM_AUTOTEST_HEADSET, 
   STR_ID_FM_AUTOTEST_MELODY, 
   STR_ID_FM_AUTOTEST_VIB, 
   STR_ID_FM_AUTOTEST_NAND,
   STR_ID_FM_AUTOTEST_UART,
//Lisen 01262005
   STR_ID_FM_AUTOTEST_LEFT_SPEAKER,
   STR_ID_FM_AUTOTEST_RIGHT_SPEAKER,

   STR_ID_FM_MEMORY_CARD,
   STR_ID_FM_CAMERA,
	STR_ID_FM_CAMERA_SENSOR_SETTING,
	STR_ID_FM_CAMERA_ISP_SETTING,
	STR_ID_FM_CAMERA_SAVE_TO_NVRAM,	
	STR_ID_FM_CAMERA_RESTORE_DEFAULT,
	STR_ID_FM_CAMERA_SAVE_CONFRIM,	
	STR_ID_FM_CAMERA_RESTORE_CONFIRM,	
   STR_ID_FM_NAND_FLASH,
   STR_ID_FM_LCD_CONTRAST_MAIN,
   STR_ID_FM_LCD_CONTRAST_SUB,
   STR_ID_FM_LCD_AUTO,
   STR_ID_FM_LCD_R,
   STR_ID_FM_LCD_G,
   STR_ID_FM_LCD_B,
   STR_ID_FM_LCD_W,
//Lisen 05312005	
   STR_ID_FM_LCD_BLACK,
   
   STR_ID_FM_RTC_NOTIFY,
   STR_ID_FM_MTBF,
   STR_ID_FM_UART,
   STR_ID_FM_PARALLEL_TEST,
   STR_ID_FM_N_CROSS_M_TEST,
   STR_ID_FM_FM_RADIO,
    STR_ID_FM_FM_RADIO_CHANNEL_1,
    STR_ID_FM_FM_RADIO_CHANNEL_2,
    STR_ID_FM_FM_RADIO_CHANNEL_3,
    STR_ID_FM_NO_EARPHONE,
    STR_ID_FM_IS_CALIBRATED,
};

/*===== Auto Testing Settings ===== */
#define MAX_TEST_ITEM_NAME_LEN 	20
#define MAX_TEST_STRING_BUF        	80

#define VBAT_LOWER_BOUNDARY		3300// 3.3
#define VBAT_UPPER_BOUNDARY       	4200// 4.2
#define TEMP_LOWER_BOUNDARY       	15
#define TEMP_UPPER_BOUNDARY       	35
#define CURR__LOWER_BOUNDARY      	300//0.3

#define LED_DURATION 				2000
#define CLAM_DURATION 				5000
#define LCM_CONSTRAST_DURATION	100
#define VERSION_DURATION			1500
#define BACKLIGHT_DURATION			500
#define RECEIVER_DURATION			3000
#define MIC_DURATION				3000
#define HEADSET_DURATION			3000
#define SPEAKER_DURATION			3000
#define VIB_DURATION				500
#define ADC_DURATION				1000
#define MELODY_DURATION			3000
//Lisen 01262005
#define CAMERA_DURATION			5000
#define MEMORYCARD_DURATION	       6000

typedef enum
{
   FM_TEST_LED = 0,
   FM_TEST_CLAM_DETECT,		
   FM_TEST_SUBLCM,
   FM_TEST_SW_VERSION,
   FM_TEST_BACKLIGHT,
   FM_TEST_LCD,
   FM_TEST_KEYPAD,
   FM_TEST_RECEIVER,
   FM_TEST_MIC,
   FM_TEST_SPEAKER,
   FM_TEST_HEADSET,
   FM_TEST_VIB,
   FM_TEST_BATTERY,
   FM_TEST_MELODY,
   FM_TEST_CHARGER,
   FM_TEST_NAND, 
   FM_TEST_UART,
//Lisen 01262005
   FM_TEST_DOUBLE_SPEAKER,
#ifdef __MMI_CAMERA__   //luanyy modify for cs621
   FM_TEST_CAMERA,
#endif
   FM_TEST_MEMORYCARD,
#ifdef __MMI_TOUCH_SCREEN__   
   FM_TEST_PEN_PARALLEL_LINES,
   FM_TEST_PEN_N_CROSS_M_POINTS,
#endif /*__MMI_TOUCH_SCREEN__*/
   MAX_AUTO_TEST_ITEMS
   
} EM_AUTO_TESTS_ENUM;

typedef enum
{
   FM_TEST_UNTESTED = 0,
   FM_TEST_FAILED,
   FM_TEST_PASSED
 } FM_AUTO_TEST_RESULT_ENUM;

typedef enum
{
   FM_ADC_BATTERY = 0,
   FM_ADC_CHARGER
 } FM_ADC_TYPE_ENUM;

typedef enum
{
    FM_AUTOTEST_LED = 0, 
    FM_AUTOTEST_CLAM, 	
    FM_AUTOTEST_SUBLCM, 
    FM_AUTOTEST_VERSION, 
    FM_AUTOTEST_BACKLIGHT, 
    FM_AUTOTEST_LCD, 
    FM_AUTOTEST_KEYPAD, 
    FM_AUTOTEST_RECEIVER, 
    FM_AUTOTEST_MIC, 
    FM_AUTOTEST_SPEAKER, 
    FM_AUTOTEST_HEADSET, 
    FM_AUTOTEST_BATTERY, 
    FM_AUTOTEST_MELODY, 
    FM_AUTOTEST_VIB, 
    FM_AUTOTEST_CHARGER,
    FM_AUTOTEST_NAND, 
    FM_AUTOTEST_UART,
//Lisen 01262005
    FM_AUTOTEST_DOUBLE_SPEAKER,
    FM_AUTOTEST_CAMERA,
    FM_AUTOTEST_MEMORYCARD,
#ifdef __MMI_TOUCH_SCREEN__
    FM_AUTOTEST_PARALLEL_LINE,
    FM_AUTOTEST_N_CROSS_M_POINTS,
#endif /* __MMI_TOUCH_SCREEN__*/
    FM_AUTOTEST_MAX_ITEMS
 } FM_AUTO_TEST_ENUM;

typedef void (*AUTO_TEST_FUNC) (void);

typedef struct
{
	S8 					name[MAX_TEST_ITEM_NAME_LEN*ENCODING_LENGTH];
	AUTO_TEST_FUNC 		func;
} testlet;	

typedef struct
{
	U8 count;
	U8 priority[MAX_AUTO_TEST_ITEMS];   // for example, priority[0] = 8 means that the first one is test item 8
} AutoTestItemArray;	

typedef struct
{
	U8                                           count;
	FM_AUTO_TEST_RESULT_ENUM result[MAX_AUTO_TEST_ITEMS];   // for example, result[0] = FM_TEST_PASSED means that the first test item passed the test
} AutoTestResultArray;	


/*===== MTBF ===== */
#define FM_MTBF_PERIOD        1000 //in milli seconds

// Cycle in milli seconds
#define FM_MTBF_LCD_CYCLE 	2000
#define FM_MTBF_LED_CYCLE 	1000
#define FM_MTBF_VIB_CYCLE 	1000

#define FM_MTBF_AUDIO_GAP               20
#define FM_MTBF_SPK_UNIT	3000
#define FM_MTBF_REV_UNIT 	3000
#define FM_MTBF_SPK_UNIT_CYCLE 	(FM_MTBF_SPK_UNIT - FM_MTBF_AUDIO_GAP)
#define FM_MTBF_REV_UNIT_CYCLE 	(FM_MTBF_REV_UNIT - FM_MTBF_AUDIO_GAP)
#define FM_MTBF_SPK_CYCLE 	(FM_MTBF_SPK_UNIT*FM_MTBF_SPK_MAX)
#define FM_MTBF_REV_CYCLE 	(FM_MTBF_REV_UNIT*FM_MTBF_REV_MAX)

typedef enum
{
   FM_MTBF_LCD_START = 0,
   FM_MTBF_LCD_R = 0,
   FM_MTBF_LCD_G,
   FM_MTBF_LCD_B,
   FM_MTBF_LCD_W,
   FM_MTBF_LCD_END = FM_MTBF_LCD_W
 } FM_MTBF_LCD_ENUM;

typedef enum
{
   FM_MTBF_LED_START = 0,
   FM_MTBF_LED_KEYPAD = 0,
   FM_MTBF_LED_R,
   FM_MTBF_LED_G,
   FM_MTBF_LED_B,
   FM_MTBF_LED_END = FM_MTBF_LED_B
 } FM_MTBF_LED_ENUM;

typedef enum
{
   FM_MTBF_VIB_START = 0,
   FM_MTBF_VIB_ON = 0,
   FM_MTBF_VIB_OFF,
   FM_MTBF_VIB_END = FM_MTBF_VIB_OFF
 } FM_MTBF_VIB_ENUM;

typedef enum
{
   FM_MTBF_SPK_START = 0,
   FM_MTBF_SPK_400 = 0,
   FM_MTBF_SPK_600,
   FM_MTBF_SPK_800,
   FM_MTBF_SPK_850_1,
   FM_MTBF_SPK_850_2,
   FM_MTBF_SPK_900,
   FM_MTBF_SPK_1000,
   FM_MTBF_SPK_2000,
   FM_MTBF_SPK_4000,
   FM_MTBF_SPK_8000,
   FM_MTBF_SPK_END = FM_MTBF_SPK_8000,
   FM_MTBF_SPK_MAX
 } FM_MTBF_SPK_ENUM;

typedef enum
{
   FM_MTBF_REV_START = 0,
   FM_MTBF_REV_400 = 0,
   FM_MTBF_REV_500,
   FM_MTBF_REV_600_1,
   FM_MTBF_REV_600_2,
   FM_MTBF_REV_700,
   FM_MTBF_REV_800,
   FM_MTBF_REV_1000,
   FM_MTBF_REV_1500,
   FM_MTBF_REV_2000,
   FM_MTBF_REV_3000,
   FM_MTBF_REV_END = FM_MTBF_REV_3000,
   FM_MTBF_REV_MAX
 } FM_MTBF_REV_ENUM;

typedef enum
{
   FM_MTBF_AUD_START = 0,
   FM_MTBF_AUD_SPK = 0,
   FM_MTBF_AUD_REV,
   FM_MTBF_AUD_END = FM_MTBF_AUD_REV
 } FM_MTBF_AUD_ALTERNATION_ENUM;

#endif /* !_FACTORY_MODE_DEF_H */

#endif /* __MMI_FACTORY_MODE__ */


